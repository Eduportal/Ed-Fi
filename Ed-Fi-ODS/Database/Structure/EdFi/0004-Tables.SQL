
/* 
 * TABLE: [edfi].[AcademicHonorCategoryType] 
 */

CREATE TABLE [edfi].[AcademicHonorCategoryType](
    [AcademicHonorCategoryTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                    nvarchar(50)        NOT NULL,
    [Description]                  nvarchar(1024)      NOT NULL,
    [ShortDescription]             nvarchar(450)       NOT NULL,
    [Id]                           uniqueidentifier    CONSTRAINT [AcademicHonorCategoryType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]             datetime            CONSTRAINT [AcademicHonorCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                   datetime            CONSTRAINT [AcademicHonorCategoryType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AcademicHonorCategoryType] PRIMARY KEY CLUSTERED ([AcademicHonorCategoryTypeId])
)
go



IF OBJECT_ID('edfi.AcademicHonorCategoryType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AcademicHonorCategoryType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AcademicHonorCategoryType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType', 'column', 'AcademicHonorCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType', 'column', 'AcademicHonorCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AcademicHonor', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType', 'column', 'AcademicHonorCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for academic honors type.', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the academic honor category type.', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A designation of the type of academic distinctions earned by or awarded to the student.', 'schema', 'edfi', 'table', 'AcademicHonorCategoryType'
go

/* 
 * TABLE: [edfi].[AcademicSubjectDescriptor] 
 */

CREATE TABLE [edfi].[AcademicSubjectDescriptor](
    [AcademicSubjectDescriptorId]  int    NOT NULL,
    [AcademicSubjectTypeId]        int    NOT NULL,
    CONSTRAINT [PK_AcademicSubjectDescriptor] PRIMARY KEY CLUSTERED ([AcademicSubjectDescriptorId])
)
go



IF OBJECT_ID('edfi.AcademicSubjectDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AcademicSubjectDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AcademicSubjectDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectDescriptor', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectDescriptor', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AcademicSubjectDescriptor', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectDescriptor', 'column', 'AcademicSubjectTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectDescriptor', 'column', 'AcademicSubjectTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AcademicSubject', 'schema', 'edfi', 'table', 'AcademicSubjectDescriptor', 'column', 'AcademicSubjectTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor holds the description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language).', 'schema', 'edfi', 'table', 'AcademicSubjectDescriptor'
go

/* 
 * TABLE: [edfi].[AcademicSubjectType] 
 */

CREATE TABLE [edfi].[AcademicSubjectType](
    [AcademicSubjectTypeId]  int                 IDENTITY(1,1),
    [CodeValue]              nvarchar(50)        NOT NULL,
    [Description]            nvarchar(1024)      NOT NULL,
    [ShortDescription]       nvarchar(450)       NOT NULL,
    [Id]                     uniqueidentifier    CONSTRAINT [AcademicSubjectType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]       datetime            CONSTRAINT [AcademicSubjectType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]             datetime            CONSTRAINT [AcademicSubjectType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AcademicSubjectType] PRIMARY KEY CLUSTERED ([AcademicSubjectTypeId])
)
go



IF OBJECT_ID('edfi.AcademicSubjectType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AcademicSubjectType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AcademicSubjectType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectType', 'column', 'AcademicSubjectTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectType', 'column', 'AcademicSubjectTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AcademicSubject', 'schema', 'edfi', 'table', 'AcademicSubjectType', 'column', 'AcademicSubjectTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for academic subject type.', 'schema', 'edfi', 'table', 'AcademicSubjectType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for academic subject type.', 'schema', 'edfi', 'table', 'AcademicSubjectType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'AcademicSubjectType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicSubjectType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The teaching field(s) taught by an individual; for example: English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.', 'schema', 'edfi', 'table', 'AcademicSubjectType'
go

/* 
 * TABLE: [edfi].[AcademicWeek] 
 */

CREATE TABLE [edfi].[AcademicWeek](
    [WeekIdentifier]          nvarchar(80)        NOT NULL,
    [BeginDate]               date                NOT NULL,
    [EndDate]                 date                NOT NULL,
    [TotalInstructionalDays]  int                 NOT NULL,
    [Id]                      uniqueidentifier    CONSTRAINT [AcademicWeek_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]        datetime            CONSTRAINT [AcademicWeek_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]              datetime            CONSTRAINT [AcademicWeek_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [SchoolId]                int                 NOT NULL,
    CONSTRAINT [PK_AcademicWeek] PRIMARY KEY CLUSTERED ([WeekIdentifier], [SchoolId])
)
go



IF OBJECT_ID('edfi.AcademicWeek') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AcademicWeek >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AcademicWeek >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'WeekIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'WeekIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The school label for the academic week.', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'WeekIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The start date for the academic week.', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The end date for the academic week.', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'TotalInstructionalDays'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'TotalInstructionalDays'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The total instructional days during the academic week.', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'TotalInstructionalDays'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier assigned to a school by the State Education Agency (SEA).', 'schema', 'edfi', 'table', 'AcademicWeek', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AcademicWeek', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AcademicWeek'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents the academic weeks for a school year, optionally captured to support analyses.', 'schema', 'edfi', 'table', 'AcademicWeek'
go

/* 
 * TABLE: [edfi].[AccommodationDescriptor] 
 */

CREATE TABLE [edfi].[AccommodationDescriptor](
    [AccommodationDescriptorId]  int    NOT NULL,
    [AccommodationTypeId]        int    NULL,
    CONSTRAINT [PK_AccommodationDescriptor] PRIMARY KEY CLUSTERED ([AccommodationDescriptorId])
)
go



IF OBJECT_ID('edfi.AccommodationDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AccommodationDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AccommodationDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccommodationDescriptor', 'column', 'AccommodationDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccommodationDescriptor', 'column', 'AccommodationDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AccommodationDescriptor', 'column', 'AccommodationDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccommodationDescriptor', 'column', 'AccommodationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccommodationDescriptor', 'column', 'AccommodationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AccommodationDescriptor', 'column', 'AccommodationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccommodationDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccommodationDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines variations used in how an assessment is presented or taken.', 'schema', 'edfi', 'table', 'AccommodationDescriptor'
go

/* 
 * TABLE: [edfi].[AccommodationType] 
 */

CREATE TABLE [edfi].[AccommodationType](
    [AccommodationTypeId]  int                 IDENTITY(1,1),
    [ShortDescription]     nvarchar(450)       NOT NULL,
    [Description]          nvarchar(1024)      NULL,
    [CodeValue]            nvarchar(50)        NULL,
    [Id]                   uniqueidentifier    CONSTRAINT [AccommodationType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]     datetime            CONSTRAINT [AccommodationType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]           datetime            CONSTRAINT [AccommodationType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AccommodationType] PRIMARY KEY CLUSTERED ([AccommodationTypeId])
)
go



IF OBJECT_ID('edfi.AccommodationType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AccommodationType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AccommodationType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccommodationType', 'column', 'AccommodationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccommodationType', 'column', 'AccommodationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AccommodationType', 'column', 'AccommodationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccommodationType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccommodationType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'AccommodationType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccommodationType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccommodationType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'AccommodationType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccommodationType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccommodationType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for accommodation type.', 'schema', 'edfi', 'table', 'AccommodationType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccommodationType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccommodationType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates the variations used in how an assessment is presented or taken.', 'schema', 'edfi', 'table', 'AccommodationType'
go

/* 
 * TABLE: [edfi].[Account] 
 */

CREATE TABLE [edfi].[Account](
    [EducationOrganizationId]  int                 NOT NULL,
    [AccountNumber]            nvarchar(50)        NOT NULL,
    [FiscalYear]               int                 NOT NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [Account_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [Account_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [Account_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Account] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [AccountNumber], [FiscalYear])
)
go



IF OBJECT_ID('edfi.Account') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Account >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Account >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Account', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Account', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'Account', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Account', 'column', 'AccountNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Account', 'column', 'AccountNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The alpha-numeric string that identifies the account.', 'schema', 'edfi', 'table', 'Account', 'column', 'AccountNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Account', 'column', 'FiscalYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Account', 'column', 'FiscalYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The financial accounting year.', 'schema', 'edfi', 'table', 'Account', 'column', 'FiscalYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Account', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Account'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This financial entity represents a funding source combined with its purpose and type of transaction. It provides a formal record of the debits and credits relating to the specific account.', 'schema', 'edfi', 'table', 'Account'
go

/* 
 * TABLE: [edfi].[AccountabilityRating] 
 */

CREATE TABLE [edfi].[AccountabilityRating](
    [RatingTitle]              nvarchar(60)        NOT NULL,
    [EducationOrganizationId]  int                 NOT NULL,
    [SchoolYear]               smallint            NOT NULL,
    [Rating]                   nvarchar(35)        NOT NULL,
    [RatingDate]               date                NULL,
    [RatingOrganization]       nvarchar(35)        NULL,
    [RatingProgram]            nvarchar(30)        NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [AccountabilityRating_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [AccountabilityRating_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [AccountabilityRating_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AccountabilityRating] PRIMARY KEY CLUSTERED ([RatingTitle], [EducationOrganizationId], [SchoolYear])
)
go



IF OBJECT_ID('edfi.AccountabilityRating') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AccountabilityRating >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AccountabilityRating >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'RatingTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'RatingTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title of the rating (e.g., School Rating, Safety Score).', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'RatingTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The school year for which the rating was awarded.', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'Rating'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'Rating'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An accountability rating level, designation, or assessment.', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'Rating'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'RatingDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'RatingDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the rating was awarded.', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'RatingDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'RatingOrganization'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'RatingOrganization'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The organization assigning the accountability rating.', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'RatingOrganization'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'RatingProgram'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'RatingProgram'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The rating program (e.g., NCLB).', 'schema', 'edfi', 'table', 'AccountabilityRating', 'column', 'RatingProgram'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountabilityRating'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An accountability rating for a school or district.', 'schema', 'edfi', 'table', 'AccountabilityRating'
go

/* 
 * TABLE: [edfi].[AccountCode] 
 */

CREATE TABLE [edfi].[AccountCode](
    [EducationOrganizationId]  int             NOT NULL,
    [AccountNumber]            nvarchar(50)    NOT NULL,
    [FiscalYear]               int             NOT NULL,
    [AccountCodeDescriptorId]  int             NOT NULL,
    [CreateDate]               datetime        CONSTRAINT [AccountCode_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AccountCode] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [AccountNumber], [FiscalYear], [AccountCodeDescriptorId])
)
go



IF OBJECT_ID('edfi.AccountCode') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AccountCode >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AccountCode >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountCode', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountCode', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'AccountCode', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountCode', 'column', 'AccountNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountCode', 'column', 'AccountNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The alpha-numeric string that identifies the account.', 'schema', 'edfi', 'table', 'AccountCode', 'column', 'AccountNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountCode', 'column', 'FiscalYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountCode', 'column', 'FiscalYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The financial accounting year.  NEDM: Fiscal Year', 'schema', 'edfi', 'table', 'AccountCode', 'column', 'FiscalYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountCode', 'column', 'AccountCodeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountCode', 'column', 'AccountCodeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of the account code (e.g., fund, function, object)', 'schema', 'edfi', 'table', 'AccountCode', 'column', 'AccountCodeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountCode', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The set of account codes defined for the education accounting system organized by account code type (e.g., fund, function, object) that map to the account.', 'schema', 'edfi', 'table', 'AccountCode'
go

/* 
 * TABLE: [edfi].[AccountCodeDescriptor] 
 */

CREATE TABLE [edfi].[AccountCodeDescriptor](
    [AccountCodeDescriptorId]  int             NOT NULL,
    [AccountCodeCategory]      nvarchar(20)    NOT NULL,
    [BeginDate]                date            NULL,
    [EndDate]                  date            NULL,
    CONSTRAINT [PK_AccountCodeDescriptor] PRIMARY KEY CLUSTERED ([AccountCodeDescriptorId])
)
go



IF OBJECT_ID('edfi.AccountCodeDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AccountCodeDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AccountCodeDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountCodeDescriptor', 'column', 'AccountCodeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountCodeDescriptor', 'column', 'AccountCodeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the AccountCodeDescriptor', 'schema', 'edfi', 'table', 'AccountCodeDescriptor', 'column', 'AccountCodeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountCodeDescriptor', 'column', 'AccountCodeCategory'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountCodeDescriptor', 'column', 'AccountCodeCategory'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of the account code (e.g., fund, function, object).', 'schema', 'edfi', 'table', 'AccountCodeDescriptor', 'column', 'AccountCodeCategory'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountCodeDescriptor', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountCodeDescriptor', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The first date the account code is valid.', 'schema', 'edfi', 'table', 'AccountCodeDescriptor', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountCodeDescriptor', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountCodeDescriptor', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The last date the account code is valid.', 'schema', 'edfi', 'table', 'AccountCodeDescriptor', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AccountCodeDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AccountCodeDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor holds the set of account codes defined for the education accounting system organized by account code type (e.g., fund, function, object).', 'schema', 'edfi', 'table', 'AccountCodeDescriptor'
go

/* 
 * TABLE: [edfi].[AchievementCategoryDescriptor] 
 */

CREATE TABLE [edfi].[AchievementCategoryDescriptor](
    [AchievementCategoryDescriptorId]  int    NOT NULL,
    [AchievementCategoryTypeId]        int    NULL,
    CONSTRAINT [PK_AchievementCategoryDescriptor] PRIMARY KEY CLUSTERED ([AchievementCategoryDescriptorId])
)
go



IF OBJECT_ID('edfi.AchievementCategoryDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AchievementCategoryDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AchievementCategoryDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AchievementCategoryDescriptor', 'column', 'AchievementCategoryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AchievementCategoryDescriptor', 'column', 'AchievementCategoryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AchievementCategoryDescriptor', 'column', 'AchievementCategoryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AchievementCategoryDescriptor', 'column', 'AchievementCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AchievementCategoryDescriptor', 'column', 'AchievementCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AchievementCategoryDescriptor', 'column', 'AchievementCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AchievementCategoryDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AchievementCategoryDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the category of achievement attributed to the learner.', 'schema', 'edfi', 'table', 'AchievementCategoryDescriptor'
go

/* 
 * TABLE: [edfi].[AchievementCategoryType] 
 */

CREATE TABLE [edfi].[AchievementCategoryType](
    [AchievementCategoryTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                  nvarchar(50)        NOT NULL,
    [ShortDescription]           nvarchar(450)       NOT NULL,
    [Description]                nvarchar(1024)      NOT NULL,
    [Id]                         uniqueidentifier    CONSTRAINT [AchievementCategoryType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]           datetime            CONSTRAINT [AchievementCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                 datetime            CONSTRAINT [AchievementCategoryType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AchievementCategoryType] PRIMARY KEY CLUSTERED ([AchievementCategoryTypeId])
)
go



IF OBJECT_ID('edfi.AchievementCategoryType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AchievementCategoryType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AchievementCategoryType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AchievementCategoryType', 'column', 'AchievementCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AchievementCategoryType', 'column', 'AchievementCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AchievementCategoryType', 'column', 'AchievementCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AchievementCategoryType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AchievementCategoryType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for achievement category type.', 'schema', 'edfi', 'table', 'AchievementCategoryType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AchievementCategoryType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AchievementCategoryType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the achievement category type.', 'schema', 'edfi', 'table', 'AchievementCategoryType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AchievementCategoryType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AchievementCategoryType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the achievement category type.', 'schema', 'edfi', 'table', 'AchievementCategoryType', 'column', 'Description'
go

/* 
 * TABLE: [edfi].[Actual] 
 */

CREATE TABLE [edfi].[Actual](
    [EducationOrganizationId]  int                 NOT NULL,
    [AccountNumber]            nvarchar(50)        NOT NULL,
    [FiscalYear]               int                 NOT NULL,
    [AsOfDate]                 date                NOT NULL,
    [AmountToDate]             money               NOT NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [Actual_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [Actual_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [Actual_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Actual] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [AccountNumber], [FiscalYear], [AsOfDate])
)
go



IF OBJECT_ID('edfi.Actual') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Actual >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Actual >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Actual', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Actual', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'Actual', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Actual', 'column', 'AccountNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Actual', 'column', 'AccountNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The alpha-numeric string that identifies the account.', 'schema', 'edfi', 'table', 'Actual', 'column', 'AccountNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Actual', 'column', 'FiscalYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Actual', 'column', 'FiscalYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The financial accounting year.  NEDM: Fiscal Year', 'schema', 'edfi', 'table', 'Actual', 'column', 'FiscalYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Actual', 'column', 'AsOfDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Actual', 'column', 'AsOfDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date of the reported actual element.', 'schema', 'edfi', 'table', 'Actual', 'column', 'AsOfDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Actual', 'column', 'AmountToDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Actual', 'column', 'AmountToDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Current balance for the account.', 'schema', 'edfi', 'table', 'Actual', 'column', 'AmountToDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Actual', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Actual'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This financial entity represents the sum of the financial transactions to date relating to a specific account.', 'schema', 'edfi', 'table', 'Actual'
go

/* 
 * TABLE: [edfi].[AdditionalCreditType] 
 */

CREATE TABLE [edfi].[AdditionalCreditType](
    [AdditionalCreditTypeId]  int                 IDENTITY(1,1),
    [CodeValue]               nvarchar(50)        NOT NULL,
    [ShortDescription]        nvarchar(450)       NOT NULL,
    [Description]             nvarchar(1024)      NOT NULL,
    [Id]                      uniqueidentifier    CONSTRAINT [AdditionalCreditType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]        datetime            CONSTRAINT [AdditionalCreditType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]              datetime            CONSTRAINT [AdditionalCreditType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AdditionalCreditType] PRIMARY KEY CLUSTERED ([AdditionalCreditTypeId])
)
go



IF OBJECT_ID('edfi.AdditionalCreditType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AdditionalCreditType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AdditionalCreditType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdditionalCreditType', 'column', 'AdditionalCreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdditionalCreditType', 'column', 'AdditionalCreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AdditionalCreditType', 'column', 'AdditionalCreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdditionalCreditType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdditionalCreditType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for additional credit type.', 'schema', 'edfi', 'table', 'AdditionalCreditType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdditionalCreditType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdditionalCreditType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the additional credit type.', 'schema', 'edfi', 'table', 'AdditionalCreditType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdditionalCreditType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdditionalCreditType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description of additional Credit type.', 'schema', 'edfi', 'table', 'AdditionalCreditType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdditionalCreditType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdditionalCreditType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of additional credits or units of value awarded for the completion of a course.', 'schema', 'edfi', 'table', 'AdditionalCreditType'
go

/* 
 * TABLE: [edfi].[AddressType] 
 */

CREATE TABLE [edfi].[AddressType](
    [AddressTypeId]     int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [AddressType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [AddressType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [AddressType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AddressType] PRIMARY KEY CLUSTERED ([AddressTypeId])
)
go



IF OBJECT_ID('edfi.AddressType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AddressType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AddressType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AddressType', 'column', 'AddressTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AddressType', 'column', 'AddressTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Address', 'schema', 'edfi', 'table', 'AddressType', 'column', 'AddressTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AddressType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AddressType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Address type.', 'schema', 'edfi', 'table', 'AddressType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AddressType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AddressType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'AddressType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AddressType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AddressType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the address type.', 'schema', 'edfi', 'table', 'AddressType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AddressType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AddressType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of address listed for an individual or organization.', 'schema', 'edfi', 'table', 'AddressType'
go

/* 
 * TABLE: [edfi].[AdministrationEnvironmentType] 
 */

CREATE TABLE [edfi].[AdministrationEnvironmentType](
    [AdministrationEnvironmentTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                        nvarchar(50)        NOT NULL,
    [Description]                      nvarchar(1024)      NOT NULL,
    [ShortDescription]                 nvarchar(450)       NOT NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [AdministrationEnvironmentType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [AdministrationEnvironmentType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [AdministrationEnvironmentType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AdministrationEnvironmentType] PRIMARY KEY CLUSTERED ([AdministrationEnvironmentTypeId])
)
go



IF OBJECT_ID('edfi.AdministrationEnvironmentType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AdministrationEnvironmentType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AdministrationEnvironmentType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType', 'column', 'AdministrationEnvironmentTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType', 'column', 'AdministrationEnvironmentTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AdministrationEnvironment', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType', 'column', 'AdministrationEnvironmentTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for AdministrationEnvironment type.', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the administration environment type.', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The environment in which the test was administered. For example: Electronic Classroom Testing Center ...', 'schema', 'edfi', 'table', 'AdministrationEnvironmentType'
go

/* 
 * TABLE: [edfi].[AdministrativeFundingControlDescriptor] 
 */

CREATE TABLE [edfi].[AdministrativeFundingControlDescriptor](
    [AdministrativeFundingControlDescriptorId]  int    NOT NULL,
    [AdministrativeFundingControlTypeId]        int    NULL,
    CONSTRAINT [PK_AdministrativeFundingControlDescriptor] PRIMARY KEY CLUSTERED ([AdministrativeFundingControlDescriptorId])
)
go



IF OBJECT_ID('edfi.AdministrativeFundingControlDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AdministrativeFundingControlDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AdministrativeFundingControlDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlDescriptor', 'column', 'AdministrativeFundingControlDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlDescriptor', 'column', 'AdministrativeFundingControlDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AdministrativeFundingControlDescriptor', 'column', 'AdministrativeFundingControlDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlDescriptor', 'column', 'AdministrativeFundingControlTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlDescriptor', 'column', 'AdministrativeFundingControlTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AdministrationFundingControl', 'schema', 'edfi', 'table', 'AdministrativeFundingControlDescriptor', 'column', 'AdministrativeFundingControlTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor holds the type of education institution as classified by its funding source (e.g., public or private).', 'schema', 'edfi', 'table', 'AdministrativeFundingControlDescriptor'
go

/* 
 * TABLE: [edfi].[AdministrativeFundingControlType] 
 */

CREATE TABLE [edfi].[AdministrativeFundingControlType](
    [AdministrativeFundingControlTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                           nvarchar(50)        NOT NULL,
    [ShortDescription]                    nvarchar(450)       NOT NULL,
    [Description]                         nvarchar(1024)      NULL,
    [Id]                                  uniqueidentifier    CONSTRAINT [AdministrativeFundingControlType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                    datetime            CONSTRAINT [AdministrativeFundingControlType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                          datetime            CONSTRAINT [AdministrativeFundingControlType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AdministrativeFundingControlType] PRIMARY KEY CLUSTERED ([AdministrativeFundingControlTypeId])
)
go



IF OBJECT_ID('edfi.AdministrativeFundingControlType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AdministrativeFundingControlType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AdministrativeFundingControlType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType', 'column', 'AdministrativeFundingControlTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType', 'column', 'AdministrativeFundingControlTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AdministrationFundingControl', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType', 'column', 'AdministrativeFundingControlTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for AdministrationFundingControl type.', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates the type of education institution as classified by its funding source.', 'schema', 'edfi', 'table', 'AdministrativeFundingControlType'
go

/* 
 * TABLE: [edfi].[Assessment] 
 */

CREATE TABLE [edfi].[Assessment](
    [AssessmentTitle]                       nvarchar(60)        NOT NULL,
    [AssessedGradeLevelDescriptorId]        int                 NOT NULL,
    [AssessmentCategoryDescriptorId]        int                 NULL,
    [AcademicSubjectDescriptorId]           int                 NOT NULL,
    [LowestAssessedGradeLevelDescriptorId]  int                 NULL,
    [AssessmentForm]                        nvarchar(60)        NULL,
    [Version]                               int                 NOT NULL,
    [RevisionDate]                          date                NULL,
    [MaxRawScore]                           int                 NULL,
    [Nomenclature]                          nvarchar(35)        NULL,
    [AssessmentPeriodDescriptorId]          int                 NULL,
    [AssessmentFamilyTitle]                 nvarchar(60)        NULL,
    [Namespace]                             nvarchar(255)       NULL,
    [Id]                                    uniqueidentifier    CONSTRAINT [Assessment_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                      datetime            CONSTRAINT [Assessment_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                            datetime            CONSTRAINT [Assessment_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Assessment] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
)
go



IF OBJECT_ID('edfi.Assessment') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Assessment >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Assessment >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentCategoryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentCategoryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentCategoryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'LowestAssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'LowestAssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'If the test assessment spans a range of grades, then this attribute holds the lowest grade assessed.  If only one grade level is assessed, then this attribute is omitted. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'Assessment', 'column', 'LowestAssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentForm'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentForm'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc.', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentForm'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the assessment.', 'schema', 'edfi', 'table', 'Assessment', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'RevisionDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'RevisionDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year that the conceptual design for the assessment was most recently revised substantially.', 'schema', 'edfi', 'table', 'Assessment', 'column', 'RevisionDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'MaxRawScore'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'MaxRawScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The maximum raw score achievable across all assessment items that are correct and scored at the maximum.', 'schema', 'edfi', 'table', 'Assessment', 'column', 'MaxRawScore'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'Nomenclature'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'Nomenclature'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reflects the common nomenclature for an element.', 'schema', 'edfi', 'table', 'Assessment', 'column', 'Nomenclature'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Assessment Period Descriptor', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentFamilyTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentFamilyTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.', 'schema', 'edfi', 'table', 'Assessment', 'column', 'AssessmentFamilyTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'Namespace'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Assessment', 'column', 'Namespace'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Namespace for the Assessment.', 'schema', 'edfi', 'table', 'Assessment', 'column', 'Namespace'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Assessment', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Assessment'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents a tool, instrument, process, or exhibition composed of a systematic sampling of behavior for measuring a student''s competence, knowledge, skills, or behavior. An assessment can be used to measure differences in individuals or groups and changes in performance from one occasion to the next.', 'schema', 'edfi', 'table', 'Assessment'
go

/* 
 * TABLE: [edfi].[AssessmentCategoryDescriptor] 
 */

CREATE TABLE [edfi].[AssessmentCategoryDescriptor](
    [AssessmentCategoryTypeId]        int    NULL,
    [AssessmentCategoryDescriptorId]  int    NOT NULL,
    CONSTRAINT [PK_AssessmentCategoryDescriptor] PRIMARY KEY CLUSTERED ([AssessmentCategoryDescriptorId])
)
go



IF OBJECT_ID('edfi.AssessmentCategoryDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentCategoryDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentCategoryDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentCategoryDescriptor', 'column', 'AssessmentCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentCategoryDescriptor', 'column', 'AssessmentCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AssessmentCategoryType', 'schema', 'edfi', 'table', 'AssessmentCategoryDescriptor', 'column', 'AssessmentCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentCategoryDescriptor', 'column', 'AssessmentCategoryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentCategoryDescriptor', 'column', 'AssessmentCategoryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AssessmentCategoryDescriptor', 'column', 'AssessmentCategoryDescriptorId'
go

/* 
 * TABLE: [edfi].[AssessmentCategoryType] 
 */

CREATE TABLE [edfi].[AssessmentCategoryType](
    [AssessmentCategoryTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                 nvarchar(50)        NOT NULL,
    [Description]               nvarchar(1024)      NOT NULL,
    [ShortDescription]          nvarchar(450)       NOT NULL,
    [Id]                        uniqueidentifier    CONSTRAINT [AssessmentCategoryType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]          datetime            CONSTRAINT [AssessmentCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                datetime            CONSTRAINT [AssessmentCategoryType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentCategoryType] PRIMARY KEY CLUSTERED ([AssessmentCategoryTypeId])
)
go



IF OBJECT_ID('edfi.AssessmentCategoryType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentCategoryType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentCategoryType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentCategoryType', 'column', 'AssessmentCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentCategoryType', 'column', 'AssessmentCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AssessmentCategoryType', 'schema', 'edfi', 'table', 'AssessmentCategoryType', 'column', 'AssessmentCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentCategoryType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentCategoryType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for AssessmentCategoryType type.', 'schema', 'edfi', 'table', 'AssessmentCategoryType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentCategoryType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentCategoryType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'AssessmentCategoryType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentCategoryType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentCategoryType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the assessment category type', 'schema', 'edfi', 'table', 'AssessmentCategoryType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentCategoryType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentCategoryType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The category of an assessment based on format and content (e.g., achievement test or advanced placement test).', 'schema', 'edfi', 'table', 'AssessmentCategoryType'
go

/* 
 * TABLE: [edfi].[AssessmentContentStandard] 
 */

CREATE TABLE [edfi].[AssessmentContentStandard](
    [AssessmentVersion]                 int              NOT NULL,
    [AssessmentTitle]                   nvarchar(60)     NOT NULL,
    [AcademicSubjectDescriptorId]       int              NOT NULL,
    [AssessedGradeLevelDescriptorId]    int              NOT NULL,
    [Title]                             nvarchar(75)     NOT NULL,
    [Version]                           nvarchar(50)     NULL,
    [URI]                               nvarchar(255)    NULL,
    [PublicationDate]                   date             NULL,
    [PublicationYear]                   smallint         NULL,
    [PublicationStatusTypeId]           int              NULL,
    [MandatingEducationOrganizationId]  int              NULL,
    [BeginDate]                         date             NULL,
    [EndDate]                           date             NULL,
    [CreateDate]                        datetime         CONSTRAINT [AssessmentContentStandard_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentContentStandard] PRIMARY KEY CLUSTERED ([AssessmentVersion], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.AssessmentContentStandard') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentContentStandard >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentContentStandard >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'AssessmentVersion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'AssessmentVersion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'AssessmentVersion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'Title'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'Title'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the content standard, for example Common Core.', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'Title'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the content.', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'URI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'URI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL), file, or ftp locator.', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'URI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'PublicationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'PublicationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date on which this content was first published.', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'PublicationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'PublicationYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'PublicationYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The year at which this content was first published.', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'PublicationYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'PublicationStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'PublicationStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'PublicationStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'MandatingEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'MandatingEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'MandatingEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The beginning of the period during which this learning standard document is intended for use.', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The end of the period during which this learning standard document is intended for use.', 'schema', 'edfi', 'table', 'AssessmentContentStandard', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandard'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication as to whether an assessment conforms to a standard.', 'schema', 'edfi', 'table', 'AssessmentContentStandard'
go

/* 
 * TABLE: [edfi].[AssessmentContentStandardAuthor] 
 */

CREATE TABLE [edfi].[AssessmentContentStandardAuthor](
    [AssessmentVersion]               int              NOT NULL,
    [AssessmentTitle]                 nvarchar(60)     NOT NULL,
    [AcademicSubjectDescriptorId]     int              NOT NULL,
    [AssessedGradeLevelDescriptorId]  int              NOT NULL,
    [Author]                          nvarchar(255)    NOT NULL,
    [CreateDate]                      datetime         CONSTRAINT [AssessmentContentStandardAuthor_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentContentStandardAuthor] PRIMARY KEY CLUSTERED ([AssessmentVersion], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Author])
)
go



IF OBJECT_ID('edfi.AssessmentContentStandardAuthor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentContentStandardAuthor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentContentStandardAuthor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'AssessmentVersion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'AssessmentVersion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'AssessmentVersion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'Author'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'Author'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The person or organization chiefly responsible for the intellectual content of the standard.', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', 'column', 'Author'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The person or organization chiefly responsible for the intellectual content of the standard.', 'schema', 'edfi', 'table', 'AssessmentContentStandardAuthor'
go

/* 
 * TABLE: [edfi].[AssessmentFamily] 
 */

CREATE TABLE [edfi].[AssessmentFamily](
    [AssessmentFamilyTitle]                 nvarchar(60)        NOT NULL,
    [AssessmentCategoryDescriptorId]        int                 NULL,
    [AcademicSubjectDescriptorId]           int                 NULL,
    [AssessedGradeLevelDescriptorId]        int                 NULL,
    [LowestAssessedGradeLevelDescriptorId]  int                 NULL,
    [Version]                               int                 NULL,
    [RevisionDate]                          date                NULL,
    [Nomenclature]                          nvarchar(35)        NULL,
    [ParentAssessmentFamilyTitle]           nvarchar(60)        NULL,
    [Namespace]                             nvarchar(255)       NOT NULL,
    [Id]                                    uniqueidentifier    CONSTRAINT [AssessmentFamily_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                      datetime            CONSTRAINT [AssessmentFamily_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                            datetime            CONSTRAINT [AssessmentFamily_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentFamily] PRIMARY KEY CLUSTERED ([AssessmentFamilyTitle])
)
go



IF OBJECT_ID('edfi.AssessmentFamily') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentFamily >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentFamily >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'AssessmentFamilyTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'AssessmentFamilyTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment family.', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'AssessmentFamilyTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'AssessmentCategoryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'AssessmentCategoryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'AssessmentCategoryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AcademicSubject', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for GradeLevel', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'LowestAssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'LowestAssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for GradeLevel', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'LowestAssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the assessment.', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'RevisionDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'RevisionDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year that the conceptual design for the AssessmentFamily was most recently revised substantially.', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'RevisionDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'Nomenclature'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'Nomenclature'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reflects the common nomenclature for an element.', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'Nomenclature'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'ParentAssessmentFamilyTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'ParentAssessmentFamilyTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment family.', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'ParentAssessmentFamilyTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'Namespace'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'Namespace'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Namespace for the Assessments in this AssessmentFamily.', 'schema', 'edfi', 'table', 'AssessmentFamily', 'column', 'Namespace'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamily'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents a logical grouping or association of assessments that share a common purpose, heritage or content standard. There may be hierarchies of assessment families, characteristics (e.g., Academic Subject) specified for assessment families, by convention, are inherited by the Assessments associated with the AssessmentFamily.', 'schema', 'edfi', 'table', 'AssessmentFamily'
go

/* 
 * TABLE: [edfi].[AssessmentFamilyAssessmentPeriod] 
 */

CREATE TABLE [edfi].[AssessmentFamilyAssessmentPeriod](
    [AssessmentFamilyTitle]         nvarchar(60)    NOT NULL,
    [AssessmentPeriodDescriptorId]  int             NOT NULL,
    [CreateDate]                    datetime        CONSTRAINT [AssessmentFamilyAssessmentPeriod_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentFamilyAssessmentPeriod] PRIMARY KEY CLUSTERED ([AssessmentFamilyTitle], [AssessmentPeriodDescriptorId])
)
go



IF OBJECT_ID('edfi.AssessmentFamilyAssessmentPeriod') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentFamilyAssessmentPeriod >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentFamilyAssessmentPeriod >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyAssessmentPeriod', 'column', 'AssessmentFamilyTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyAssessmentPeriod', 'column', 'AssessmentFamilyTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment family.', 'schema', 'edfi', 'table', 'AssessmentFamilyAssessmentPeriod', 'column', 'AssessmentFamilyTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyAssessmentPeriod', 'column', 'AssessmentPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyAssessmentPeriod', 'column', 'AssessmentPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The period or window in which an assessment is supposed to be administered.', 'schema', 'edfi', 'table', 'AssessmentFamilyAssessmentPeriod', 'column', 'AssessmentPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyAssessmentPeriod', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyAssessmentPeriod'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The periods or windows defined in which an assessment is supposed to be administered.', 'schema', 'edfi', 'table', 'AssessmentFamilyAssessmentPeriod'
go

/* 
 * TABLE: [edfi].[AssessmentFamilyContentStandard] 
 */

CREATE TABLE [edfi].[AssessmentFamilyContentStandard](
    [AssessmentFamilyTitle]             nvarchar(60)     NOT NULL,
    [Title]                             nvarchar(75)     NOT NULL,
    [Version]                           nvarchar(50)     NULL,
    [URI]                               nvarchar(255)    NULL,
    [PublicationDate]                   date             NULL,
    [PublicationYear]                   smallint         NULL,
    [PublicationStatusTypeId]           int              NULL,
    [MandatingEducationOrganizationId]  int              NULL,
    [BeginDate]                         date             NULL,
    [EndDate]                           date             NULL,
    [CreateDate]                        datetime         CONSTRAINT [AssessmentFamilyContentStandard_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentFamilyContentStandard] PRIMARY KEY CLUSTERED ([AssessmentFamilyTitle])
)
go



IF OBJECT_ID('edfi.AssessmentFamilyContentStandard') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentFamilyContentStandard >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentFamilyContentStandard >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'AssessmentFamilyTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'AssessmentFamilyTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment family.', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'AssessmentFamilyTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'Title'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'Title'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the content standard, for example Common Core.', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'Title'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the content.', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'URI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'URI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL), file, or ftp locator.', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'URI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'PublicationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'PublicationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date on which this content was first published.', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'PublicationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'PublicationYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'PublicationYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The year at which this content was first published.', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'PublicationYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'PublicationStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'PublicationStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'PublicationStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'MandatingEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'MandatingEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'MandatingEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The beginning of the period during which this learning standard document is intended for use.', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The end of the period during which this learning standard document is intended for use.', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication as to whether an assessment conforms to a standard (e.g., local standard, statewide standard, regional standard, association standard).', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandard'
go

/* 
 * TABLE: [edfi].[AssessmentFamilyContentStandardAuthor] 
 */

CREATE TABLE [edfi].[AssessmentFamilyContentStandardAuthor](
    [AssessmentFamilyTitle]  nvarchar(60)     NOT NULL,
    [Author]                 nvarchar(255)    NOT NULL,
    [CreateDate]             datetime         CONSTRAINT [AssessmentFamilyContentStandardAuthor_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentFamilyContentStandardAuthor] PRIMARY KEY CLUSTERED ([AssessmentFamilyTitle], [Author])
)
go



IF OBJECT_ID('edfi.AssessmentFamilyContentStandardAuthor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentFamilyContentStandardAuthor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentFamilyContentStandardAuthor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandardAuthor', 'column', 'AssessmentFamilyTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandardAuthor', 'column', 'AssessmentFamilyTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment family.', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandardAuthor', 'column', 'AssessmentFamilyTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandardAuthor', 'column', 'Author'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandardAuthor', 'column', 'Author'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The person or organization chiefly responsible for the intellectual content of the standard.', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandardAuthor', 'column', 'Author'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandardAuthor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandardAuthor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The person or organization chiefly responsible for the intellectual content of the standard.', 'schema', 'edfi', 'table', 'AssessmentFamilyContentStandardAuthor'
go

/* 
 * TABLE: [edfi].[AssessmentFamilyIdentificationCode] 
 */

CREATE TABLE [edfi].[AssessmentFamilyIdentificationCode](
    [AssessmentFamilyTitle]                       nvarchar(60)    NOT NULL,
    [AssigningOrganizationIdentificationCode]     nvarchar(60)    NULL,
    [IdentificationCode]                          nvarchar(60)    NOT NULL,
    [CreateDate]                                  datetime        CONSTRAINT [AssessmentFamilyIdentificationCode_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [AssessmentIdentificationSystemDescriptorId]  int             NOT NULL,
    CONSTRAINT [PK_AssessmentFamilyIdentificationCode] PRIMARY KEY CLUSTERED ([AssessmentFamilyTitle], [AssessmentIdentificationSystemDescriptorId])
)
go



IF OBJECT_ID('edfi.AssessmentFamilyIdentificationCode') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentFamilyIdentificationCode >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentFamilyIdentificationCode >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode', 'column', 'AssessmentFamilyTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode', 'column', 'AssessmentFamilyTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment family.', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode', 'column', 'AssessmentFamilyTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The organization code or name assigning the assessment identification code.', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode', 'column', 'AssessmentIdentificationSystemDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode', 'column', 'AssessmentIdentificationSystemDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode', 'column', 'AssessmentIdentificationSystemDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to an assessment family by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'AssessmentFamilyIdentificationCode'
go

/* 
 * TABLE: [edfi].[AssessmentFamilyLanguage] 
 */

CREATE TABLE [edfi].[AssessmentFamilyLanguage](
    [AssessmentFamilyTitle]  nvarchar(60)    NOT NULL,
    [LanguageDescriptorId]   int             NOT NULL,
    [CreateDate]             datetime        CONSTRAINT [AssessmentFamilyLanguage_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentFamiliyLanguages] PRIMARY KEY CLUSTERED ([AssessmentFamilyTitle], [LanguageDescriptorId])
)
go



IF OBJECT_ID('edfi.AssessmentFamilyLanguage') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentFamilyLanguage >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentFamilyLanguage >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyLanguage', 'column', 'AssessmentFamilyTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyLanguage', 'column', 'AssessmentFamilyTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment family.', 'schema', 'edfi', 'table', 'AssessmentFamilyLanguage', 'column', 'AssessmentFamilyTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyLanguage', 'column', 'LanguageDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyLanguage', 'column', 'LanguageDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AssessmentFamilyLanguage', 'column', 'LanguageDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyLanguage', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentFamilyLanguage'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the languages in which the Assessment Family is designed.', 'schema', 'edfi', 'table', 'AssessmentFamilyLanguage'
go

/* 
 * TABLE: [edfi].[AssessmentIdentificationCode] 
 */

CREATE TABLE [edfi].[AssessmentIdentificationCode](
    [AssessmentTitle]                             nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]                 int             NOT NULL,
    [AssessedGradeLevelDescriptorId]              int             NOT NULL,
    [Version]                                     int             NOT NULL,
    [AssessmentIdentificationSystemDescriptorId]  int             NOT NULL,
    [AssigningOrganizationIdentificationCode]     nvarchar(60)    NULL,
    [IdentificationCode]                          nvarchar(60)    NOT NULL,
    [CreateDate]                                  datetime        CONSTRAINT [AssessmentIdentificationCode_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentIdentificationCode] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AssessmentIdentificationSystemDescriptorId])
)
go



IF OBJECT_ID('edfi.AssessmentIdentificationCode') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentIdentificationCode >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentIdentificationCode >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AssessmentIdentificationSystemDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AssessmentIdentificationSystemDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AssessmentIdentificationSystemDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The organization code or name assigning the assessment identification code.', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to an assessment by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'AssessmentIdentificationCode'
go

/* 
 * TABLE: [edfi].[AssessmentIdentificationSystemDescriptor] 
 */

CREATE TABLE [edfi].[AssessmentIdentificationSystemDescriptor](
    [AssessmentIdentificationSystemDescriptorId]  int    NOT NULL,
    [AssessmentIdentificationSystemTypeId]        int    NOT NULL,
    CONSTRAINT [PK_AssessmentIdentificationSystemDescriptor] PRIMARY KEY CLUSTERED ([AssessmentIdentificationSystemDescriptorId])
)
go



IF OBJECT_ID('edfi.AssessmentIdentificationSystemDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentIdentificationSystemDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentIdentificationSystemDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemDescriptor', 'column', 'AssessmentIdentificationSystemDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemDescriptor', 'column', 'AssessmentIdentificationSystemDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemDescriptor', 'column', 'AssessmentIdentificationSystemDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemDescriptor', 'column', 'AssessmentIdentificationSystemTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemDescriptor', 'column', 'AssessmentIdentificationSystemTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AssessmentIdentificationSystem', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemDescriptor', 'column', 'AssessmentIdentificationSystemTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor holds a coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to an assessment.', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemDescriptor'
go

/* 
 * TABLE: [edfi].[AssessmentIdentificationSystemType] 
 */

CREATE TABLE [edfi].[AssessmentIdentificationSystemType](
    [AssessmentIdentificationSystemTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                             nvarchar(50)        NOT NULL,
    [Description]                           nvarchar(1024)      NOT NULL,
    [ShortDescription]                      nvarchar(450)       NOT NULL,
    [Id]                                    uniqueidentifier    CONSTRAINT [AssessmentIdentificationSystemType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                      datetime            CONSTRAINT [AssessmentIdentificationSystemType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                            datetime            CONSTRAINT [AssessmentIdentificationSystemType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentIdentificationSystemType] PRIMARY KEY CLUSTERED ([AssessmentIdentificationSystemTypeId])
)
go



IF OBJECT_ID('edfi.AssessmentIdentificationSystemType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentIdentificationSystemType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentIdentificationSystemType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType', 'column', 'AssessmentIdentificationSystemTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType', 'column', 'AssessmentIdentificationSystemTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AssessmentIdentificationSystem', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType', 'column', 'AssessmentIdentificationSystemTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for AssessmentIdentificationSystem type.', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the assessment identification system type.', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to an assessment.', 'schema', 'edfi', 'table', 'AssessmentIdentificationSystemType'
go

/* 
 * TABLE: [edfi].[AssessmentItem] 
 */

CREATE TABLE [edfi].[AssessmentItem](
    [AssessmentTitle]                 nvarchar(60)        NOT NULL,
    [AcademicSubjectDescriptorId]     int                 NOT NULL,
    [AssessedGradeLevelDescriptorId]  int                 NOT NULL,
    [Version]                         int                 NOT NULL,
    [IdentificationCode]              nvarchar(60)        NOT NULL,
    [AssessmentItemCategoryTypeId]    int                 NULL,
    [MaxRawScore]                     int                 NULL,
    [CorrectResponse]                 nvarchar(20)        NULL,
    [ExpectedTimeAssessed]            nvarchar(30)        NULL,
    [Nomenclature]                    nvarchar(35)        NULL,
    [Id]                              uniqueidentifier    CONSTRAINT [AssessmentItem_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                datetime            CONSTRAINT [AssessmentItem_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                      datetime            CONSTRAINT [AssessmentItem_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentItem] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
)
go



IF OBJECT_ID('edfi.AssessmentItem') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentItem >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentItem >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'AssessmentItemCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'AssessmentItemCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Category or type of the assessment item.  For example:  Multiple choice  Analytic  Prose  ....', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'AssessmentItemCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'MaxRawScore'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'MaxRawScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The maximum raw score achievable across all assessment items that are correct and scored at the maximum.', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'MaxRawScore'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'CorrectResponse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'CorrectResponse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The correct response for the assessment item.', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'CorrectResponse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'ExpectedTimeAssessed'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'ExpectedTimeAssessed'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The duration of time allotted for the AssessmentItem.', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'ExpectedTimeAssessed'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'Nomenclature'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'Nomenclature'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reflects the common nomenclature for an element.', 'schema', 'edfi', 'table', 'AssessmentItem', 'column', 'Nomenclature'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItem'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents one of many single measures that make up an assessment.', 'schema', 'edfi', 'table', 'AssessmentItem'
go

/* 
 * TABLE: [edfi].[AssessmentItemCategoryType] 
 */

CREATE TABLE [edfi].[AssessmentItemCategoryType](
    [AssessmentItemCategoryTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                     nvarchar(50)        NOT NULL,
    [Description]                   nvarchar(1024)      NOT NULL,
    [ShortDescription]              nvarchar(450)       NOT NULL,
    [Id]                            uniqueidentifier    CONSTRAINT [AssessmentItemCategoryType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]              datetime            CONSTRAINT [AssessmentItemCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                    datetime            CONSTRAINT [AssessmentItemCategoryType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ItemCategoryType] PRIMARY KEY CLUSTERED ([AssessmentItemCategoryTypeId])
)
go



IF OBJECT_ID('edfi.AssessmentItemCategoryType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentItemCategoryType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentItemCategoryType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType', 'column', 'AssessmentItemCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType', 'column', 'AssessmentItemCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ItemCategory', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType', 'column', 'AssessmentItemCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for ItemCategory type.', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the assessment item category type.', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Category or type of the assessment item (e.g., Multiple Choice, Analytic, Prose).', 'schema', 'edfi', 'table', 'AssessmentItemCategoryType'
go

/* 
 * TABLE: [edfi].[AssessmentItemLearningStandard] 
 */

CREATE TABLE [edfi].[AssessmentItemLearningStandard](
    [AssessmentTitle]                 nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]     int             NOT NULL,
    [AssessedGradeLevelDescriptorId]  int             NOT NULL,
    [Version]                         int             NOT NULL,
    [IdentificationCode]              nvarchar(60)    NOT NULL,
    [LearningStandardId]              nvarchar(60)    NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [AssessmentItemLearningStandard_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentItemLearningStandard] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [LearningStandardId])
)
go



IF OBJECT_ID('edfi.AssessmentItemLearningStandard') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentItemLearningStandard >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentItemLearningStandard >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a Learning Standard.', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'LearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'LearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Identifier for the specific learning standard (e.g., 111.15.3.1.A)', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', 'column', 'LearningStandardId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Learning Standard tested by this item.', 'schema', 'edfi', 'table', 'AssessmentItemLearningStandard'
go

/* 
 * TABLE: [edfi].[AssessmentItemResultType] 
 */

CREATE TABLE [edfi].[AssessmentItemResultType](
    [AssessmentItemResultTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                   nvarchar(50)        NOT NULL,
    [Description]                 nvarchar(1024)      NOT NULL,
    [ShortDescription]            nvarchar(450)       NOT NULL,
    [Id]                          uniqueidentifier    CONSTRAINT [AssessmentItemResultType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]            datetime            CONSTRAINT [AssessmentItemResultType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                  datetime            CONSTRAINT [AssessmentItemResultType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentItemResultType] PRIMARY KEY CLUSTERED ([AssessmentItemResultTypeId])
)
go



IF OBJECT_ID('edfi.AssessmentItemResultType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentItemResultType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentItemResultType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemResultType', 'column', 'AssessmentItemResultTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemResultType', 'column', 'AssessmentItemResultTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AssessmentItemResult', 'schema', 'edfi', 'table', 'AssessmentItemResultType', 'column', 'AssessmentItemResultTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemResultType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemResultType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for AssessmentItemResult type.', 'schema', 'edfi', 'table', 'AssessmentItemResultType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemResultType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemResultType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'AssessmentItemResultType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemResultType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemResultType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the assessment item result type.', 'schema', 'edfi', 'table', 'AssessmentItemResultType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemResultType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentItemResultType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The analyzed result of a student''s response to an assessment item.. For example: Correct, Incorrect, Met standard.', 'schema', 'edfi', 'table', 'AssessmentItemResultType'
go

/* 
 * TABLE: [edfi].[AssessmentLanguage] 
 */

CREATE TABLE [edfi].[AssessmentLanguage](
    [AssessmentTitle]                 nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]     int             NOT NULL,
    [AssessedGradeLevelDescriptorId]  int             NOT NULL,
    [Version]                         int             NOT NULL,
    [LanguageDescriptorId]            int             NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [AssessmentLanguage_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentLanguages] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [LanguageDescriptorId])
)
go



IF OBJECT_ID('edfi.AssessmentLanguage') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentLanguage >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentLanguage >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'LanguageDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'LanguageDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AssessmentLanguage', 'column', 'LanguageDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentLanguage', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentLanguage'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the languages in which the Assessment is designed.', 'schema', 'edfi', 'table', 'AssessmentLanguage'
go

/* 
 * TABLE: [edfi].[AssessmentPerformanceLevel] 
 */

CREATE TABLE [edfi].[AssessmentPerformanceLevel](
    [PerformanceLevelDescriptorId]     int             NOT NULL,
    [AssessmentReportingMethodTypeId]  int             NOT NULL,
    [AssessmentTitle]                  nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]      int             NOT NULL,
    [AssessedGradeLevelDescriptorId]   int             NOT NULL,
    [Version]                          int             NOT NULL,
    [MinimumScore]                     nvarchar(35)    NULL,
    [MaximumScore]                     nvarchar(35)    NULL,
    [ResultDatatypeTypeId]             int             NULL,
    [CreateDate]                       datetime        CONSTRAINT [AssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentPerformanceLevel] PRIMARY KEY CLUSTERED ([PerformanceLevelDescriptorId], [AssessmentReportingMethodTypeId], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version])
)
go



IF OBJECT_ID('edfi.AssessmentPerformanceLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentPerformanceLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentPerformanceLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The performance level(s) defined for the assessment.', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'AssessmentReportingMethodTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'AssessmentReportingMethodTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AssessmentReportingMethod', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'AssessmentReportingMethodTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'MinimumScore'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'MinimumScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The minimum score required to make the indicated level of performance.', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'MinimumScore'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'MaximumScore'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'MaximumScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The maximum score to make the indicated level of performance.', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'MaximumScore'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'ResultDatatypeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'ResultDatatypeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', 'column', 'ResultDatatypeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Definition of the performance levels and the associated cut scores. Three styles are supported: 1. Specification of performance level by minimum and maximum score 2. Specification of performance level by cut score, using only minimum score 3. Specification of performance level without any mapping to scores .', 'schema', 'edfi', 'table', 'AssessmentPerformanceLevel'
go

/* 
 * TABLE: [edfi].[AssessmentPeriodDescriptor] 
 */

CREATE TABLE [edfi].[AssessmentPeriodDescriptor](
    [AssessmentPeriodDescriptorId]  int     NOT NULL,
    [BeginDate]                     date    NULL,
    [EndDate]                       date    NULL,
    CONSTRAINT [PK_AssessmentPeriodDescriptor] PRIMARY KEY CLUSTERED ([AssessmentPeriodDescriptorId])
)
go



IF OBJECT_ID('edfi.AssessmentPeriodDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentPeriodDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentPeriodDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentPeriodDescriptor', 'column', 'AssessmentPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentPeriodDescriptor', 'column', 'AssessmentPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Assessment Period Descriptor', 'schema', 'edfi', 'table', 'AssessmentPeriodDescriptor', 'column', 'AssessmentPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentPeriodDescriptor', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentPeriodDescriptor', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The first date the assessment is to be administered.', 'schema', 'edfi', 'table', 'AssessmentPeriodDescriptor', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentPeriodDescriptor', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentPeriodDescriptor', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The last date the assessment is to be administered.', 'schema', 'edfi', 'table', 'AssessmentPeriodDescriptor', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentPeriodDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentPeriodDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor holds the period of time window in which an assessment is supposed to be administered (e.g., Beginning of Year, Middle of Year, End of Year).', 'schema', 'edfi', 'table', 'AssessmentPeriodDescriptor'
go

/* 
 * TABLE: [edfi].[AssessmentProgram] 
 */

CREATE TABLE [edfi].[AssessmentProgram](
    [AssessmentTitle]                 nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]     int             NOT NULL,
    [AssessedGradeLevelDescriptorId]  int             NOT NULL,
    [Version]                         int             NOT NULL,
    [EducationOrganizationId]         int             NOT NULL,
    [ProgramTypeId]                   int             NOT NULL,
    [ProgramName]                     nvarchar(60)    NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [AssessmentProgram_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentProgram] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [EducationOrganizationId], [ProgramTypeId], [ProgramName])
)
go



IF OBJECT_ID('edfi.AssessmentProgram') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentProgram >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentProgram >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Program', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'AssessmentProgram', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentProgram'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The programs associated with the Assessment.', 'schema', 'edfi', 'table', 'AssessmentProgram'
go

/* 
 * TABLE: [edfi].[AssessmentReportingMethodType] 
 */

CREATE TABLE [edfi].[AssessmentReportingMethodType](
    [AssessmentReportingMethodTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                        nvarchar(50)        NOT NULL,
    [Description]                      nvarchar(1024)      NOT NULL,
    [ShortDescription]                 nvarchar(450)       NOT NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [AssessmentReportingMethodType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [AssessmentReportingMethodType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [AssessmentReportingMethodType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentReportingMethodType] PRIMARY KEY CLUSTERED ([AssessmentReportingMethodTypeId])
)
go



IF OBJECT_ID('edfi.AssessmentReportingMethodType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentReportingMethodType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentReportingMethodType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType', 'column', 'AssessmentReportingMethodTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType', 'column', 'AssessmentReportingMethodTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AssessmentReportingMethod', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType', 'column', 'AssessmentReportingMethodTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for AssessmentReportingMethod type.', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the assessment reporting method type.
', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or a numerical grade. In some cases, more than one type of reporting method may be used.', 'schema', 'edfi', 'table', 'AssessmentReportingMethodType'
go

/* 
 * TABLE: [edfi].[AssessmentScore] 
 */

CREATE TABLE [edfi].[AssessmentScore](
    [AssessmentTitle]                  nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]      int             NOT NULL,
    [AssessedGradeLevelDescriptorId]   int             NOT NULL,
    [Version]                          int             NOT NULL,
    [AssessmentReportingMethodTypeId]  int             NOT NULL,
    [MinimumScore]                     nvarchar(35)    NULL,
    [MaximumScore]                     nvarchar(35)    NULL,
    [ResultDatatypeTypeId]             int             NULL,
    [CreateDate]                       datetime        CONSTRAINT [AssessmentScore_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentScore] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AssessmentReportingMethodTypeId])
)
go



IF OBJECT_ID('edfi.AssessmentScore') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentScore >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentScore >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'AssessmentReportingMethodTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'AssessmentReportingMethodTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AssessmentReportingMethod', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'AssessmentReportingMethodTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'MinimumScore'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'MinimumScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The minimum score possible on the assessment.', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'MinimumScore'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'MaximumScore'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'MaximumScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The maximum score possible on the assessment.', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'MaximumScore'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'ResultDatatypeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'ResultDatatypeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AssessmentScore', 'column', 'ResultDatatypeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Definition of the scores to be expected from this assessment.', 'schema', 'edfi', 'table', 'AssessmentScore'
go

/* 
 * TABLE: [edfi].[AssessmentSection] 
 */

CREATE TABLE [edfi].[AssessmentSection](
    [AssessmentTitle]                 nvarchar(60)     NOT NULL,
    [AcademicSubjectDescriptorId]     int              NOT NULL,
    [AssessedGradeLevelDescriptorId]  int              NOT NULL,
    [Version]                         int              NOT NULL,
    [SchoolId]                        int              NOT NULL,
    [ClassPeriodName]                 nvarchar(20)     NOT NULL,
    [ClassroomIdentificationCode]     nvarchar(20)     NOT NULL,
    [SchoolYear]                      smallint         NOT NULL,
    [LocalCourseCode]                 nvarchar(60)     NOT NULL,
    [TermDescriptorId]                int              NOT NULL,
    [UniqueSectionCode]               nvarchar(255)    NOT NULL,
    [SequenceOfCourse]                int              NOT NULL,
    [CreateDate]                      datetime         CONSTRAINT [AssessmentSection_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AssessmentSection] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [SchoolYear], [LocalCourseCode], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse])
)
go



IF OBJECT_ID('edfi.AssessmentSection') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AssessmentSection >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AssessmentSection >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the section, that is defined for a campus by the classroom, the subjects taught, and the instructors that are assigned.  NEDM: Unique Course Code', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a section is part of a sequence of parts for a course, the number if the sequence.  If the course has only onle part, the value of this section attribute should be 1.', 'schema', 'edfi', 'table', 'AssessmentSection', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AssessmentSection'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The section(s) to which the Assessment is associated.', 'schema', 'edfi', 'table', 'AssessmentSection'
go

/* 
 * TABLE: [edfi].[AttendanceEventCategoryDescriptor] 
 */

CREATE TABLE [edfi].[AttendanceEventCategoryDescriptor](
    [AttendanceEventCategoryDescriptorId]  int    NOT NULL,
    [AttendanceEventCategoryTypeId]        int    NOT NULL,
    CONSTRAINT [PK_AttendanceEventCategoryDescriptor] PRIMARY KEY CLUSTERED ([AttendanceEventCategoryDescriptorId])
)
go



IF OBJECT_ID('edfi.AttendanceEventCategoryDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AttendanceEventCategoryDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AttendanceEventCategoryDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryDescriptor', 'column', 'AttendanceEventCategoryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryDescriptor', 'column', 'AttendanceEventCategoryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'AttendanceEventCategoryDescriptor', 'column', 'AttendanceEventCategoryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryDescriptor', 'column', 'AttendanceEventCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryDescriptor', 'column', 'AttendanceEventCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AttendanceEventCategoryType', 'schema', 'edfi', 'table', 'AttendanceEventCategoryDescriptor', 'column', 'AttendanceEventCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor holds the category of the attendance event (e.g., tardy). The map to known enumeration values is required.', 'schema', 'edfi', 'table', 'AttendanceEventCategoryDescriptor'
go

/* 
 * TABLE: [edfi].[AttendanceEventCategoryType] 
 */

CREATE TABLE [edfi].[AttendanceEventCategoryType](
    [AttendanceEventCategoryTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                      nvarchar(50)        NOT NULL,
    [Description]                    nvarchar(1024)      NOT NULL,
    [ShortDescription]               nvarchar(450)       NOT NULL,
    [Id]                             uniqueidentifier    CONSTRAINT [AttendanceEventCategoryType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]               datetime            CONSTRAINT [AttendanceEventCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                     datetime            CONSTRAINT [AttendanceEventCategoryType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_AttendanceEventCategoryType] PRIMARY KEY CLUSTERED ([AttendanceEventCategoryTypeId])
)
go



IF OBJECT_ID('edfi.AttendanceEventCategoryType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.AttendanceEventCategoryType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.AttendanceEventCategoryType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType', 'column', 'AttendanceEventCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType', 'column', 'AttendanceEventCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AttendanceEventCategoryType', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType', 'column', 'AttendanceEventCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for AttendanceEventCategory Type.', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for AttendanceEventCategory type.', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code categorizing the attendance event (e.g., excused absence, unexcused absence).', 'schema', 'edfi', 'table', 'AttendanceEventCategoryType'
go

/* 
 * TABLE: [edfi].[BehaviorDescriptor] 
 */

CREATE TABLE [edfi].[BehaviorDescriptor](
    [BehaviorDescriptorId]  int    NOT NULL,
    [BehaviorTypeId]        int    NULL,
    CONSTRAINT [PK_BehaviorDescriptor] PRIMARY KEY CLUSTERED ([BehaviorDescriptorId])
)
go



IF OBJECT_ID('edfi.BehaviorDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.BehaviorDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.BehaviorDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BehaviorDescriptor', 'column', 'BehaviorDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BehaviorDescriptor', 'column', 'BehaviorDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Behavior Descriptor', 'schema', 'edfi', 'table', 'BehaviorDescriptor', 'column', 'BehaviorDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BehaviorDescriptor', 'column', 'BehaviorTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BehaviorDescriptor', 'column', 'BehaviorTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'BehaviorDescriptor', 'column', 'BehaviorTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BehaviorDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BehaviorDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor holds the categories of behavior describing a discipline incident.', 'schema', 'edfi', 'table', 'BehaviorDescriptor'
go

/* 
 * TABLE: [edfi].[BehaviorType] 
 */

CREATE TABLE [edfi].[BehaviorType](
    [BehaviorTypeId]    int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [BehaviorType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [BehaviorType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [BehaviorType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_BehaviorType] PRIMARY KEY CLUSTERED ([BehaviorTypeId])
)
go



IF OBJECT_ID('edfi.BehaviorType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.BehaviorType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.BehaviorType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BehaviorType', 'column', 'BehaviorTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BehaviorType', 'column', 'BehaviorTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for BehaviorCategoryType.', 'schema', 'edfi', 'table', 'BehaviorType', 'column', 'BehaviorTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BehaviorType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BehaviorType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for BehaviorCategoryType.', 'schema', 'edfi', 'table', 'BehaviorType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BehaviorType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BehaviorType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for BehaviorCategory type.', 'schema', 'edfi', 'table', 'BehaviorType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BehaviorType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BehaviorType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'BehaviorType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BehaviorType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BehaviorType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Enumeration items defining the categories of behavior coded for use in describing an incident.', 'schema', 'edfi', 'table', 'BehaviorType'
go

/* 
 * TABLE: [edfi].[BellSchedule] 
 */

CREATE TABLE [edfi].[BellSchedule](
    [BellScheduleName]        nvarchar(60)        NOT NULL,
    [GradeLevelDescriptorId]  int                 NOT NULL,
    [SchoolId]                int                 NOT NULL,
    [Date]                    date                NOT NULL,
    [Id]                      uniqueidentifier    CONSTRAINT [BellSchedule_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]        datetime            CONSTRAINT [BellSchedule_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]              datetime            CONSTRAINT [BellSchedule_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_BellSchedule] PRIMARY KEY CLUSTERED ([BellScheduleName], [GradeLevelDescriptorId], [SchoolId], [Date])
)
go



IF OBJECT_ID('edfi.BellSchedule') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.BellSchedule >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.BellSchedule >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BellSchedule', 'column', 'BellScheduleName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BellSchedule', 'column', 'BellScheduleName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Name or title of the bell schedule.', 'schema', 'edfi', 'table', 'BellSchedule', 'column', 'BellScheduleName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BellSchedule', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BellSchedule', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'BellSchedule', 'column', 'GradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BellSchedule', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BellSchedule', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'BellSchedule', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BellSchedule', 'column', 'Date'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BellSchedule', 'column', 'Date'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the first day of the grading period.', 'schema', 'edfi', 'table', 'BellSchedule', 'column', 'Date'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BellSchedule', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BellSchedule'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents the schedule of class period meeting times.', 'schema', 'edfi', 'table', 'BellSchedule'
go

/* 
 * TABLE: [edfi].[BellScheduleMeetingTime] 
 */

CREATE TABLE [edfi].[BellScheduleMeetingTime](
    [SchoolId]                  int             NOT NULL,
    [GradeLevelDescriptorId]    int             NOT NULL,
    [Date]                      date            NOT NULL,
    [BellScheduleName]          nvarchar(60)    NOT NULL,
    [ClassPeriodName]           nvarchar(20)    NOT NULL,
    [StartTime]                 time(7)         NOT NULL,
    [EndTime]                   time(7)         NOT NULL,
    [AlternateDayName]          nvarchar(20)    NULL,
    [OfficialAttendancePeriod]  bit             NULL,
    [CreateDate]                datetime        CONSTRAINT [BellScheduleMeetingTime_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_BellScheduleMeetingTime] PRIMARY KEY CLUSTERED ([SchoolId], [GradeLevelDescriptorId], [Date], [BellScheduleName], [ClassPeriodName], [StartTime])
)
go



IF OBJECT_ID('edfi.BellScheduleMeetingTime') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.BellScheduleMeetingTime >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.BellScheduleMeetingTime >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'GradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'Date'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'Date'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day and year of the calendar date.', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'Date'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'BellScheduleName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'BellScheduleName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Name or title of the BellSchedule.', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'BellScheduleName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period or AB schedules).', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'StartTime'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'StartTime'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the time of day the class begins.', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'StartTime'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'EndTime'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'EndTime'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the time of day the class ends.', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'EndTime'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'AlternateDayName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'AlternateDayName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'used for the bell schedule, another name for day (e.g., Blue day, Red day).', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'AlternateDayName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'OfficialAttendancePeriod'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'OfficialAttendancePeriod'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator of whether this meeting time is used for official daily attendance.', 'schema', 'edfi', 'table', 'BellScheduleMeetingTime', 'column', 'OfficialAttendancePeriod'
go

/* 
 * TABLE: [edfi].[Budget] 
 */

CREATE TABLE [edfi].[Budget](
    [EducationOrganizationId]  int                 NOT NULL,
    [AccountNumber]            nvarchar(50)        NOT NULL,
    [FiscalYear]               int                 NOT NULL,
    [AsOfDate]                 date                NOT NULL,
    [Amount]                   money               NOT NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [Budget_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [Budget_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [Budget_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Budget] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [AccountNumber], [FiscalYear], [AsOfDate])
)
go



IF OBJECT_ID('edfi.Budget') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Budget >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Budget >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Budget', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Budget', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'Budget', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Budget', 'column', 'AccountNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Budget', 'column', 'AccountNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Account with which the Budget is associated.', 'schema', 'edfi', 'table', 'Budget', 'column', 'AccountNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Budget', 'column', 'FiscalYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Budget', 'column', 'FiscalYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The financial accounting year.  NEDM: Fiscal Year', 'schema', 'edfi', 'table', 'Budget', 'column', 'FiscalYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Budget', 'column', 'AsOfDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Budget', 'column', 'AsOfDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date of the reported budget element.', 'schema', 'edfi', 'table', 'Budget', 'column', 'AsOfDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Budget', 'column', 'Amount'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Budget', 'column', 'Amount'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Amount budgeted for the account for this fiscal year.', 'schema', 'edfi', 'table', 'Budget', 'column', 'Amount'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Budget', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Budget'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This financial entity represents the amount of monies allocated to be spent or received by an education organization as related to a specific account.', 'schema', 'edfi', 'table', 'Budget'
go

/* 
 * TABLE: [edfi].[CalendarDate] 
 */

CREATE TABLE [edfi].[CalendarDate](
    [SchoolId]          int                 NOT NULL,
    [Date]              date                NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [CalendarDate_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [CalendarDate_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [CalendarDate_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CalendarDate] PRIMARY KEY CLUSTERED ([SchoolId], [Date])
)
go



IF OBJECT_ID('edfi.CalendarDate') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CalendarDate >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CalendarDate >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarDate', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarDate', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier assigned to a school by the State Education Agency (SEA).', 'schema', 'edfi', 'table', 'CalendarDate', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarDate', 'column', 'Date'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarDate', 'column', 'Date'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year of the CalendarDate.', 'schema', 'edfi', 'table', 'CalendarDate', 'column', 'Date'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarDate', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents a day in the school calendar.', 'schema', 'edfi', 'table', 'CalendarDate'
go

/* 
 * TABLE: [edfi].[CalendarDateCalendarEvent] 
 */

CREATE TABLE [edfi].[CalendarDateCalendarEvent](
    [SchoolId]                   int              NOT NULL,
    [Date]                       date             NOT NULL,
    [CalendarEventDescriptorId]  int              NOT NULL,
    [EventDuration]              decimal(3, 2)    NOT NULL,
    [CreateDate]                 datetime         CONSTRAINT [CalendarDateCalendarEvent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CalendarDateCalendarEvent] PRIMARY KEY CLUSTERED ([SchoolId], [Date], [CalendarEventDescriptorId])
)
go



IF OBJECT_ID('edfi.CalendarDateCalendarEvent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CalendarDateCalendarEvent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CalendarDateCalendarEvent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarDateCalendarEvent', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarDateCalendarEvent', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'CalendarDateCalendarEvent', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarDateCalendarEvent', 'column', 'Date'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarDateCalendarEvent', 'column', 'Date'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day and year of the calendar date.', 'schema', 'edfi', 'table', 'CalendarDateCalendarEvent', 'column', 'Date'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarDateCalendarEvent', 'column', 'CalendarEventDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarDateCalendarEvent', 'column', 'CalendarEventDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
', 'schema', 'edfi', 'table', 'CalendarDateCalendarEvent', 'column', 'CalendarEventDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarDateCalendarEvent', 'column', 'EventDuration'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarDateCalendarEvent', 'column', 'EventDuration'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.', 'schema', 'edfi', 'table', 'CalendarDateCalendarEvent', 'column', 'EventDuration'
go

/* 
 * TABLE: [edfi].[CalendarEventDescriptor] 
 */

CREATE TABLE [edfi].[CalendarEventDescriptor](
    [CalendarEventDescriptorId]  int    NOT NULL,
    [CalendarEventTypeId]        int    NOT NULL,
    CONSTRAINT [PK_CalendarEventDescriptor] PRIMARY KEY CLUSTERED ([CalendarEventDescriptorId])
)
go



IF OBJECT_ID('edfi.CalendarEventDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CalendarEventDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CalendarEventDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarEventDescriptor', 'column', 'CalendarEventDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarEventDescriptor', 'column', 'CalendarEventDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'CalendarEventDescriptor', 'column', 'CalendarEventDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarEventDescriptor', 'column', 'CalendarEventTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarEventDescriptor', 'column', 'CalendarEventTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CalendarEvent', 'schema', 'edfi', 'table', 'CalendarEventDescriptor', 'column', 'CalendarEventTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarEventDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarEventDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor holds the types of scheduled or unscheduled event for the day (e.g., Instructional day, Teacher only day, Holiday, Make-up day, Weather day, Student late arrival/early dismissal day).', 'schema', 'edfi', 'table', 'CalendarEventDescriptor'
go

/* 
 * TABLE: [edfi].[CalendarEventType] 
 */

CREATE TABLE [edfi].[CalendarEventType](
    [CalendarEventTypeId]  int                 IDENTITY(1,1),
    [CodeValue]            nvarchar(50)        NOT NULL,
    [Description]          nvarchar(1024)      NOT NULL,
    [ShortDescription]     nvarchar(450)       NOT NULL,
    [Id]                   uniqueidentifier    CONSTRAINT [CalendarEventType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]     datetime            CONSTRAINT [CalendarEventType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]           datetime            CONSTRAINT [CalendarEventType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CalendarEventType] PRIMARY KEY CLUSTERED ([CalendarEventTypeId])
)
go



IF OBJECT_ID('edfi.CalendarEventType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CalendarEventType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CalendarEventType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarEventType', 'column', 'CalendarEventTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarEventType', 'column', 'CalendarEventTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CalendarEvent', 'schema', 'edfi', 'table', 'CalendarEventType', 'column', 'CalendarEventTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarEventType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarEventType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for CalendarEvent type.', 'schema', 'edfi', 'table', 'CalendarEventType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarEventType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarEventType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CalendarEventType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarEventType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarEventType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the calendar event type.', 'schema', 'edfi', 'table', 'CalendarEventType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CalendarEventType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CalendarEventType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates the type of scheduled or unscheduled event for the day (e.g., Instructional Day, Holiday, Teacher-only Day)', 'schema', 'edfi', 'table', 'CalendarEventType'
go

/* 
 * TABLE: [edfi].[CareerPathwayType] 
 */

CREATE TABLE [edfi].[CareerPathwayType](
    [CareerPathwayTypeId]  int                 IDENTITY(1,1),
    [CodeValue]            nvarchar(50)        NOT NULL,
    [Description]          nvarchar(1024)      NOT NULL,
    [ShortDescription]     nvarchar(450)       NOT NULL,
    [Id]                   uniqueidentifier    CONSTRAINT [CareerPathwayType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]     datetime            CONSTRAINT [CareerPathwayType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]           datetime            CONSTRAINT [CareerPathwayType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CareerPathwayType] PRIMARY KEY CLUSTERED ([CareerPathwayTypeId])
)
go



IF OBJECT_ID('edfi.CareerPathwayType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CareerPathwayType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CareerPathwayType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CareerPathwayType', 'column', 'CareerPathwayTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CareerPathwayType', 'column', 'CareerPathwayTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CareerPathway', 'schema', 'edfi', 'table', 'CareerPathwayType', 'column', 'CareerPathwayTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CareerPathwayType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CareerPathwayType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for CareerPathway type.', 'schema', 'edfi', 'table', 'CareerPathwayType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CareerPathwayType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CareerPathwayType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CareerPathwayType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CareerPathwayType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CareerPathwayType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the career pathway type.', 'schema', 'edfi', 'table', 'CareerPathwayType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CareerPathwayType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CareerPathwayType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The career cluster or pathway representing the career path of the Vocational/Career Tech concentrator.', 'schema', 'edfi', 'table', 'CareerPathwayType'
go

/* 
 * TABLE: [edfi].[CharterApprovalAgencyType] 
 */

CREATE TABLE [edfi].[CharterApprovalAgencyType](
    [CharterApprovalAgencyTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                    nvarchar(50)        NOT NULL,
    [Description]                  nvarchar(1024)      NOT NULL,
    [ShortDescription]             nvarchar(450)       NOT NULL,
    [Id]                           uniqueidentifier    CONSTRAINT [CharterApprovalAgencyType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]             datetime            CONSTRAINT [CharterApprovalAgencyType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                   datetime            CONSTRAINT [CharterApprovalAgencyType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CharterApprovalAgencyType] PRIMARY KEY CLUSTERED ([CharterApprovalAgencyTypeId])
)
go



IF OBJECT_ID('edfi.CharterApprovalAgencyType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CharterApprovalAgencyType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CharterApprovalAgencyType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType', 'column', 'CharterApprovalAgencyTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType', 'column', 'CharterApprovalAgencyTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for MagnetSpecialProgramEmphasisSchool', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType', 'column', 'CharterApprovalAgencyTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for MagnetSpecialProgramEmphasisSchool type.', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the charter approval agency type.', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of agency that approved the establishment or continuation of a charter school.', 'schema', 'edfi', 'table', 'CharterApprovalAgencyType'
go

/* 
 * TABLE: [edfi].[CharterStatusType] 
 */

CREATE TABLE [edfi].[CharterStatusType](
    [CharterStatusTypeId]  int                 IDENTITY(1,1),
    [CodeValue]            nvarchar(50)        NOT NULL,
    [Description]          nvarchar(1024)      NOT NULL,
    [ShortDescription]     nvarchar(450)       NOT NULL,
    [Id]                   uniqueidentifier    CONSTRAINT [CharterStatusType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]     datetime            CONSTRAINT [CharterStatusType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]           datetime            CONSTRAINT [CharterStatusType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CharterStatusType] PRIMARY KEY CLUSTERED ([CharterStatusTypeId])
)
go



IF OBJECT_ID('edfi.CharterStatusType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CharterStatusType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CharterStatusType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CharterStatusType', 'column', 'CharterStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CharterStatusType', 'column', 'CharterStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CharterStatus', 'schema', 'edfi', 'table', 'CharterStatusType', 'column', 'CharterStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CharterStatusType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CharterStatusType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for CharterStatus type.', 'schema', 'edfi', 'table', 'CharterStatusType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CharterStatusType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CharterStatusType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CharterStatusType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CharterStatusType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CharterStatusType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the charter status type.', 'schema', 'edfi', 'table', 'CharterStatusType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CharterStatusType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CharterStatusType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The category of charter school. For example: School Charter, Open Enrollment Charter.', 'schema', 'edfi', 'table', 'CharterStatusType'
go

/* 
 * TABLE: [edfi].[CitizenshipStatusType] 
 */

CREATE TABLE [edfi].[CitizenshipStatusType](
    [CitizenshipStatusTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                nvarchar(50)        NOT NULL,
    [Description]              nvarchar(1024)      NULL,
    [ShortDescription]         nvarchar(450)       NOT NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [CitizenshipStatusType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [CitizenshipStatusType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [CitizenshipStatusType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CitizenshipStatusType] PRIMARY KEY CLUSTERED ([CitizenshipStatusTypeId])
)
go



IF OBJECT_ID('edfi.CitizenshipStatusType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CitizenshipStatusType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CitizenshipStatusType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CitizenshipStatusType', 'column', 'CitizenshipStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CitizenshipStatusType', 'column', 'CitizenshipStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'CitizenshipStatusType', 'column', 'CitizenshipStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CitizenshipStatusType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CitizenshipStatusType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'CitizenshipStatusType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CitizenshipStatusType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CitizenshipStatusType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CitizenshipStatusType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CitizenshipStatusType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CitizenshipStatusType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'CitizenshipStatusType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CitizenshipStatusType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CitizenshipStatusType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indicator of whether or not the person is a U.S. citizen.', 'schema', 'edfi', 'table', 'CitizenshipStatusType'
go

/* 
 * TABLE: [edfi].[ClassPeriod] 
 */

CREATE TABLE [edfi].[ClassPeriod](
    [SchoolId]          int                 NOT NULL,
    [ClassPeriodName]   nvarchar(20)        NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [ClassPeriod_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [ClassPeriod_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [ClassPeriod_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ClassPeriod] PRIMARY KEY CLUSTERED ([SchoolId], [ClassPeriodName])
)
go



IF OBJECT_ID('edfi.ClassPeriod') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ClassPeriod >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ClassPeriod >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ClassPeriod', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ClassPeriod', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'ClassPeriod', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ClassPeriod', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ClassPeriod', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period', 'schema', 'edfi', 'table', 'ClassPeriod', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ClassPeriod', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ClassPeriod'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents the designation of a regularly scheduled series of class meetings at designated times and days of the week.', 'schema', 'edfi', 'table', 'ClassPeriod'
go

/* 
 * TABLE: [edfi].[ClassroomPositionDescriptor] 
 */

CREATE TABLE [edfi].[ClassroomPositionDescriptor](
    [ClassroomPositionDescriptorId]  int    NOT NULL,
    [ClassroomPositionTypeId]        int    NULL,
    CONSTRAINT [PK_ClassroomPositionDescriptor] PRIMARY KEY CLUSTERED ([ClassroomPositionDescriptorId])
)
go



IF OBJECT_ID('edfi.ClassroomPositionDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ClassroomPositionDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ClassroomPositionDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionDescriptor', 'column', 'ClassroomPositionDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionDescriptor', 'column', 'ClassroomPositionDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ClassroomPositionDescriptor', 'column', 'ClassroomPositionDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionDescriptor', 'column', 'ClassroomPositionTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionDescriptor', 'column', 'ClassroomPositionTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ClassroomPosition', 'schema', 'edfi', 'table', 'ClassroomPositionDescriptor', 'column', 'ClassroomPositionTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the type of position the staff member holds in a specific class/section.', 'schema', 'edfi', 'table', 'ClassroomPositionDescriptor'
go

/* 
 * TABLE: [edfi].[ClassroomPositionType] 
 */

CREATE TABLE [edfi].[ClassroomPositionType](
    [ClassroomPositionTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                nvarchar(50)        NOT NULL,
    [Description]              nvarchar(1024)      NOT NULL,
    [ShortDescription]         nvarchar(450)       NOT NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [ClassroomPositionType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [ClassroomPositionType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [ClassroomPositionType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ClassroomPositionType] PRIMARY KEY CLUSTERED ([ClassroomPositionTypeId])
)
go



IF OBJECT_ID('edfi.ClassroomPositionType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ClassroomPositionType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ClassroomPositionType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionType', 'column', 'ClassroomPositionTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionType', 'column', 'ClassroomPositionTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ClassroomPosition', 'schema', 'edfi', 'table', 'ClassroomPositionType', 'column', 'ClassroomPositionTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for ClassroomPosition type.', 'schema', 'edfi', 'table', 'ClassroomPositionType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'ClassroomPositionType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the classroom position type.', 'schema', 'edfi', 'table', 'ClassroomPositionType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ClassroomPositionType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates the type of position the staff member holds in the specific class/section.', 'schema', 'edfi', 'table', 'ClassroomPositionType'
go

/* 
 * TABLE: [edfi].[Cohort] 
 */

CREATE TABLE [edfi].[Cohort](
    [CohortIdentifier]             nvarchar(20)        NOT NULL,
    [CohortDescription]            nvarchar(1024)      NULL,
    [CohortTypeId]                 int                 NOT NULL,
    [CohortScopeTypeId]            int                 NULL,
    [AcademicSubjectDescriptorId]  int                 NULL,
    [EducationOrganizationId]      int                 NOT NULL,
    [Id]                           uniqueidentifier    CONSTRAINT [Cohort_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]             datetime            CONSTRAINT [Cohort_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                   datetime            CONSTRAINT [Cohort_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Cohort] PRIMARY KEY CLUSTERED ([CohortIdentifier], [EducationOrganizationId])
)
go



IF OBJECT_ID('edfi.Cohort') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Cohort >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Cohort >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Cohort', 'column', 'CohortIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Cohort', 'column', 'CohortIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name or ID for the cohort.', 'schema', 'edfi', 'table', 'Cohort', 'column', 'CohortIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Cohort', 'column', 'CohortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Cohort', 'column', 'CohortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of he cohort and its purpose.', 'schema', 'edfi', 'table', 'Cohort', 'column', 'CohortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Cohort', 'column', 'CohortTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Cohort', 'column', 'CohortTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of the cohort (academic intervention, attendance intervention, discipline intervention, breakout session, etc.).', 'schema', 'edfi', 'table', 'Cohort', 'column', 'CohortTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Cohort', 'column', 'CohortScopeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Cohort', 'column', 'CohortScopeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The scope of cohort (e.g., campus, district, classroom).', 'schema', 'edfi', 'table', 'Cohort', 'column', 'CohortScopeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Cohort', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Cohort', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The subject for an academic intervention (e.g., science, mathematics).', 'schema', 'edfi', 'table', 'Cohort', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Cohort', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Cohort', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'Cohort', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Cohort', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Cohort'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents any type of list of designated students for tracking, analysis, or intervention.', 'schema', 'edfi', 'table', 'Cohort'
go

/* 
 * TABLE: [edfi].[CohortProgram] 
 */

CREATE TABLE [edfi].[CohortProgram](
    [EducationOrganizationId]         int             NOT NULL,
    [CohortIdentifier]                nvarchar(20)    NOT NULL,
    [ProgramEducationOrganizationId]  int             NOT NULL,
    [ProgramTypeId]                   int             NOT NULL,
    [ProgramName]                     nvarchar(60)    NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [CohortProgram_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CohortProgram] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [CohortIdentifier], [ProgramEducationOrganizationId], [ProgramTypeId], [ProgramName])
)
go



IF OBJECT_ID('edfi.CohortProgram') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CohortProgram >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CohortProgram >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'CohortIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'CohortIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name or ID for the cohort.', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'CohortIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'ProgramEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'ProgramEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The EducationOrganization of the program', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'ProgramEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Program', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'CohortProgram', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortProgram', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortProgram'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The optional program associated with this cohort (e.g., Special Education).', 'schema', 'edfi', 'table', 'CohortProgram'
go

/* 
 * TABLE: [edfi].[CohortScopeType] 
 */

CREATE TABLE [edfi].[CohortScopeType](
    [CohortScopeTypeId]  int                 IDENTITY(1,1),
    [CodeValue]          nvarchar(50)        NOT NULL,
    [Description]        nvarchar(1024)      NOT NULL,
    [ShortDescription]   nvarchar(450)       NOT NULL,
    [Id]                 uniqueidentifier    CONSTRAINT [CohortScopeType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]   datetime            CONSTRAINT [CohortScopeType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]         datetime            CONSTRAINT [CohortScopeType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CohortScopeType] PRIMARY KEY CLUSTERED ([CohortScopeTypeId])
)
go



IF OBJECT_ID('edfi.CohortScopeType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CohortScopeType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CohortScopeType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortScopeType', 'column', 'CohortScopeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortScopeType', 'column', 'CohortScopeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CohortScope', 'schema', 'edfi', 'table', 'CohortScopeType', 'column', 'CohortScopeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortScopeType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortScopeType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for CohortScope', 'schema', 'edfi', 'table', 'CohortScopeType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortScopeType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortScopeType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CohortScopeType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortScopeType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortScopeType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the cohort scope type.', 'schema', 'edfi', 'table', 'CohortScopeType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortScopeType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortScopeType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The scope of cohort (e.g., school, district, classroom).', 'schema', 'edfi', 'table', 'CohortScopeType'
go

/* 
 * TABLE: [edfi].[CohortType] 
 */

CREATE TABLE [edfi].[CohortType](
    [CohortTypeId]      int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [CohortType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [CohortType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [CohortType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CohortType] PRIMARY KEY CLUSTERED ([CohortTypeId])
)
go



IF OBJECT_ID('edfi.CohortType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CohortType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CohortType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortType', 'column', 'CohortTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortType', 'column', 'CohortTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Cohort', 'schema', 'edfi', 'table', 'CohortType', 'column', 'CohortTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Cohort type.', 'schema', 'edfi', 'table', 'CohortType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CohortType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the cohort type.', 'schema', 'edfi', 'table', 'CohortType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of the cohort (e.g., academic intervention, classroom breakout).', 'schema', 'edfi', 'table', 'CohortType'
go

/* 
 * TABLE: [edfi].[CohortYearType] 
 */

CREATE TABLE [edfi].[CohortYearType](
    [CohortYearTypeId]  int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [CohortYearType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [CohortYearType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [CohortYearType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CohortYearType] PRIMARY KEY CLUSTERED ([CohortYearTypeId])
)
go



IF OBJECT_ID('edfi.CohortYearType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CohortYearType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CohortYearType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortYearType', 'column', 'CohortYearTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortYearType', 'column', 'CohortYearTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CohortYear', 'schema', 'edfi', 'table', 'CohortYearType', 'column', 'CohortYearTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortYearType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortYearType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for CohortYear type.', 'schema', 'edfi', 'table', 'CohortYearType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortYearType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortYearType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CohortYearType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortYearType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortYearType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the cohort year type.', 'schema', 'edfi', 'table', 'CohortYearType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CohortYearType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CohortYearType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The enumeration items for the set of cohort years.', 'schema', 'edfi', 'table', 'CohortYearType'
go

/* 
 * TABLE: [edfi].[CompetencyLevelDescriptor] 
 */

CREATE TABLE [edfi].[CompetencyLevelDescriptor](
    [CompetencyLevelDescriptorId]      int    NOT NULL,
    [PerformanceBaseConversionTypeId]  int    NULL,
    CONSTRAINT [PK_CompetencyLevelDescriptor] PRIMARY KEY CLUSTERED ([CompetencyLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.CompetencyLevelDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CompetencyLevelDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CompetencyLevelDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CompetencyLevelDescriptor', 'column', 'CompetencyLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CompetencyLevelDescriptor', 'column', 'CompetencyLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Competency Level Descriptor', 'schema', 'edfi', 'table', 'CompetencyLevelDescriptor', 'column', 'CompetencyLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CompetencyLevelDescriptor', 'column', 'PerformanceBaseConversionTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CompetencyLevelDescriptor', 'column', 'PerformanceBaseConversionTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'CompetencyLevelDescriptor', 'column', 'PerformanceBaseConversionTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CompetencyLevelDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CompetencyLevelDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines various levels for assessed competencies.', 'schema', 'edfi', 'table', 'CompetencyLevelDescriptor'
go

/* 
 * TABLE: [edfi].[CompetencyObjective] 
 */

CREATE TABLE [edfi].[CompetencyObjective](
    [Objective]                        nvarchar(60)        NOT NULL,
    [ObjectiveGradeLevelDescriptorId]  int                 NOT NULL,
    [EducationOrganizationId]          int                 NOT NULL,
    [CompetencyObjectiveId]            nvarchar(60)        NULL,
    [Description]                      nvarchar(1024)      NULL,
    [SuccessCriteria]                  nvarchar(150)       NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [CompetencyObjective_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [CompetencyObjective_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [CompetencyObjective_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CompetencyObjective] PRIMARY KEY CLUSTERED ([Objective], [ObjectiveGradeLevelDescriptorId], [EducationOrganizationId])
)
go



IF OBJECT_ID('edfi.CompetencyObjective') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CompetencyObjective >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CompetencyObjective >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'Objective'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'Objective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The designated title of the learning objective.', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'Objective'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'ObjectiveGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade level for which the competency objective is targeted,', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization that defined the competency objective', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'CompetencyObjectiveId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'CompetencyObjectiveId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Identifier for the CompetencyObjective.', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'CompetencyObjectiveId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A detailed description of the entity.', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'SuccessCriteria'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'SuccessCriteria'
END
exec sys.sp_addextendedproperty 'MS_Description', 'One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the CompetencyObjective.', 'schema', 'edfi', 'table', 'CompetencyObjective', 'column', 'SuccessCriteria'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CompetencyObjective', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CompetencyObjective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity holds additional competencies for student achievement that are not associated with specific learning objectives (e.g., paying attention in class).', 'schema', 'edfi', 'table', 'CompetencyObjective'
go

/* 
 * TABLE: [edfi].[ContentClassType] 
 */

CREATE TABLE [edfi].[ContentClassType](
    [ContentClassTypeId]  int                 IDENTITY(1,1),
    [CodeValue]           nvarchar(50)        NOT NULL,
    [ShortDescription]    nvarchar(450)       NOT NULL,
    [Description]         nvarchar(1024)      NOT NULL,
    [Id]                  uniqueidentifier    CONSTRAINT [ContentClassType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]    datetime            CONSTRAINT [ContentClassType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]          datetime            CONSTRAINT [ContentClassType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ContentClassType] PRIMARY KEY CLUSTERED ([ContentClassTypeId])
)
go



IF OBJECT_ID('edfi.ContentClassType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ContentClassType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ContentClassType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContentClassType', 'column', 'ContentClassTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContentClassType', 'column', 'ContentClassTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ContentClassType', 'column', 'ContentClassTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContentClassType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContentClassType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'ContentClassType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContentClassType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContentClassType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'ContentClassType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContentClassType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContentClassType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'ContentClassType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContentClassType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContentClassType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The predominate type or kind characterizing the learning resource.', 'schema', 'edfi', 'table', 'ContentClassType'
go

/* 
 * TABLE: [edfi].[ContinuationOfServicesReasonDescriptor] 
 */

CREATE TABLE [edfi].[ContinuationOfServicesReasonDescriptor](
    [ContinuationOfServicesReasonDescriptorId]  int    NOT NULL,
    [ContinuationOfServicesReasonTypeId]        int    NOT NULL,
    CONSTRAINT [PK_ContinuationOfServicesReasonDescriptor] PRIMARY KEY CLUSTERED ([ContinuationOfServicesReasonDescriptorId])
)
go



IF OBJECT_ID('edfi.ContinuationOfServicesReasonDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ContinuationOfServicesReasonDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ContinuationOfServicesReasonDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonDescriptor', 'column', 'ContinuationOfServicesReasonDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonDescriptor', 'column', 'ContinuationOfServicesReasonDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonDescriptor', 'column', 'ContinuationOfServicesReasonDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonDescriptor', 'column', 'ContinuationOfServicesReasonTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonDescriptor', 'column', 'ContinuationOfServicesReasonTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonDescriptor', 'column', 'ContinuationOfServicesReasonTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'In the Migrant Education program, a provision allows continuation of services after a child is no longer considered migratory for certain reasons. This descriptor holds the reasons prescribed in the statute. The mapping of descriptor values to known Ed-Fi enumeration values is required.', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonDescriptor'
go

/* 
 * TABLE: [edfi].[ContinuationOfServicesReasonType] 
 */

CREATE TABLE [edfi].[ContinuationOfServicesReasonType](
    [ContinuationOfServicesReasonTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                           nvarchar(50)        NULL,
    [ShortDescription]                    nvarchar(450)       NOT NULL,
    [Description]                         nvarchar(1024)      NULL,
    [Id]                                  uniqueidentifier    CONSTRAINT [ContinuationOfServicesReasonType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                    datetime            CONSTRAINT [ContinuationOfServicesReasonType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                          datetime            CONSTRAINT [ContinuationOfServicesReasonType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ContinuationOfServicesReasonType] PRIMARY KEY CLUSTERED ([ContinuationOfServicesReasonTypeId])
)
go



IF OBJECT_ID('edfi.ContinuationOfServicesReasonType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ContinuationOfServicesReasonType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ContinuationOfServicesReasonType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType', 'column', 'ContinuationOfServicesReasonTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType', 'column', 'ContinuationOfServicesReasonTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType', 'column', 'ContinuationOfServicesReasonTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'In the Migrant Education program, a provision allows continuation of services after a child is no longer considered migratory for certain reasons. This type holds the reasons prescribed in the statute.', 'schema', 'edfi', 'table', 'ContinuationOfServicesReasonType'
go

/* 
 * TABLE: [edfi].[ContractedStaff] 
 */

CREATE TABLE [edfi].[ContractedStaff](
    [StaffUSI]                 int                 NOT NULL,
    [EducationOrganizationId]  int                 NOT NULL,
    [AccountNumber]            nvarchar(50)        NOT NULL,
    [FiscalYear]               int                 NOT NULL,
    [AsOfDate]                 date                NOT NULL,
    [AmountToDate]             money               NOT NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [ContractedStaff_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [ContractedStaff_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [ContractedStaff_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ContractedStaff] PRIMARY KEY CLUSTERED ([StaffUSI], [EducationOrganizationId], [AccountNumber], [FiscalYear], [AsOfDate])
)
go



IF OBJECT_ID('edfi.ContractedStaff') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ContractedStaff >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ContractedStaff >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'AccountNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'AccountNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Account with which the Contracted Staff expense is associated.', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'AccountNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'FiscalYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'FiscalYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The financial accounting year.  NEDM: Fiscal Year', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'FiscalYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'AsOfDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'AsOfDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date of the reported contracted staff element.', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'AsOfDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'AmountToDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'AmountToDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Current balance (amount paid to contractor) for account for the fiscal year.', 'schema', 'edfi', 'table', 'ContractedStaff', 'column', 'AmountToDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ContractedStaff', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ContractedStaff'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This financial entity represents the sum of the financial transactions to date for contracted staff. ContractedStaff includes "contractors" or "consultants" who perform services for an agreed upon fee, or an employee of a management service contracted to work on site.', 'schema', 'edfi', 'table', 'ContractedStaff'
go

/* 
 * TABLE: [edfi].[CostRateType] 
 */

CREATE TABLE [edfi].[CostRateType](
    [CostRateTypeId]    int                 IDENTITY(1,1),
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [CodeValue]         nvarchar(50)        NULL,
    [Description]       nvarchar(1024)      NULL,
    [Id]                uniqueidentifier    CONSTRAINT [CostRateType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [CostRateType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [CostRateType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CostRateType] PRIMARY KEY CLUSTERED ([CostRateTypeId])
)
go



IF OBJECT_ID('edfi.CostRateType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CostRateType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CostRateType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CostRateType', 'column', 'CostRateTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CostRateType', 'column', 'CostRateTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'CostRateType', 'column', 'CostRateTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CostRateType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CostRateType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The rate by which the cost applies, e.g. Flat Fee, Per Student', 'schema', 'edfi', 'table', 'CostRateType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CostRateType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CostRateType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for cost rate type.', 'schema', 'edfi', 'table', 'CostRateType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CostRateType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CostRateType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description of cost rate type.', 'schema', 'edfi', 'table', 'CostRateType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CostRateType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CostRateType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The rate by which a cost applies (e.g. $1 per student).', 'schema', 'edfi', 'table', 'CostRateType'
go

/* 
 * TABLE: [edfi].[CountryDescriptor] 
 */

CREATE TABLE [edfi].[CountryDescriptor](
    [CountryDescriptorId]  int    NOT NULL,
    CONSTRAINT [PK_CountryDescriptor] PRIMARY KEY CLUSTERED ([CountryDescriptorId])
)
go



IF OBJECT_ID('edfi.CountryDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CountryDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CountryDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CountryDescriptor', 'column', 'CountryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CountryDescriptor', 'column', 'CountryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'CountryDescriptor', 'column', 'CountryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CountryDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CountryDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the name and code of the country.', 'schema', 'edfi', 'table', 'CountryDescriptor'
go

/* 
 * TABLE: [edfi].[Course] 
 */

CREATE TABLE [edfi].[Course](
    [EducationOrganizationId]           int                 NOT NULL,
    [CourseCode]                        nvarchar(60)        NOT NULL,
    [CourseTitle]                       nvarchar(60)        NOT NULL,
    [NumberOfParts]                     int                 NOT NULL,
    [AcademicSubjectDescriptorId]       int                 NULL,
    [CourseDescription]                 nvarchar(1024)      NULL,
    [DateCourseAdopted]                 date                NULL,
    [HighSchoolCourseRequirement]       bit                 NULL,
    [CourseGPAApplicabilityTypeId]      int                 NULL,
    [CourseDefinedByTypeId]             int                 NULL,
    [MinimumAvailableCreditTypeId]      int                 NULL,
    [MinimumAvailableCreditConversion]  decimal(9, 2)       NULL,
    [MinimumAvailableCredits]           decimal(9, 2)       NULL,
    [MaximumAvailableCreditTypeId]      int                 NULL,
    [MaximumAvailableCreditConversion]  decimal(9, 2)       NULL,
    [MaximumAvailableCredits]           decimal(9, 2)       NULL,
    [CareerPathwayTypeId]               int                 NULL,
    [TimeRequiredForCompletion]         int                 NULL,
    [Id]                                uniqueidentifier    CONSTRAINT [Course_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                  datetime            CONSTRAINT [Course_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                        datetime            CONSTRAINT [Course_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [CourseCode])
)
go



IF OBJECT_ID('edfi.Course') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Course >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Course >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Education Organization that defines the curriculum and courses offered - often the LEA or school.', 'schema', 'edfi', 'table', 'Course', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'TThe actual code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'NumberOfParts'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'NumberOfParts'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of parts identified for a course.', 'schema', 'edfi', 'table', 'Course', 'column', 'NumberOfParts'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The intended major subject area of the course.  NEDM: Secondary Course Subject Area', 'schema', 'edfi', 'table', 'Course', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.  NEDM: Course Description', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'DateCourseAdopted'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'DateCourseAdopted'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Date the course was adopted by the education agency.', 'schema', 'edfi', 'table', 'Course', 'column', 'DateCourseAdopted'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'HighSchoolCourseRequirement'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'HighSchoolCourseRequirement'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication that this course may satisfy high school graduation requirements in the course''s subject area.', 'schema', 'edfi', 'table', 'Course', 'column', 'HighSchoolCourseRequirement'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseGPAApplicabilityTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseGPAApplicabilityTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indicator of whether or not this course being described is included in the computation of the student''s Grade Point Average, and if so, if it weighted differently from regular courses.', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseGPAApplicabilityTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseDefinedByTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseDefinedByTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CourseDefinedByType.', 'schema', 'edfi', 'table', 'Course', 'column', 'CourseDefinedByTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'MinimumAvailableCreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'MinimumAvailableCreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Credit', 'schema', 'edfi', 'table', 'Course', 'column', 'MinimumAvailableCreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'MinimumAvailableCreditConversion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'MinimumAvailableCreditConversion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', 'schema', 'edfi', 'table', 'Course', 'column', 'MinimumAvailableCreditConversion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'MinimumAvailableCredits'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'MinimumAvailableCredits'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The minimum amount of credit available to a student who successfully completes the course', 'schema', 'edfi', 'table', 'Course', 'column', 'MinimumAvailableCredits'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'MaximumAvailableCreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'MaximumAvailableCreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Credit', 'schema', 'edfi', 'table', 'Course', 'column', 'MaximumAvailableCreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'MaximumAvailableCreditConversion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'MaximumAvailableCreditConversion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', 'schema', 'edfi', 'table', 'Course', 'column', 'MaximumAvailableCreditConversion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'MaximumAvailableCredits'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'MaximumAvailableCredits'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The maximum amount of credit available to a student who successfully completes the course', 'schema', 'edfi', 'table', 'Course', 'column', 'MaximumAvailableCredits'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'CareerPathwayTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'CareerPathwayTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CareerPathway', 'schema', 'edfi', 'table', 'Course', 'column', 'CareerPathwayTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'TimeRequiredForCompletion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course', 'column', 'TimeRequiredForCompletion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The actual or estimated number of clock minutes required for class completion. This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.', 'schema', 'edfi', 'table', 'Course', 'column', 'TimeRequiredForCompletion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Course', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Course'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This educational entity represents the organization of subject matter and related learning experiences provided for the instruction of students on a regular or systematic basis.', 'schema', 'edfi', 'table', 'Course'
go

/* 
 * TABLE: [edfi].[CourseAttemptResultType] 
 */

CREATE TABLE [edfi].[CourseAttemptResultType](
    [CourseAttemptResultTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                  nvarchar(50)        NOT NULL,
    [Description]                nvarchar(1024)      NOT NULL,
    [ShortDescription]           nvarchar(450)       NOT NULL,
    [Id]                         uniqueidentifier    CONSTRAINT [CourseAttemptResultType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]           datetime            CONSTRAINT [CourseAttemptResultType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                 datetime            CONSTRAINT [CourseAttemptResultType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CourseAttemptResultType] PRIMARY KEY CLUSTERED ([CourseAttemptResultTypeId])
)
go



IF OBJECT_ID('edfi.CourseAttemptResultType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseAttemptResultType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseAttemptResultType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseAttemptResultType', 'column', 'CourseAttemptResultTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseAttemptResultType', 'column', 'CourseAttemptResultTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CourseAttemptResult', 'schema', 'edfi', 'table', 'CourseAttemptResultType', 'column', 'CourseAttemptResultTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseAttemptResultType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseAttemptResultType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for CourseAttemptResult type.', 'schema', 'edfi', 'table', 'CourseAttemptResultType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseAttemptResultType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseAttemptResultType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CourseAttemptResultType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseAttemptResultType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseAttemptResultType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the course attempt result type.', 'schema', 'edfi', 'table', 'CourseAttemptResultType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseAttemptResultType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseAttemptResultType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The result from the student''s attempt to take the course, for example: Pass, Fail, Incomplete, Withdrawn.', 'schema', 'edfi', 'table', 'CourseAttemptResultType'
go

/* 
 * TABLE: [edfi].[CourseCompetencyLevel] 
 */

CREATE TABLE [edfi].[CourseCompetencyLevel](
    [EducationOrganizationId]      int             NOT NULL,
    [CourseCode]                   nvarchar(60)    NOT NULL,
    [CompetencyLevelDescriptorId]  int             NOT NULL,
    [CreateDate]                   datetime        CONSTRAINT [CourseCompetencyLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CourseCompetencyLevel] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [CourseCode], [CompetencyLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.CourseCompetencyLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseCompetencyLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseCompetencyLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseCompetencyLevel', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseCompetencyLevel', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Education Organization that defines the curriculum and courses offered - often the LEA or school.', 'schema', 'edfi', 'table', 'CourseCompetencyLevel', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseCompetencyLevel', 'column', 'CourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseCompetencyLevel', 'column', 'CourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'TThe actual code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'CourseCompetencyLevel', 'column', 'CourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseCompetencyLevel', 'column', 'CompetencyLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseCompetencyLevel', 'column', 'CompetencyLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Competency Level Descriptor', 'schema', 'edfi', 'table', 'CourseCompetencyLevel', 'column', 'CompetencyLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseCompetencyLevel', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseCompetencyLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The competency levels defined to rate the student for the course.', 'schema', 'edfi', 'table', 'CourseCompetencyLevel'
go

/* 
 * TABLE: [edfi].[CourseDefinedByType] 
 */

CREATE TABLE [edfi].[CourseDefinedByType](
    [CourseDefinedByTypeId]  int                 IDENTITY(1,1),
    [CodeValue]              nvarchar(50)        NOT NULL,
    [Description]            nvarchar(1024)      NOT NULL,
    [ShortDescription]       nvarchar(450)       NOT NULL,
    [Id]                     uniqueidentifier    CONSTRAINT [CourseDefinedByType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]       datetime            CONSTRAINT [CourseDefinedByType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]             datetime            CONSTRAINT [CourseDefinedByType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CourseDefinedByType] PRIMARY KEY CLUSTERED ([CourseDefinedByTypeId])
)
go



IF OBJECT_ID('edfi.CourseDefinedByType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseDefinedByType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseDefinedByType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseDefinedByType', 'column', 'CourseDefinedByTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseDefinedByType', 'column', 'CourseDefinedByTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CourseDefinedByType.', 'schema', 'edfi', 'table', 'CourseDefinedByType', 'column', 'CourseDefinedByTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseDefinedByType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseDefinedByType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code value for the course defined by type.', 'schema', 'edfi', 'table', 'CourseDefinedByType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseDefinedByType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseDefinedByType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CourseDefinedByType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseDefinedByType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseDefinedByType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the course defined by type.', 'schema', 'edfi', 'table', 'CourseDefinedByType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseDefinedByType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseDefinedByType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Specifies whether the course was defined by the state education agency, local education agency, school, or national organization.', 'schema', 'edfi', 'table', 'CourseDefinedByType'
go

/* 
 * TABLE: [edfi].[CourseGPAApplicabilityType] 
 */

CREATE TABLE [edfi].[CourseGPAApplicabilityType](
    [CourseGPAApplicabilityTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                     nvarchar(50)        NOT NULL,
    [Description]                   nvarchar(1024)      NOT NULL,
    [ShortDescription]              nvarchar(450)       NOT NULL,
    [Id]                            uniqueidentifier    CONSTRAINT [CourseGPAApplicabilityType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]              datetime            CONSTRAINT [CourseGPAApplicabilityType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                    datetime            CONSTRAINT [CourseGPAApplicabilityType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CourseGPAApplicabilityType] PRIMARY KEY CLUSTERED ([CourseGPAApplicabilityTypeId])
)
go



IF OBJECT_ID('edfi.CourseGPAApplicabilityType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseGPAApplicabilityType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseGPAApplicabilityType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType', 'column', 'CourseGPAApplicabilityTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType', 'column', 'CourseGPAApplicabilityTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CourseGPAApplicability', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType', 'column', 'CourseGPAApplicabilityTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for CourseGPAApplicability type.', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the course GPA applicability type.', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indicator of whether or not this course being described is included in the computation of the student''s Grade Point Average, and if so, if it is weighted differently than regular courses.', 'schema', 'edfi', 'table', 'CourseGPAApplicabilityType'
go

/* 
 * TABLE: [edfi].[CourseIdentificationCode] 
 */

CREATE TABLE [edfi].[CourseIdentificationCode](
    [EducationOrganizationId]                  int             NOT NULL,
    [CourseCode]                               nvarchar(60)    NOT NULL,
    [AssigningOrganizationIdentificationCode]  nvarchar(60)    NULL,
    [IdentificationCode]                       nvarchar(60)    NOT NULL,
    [CreateDate]                               datetime        CONSTRAINT [CourseIdentificationCode_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [CourseIdentificationSystemDescriptorId]   int             NOT NULL,
    CONSTRAINT [PK_CourseIdentificationCode] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [CourseCode], [CourseIdentificationSystemDescriptorId])
)
go



IF OBJECT_ID('edfi.CourseIdentificationCode') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseIdentificationCode >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseIdentificationCode >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Education Organization that defines the curriculum and courses offered - often the LEA or school.', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'CourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'CourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'TThe actual code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'CourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The organization code or name assigning the staff Identification Code.', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'CourseIdentificationSystemDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'CourseIdentificationSystemDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'CourseIdentificationCode', 'column', 'CourseIdentificationSystemDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationCode', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A standard code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'CourseIdentificationCode'
go

/* 
 * TABLE: [edfi].[CourseIdentificationSystemDescriptor] 
 */

CREATE TABLE [edfi].[CourseIdentificationSystemDescriptor](
    [CourseIdentificationSystemTypeId]        int    NULL,
    [CourseIdentificationSystemDescriptorId]  int    NOT NULL,
    CONSTRAINT [PK_CourseIdentificaitonSystemDescriptor] PRIMARY KEY CLUSTERED ([CourseIdentificationSystemDescriptorId])
)
go



IF OBJECT_ID('edfi.CourseIdentificationSystemDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseIdentificationSystemDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseIdentificationSystemDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemDescriptor', 'column', 'CourseIdentificationSystemTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemDescriptor', 'column', 'CourseIdentificationSystemTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CourseCodeSystem', 'schema', 'edfi', 'table', 'CourseIdentificationSystemDescriptor', 'column', 'CourseIdentificationSystemTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemDescriptor', 'column', 'CourseIdentificationSystemDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemDescriptor', 'column', 'CourseIdentificationSystemDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'CourseIdentificationSystemDescriptor', 'column', 'CourseIdentificationSystemDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines a standard code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'CourseIdentificationSystemDescriptor'
go

/* 
 * TABLE: [edfi].[CourseIdentificationSystemType] 
 */

CREATE TABLE [edfi].[CourseIdentificationSystemType](
    [CourseIdentificationSystemTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                         nvarchar(50)        NOT NULL,
    [Description]                       nvarchar(1024)      NOT NULL,
    [ShortDescription]                  nvarchar(450)       NOT NULL,
    [Id]                                uniqueidentifier    CONSTRAINT [CourseCodeSystemType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                  datetime            CONSTRAINT [CourseCodeSystemType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                        datetime            CONSTRAINT [CourseCodeSystemType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CourseCodeSystemType] PRIMARY KEY CLUSTERED ([CourseIdentificationSystemTypeId])
)
go



IF OBJECT_ID('edfi.CourseIdentificationSystemType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseIdentificationSystemType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseIdentificationSystemType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType', 'column', 'CourseIdentificationSystemTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType', 'column', 'CourseIdentificationSystemTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CourseCodeSystem', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType', 'column', 'CourseIdentificationSystemTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for CourseCodeSystem type.', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the course identification system type.', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. In addition to identifying courses using the appropriate state codes, cross referencing courses with one of the national course codes is encouraged.', 'schema', 'edfi', 'table', 'CourseIdentificationSystemType'
go

/* 
 * TABLE: [edfi].[CourseLearningObjective] 
 */

CREATE TABLE [edfi].[CourseLearningObjective](
    [EducationOrganizationId]          int             NOT NULL,
    [CourseCode]                       nvarchar(60)    NOT NULL,
    [Objective]                        nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]      int             NOT NULL,
    [ObjectiveGradeLevelDescriptorId]  int             NOT NULL,
    [CreateDate]                       datetime        CONSTRAINT [CourseLearningObjective_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CourseLearningObjective] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [CourseCode], [Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.CourseLearningObjective') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseLearningObjective >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseLearningObjective >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Education Organization that defines the curriculum and courses offered - often the LEA or school.', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'CourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'CourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'TThe actual code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'CourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'Objective'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'Objective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The designated title of the learning objective.', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'Objective'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade level for which the learning objective is targeted,', 'schema', 'edfi', 'table', 'CourseLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLearningObjective', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLearningObjective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Learning Objectives to be mastered in the course.', 'schema', 'edfi', 'table', 'CourseLearningObjective'
go

/* 
 * TABLE: [edfi].[CourseLearningStandard] 
 */

CREATE TABLE [edfi].[CourseLearningStandard](
    [EducationOrganizationId]  int             NOT NULL,
    [CourseCode]               nvarchar(60)    NOT NULL,
    [LearningStandardId]       nvarchar(60)    NOT NULL,
    [CreateDate]               datetime        CONSTRAINT [CourseLearningStandard_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CourseLearningStandard] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [CourseCode], [LearningStandardId])
)
go



IF OBJECT_ID('edfi.CourseLearningStandard') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseLearningStandard >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseLearningStandard >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLearningStandard', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLearningStandard', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Education Organization that defines the curriculum and courses offered - often the LEA or school.', 'schema', 'edfi', 'table', 'CourseLearningStandard', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLearningStandard', 'column', 'CourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLearningStandard', 'column', 'CourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'TThe actual code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'CourseLearningStandard', 'column', 'CourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLearningStandard', 'column', 'LearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLearningStandard', 'column', 'LearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Identifier for the specific learning standard (e.g., 111.15.3.1.A)', 'schema', 'edfi', 'table', 'CourseLearningStandard', 'column', 'LearningStandardId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLearningStandard', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLearningStandard'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Learning Standard(s) to be taught by the course.', 'schema', 'edfi', 'table', 'CourseLearningStandard'
go

/* 
 * TABLE: [edfi].[CourseLevelCharacteristic] 
 */

CREATE TABLE [edfi].[CourseLevelCharacteristic](
    [EducationOrganizationId]          int             NOT NULL,
    [CourseCode]                       nvarchar(60)    NOT NULL,
    [CourseLevelCharacteristicTypeId]  int             NOT NULL,
    [CreateDate]                       datetime        CONSTRAINT [CourseLevelCharacteristic_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CourseLevelCharacteristics] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [CourseCode], [CourseLevelCharacteristicTypeId])
)
go



IF OBJECT_ID('edfi.CourseLevelCharacteristic') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseLevelCharacteristic >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseLevelCharacteristic >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristic', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristic', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Education Organization that defines the curriculum and courses offered - often the LEA or school.', 'schema', 'edfi', 'table', 'CourseLevelCharacteristic', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristic', 'column', 'CourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristic', 'column', 'CourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'TThe actual code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'CourseLevelCharacteristic', 'column', 'CourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristic', 'column', 'CourseLevelCharacteristicTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristic', 'column', 'CourseLevelCharacteristicTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Specification of the specific program or designation associated with the course. For example: Ap, IB, Dual Credit, CTE, etc.', 'schema', 'edfi', 'table', 'CourseLevelCharacteristic', 'column', 'CourseLevelCharacteristicTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristic', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristic'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indication of the nature and difficulty of instruction: Remedial, Basic, Honors, AP, IB, Dual Credit, CTE, etc.', 'schema', 'edfi', 'table', 'CourseLevelCharacteristic'
go

/* 
 * TABLE: [edfi].[CourseLevelCharacteristicType] 
 */

CREATE TABLE [edfi].[CourseLevelCharacteristicType](
    [CourseLevelCharacteristicTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                        nvarchar(50)        NOT NULL,
    [Description]                      nvarchar(1024)      NOT NULL,
    [ShortDescription]                 nvarchar(450)       NOT NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [CourseLevelCharacteristicType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [CourseLevelCharacteristicType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [CourseLevelCharacteristicType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CourseLevelCharacteristicsType] PRIMARY KEY CLUSTERED ([CourseLevelCharacteristicTypeId])
)
go



IF OBJECT_ID('edfi.CourseLevelCharacteristicType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseLevelCharacteristicType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseLevelCharacteristicType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType', 'column', 'CourseLevelCharacteristicTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType', 'column', 'CourseLevelCharacteristicTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for CourseLevelCharacteristics type.', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType', 'column', 'CourseLevelCharacteristicTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for CourseLevelCharacteristics type.', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the course level characteristic type.', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The item for indication of the nature and difficulty of instruction: Remedial, Basic, Honors, Ap, IB, Dual Credit, CTE. etc.', 'schema', 'edfi', 'table', 'CourseLevelCharacteristicType'
go

/* 
 * TABLE: [edfi].[CourseOfferedGradeLevel] 
 */

CREATE TABLE [edfi].[CourseOfferedGradeLevel](
    [EducationOrganizationId]  int             NOT NULL,
    [CourseCode]               nvarchar(60)    NOT NULL,
    [GradeLevelDescriptorId]   int             NOT NULL,
    [CreateDate]               datetime        CONSTRAINT [CourseGradeLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CourseGradeLevel] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [CourseCode], [GradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.CourseOfferedGradeLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseOfferedGradeLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseOfferedGradeLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOfferedGradeLevel', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOfferedGradeLevel', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Education Organization that defines the curriculum and courses offered - often the LEA or school.', 'schema', 'edfi', 'table', 'CourseOfferedGradeLevel', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOfferedGradeLevel', 'column', 'CourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOfferedGradeLevel', 'column', 'CourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'TThe actual code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'CourseOfferedGradeLevel', 'column', 'CourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOfferedGradeLevel', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOfferedGradeLevel', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade levels in which the course is offered.', 'schema', 'edfi', 'table', 'CourseOfferedGradeLevel', 'column', 'GradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOfferedGradeLevel', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOfferedGradeLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade levels in which the course is offered.', 'schema', 'edfi', 'table', 'CourseOfferedGradeLevel'
go

/* 
 * TABLE: [edfi].[CourseOffering] 
 */

CREATE TABLE [edfi].[CourseOffering](
    [LocalCourseCode]           nvarchar(60)        NOT NULL,
    [SchoolId]                  int                 NOT NULL,
    [SchoolYear]                smallint            NOT NULL,
    [TermDescriptorId]          int                 NOT NULL,
    [LocalCourseTitle]          nvarchar(60)        NULL,
    [InstructionalTimePlanned]  int                 NULL,
    [CourseCode]                nvarchar(60)        NOT NULL,
    [EducationOrganizationId]   int                 NOT NULL,
    [Id]                        uniqueidentifier    CONSTRAINT [CourseOffering_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]          datetime            CONSTRAINT [CourseOffering_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                datetime            CONSTRAINT [CourseOffering_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CourseOffering] PRIMARY KEY CLUSTERED ([LocalCourseCode], [SchoolId], [SchoolYear], [TermDescriptorId])
)
go



IF OBJECT_ID('edfi.CourseOffering') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseOffering >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseOffering >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column
', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'LocalCourseTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'LocalCourseTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The descriptive name given to a course of study offered in the school, if different from the CourseTitle.', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'LocalCourseTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'InstructionalTimePlanned'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'InstructionalTimePlanned'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'InstructionalTimePlanned'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'CourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'CourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'TThe actual code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'CourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Education Organization that defines the curriculum and courses offered - often the LEA or school.
', 'schema', 'edfi', 'table', 'CourseOffering', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOffering', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOffering'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents an entry in the course catalog of available courses offered by the school during a session.', 'schema', 'edfi', 'table', 'CourseOffering'
go

/* 
 * TABLE: [edfi].[CourseOfferingCurriculumUsed] 
 */

CREATE TABLE [edfi].[CourseOfferingCurriculumUsed](
    [SchoolId]              int             NOT NULL,
    [SchoolYear]            smallint        NOT NULL,
    [LocalCourseCode]       nvarchar(60)    NOT NULL,
    [CurriculumUsedTypeId]  int             NOT NULL,
    [TermDescriptorId]      int             NOT NULL,
    [CreateDate]            datetime        CONSTRAINT [CourseOfferingCurriculumUsed_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CourseOfferingCurriculumUsed] PRIMARY KEY CLUSTERED ([SchoolId], [SchoolYear], [LocalCourseCode], [CurriculumUsedTypeId], [TermDescriptorId])
)
go



IF OBJECT_ID('edfi.CourseOfferingCurriculumUsed') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseOfferingCurriculumUsed >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseOfferingCurriculumUsed >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column
', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'CurriculumUsedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'CurriculumUsedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'CurriculumUsedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of curriculum used in an early learning classroom or group.', 'schema', 'edfi', 'table', 'CourseOfferingCurriculumUsed'
go

/* 
 * TABLE: [edfi].[CourseRepeatCodeType] 
 */

CREATE TABLE [edfi].[CourseRepeatCodeType](
    [CourseRepeatCodeTypeId]  int                 IDENTITY(1,1),
    [CodeValue]               nvarchar(50)        NOT NULL,
    [Description]             nvarchar(1024)      NOT NULL,
    [ShortDescription]        nvarchar(450)       NOT NULL,
    [Id]                      uniqueidentifier    CONSTRAINT [CourseRepeatCodeType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]        datetime            CONSTRAINT [CourseRepeatCodeType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]              datetime            CONSTRAINT [CourseRepeatCodeType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CourseRepeatCodeType] PRIMARY KEY CLUSTERED ([CourseRepeatCodeTypeId])
)
go



IF OBJECT_ID('edfi.CourseRepeatCodeType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseRepeatCodeType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseRepeatCodeType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseRepeatCodeType', 'column', 'CourseRepeatCodeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseRepeatCodeType', 'column', 'CourseRepeatCodeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CourseRepeatCode', 'schema', 'edfi', 'table', 'CourseRepeatCodeType', 'column', 'CourseRepeatCodeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseRepeatCodeType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseRepeatCodeType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for CourseRepeatCode type.', 'schema', 'edfi', 'table', 'CourseRepeatCodeType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseRepeatCodeType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseRepeatCodeType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CourseRepeatCodeType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseRepeatCodeType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseRepeatCodeType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the course repeat code type.
', 'schema', 'edfi', 'table', 'CourseRepeatCodeType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseRepeatCodeType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseRepeatCodeType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student''s academic grade average.', 'schema', 'edfi', 'table', 'CourseRepeatCodeType'
go

/* 
 * TABLE: [edfi].[CourseTranscript] 
 */

CREATE TABLE [edfi].[CourseTranscript](
    [CourseAttemptResultTypeId]        int                 NOT NULL,
    [StudentUSI]                       int                 NOT NULL,
    [EducationOrganizationId]          int                 NOT NULL,
    [CourseEducationOrganizationId]    int                 NOT NULL,
    [SchoolYear]                       smallint            NOT NULL,
    [TermDescriptorId]                 int                 NOT NULL,
    [CourseCode]                       nvarchar(60)        NOT NULL,
    [AttemptedCreditTypeId]            int                 NULL,
    [AttemptedCreditConversion]        decimal(9, 2)       NULL,
    [AttemptedCredits]                 decimal(9, 2)       NULL,
    [EarnedCreditTypeId]               int                 NULL,
    [EarnedCreditConversion]           decimal(9, 2)       NULL,
    [EarnedCredits]                    decimal(9, 2)       NOT NULL,
    [WhenTakenGradeLevelDescriptorId]  int                 NULL,
    [MethodCreditEarnedTypeId]         int                 NULL,
    [FinalLetterGradeEarned]           nvarchar(20)        NULL,
    [FinalNumericGradeEarned]          decimal(9, 2)       NULL,
    [CourseRepeatCodeTypeId]           int                 NULL,
    [SchoolId]                         int                 NULL,
    [CourseTitle]                      nvarchar(60)        NULL,
    [AlternativeCourseTitle]           nvarchar(60)        NULL,
    [AlternativeCourseCode]            nvarchar(60)        NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [CourseTranscript_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [CourseTranscript_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [CourseTranscript_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CourseTranscript] PRIMARY KEY CLUSTERED ([CourseAttemptResultTypeId], [StudentUSI], [EducationOrganizationId], [CourseEducationOrganizationId], [SchoolYear], [TermDescriptorId], [CourseCode])
)
go



IF OBJECT_ID('edfi.CourseTranscript') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseTranscript >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseTranscript >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseAttemptResultTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseAttemptResultTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The result from the student''''s attempt to take the course, for example:  Pass  Fail  Incomplete  Withdrawn  Expelled', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseAttemptResultTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column
', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.
', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'TThe actual code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AttemptedCreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AttemptedCreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Credit', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AttemptedCreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AttemptedCreditConversion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AttemptedCreditConversion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AttemptedCreditConversion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AttemptedCredits'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AttemptedCredits'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of credits attempted for a course.', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AttemptedCredits'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'EarnedCreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'EarnedCreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Credit', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'EarnedCreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'EarnedCreditConversion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'EarnedCreditConversion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'EarnedCreditConversion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'EarnedCredits'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'EarnedCredits'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of credits awarded or earned for the course.', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'EarnedCredits'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'WhenTakenGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'WhenTakenGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.
', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'WhenTakenGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'MethodCreditEarnedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'MethodCreditEarnedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The method the credits were earned, for example:  Classroom, Examination, Transfer', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'MethodCreditEarnedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'FinalLetterGradeEarned'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'FinalLetterGradeEarned'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The final indicator of student performance in a class as submitted by the instructor.', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'FinalLetterGradeEarned'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'FinalNumericGradeEarned'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'FinalNumericGradeEarned'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The final indicator of student performance in a class as submitted by the instructor.', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'FinalNumericGradeEarned'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseRepeatCodeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseRepeatCodeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student''''s academic grade average.', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseRepeatCodeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'CourseTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AlternativeCourseTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AlternativeCourseTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The descriptive name given to a course of study offered in the school, if different from the CourseTitle.', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AlternativeCourseTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AlternativeCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AlternativeCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.', 'schema', 'edfi', 'table', 'CourseTranscript', 'column', 'AlternativeCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscript'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity is the final record of a student''s performance in their courses at the end of a semester or school year.', 'schema', 'edfi', 'table', 'CourseTranscript'
go

/* 
 * TABLE: [edfi].[CourseTranscriptEarnedAdditionalCredits] 
 */

CREATE TABLE [edfi].[CourseTranscriptEarnedAdditionalCredits](
    [AdditionalCreditTypeId]         int              NOT NULL,
    [Credits]                        decimal(9, 2)    NOT NULL,
    [CreateDate]                     datetime         CONSTRAINT [CourseTranscriptAdditionalCredit_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [CourseAttemptResultTypeId]      int              NOT NULL,
    [StudentUSI]                     int              NOT NULL,
    [EducationOrganizationId]        int              NOT NULL,
    [CourseEducationOrganizationId]  int              NOT NULL,
    [SchoolYear]                     smallint         NOT NULL,
    [TermDescriptorId]               int              NOT NULL,
    [CourseCode]                     nvarchar(60)     NOT NULL,
    CONSTRAINT [PK_CourseTranscriptAdditionalCredit] PRIMARY KEY CLUSTERED ([AdditionalCreditTypeId], [CourseAttemptResultTypeId], [StudentUSI], [EducationOrganizationId], [CourseEducationOrganizationId], [SchoolYear], [TermDescriptorId], [CourseCode])
)
go



IF OBJECT_ID('edfi.CourseTranscriptEarnedAdditionalCredits') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CourseTranscriptEarnedAdditionalCredits >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CourseTranscriptEarnedAdditionalCredits >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'AdditionalCreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'AdditionalCreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of credits awarded or earned for the course.', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'AdditionalCreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'Credits'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'Credits'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of credits awarded or earned for the course.', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'Credits'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'CourseAttemptResultTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'CourseAttemptResultTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The result from the student''''s attempt to take the course, for example:  Pass  Fail  Incomplete  Withdrawn  Expelled', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'CourseAttemptResultTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'CourseEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'CourseEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column
', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'CourseEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.
', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'CourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'CourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'TThe actual code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', 'column', 'CourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Additional credits or units of value awarded for the completion of a course (e.g., AP, IB, Dual Credits).', 'schema', 'edfi', 'table', 'CourseTranscriptEarnedAdditionalCredits'
go

/* 
 * TABLE: [edfi].[CredentialFieldDescriptor] 
 */

CREATE TABLE [edfi].[CredentialFieldDescriptor](
    [CredentialFieldDescriptorId]  int    NOT NULL,
    [AcademicSubjectDescriptorId]  int    NULL,
    CONSTRAINT [PK_CredentialFieldDescriptor] PRIMARY KEY CLUSTERED ([CredentialFieldDescriptorId])
)
go



IF OBJECT_ID('edfi.CredentialFieldDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CredentialFieldDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CredentialFieldDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CredentialFieldDescriptor', 'column', 'CredentialFieldDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CredentialFieldDescriptor', 'column', 'CredentialFieldDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Credential Field Descriptor', 'schema', 'edfi', 'table', 'CredentialFieldDescriptor', 'column', 'CredentialFieldDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CredentialFieldDescriptor', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CredentialFieldDescriptor', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'CredentialFieldDescriptor', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CredentialFieldDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CredentialFieldDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the fields of certification that the state education agency offers to teachers.', 'schema', 'edfi', 'table', 'CredentialFieldDescriptor'
go

/* 
 * TABLE: [edfi].[CredentialType] 
 */

CREATE TABLE [edfi].[CredentialType](
    [CredentialTypeId]  int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [CredentialType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [CredentialType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [CredentialType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CredentialType] PRIMARY KEY CLUSTERED ([CredentialTypeId])
)
go



IF OBJECT_ID('edfi.CredentialType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CredentialType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CredentialType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CredentialType', 'column', 'CredentialTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CredentialType', 'column', 'CredentialTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Credential', 'schema', 'edfi', 'table', 'CredentialType', 'column', 'CredentialTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CredentialType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CredentialType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Credential type.', 'schema', 'edfi', 'table', 'CredentialType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CredentialType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CredentialType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CredentialType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CredentialType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CredentialType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the credential type.', 'schema', 'edfi', 'table', 'CredentialType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CredentialType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CredentialType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the category of credential an individual holds.', 'schema', 'edfi', 'table', 'CredentialType'
go

/* 
 * TABLE: [edfi].[CreditType] 
 */

CREATE TABLE [edfi].[CreditType](
    [CreditTypeId]      int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [CreditType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [CreditType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [CreditType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CreditType] PRIMARY KEY CLUSTERED ([CreditTypeId])
)
go



IF OBJECT_ID('edfi.CreditType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CreditType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CreditType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CreditType', 'column', 'CreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CreditType', 'column', 'CreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Credit', 'schema', 'edfi', 'table', 'CreditType', 'column', 'CreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CreditType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CreditType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Credit type.', 'schema', 'edfi', 'table', 'CreditType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CreditType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CreditType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CreditType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CreditType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CreditType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the credit type.', 'schema', 'edfi', 'table', 'CreditType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CreditType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CreditType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of credits or units of value awarded for the completion of a course.', 'schema', 'edfi', 'table', 'CreditType'
go

/* 
 * TABLE: [edfi].[CurriculumUsedType] 
 */

CREATE TABLE [edfi].[CurriculumUsedType](
    [CurriculumUsedTypeId]  int                 IDENTITY(1,1),
    [CodeValue]             nvarchar(50)        NOT NULL,
    [ShortDescription]      nvarchar(450)       NOT NULL,
    [Description]           nvarchar(1024)      NOT NULL,
    [Id]                    uniqueidentifier    CONSTRAINT [CurriculumUsedType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]      datetime            CONSTRAINT [CurriculumUsedType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]            datetime            CONSTRAINT [CurriculumUsedType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_CurriculumUsedType] PRIMARY KEY CLUSTERED ([CurriculumUsedTypeId])
)
go



IF OBJECT_ID('edfi.CurriculumUsedType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.CurriculumUsedType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.CurriculumUsedType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CurriculumUsedType', 'column', 'CurriculumUsedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CurriculumUsedType', 'column', 'CurriculumUsedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'CurriculumUsedType', 'column', 'CurriculumUsedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CurriculumUsedType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CurriculumUsedType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'CurriculumUsedType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CurriculumUsedType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CurriculumUsedType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'CurriculumUsedType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CurriculumUsedType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CurriculumUsedType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'CurriculumUsedType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'CurriculumUsedType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'CurriculumUsedType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of curriculum used in an early learning classroom or group.', 'schema', 'edfi', 'table', 'CurriculumUsedType'
go

/* 
 * TABLE: [edfi].[DeliveryMethodType] 
 */

CREATE TABLE [edfi].[DeliveryMethodType](
    [DeliveryMethodTypeId]  int                 IDENTITY(1,1),
    [ShortDescription]      nvarchar(450)       NOT NULL,
    [CodeValue]             nvarchar(50)        NULL,
    [Description]           nvarchar(1024)      NULL,
    [Id]                    uniqueidentifier    CONSTRAINT [DeliveryMethodType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]      datetime            CONSTRAINT [DeliveryMethodType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]            datetime            CONSTRAINT [DeliveryMethodType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DeliveryMethodType] PRIMARY KEY CLUSTERED ([DeliveryMethodTypeId])
)
go



IF OBJECT_ID('edfi.DeliveryMethodType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DeliveryMethodType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DeliveryMethodType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DeliveryMethodType', 'column', 'DeliveryMethodTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DeliveryMethodType', 'column', 'DeliveryMethodTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'DeliveryMethodType', 'column', 'DeliveryMethodTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DeliveryMethodType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DeliveryMethodType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'DeliveryMethodType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DeliveryMethodType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DeliveryMethodType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for delivery method type.', 'schema', 'edfi', 'table', 'DeliveryMethodType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DeliveryMethodType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DeliveryMethodType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description of delivery method type.', 'schema', 'edfi', 'table', 'DeliveryMethodType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DeliveryMethodType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DeliveryMethodType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The way in which an intervention was implemented: individual, small group, whole class, or whole school.', 'schema', 'edfi', 'table', 'DeliveryMethodType'
go

/* 
 * TABLE: [edfi].[Descriptor] 
 */

CREATE TABLE [edfi].[Descriptor](
    [DescriptorId]        int                 IDENTITY(1,1),
    [Namespace]           nvarchar(255)       NOT NULL,
    [CodeValue]           nvarchar(50)        NOT NULL,
    [ShortDescription]    nvarchar(75)        NOT NULL,
    [Description]         nvarchar(1024)      NULL,
    [PriorDescriptorId]   int                 NULL,
    [EffectiveBeginDate]  date                NULL,
    [EffectiveEndDate]    date                NULL,
    [Id]                  uniqueidentifier    CONSTRAINT [Descriptor_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]    datetime            CONSTRAINT [Descriptor_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]          datetime            CONSTRAINT [Descriptor_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Descriptor] PRIMARY KEY CLUSTERED ([DescriptorId]),
    CONSTRAINT [UK_Descriptor] UNIQUE NONCLUSTERED ([Namespace], [CodeValue])
        WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF)
)
go



IF OBJECT_ID('edfi.Descriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Descriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Descriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'DescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'DescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'DescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'Namespace'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'Namespace'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'Namespace'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'PriorDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'PriorDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'PriorDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'EffectiveBeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'EffectiveBeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'EffectiveBeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'EffectiveEndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'EffectiveEndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The end date of the period when the descriptor is in effect.', 'schema', 'edfi', 'table', 'Descriptor', 'column', 'EffectiveEndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Descriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Descriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This is the base entity for the descriptor pattern.', 'schema', 'edfi', 'table', 'Descriptor'
go

/* 
 * TABLE: [edfi].[DiagnosisDescriptor] 
 */

CREATE TABLE [edfi].[DiagnosisDescriptor](
    [DiagnosisDescriptorId]  int    NOT NULL,
    [DiagnosisTypeId]        int    NULL,
    CONSTRAINT [PK_DiagnosisDescriptor] PRIMARY KEY CLUSTERED ([DiagnosisDescriptorId])
)
go



IF OBJECT_ID('edfi.DiagnosisDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DiagnosisDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DiagnosisDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiagnosisDescriptor', 'column', 'DiagnosisDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiagnosisDescriptor', 'column', 'DiagnosisDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'DiagnosisDescriptor', 'column', 'DiagnosisDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiagnosisDescriptor', 'column', 'DiagnosisTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiagnosisDescriptor', 'column', 'DiagnosisTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'DiagnosisDescriptor', 'column', 'DiagnosisTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiagnosisDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiagnosisDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines diagnoses that interventions are intended to target.', 'schema', 'edfi', 'table', 'DiagnosisDescriptor'
go

/* 
 * TABLE: [edfi].[DiagnosisType] 
 */

CREATE TABLE [edfi].[DiagnosisType](
    [DiagnosisTypeId]   int                 IDENTITY(1,1),
    [Description]       nvarchar(1024)      NULL,
    [CodeValue]         nvarchar(50)        NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [DiagnosisType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [DiagnosisType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [DiagnosisType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DiagnosisType] PRIMARY KEY CLUSTERED ([DiagnosisTypeId])
)
go



IF OBJECT_ID('edfi.DiagnosisType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DiagnosisType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DiagnosisType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiagnosisType', 'column', 'DiagnosisTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiagnosisType', 'column', 'DiagnosisTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'DiagnosisType', 'column', 'DiagnosisTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiagnosisType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiagnosisType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'DiagnosisType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiagnosisType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiagnosisType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'DiagnosisType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiagnosisType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiagnosisType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'DiagnosisType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiagnosisType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiagnosisType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Targeted purpose of the intervention (e.g., attendance issue, dropout risk).', 'schema', 'edfi', 'table', 'DiagnosisType'
go

/* 
 * TABLE: [edfi].[DiplomaLevelType] 
 */

CREATE TABLE [edfi].[DiplomaLevelType](
    [DiplomaLevelTypeId]  int                 IDENTITY(1,1),
    [CodeValue]           nvarchar(50)        NOT NULL,
    [Description]         nvarchar(1024)      NOT NULL,
    [ShortDescription]    nvarchar(450)       NOT NULL,
    [Id]                  uniqueidentifier    CONSTRAINT [DiplomaLevelType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]    datetime            CONSTRAINT [DiplomaLevelType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]          datetime            CONSTRAINT [DiplomaLevelType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DiplomaLevelType] PRIMARY KEY CLUSTERED ([DiplomaLevelTypeId])
)
go



IF OBJECT_ID('edfi.DiplomaLevelType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DiplomaLevelType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DiplomaLevelType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiplomaLevelType', 'column', 'DiplomaLevelTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiplomaLevelType', 'column', 'DiplomaLevelTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for DiplomaLevel', 'schema', 'edfi', 'table', 'DiplomaLevelType', 'column', 'DiplomaLevelTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiplomaLevelType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiplomaLevelType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for DiplomaLevel type.', 'schema', 'edfi', 'table', 'DiplomaLevelType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiplomaLevelType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiplomaLevelType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'DiplomaLevelType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiplomaLevelType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiplomaLevelType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the diploma level type.', 'schema', 'edfi', 'table', 'DiplomaLevelType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiplomaLevelType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiplomaLevelType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The level of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.', 'schema', 'edfi', 'table', 'DiplomaLevelType'
go

/* 
 * TABLE: [edfi].[DiplomaType] 
 */

CREATE TABLE [edfi].[DiplomaType](
    [DiplomaTypeId]     int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [DiplomaType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [DiplomaType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [DiplomaType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DiplomaType] PRIMARY KEY CLUSTERED ([DiplomaTypeId])
)
go



IF OBJECT_ID('edfi.DiplomaType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DiplomaType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DiplomaType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiplomaType', 'column', 'DiplomaTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiplomaType', 'column', 'DiplomaTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Diploma', 'schema', 'edfi', 'table', 'DiplomaType', 'column', 'DiplomaTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiplomaType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiplomaType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Diploma type.', 'schema', 'edfi', 'table', 'DiplomaType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiplomaType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiplomaType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'DiplomaType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiplomaType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiplomaType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the diploma type.', 'schema', 'edfi', 'table', 'DiplomaType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DiplomaType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DiplomaType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements...', 'schema', 'edfi', 'table', 'DiplomaType'
go

/* 
 * TABLE: [edfi].[DisabilityCategoryType] 
 */

CREATE TABLE [edfi].[DisabilityCategoryType](
    [DisabilityCategoryTypeId]  int                 IDENTITY(1,1),
    [ShortDescription]          nvarchar(450)       NOT NULL,
    [CodeValue]                 nvarchar(50)        NULL,
    [Description]               nvarchar(1024)      NULL,
    [Id]                        uniqueidentifier    CONSTRAINT [DisabilityCategoryType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]          datetime            CONSTRAINT [DisabilityCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                datetime            CONSTRAINT [DisabilityCategoryType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DisabilityCategoryType] PRIMARY KEY CLUSTERED ([DisabilityCategoryTypeId])
)
go



IF OBJECT_ID('edfi.DisabilityCategoryType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DisabilityCategoryType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DisabilityCategoryType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityCategoryType', 'column', 'DisabilityCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityCategoryType', 'column', 'DisabilityCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'DisabilityCategoryType', 'column', 'DisabilityCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityCategoryType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityCategoryType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the disability category type.', 'schema', 'edfi', 'table', 'DisabilityCategoryType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityCategoryType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityCategoryType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for disability category type.', 'schema', 'edfi', 'table', 'DisabilityCategoryType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityCategoryType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityCategoryType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the disability category type.', 'schema', 'edfi', 'table', 'DisabilityCategoryType', 'column', 'Description'
go

/* 
 * TABLE: [edfi].[DisabilityDescriptor] 
 */

CREATE TABLE [edfi].[DisabilityDescriptor](
    [DisabilityDescriptorId]    int    NOT NULL,
    [DisabilityCategoryTypeId]  int    NOT NULL,
    [DisabilityTypeId]          int    NULL,
    CONSTRAINT [PK_DisabilityDescriptor] PRIMARY KEY CLUSTERED ([DisabilityDescriptorId])
)
go



IF OBJECT_ID('edfi.DisabilityDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DisabilityDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DisabilityDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityDescriptor', 'column', 'DisabilityDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityDescriptor', 'column', 'DisabilityDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'DisabilityDescriptor', 'column', 'DisabilityDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityDescriptor', 'column', 'DisabilityCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityDescriptor', 'column', 'DisabilityCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'DisabilityDescriptor', 'column', 'DisabilityCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityDescriptor', 'column', 'DisabilityTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityDescriptor', 'column', 'DisabilityTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Disability', 'schema', 'edfi', 'table', 'DisabilityDescriptor', 'column', 'DisabilityTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines a student''s impairment.', 'schema', 'edfi', 'table', 'DisabilityDescriptor'
go

/* 
 * TABLE: [edfi].[DisabilityDeterminationSourceType] 
 */

CREATE TABLE [edfi].[DisabilityDeterminationSourceType](
    [DisabilityDeterminationSourceTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                            nvarchar(50)        NOT NULL,
    [Description]                          nvarchar(1024)      NOT NULL,
    [ShortDescription]                     nvarchar(450)       NOT NULL,
    [Id]                                   uniqueidentifier    CONSTRAINT [DisabilityDeterminationSourceType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                     datetime            CONSTRAINT [DisabilityDeterminationSourceType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                           datetime            CONSTRAINT [DisabilityDeterminationSourceType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DisabilityDeterminiationSourceType] PRIMARY KEY CLUSTERED ([DisabilityDeterminationSourceTypeId])
)
go



IF OBJECT_ID('edfi.DisabilityDeterminationSourceType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DisabilityDeterminationSourceType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DisabilityDeterminationSourceType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType', 'column', 'DisabilityDeterminationSourceTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType', 'column', 'DisabilityDeterminationSourceTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Disability Determination Source Type', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType', 'column', 'DisabilityDeterminationSourceTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code of the Disability Determination Source Type.', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description of the Disability Determination Source Type.', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Short description of the Disability Determination Source Type.', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The source that provided the disability determination.', 'schema', 'edfi', 'table', 'DisabilityDeterminationSourceType'
go

/* 
 * TABLE: [edfi].[DisabilityType] 
 */

CREATE TABLE [edfi].[DisabilityType](
    [DisabilityTypeId]  int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [DisabilityType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [DisabilityType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [DisabilityType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DisabilityType] PRIMARY KEY CLUSTERED ([DisabilityTypeId])
)
go



IF OBJECT_ID('edfi.DisabilityType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DisabilityType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DisabilityType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityType', 'column', 'DisabilityTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityType', 'column', 'DisabilityTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Disability', 'schema', 'edfi', 'table', 'DisabilityType', 'column', 'DisabilityTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Disability type.', 'schema', 'edfi', 'table', 'DisabilityType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for Disability type.', 'schema', 'edfi', 'table', 'DisabilityType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Short description for the disability type.', 'schema', 'edfi', 'table', 'DisabilityType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisabilityType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisabilityType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates the type of disability condition that describes a child''s impairment.', 'schema', 'edfi', 'table', 'DisabilityType'
go

/* 
 * TABLE: [edfi].[DisciplineAction] 
 */

CREATE TABLE [edfi].[DisciplineAction](
    [DisciplineActionIdentifier]                    nvarchar(20)        NOT NULL,
    [StudentUSI]                                    int                 NOT NULL,
    [DisciplineDate]                                date                NOT NULL,
    [DisciplineActionLength]                        int                 NULL,
    [ActualDisciplineActionLength]                  int                 NULL,
    [DisciplineActionLengthDifferenceReasonTypeId]  int                 NULL,
    [RelatedToZeroTolerancePolicy]                  bit                 NULL,
    [ResponsibilitySchoolId]                        int                 NOT NULL,
    [AssignmentSchoolId]                            int                 NULL,
    [Id]                                            uniqueidentifier    CONSTRAINT [DisciplineAction_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                              datetime            CONSTRAINT [DisciplineAction_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                                    datetime            CONSTRAINT [DisciplineAction_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DisciplineAction] PRIMARY KEY CLUSTERED ([DisciplineActionIdentifier], [StudentUSI], [DisciplineDate])
)
go



IF OBJECT_ID('edfi.DisciplineAction') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DisciplineAction >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DisciplineAction >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'DisciplineActionIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'DisciplineActionIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifier assigned by the education organization to the discipline action.', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'DisciplineActionIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'DisciplineDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'DisciplineDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date of the DisciplineAction.', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'DisciplineDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'DisciplineActionLength'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'DisciplineActionLength'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The length of time in school days for the Discipline Action (e.g. removal, detention), if applicable.', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'DisciplineActionLength'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'ActualDisciplineActionLength'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'ActualDisciplineActionLength'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates the actual length in school days of a student''s disciplinary assignment.', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'ActualDisciplineActionLength'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'DisciplineActionLengthDifferenceReasonTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'DisciplineActionLengthDifferenceReasonTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for DisciplineActionLengthDifferenceReason', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'DisciplineActionLengthDifferenceReasonTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'RelatedToZeroTolerancePolicy'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'RelatedToZeroTolerancePolicy'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'RelatedToZeroTolerancePolicy'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'ResponsibilitySchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'ResponsibilitySchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School responsible for student''s discipline.', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'ResponsibilitySchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'AssignmentSchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'AssignmentSchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Optional school where student is transferred for discipline.', 'schema', 'edfi', 'table', 'DisciplineAction', 'column', 'AssignmentSchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineAction'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This event entity represents actions taken by an education organization after a disruptive event that is recorded as a discipline incident.', 'schema', 'edfi', 'table', 'DisciplineAction'
go

/* 
 * TABLE: [edfi].[DisciplineActionDiscipline] 
 */

CREATE TABLE [edfi].[DisciplineActionDiscipline](
    [StudentUSI]                  int             NOT NULL,
    [DisciplineActionIdentifier]  nvarchar(20)    NOT NULL,
    [DisciplineDate]              date            NOT NULL,
    [DisciplineDescriptorId]      int             NOT NULL,
    [CreateDate]                  datetime        CONSTRAINT [DisciplineActionDiscipline_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DisciplineActionDiscipline] PRIMARY KEY CLUSTERED ([StudentUSI], [DisciplineActionIdentifier], [DisciplineDate], [DisciplineDescriptorId])
)
go



IF OBJECT_ID('edfi.DisciplineActionDiscipline') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DisciplineActionDiscipline >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DisciplineActionDiscipline >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline', 'column', 'DisciplineActionIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline', 'column', 'DisciplineActionIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifier assigned by the education organization to the discipline action.', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline', 'column', 'DisciplineActionIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline', 'column', 'DisciplineDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline', 'column', 'DisciplineDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day and year of the discipline action.', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline', 'column', 'DisciplineDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline', 'column', 'DisciplineDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline', 'column', 'DisciplineDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Discipline Descriptor', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline', 'column', 'DisciplineDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.', 'schema', 'edfi', 'table', 'DisciplineActionDiscipline'
go

/* 
 * TABLE: [edfi].[DisciplineActionDisciplineIncident] 
 */

CREATE TABLE [edfi].[DisciplineActionDisciplineIncident](
    [StudentUSI]                  int             NOT NULL,
    [DisciplineActionIdentifier]  nvarchar(20)    NOT NULL,
    [DisciplineDate]              date            NOT NULL,
    [SchoolId]                    int             NOT NULL,
    [IncidentIdentifier]          nvarchar(20)    NOT NULL,
    [CreateDate]                  datetime        CONSTRAINT [DisciplineActionDisciplineIncident_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DisciplineActionDisciplineIncident] PRIMARY KEY CLUSTERED ([StudentUSI], [DisciplineActionIdentifier], [DisciplineDate], [SchoolId], [IncidentIdentifier])
)
go



IF OBJECT_ID('edfi.DisciplineActionDisciplineIncident') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DisciplineActionDisciplineIncident >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DisciplineActionDisciplineIncident >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'DisciplineActionIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'DisciplineActionIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifier assigned by the education organization to the DisciplineAction.', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'DisciplineActionIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'DisciplineDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'DisciplineDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date of the DisciplineAction.', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'DisciplineDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'IncidentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'IncidentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.', 'schema', 'edfi', 'table', 'DisciplineActionDisciplineIncident', 'column', 'IncidentIdentifier'
go

/* 
 * TABLE: [edfi].[DisciplineActionLengthDifferenceReasonType] 
 */

CREATE TABLE [edfi].[DisciplineActionLengthDifferenceReasonType](
    [DisciplineActionLengthDifferenceReasonTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                                     nvarchar(50)        NOT NULL,
    [Description]                                   nvarchar(1024)      NOT NULL,
    [ShortDescription]                              nvarchar(450)       NOT NULL,
    [Id]                                            uniqueidentifier    CONSTRAINT [DisciplineActionLengthDifferenceReasonType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                              datetime            CONSTRAINT [DisciplineActionLengthDifferenceReasonType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                                    datetime            CONSTRAINT [DisciplineActionLengthDifferenceReasonType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DisciplineActionLengthDifferenceReasonType] PRIMARY KEY CLUSTERED ([DisciplineActionLengthDifferenceReasonTypeId])
)
go



IF OBJECT_ID('edfi.DisciplineActionLengthDifferenceReasonType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DisciplineActionLengthDifferenceReasonType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DisciplineActionLengthDifferenceReasonType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType', 'column', 'DisciplineActionLengthDifferenceReasonTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType', 'column', 'DisciplineActionLengthDifferenceReasonTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for DisciplineActionLengthDifferenceReason', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType', 'column', 'DisciplineActionLengthDifferenceReasonTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for DisciplineActionLengthDifferenceReason type.', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the discipline action length difference reason type.', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates the reason for the difference, if any, between the official and actual lengths of a student''s disciplinary assignment.', 'schema', 'edfi', 'table', 'DisciplineActionLengthDifferenceReasonType'
go

/* 
 * TABLE: [edfi].[DisciplineActionStaff] 
 */

CREATE TABLE [edfi].[DisciplineActionStaff](
    [StudentUSI]                  int             NOT NULL,
    [DisciplineActionIdentifier]  nvarchar(20)    NOT NULL,
    [DisciplineDate]              date            NOT NULL,
    [StaffUSI]                    int             NOT NULL,
    [CreateDate]                  datetime        CONSTRAINT [DisciplineActionStaff_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DisciplineActionStaff] PRIMARY KEY CLUSTERED ([StudentUSI], [DisciplineActionIdentifier], [DisciplineDate], [StaffUSI])
)
go



IF OBJECT_ID('edfi.DisciplineActionStaff') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DisciplineActionStaff >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DisciplineActionStaff >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionStaff', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionStaff', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'DisciplineActionStaff', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionStaff', 'column', 'DisciplineActionIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionStaff', 'column', 'DisciplineActionIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifier assigned by the education organization to the discipline action.', 'schema', 'edfi', 'table', 'DisciplineActionStaff', 'column', 'DisciplineActionIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionStaff', 'column', 'DisciplineDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionStaff', 'column', 'DisciplineDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day and year of the discipline action.', 'schema', 'edfi', 'table', 'DisciplineActionStaff', 'column', 'DisciplineDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionStaff', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionStaff', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'DisciplineActionStaff', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionStaff', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineActionStaff'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The staff responsible for enforcing the discipline action.', 'schema', 'edfi', 'table', 'DisciplineActionStaff'
go

/* 
 * TABLE: [edfi].[DisciplineDescriptor] 
 */

CREATE TABLE [edfi].[DisciplineDescriptor](
    [DisciplineDescriptorId]  int    NOT NULL,
    [DisciplineTypeId]        int    NULL,
    CONSTRAINT [PK_DisciplineDescriptor] PRIMARY KEY CLUSTERED ([DisciplineDescriptorId])
)
go



IF OBJECT_ID('edfi.DisciplineDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DisciplineDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DisciplineDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineDescriptor', 'column', 'DisciplineDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineDescriptor', 'column', 'DisciplineDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Discipline Descriptor', 'schema', 'edfi', 'table', 'DisciplineDescriptor', 'column', 'DisciplineDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineDescriptor', 'column', 'DisciplineTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineDescriptor', 'column', 'DisciplineTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'DisciplineDescriptor', 'column', 'DisciplineTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the type of action or removal from the classroom used to discipline the student involved as a perpetrator in a discipline incident.', 'schema', 'edfi', 'table', 'DisciplineDescriptor'
go

/* 
 * TABLE: [edfi].[DisciplineIncident] 
 */

CREATE TABLE [edfi].[DisciplineIncident](
    [IncidentIdentifier]               nvarchar(20)        NOT NULL,
    [SchoolId]                         int                 NOT NULL,
    [IncidentDate]                     date                NOT NULL,
    [IncidentTime]                     time(7)             NULL,
    [IncidentLocationTypeId]           int                 NULL,
    [IncidentDescription]              nvarchar(1024)      NULL,
    [ReporterDescriptionDescriptorId]  int                 NULL,
    [ReporterName]                     nvarchar(75)        NULL,
    [ReportedToLawEnforcement]         bit                 NULL,
    [CaseNumber]                       nvarchar(20)        NULL,
    [IncidentCost]                     money               NULL,
    [StaffUSI]                         int                 NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [DisciplineIncident_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [DisciplineIncident_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [DisciplineIncident_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DisciplineIncident] PRIMARY KEY CLUSTERED ([IncidentIdentifier], [SchoolId])
)
go



IF OBJECT_ID('edfi.DisciplineIncident') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DisciplineIncident >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DisciplineIncident >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A locally assigned unique identifier (within the school or school district) to identify each specific incident or occurrence. The same identifier should be used to document the entire incident even if it included multiple offenses and multiple offenders.', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the DisciplineIncident occurred.', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentTime'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentTime'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the time of day the incident took place.', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentTime'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentLocationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentLocationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifies where the incident occurred and whether or not it occurred on campus, for example:  On campus  Administrative offices area  Cafeteria area  Classroom  Hallway or stairs  ...', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentLocationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description for an incident.', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'ReporterDescriptionDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'ReporterDescriptionDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Information on the type of individual who reported the incident. When known and/or if useful, use a more specific option code (e.g., "Counselor" rather than "Professional Staff"); for example:Student  Parent/guardian  Law enforcement officer  Nonschool personnel  Representative of visiting school  ...', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'ReporterDescriptionDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'ReporterName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'ReporterName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifies the reporter of the incident by name.', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'ReporterName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'ReportedToLawEnforcement'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'ReportedToLawEnforcement'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator of whether the incident was reported to law enforcement.', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'ReportedToLawEnforcement'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'CaseNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'CaseNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The case number assigned to the incident by law enforcement or other organization.', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'CaseNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentCost'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentCost'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The value of any quantifiable monetary loss directly resulting from the DisciplineIncident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'IncidentCost'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'DisciplineIncident', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncident'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This event entity represents an occurrence of an infraction ranging from a minor heavioral problem that disrupts the orderly functioning of a school or classroom (such as tardiness) to a criminal act that results in the involvement of a law enforcement official (such as robbery). A single event (e.g., a fight) is one incident regardless of how many perpetrators or victims are involved. Discipline incidents are events classified as warranting discipline action.', 'schema', 'edfi', 'table', 'DisciplineIncident'
go

/* 
 * TABLE: [edfi].[DisciplineIncidentBehavior] 
 */

CREATE TABLE [edfi].[DisciplineIncidentBehavior](
    [SchoolId]                     int               NOT NULL,
    [IncidentIdentifier]           nvarchar(20)      NOT NULL,
    [BehaviorDescriptorId]         int               NOT NULL,
    [BehaviorDetailedDescription]  nvarchar(1024)    NULL,
    [CreateDate]                   datetime          CONSTRAINT [DisciplineIncidentBehavior_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DisciplineIncidentBehavior] PRIMARY KEY CLUSTERED ([SchoolId], [IncidentIdentifier], [BehaviorDescriptorId])
)
go



IF OBJECT_ID('edfi.DisciplineIncidentBehavior') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DisciplineIncidentBehavior >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DisciplineIncidentBehavior >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior', 'column', 'IncidentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior', 'column', 'IncidentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A locally assigned unique identifier (within the school or school district) to identify each specific incident or occurrence. The same identifier should be used to document the entire incident even if it included multiple offenses and multiple offenders.', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior', 'column', 'IncidentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior', 'column', 'BehaviorDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior', 'column', 'BehaviorDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Behavior Descriptor', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior', 'column', 'BehaviorDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior', 'column', 'BehaviorDetailedDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior', 'column', 'BehaviorDetailedDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Specifies a more granular level of detail of a behavior involved in the incident.', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior', 'column', 'BehaviorDetailedDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The categories of behavior describing a discipline incident.', 'schema', 'edfi', 'table', 'DisciplineIncidentBehavior'
go

/* 
 * TABLE: [edfi].[DisciplineIncidentWeapon] 
 */

CREATE TABLE [edfi].[DisciplineIncidentWeapon](
    [SchoolId]            int             NOT NULL,
    [IncidentIdentifier]  nvarchar(20)    NOT NULL,
    [WeaponDescriptorId]  int             NOT NULL,
    [CreateDate]          datetime        CONSTRAINT [DisciplineIncidentWeapon_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DisciplineIncidentWeapons] PRIMARY KEY CLUSTERED ([SchoolId], [IncidentIdentifier], [WeaponDescriptorId])
)
go



IF OBJECT_ID('edfi.DisciplineIncidentWeapon') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DisciplineIncidentWeapon >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DisciplineIncidentWeapon >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentWeapon', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentWeapon', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'DisciplineIncidentWeapon', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentWeapon', 'column', 'IncidentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentWeapon', 'column', 'IncidentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A locally assigned unique identifier (within the school or school district) to identify each specific incident or occurrence. The same identifier should be used to document the entire incident even if it included multiple offenses and multiple offenders.', 'schema', 'edfi', 'table', 'DisciplineIncidentWeapon', 'column', 'IncidentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentWeapon', 'column', 'WeaponDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentWeapon', 'column', 'WeaponDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'DisciplineIncidentWeapon', 'column', 'WeaponDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentWeapon', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineIncidentWeapon'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifies the type of weapon used during an incident.', 'schema', 'edfi', 'table', 'DisciplineIncidentWeapon'
go

/* 
 * TABLE: [edfi].[DisciplineType] 
 */

CREATE TABLE [edfi].[DisciplineType](
    [DisciplineTypeId]  int                 IDENTITY(1,1),
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Description]       nvarchar(1024)      NULL,
    [CodeValue]         nvarchar(50)        NULL,
    [Id]                uniqueidentifier    CONSTRAINT [DisciplineType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [DisciplineType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [DisciplineType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DisciplineType] PRIMARY KEY CLUSTERED ([DisciplineTypeId])
)
go



IF OBJECT_ID('edfi.DisciplineType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.DisciplineType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.DisciplineType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineType', 'column', 'DisciplineTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineType', 'column', 'DisciplineTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'DisciplineType', 'column', 'DisciplineTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'DisciplineType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'DisciplineType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for discipline type.', 'schema', 'edfi', 'table', 'DisciplineType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'DisciplineType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'DisciplineType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The category of discipline action.', 'schema', 'edfi', 'table', 'DisciplineType'
go

/* 
 * TABLE: [edfi].[EdFiException] 
 */

CREATE TABLE [edfi].[EdFiException](
    [EdFiExceptionId]      int               IDENTITY(1,1),
    [TableName]            nvarchar(255)     NULL,
    [ColumnNameList]       nvarchar(4000)    NULL,
    [ColumnValueList]      nvarchar(4000)    NULL,
    [ErrorMessage]         nvarchar(4000)    NULL,
    [IdentifierCondition]  nvarchar(4000)    NULL,
    [LookupCondition]      nvarchar(4000)    NULL,
    [ExceptionLevel]       nvarchar(20)      NULL,
    [StartTime]            datetime          NULL,
    [PackageName]          nvarchar(255)     NULL,
    [TaskName]             nvarchar(255)     NULL,
    [ComponentName]        nvarchar(255)     NULL,
    [ErrorCode]            int               NULL,
    [ErrorDescription]     nvarchar(1000)    NULL,
    [ErrorColumn]          int               NULL,
    [ErrorColumnName]      nvarchar(255)     NULL,
    CONSTRAINT [PK_EdFiException] PRIMARY KEY CLUSTERED ([EdFiExceptionId])
)
go



IF OBJECT_ID('edfi.EdFiException') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EdFiException >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EdFiException >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'EdFiExceptionId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'EdFiExceptionId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'EdFiExceptionId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'TableName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'TableName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This is the table name that the exception is associated with (e.g. destination tables, lookup data source tables).', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'TableName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ColumnNameList'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ColumnNameList'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This is a list of columns in the table that the exception is associated with.', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ColumnNameList'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ColumnValueList'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ColumnValueList'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This is an ordered list of column values with the same order as the corresponding column name list.', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ColumnValueList'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorMessage'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorMessage'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Contains detail error messages if available. For Destination components, it is the same as run-time error messages returned by SQL Server as if an insert statement was executed. This column is populated at the end of the build (instead of during SSIS execution).', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorMessage'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'IdentifierCondition'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'IdentifierCondition'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Contains column names and values that can be used to identify a row in the data flow and they are typically the primary keys or unique keys of the Destination component. It is in a format that is ready to be used in a T-SQL where clause.', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'IdentifierCondition'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'LookupCondition'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'LookupCondition'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Contains column names and values that can be used to identify a row in the data source of the Lookup Transformation component. It is in a format that is ready to be used in a T-SQL where clause. This column is applicable to exceptions from Lookup Transformation components only.', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'LookupCondition'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ExceptionLevel'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ExceptionLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Possible values are Error, Warning, and Information. Exceptions that would have caused the package to fail should be set to Error. Exceptions that were originally ignored should have a level of Warning.', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ExceptionLevel'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'StartTime'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'StartTime'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Timestamp when the exception occurred.', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'StartTime'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'PackageName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'PackageName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Name of the SSIS package.', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'PackageName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'TaskName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'TaskName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Name of the task in the Control Flow.', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'TaskName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ComponentName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ComponentName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Name of the component that captured the exception data (i.e.: the name property of the EdFiException component)', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ComponentName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This is provided by SSIS error output to identify the error. It contains the error number that caused the row to be rejected.', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description of ErrorCode provided by an SSIS API.', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorColumn'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorColumn'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This is also provided by SSIS error output. It contains the lineage identifier of the error column which is unique to a data flow within the package.', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorColumn'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorColumnName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorColumnName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This is meant to be the column name associated with ErrorColumn but it is not currently populated due to lack of available SSIS APIs. This might change in future versions of SSIS. For now, to view the metadata of ErrorColumn, click the path that connects the error output to the next component in the Data Flow.', 'schema', 'edfi', 'table', 'EdFiException', 'column', 'ErrorColumnName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EdFiException', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EdFiException'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Compiles exception data and stores for further troubleshooting.', 'schema', 'edfi', 'table', 'EdFiException'
go

/* 
 * TABLE: [edfi].[EducationalEnvironmentType] 
 */

CREATE TABLE [edfi].[EducationalEnvironmentType](
    [EducationalEnvironmentTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                     nvarchar(50)        NOT NULL,
    [Description]                   nvarchar(1024)      NOT NULL,
    [ShortDescription]              nvarchar(450)       NOT NULL,
    [Id]                            uniqueidentifier    CONSTRAINT [EducationalEnvironmentType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]              datetime            CONSTRAINT [EducationalEnvironmentType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                    datetime            CONSTRAINT [EducationalEnvironmentType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationalEnvironmentType] PRIMARY KEY CLUSTERED ([EducationalEnvironmentTypeId])
)
go



IF OBJECT_ID('edfi.EducationalEnvironmentType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationalEnvironmentType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationalEnvironmentType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationalEnvironmentType', 'column', 'EducationalEnvironmentTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationalEnvironmentType', 'column', 'EducationalEnvironmentTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for EducationalEnvironment', 'schema', 'edfi', 'table', 'EducationalEnvironmentType', 'column', 'EducationalEnvironmentTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationalEnvironmentType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationalEnvironmentType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for EducationalEnvironment type.', 'schema', 'edfi', 'table', 'EducationalEnvironmentType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationalEnvironmentType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationalEnvironmentType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'EducationalEnvironmentType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationalEnvironmentType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationalEnvironmentType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the educational environment type.', 'schema', 'edfi', 'table', 'EducationalEnvironmentType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationalEnvironmentType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationalEnvironmentType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The setting in which a child receives education and related services.', 'schema', 'edfi', 'table', 'EducationalEnvironmentType'
go

/* 
 * TABLE: [edfi].[EducationContent] 
 */

CREATE TABLE [edfi].[EducationContent](
    [ContentIdentifier]            nvarchar(225)       NOT NULL,
    [LearningResourceMetadataURI]  nvarchar(255)       NULL,
    [ShortDescription]             nvarchar(75)        NULL,
    [Description]                  nvarchar(1024)      NULL,
    [AdditionalAuthorsIndicator]   bit                 NULL,
    [Publisher]                    nvarchar(50)        NULL,
    [TimeRequired]                 nvarchar(30)        NULL,
    [InteractivityStyleTypeId]     int                 NULL,
    [ContentClassTypeId]           int                 NULL,
    [UseRightsURL]                 nvarchar(255)       NULL,
    [PublicationDate]              date                NULL,
    [PublicationYear]              smallint            NULL,
    [Version]                      nvarchar(10)        NULL,
    [LearningStandardId]           nvarchar(60)        NULL,
    [Cost]                         money               NULL,
    [CostRateTypeId]               int                 NULL,
    [Namespace]                    nvarchar(255)       NOT NULL,
    [Id]                           uniqueidentifier    CONSTRAINT [EducationContent_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]             datetime            CONSTRAINT [EducationContent_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                   datetime            CONSTRAINT [EducationContent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationContent] PRIMARY KEY CLUSTERED ([ContentIdentifier])
)
go



IF OBJECT_ID('edfi.EducationContent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationContent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationContent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'ContentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'ContentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier of the content standard.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'ContentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'LearningResourceMetadataURI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'LearningResourceMetadataURI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL), file, or ftp locator.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'LearningResourceMetadataURI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for reference.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A detailed description of the entity.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'AdditionalAuthorsIndicator'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'AdditionalAuthorsIndicator'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation "et al".', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'AdditionalAuthorsIndicator'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Publisher'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Publisher'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The organization credited with publishing the resource.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Publisher'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'TimeRequired'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'TimeRequired'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'TimeRequired'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'InteractivityStyleTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'InteractivityStyleTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'InteractivityStyleTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'ContentClassTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'ContentClassTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'ContentClassTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'UseRightsURL'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'UseRightsURL'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The URL where the owner specifies permissions for using the resource.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'UseRightsURL'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'PublicationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'PublicationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date on which this content was first published.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'PublicationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'PublicationYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'PublicationYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The year at which this content was first published.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'PublicationYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the content.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'LearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'LearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the specific learning standard (e.g., 111.15.3.1.A).
', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'LearningStandardId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Cost'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Cost'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An amount that has to be paid or spent to buy or obtain the EducationContent.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Cost'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'CostRateTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'CostRateTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'CostRateTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Namespace'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Namespace'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Namespace for the EducationContent.', 'schema', 'edfi', 'table', 'EducationContent', 'column', 'Namespace'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContent', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents materials for students or teachers that can be used for teaching, learning, research, and more. Education content includes full courses, course materials, modules, intervention descriptions, textbooks, streaming videos, tests, software, and any other tools, materials, or techniques used to support access to knowledge.', 'schema', 'edfi', 'table', 'EducationContent'
go

/* 
 * TABLE: [edfi].[EducationContentAppropriateGradeLevel] 
 */

CREATE TABLE [edfi].[EducationContentAppropriateGradeLevel](
    [ContentIdentifier]       nvarchar(225)    NOT NULL,
    [GradeLevelDescriptorId]  int              NOT NULL,
    [CreateDate]              datetime         CONSTRAINT [EducationContentAppropriateGradeLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationContentAppropriateGradeLevel] PRIMARY KEY CLUSTERED ([ContentIdentifier], [GradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.EducationContentAppropriateGradeLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationContentAppropriateGradeLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationContentAppropriateGradeLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentAppropriateGradeLevel', 'column', 'ContentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentAppropriateGradeLevel', 'column', 'ContentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the content.', 'schema', 'edfi', 'table', 'EducationContentAppropriateGradeLevel', 'column', 'ContentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentAppropriateGradeLevel', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentAppropriateGradeLevel', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for GradeLevel', 'schema', 'edfi', 'table', 'EducationContentAppropriateGradeLevel', 'column', 'GradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentAppropriateGradeLevel', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentAppropriateGradeLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Grade levels for which this education content is applicable-if omitted, considered generally applicable.', 'schema', 'edfi', 'table', 'EducationContentAppropriateGradeLevel'
go

/* 
 * TABLE: [edfi].[EducationContentAppropriateSex] 
 */

CREATE TABLE [edfi].[EducationContentAppropriateSex](
    [ContentIdentifier]  nvarchar(225)    NOT NULL,
    [SexTypeId]          int              NOT NULL,
    [CreateDate]         datetime         CONSTRAINT [EducationContentAppropriateSex_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationContentAppropriateSex] PRIMARY KEY CLUSTERED ([ContentIdentifier], [SexTypeId])
)
go



IF OBJECT_ID('edfi.EducationContentAppropriateSex') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationContentAppropriateSex >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationContentAppropriateSex >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentAppropriateSex', 'column', 'ContentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentAppropriateSex', 'column', 'ContentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the content.', 'schema', 'edfi', 'table', 'EducationContentAppropriateSex', 'column', 'ContentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentAppropriateSex', 'column', 'SexTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentAppropriateSex', 'column', 'SexTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Sex', 'schema', 'edfi', 'table', 'EducationContentAppropriateSex', 'column', 'SexTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentAppropriateSex', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentAppropriateSex'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Genders for which this education content is applicable-if omitted, considered generally applicable.', 'schema', 'edfi', 'table', 'EducationContentAppropriateSex'
go

/* 
 * TABLE: [edfi].[EducationContentAuthor] 
 */

CREATE TABLE [edfi].[EducationContentAuthor](
    [ContentIdentifier]  nvarchar(225)    NOT NULL,
    [Author]             nvarchar(225)    NOT NULL,
    [CreateDate]         datetime         CONSTRAINT [EducationContentAuthor_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationContentAuthor] PRIMARY KEY CLUSTERED ([ContentIdentifier], [Author])
)
go



IF OBJECT_ID('edfi.EducationContentAuthor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationContentAuthor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationContentAuthor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentAuthor', 'column', 'ContentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentAuthor', 'column', 'ContentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the content.', 'schema', 'edfi', 'table', 'EducationContentAuthor', 'column', 'ContentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentAuthor', 'column', 'Author'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentAuthor', 'column', 'Author'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The individual credited with the creation of the resource.', 'schema', 'edfi', 'table', 'EducationContentAuthor', 'column', 'Author'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentAuthor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentAuthor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The individual credited with the creation of the resource.', 'schema', 'edfi', 'table', 'EducationContentAuthor'
go

/* 
 * TABLE: [edfi].[EducationContentDerivativeSourceEducationContent] 
 */

CREATE TABLE [edfi].[EducationContentDerivativeSourceEducationContent](
    [ContentIdentifier]                  nvarchar(225)    NOT NULL,
    [DerivativeSourceContentIdentifier]  nvarchar(225)    NOT NULL,
    [CreateDate]                         datetime         CONSTRAINT [EducationContentDerivativeSourceEducationContent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationContentDerivativeSourceEducationContent] PRIMARY KEY CLUSTERED ([ContentIdentifier], [DerivativeSourceContentIdentifier])
)
go



IF OBJECT_ID('edfi.EducationContentDerivativeSourceEducationContent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationContentDerivativeSourceEducationContent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationContentDerivativeSourceEducationContent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceEducationContent', 'column', 'ContentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceEducationContent', 'column', 'ContentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the content.', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceEducationContent', 'column', 'ContentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceEducationContent', 'column', 'DerivativeSourceContentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceEducationContent', 'column', 'DerivativeSourceContentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the content.', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceEducationContent', 'column', 'DerivativeSourceContentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceEducationContent', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceEducationContent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A reference to the Education Content from which this Education Content was derived.', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceEducationContent'
go

/* 
 * TABLE: [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] 
 */

CREATE TABLE [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI](
    [ContentIdentifier]            nvarchar(225)    NOT NULL,
    [LearningResourceMetadataURI]  nvarchar(225)    NOT NULL,
    [CreateDate]                   datetime         CONSTRAINT [EducationContentDerivativeSourceLearningResourceMetadataURI_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationContentDerivativeSourceLearningResourceMetadataURI] PRIMARY KEY CLUSTERED ([ContentIdentifier], [LearningResourceMetadataURI])
)
go



IF OBJECT_ID('edfi.EducationContentDerivativeSourceLearningResourceMetadataURI') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationContentDerivativeSourceLearningResourceMetadataURI >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationContentDerivativeSourceLearningResourceMetadataURI >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceLearningResourceMetadataURI', 'column', 'ContentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceLearningResourceMetadataURI', 'column', 'ContentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the content.', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceLearningResourceMetadataURI', 'column', 'ContentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceLearningResourceMetadataURI', 'column', 'LearningResourceMetadataURI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceLearningResourceMetadataURI', 'column', 'LearningResourceMetadataURI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL), file, or ftp locator.', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceLearningResourceMetadataURI', 'column', 'LearningResourceMetadataURI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceLearningResourceMetadataURI', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceLearningResourceMetadataURI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A reference to the Learning Resource Metadata URI from which this Education Content was derived.', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceLearningResourceMetadataURI'
go

/* 
 * TABLE: [edfi].[EducationContentDerivativeSourceURI] 
 */

CREATE TABLE [edfi].[EducationContentDerivativeSourceURI](
    [ContentIdentifier]  nvarchar(225)    NOT NULL,
    [URI]                nvarchar(225)    NOT NULL,
    [CreateDate]         datetime         CONSTRAINT [EducationContentDerivativeSourceURI_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationContentDerivativeSourceURI] PRIMARY KEY CLUSTERED ([ContentIdentifier], [URI])
)
go



IF OBJECT_ID('edfi.EducationContentDerivativeSourceURI') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationContentDerivativeSourceURI >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationContentDerivativeSourceURI >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceURI', 'column', 'ContentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceURI', 'column', 'ContentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the content.', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceURI', 'column', 'ContentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceURI', 'column', 'URI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceURI', 'column', 'URI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL), file, or ftp locator.', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceURI', 'column', 'URI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceURI', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceURI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A reference to the URI from which this Education Content was derived.', 'schema', 'edfi', 'table', 'EducationContentDerivativeSourceURI'
go

/* 
 * TABLE: [edfi].[EducationContentLanguage] 
 */

CREATE TABLE [edfi].[EducationContentLanguage](
    [ContentIdentifier]     nvarchar(225)    NOT NULL,
    [LanguageDescriptorId]  int              NOT NULL,
    [CreateDate]            datetime         CONSTRAINT [EducationContentLanguage_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationContentLanguage] PRIMARY KEY CLUSTERED ([ContentIdentifier], [LanguageDescriptorId])
)
go



IF OBJECT_ID('edfi.EducationContentLanguage') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationContentLanguage >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationContentLanguage >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentLanguage', 'column', 'ContentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentLanguage', 'column', 'ContentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the content.', 'schema', 'edfi', 'table', 'EducationContentLanguage', 'column', 'ContentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentLanguage', 'column', 'LanguageDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentLanguage', 'column', 'LanguageDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EducationContentLanguage', 'column', 'LanguageDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationContentLanguage', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationContentLanguage'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the languages in which the Education Content is designed.', 'schema', 'edfi', 'table', 'EducationContentLanguage'
go

/* 
 * TABLE: [edfi].[EducationOrganization] 
 */

CREATE TABLE [edfi].[EducationOrganization](
    [EducationOrganizationId]  int                 NOT NULL,
    [StateOrganizationId]      nvarchar(60)        NOT NULL,
    [NameOfInstitution]        nvarchar(75)        NOT NULL,
    [ShortNameOfInstitution]   nvarchar(75)        NULL,
    [WebSite]                  nvarchar(255)       NULL,
    [OperationalStatusTypeId]  int                 NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [EducationOrganization_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [EducationOrganization_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [EducationOrganization_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationOrganization] PRIMARY KEY CLUSTERED ([EducationOrganizationId])
)
go



IF OBJECT_ID('edfi.EducationOrganization') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationOrganization >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationOrganization >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'StateOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'StateOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEP ID.  NEDM: IdentificationCode, LEA Identifier (State)', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'StateOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'NameOfInstitution'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'NameOfInstitution'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The full, legally accepted name of the institution.  NEDM: Name of Institution', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'NameOfInstitution'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'ShortNameOfInstitution'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'ShortNameOfInstitution'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A short name for the institution.', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'ShortNameOfInstitution'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'WebSite'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'WebSite'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL) for the educational organization.', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'WebSite'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'OperationalStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'OperationalStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EducationOrganization', 'column', 'OperationalStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganization', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganization'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents any public or private institution, organization, or agency that provides instructional or support services to students or staff at any level.', 'schema', 'edfi', 'table', 'EducationOrganization'
go

/* 
 * TABLE: [edfi].[EducationOrganizationAddress] 
 */

CREATE TABLE [edfi].[EducationOrganizationAddress](
    [EducationOrganizationId]   int              NOT NULL,
    [AddressTypeId]             int              NOT NULL,
    [StreetNumberName]          nvarchar(150)    NOT NULL,
    [ApartmentRoomSuiteNumber]  nvarchar(50)     NULL,
    [BuildingSiteNumber]        nvarchar(20)     NULL,
    [City]                      nvarchar(30)     NOT NULL,
    [StateAbbreviationTypeId]   int              NOT NULL,
    [PostalCode]                nvarchar(17)     NOT NULL,
    [NameOfCounty]              nvarchar(30)     NULL,
    [CountyFIPSCode]            nvarchar(5)      NULL,
    [Latitude]                  nvarchar(20)     NULL,
    [Longitude]                 nvarchar(20)     NULL,
    [BeginDate]                 date             NULL,
    [EndDate]                   date             NULL,
    [CreateDate]                datetime         CONSTRAINT [EducationOrganizationAddress_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationOrganizationAddress] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [AddressTypeId])
)
go



IF OBJECT_ID('edfi.EducationOrganizationAddress') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationOrganizationAddress >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationOrganizationAddress >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Address Identity Column', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'AddressTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'AddressTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Address', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'AddressTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'StreetNumberName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'StreetNumberName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The street number and street name or post office box number of an address.', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'StreetNumberName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'ApartmentRoomSuiteNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'ApartmentRoomSuiteNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The apartment, room, or suite number of an address.', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'ApartmentRoomSuiteNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'BuildingSiteNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'BuildingSiteNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of the building on the site, if more than one building shares the same address.', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'BuildingSiteNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'City'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'City'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the city in which an address is located.', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'City'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'StateAbbreviationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'StateAbbreviationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The abbreviation for the state (within the United States) or outlying area in which an address is located.', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'StateAbbreviationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'PostalCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'PostalCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The five or nine digit zip code or overseas postal code portion of an address.', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'PostalCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'NameOfCounty'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'NameOfCounty'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'NameOfCounty'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'CountyFIPSCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'CountyFIPSCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Definition The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'CountyFIPSCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'Latitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'Latitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic latitude of the physical address.', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'Latitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'Longitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'Longitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic longitude of the physical address.', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'Longitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The first date the address is valid. For physical addresses, the date the person moved to that address.', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationAddress'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The set of elements that describes an address, including the street address, city, state and ZIP code.', 'schema', 'edfi', 'table', 'EducationOrganizationAddress'
go

/* 
 * TABLE: [edfi].[EducationOrganizationCategory] 
 */

CREATE TABLE [edfi].[EducationOrganizationCategory](
    [EducationOrganizationId]              int         NOT NULL,
    [EducationOrganizationCategoryTypeId]  int         NOT NULL,
    [CreateDate]                           datetime    CONSTRAINT [EducationOrganizationCategory_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationOrganizationCategory] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [EducationOrganizationCategoryTypeId])
)
go



IF OBJECT_ID('edfi.EducationOrganizationCategory') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationOrganizationCategory >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationOrganizationCategory >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategory', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategory', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'EducationOrganizationCategory', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategory', 'column', 'EducationOrganizationCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategory', 'column', 'EducationOrganizationCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.  NEDM: Agency Type', 'schema', 'edfi', 'table', 'EducationOrganizationCategory', 'column', 'EducationOrganizationCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategory', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategory'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.', 'schema', 'edfi', 'table', 'EducationOrganizationCategory'
go

/* 
 * TABLE: [edfi].[EducationOrganizationCategoryType] 
 */

CREATE TABLE [edfi].[EducationOrganizationCategoryType](
    [EducationOrganizationCategoryTypeId]  int                 IDENTITY(1,1),
    [ShortDescription]                     nvarchar(450)       NOT NULL,
    [Description]                          nvarchar(1024)      NOT NULL,
    [CodeValue]                            nvarchar(75)        NOT NULL,
    [Id]                                   uniqueidentifier    CONSTRAINT [EducationOrganizationCategoryType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                     datetime            CONSTRAINT [EducationOrganizationCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                           datetime            CONSTRAINT [EducationOrganizationCategoryType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationOrganizationCategoryType] PRIMARY KEY CLUSTERED ([EducationOrganizationCategoryTypeId])
)
go



IF OBJECT_ID('edfi.EducationOrganizationCategoryType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationOrganizationCategoryType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationOrganizationCategoryType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType', 'column', 'EducationOrganizationCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType', 'column', 'EducationOrganizationCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for EducationOrganizationCategoryType', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType', 'column', 'EducationOrganizationCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for education organization category type.', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.', 'schema', 'edfi', 'table', 'EducationOrganizationCategoryType'
go

/* 
 * TABLE: [edfi].[EducationOrganizationIdentificationCode] 
 */

CREATE TABLE [edfi].[EducationOrganizationIdentificationCode](
    [EducationOrganizationId]                                int             NOT NULL,
    [IdentificationCode]                                     nvarchar(60)    NOT NULL,
    [CreateDate]                                             datetime        CONSTRAINT [EducationOrganizationIdentificationCode_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [EducationOrganizationIdentificationSystemDescriptorId]  int             NOT NULL,
    CONSTRAINT [PK_EducationOrganizationIdentificationCode] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [EducationOrganizationIdentificationSystemDescriptorId])
)
go



IF OBJECT_ID('edfi.EducationOrganizationIdentificationCode') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationOrganizationIdentificationCode >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationOrganizationIdentificationCode >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationCode', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationCode', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationCode', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationCode', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationCode', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationCode', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationCode', 'column', 'EducationOrganizationIdentificationSystemDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationCode', 'column', 'EducationOrganizationIdentificationSystemDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationCode', 'column', 'EducationOrganizationIdentificationSystemDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationCode', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationCode'
go

/* 
 * TABLE: [edfi].[EducationOrganizationIdentificationSystemDescriptor] 
 */

CREATE TABLE [edfi].[EducationOrganizationIdentificationSystemDescriptor](
    [EducationOrganizationIdentificationSystemTypeId]        int    NULL,
    [EducationOrganizationIdentificationSystemDescriptorId]  int    NOT NULL,
    CONSTRAINT [PK_EducationOrganizationIdentificationSystemDescriptor] PRIMARY KEY CLUSTERED ([EducationOrganizationIdentificationSystemDescriptorId])
)
go



IF OBJECT_ID('edfi.EducationOrganizationIdentificationSystemDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationOrganizationIdentificationSystemDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationOrganizationIdentificationSystemDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemDescriptor', 'column', 'EducationOrganizationIdentificationSystemTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemDescriptor', 'column', 'EducationOrganizationIdentificationSystemTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for EducationOrgIdentificationSystemType', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemDescriptor', 'column', 'EducationOrganizationIdentificationSystemTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemDescriptor', 'column', 'EducationOrganizationIdentificationSystemDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemDescriptor', 'column', 'EducationOrganizationIdentificationSystemDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemDescriptor', 'column', 'EducationOrganizationIdentificationSystemDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the originating record system and code that is used for record-keeping purposes by education organizations.', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemDescriptor'
go

/* 
 * TABLE: [edfi].[EducationOrganizationIdentificationSystemType] 
 */

CREATE TABLE [edfi].[EducationOrganizationIdentificationSystemType](
    [EducationOrganizationIdentificationSystemTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                                        nvarchar(50)        NOT NULL,
    [Description]                                      nvarchar(1024)      NOT NULL,
    [ShortDescription]                                 nvarchar(450)       NOT NULL,
    [Id]                                               uniqueidentifier    CONSTRAINT [EducationOrganizationIdentificationSystemType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                                 datetime            CONSTRAINT [EducationOrganizationIdentificationSystemType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                                       datetime            CONSTRAINT [EducationOrganizationIdentificationSystemType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationOrgIdentificationSystemType] PRIMARY KEY CLUSTERED ([EducationOrganizationIdentificationSystemTypeId])
)
go



IF OBJECT_ID('edfi.EducationOrganizationIdentificationSystemType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationOrganizationIdentificationSystemType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationOrganizationIdentificationSystemType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType', 'column', 'EducationOrganizationIdentificationSystemTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType', 'column', 'EducationOrganizationIdentificationSystemTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for EducationOrgIdentificationSystemType', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType', 'column', 'EducationOrganizationIdentificationSystemTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for EducationOrgIdentificationSystemType type.', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the education organization identification system type.', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A coding scheme that is used for identification and record-keeping purposes by education organizations, social services or other agencies to refer to an education organization.', 'schema', 'edfi', 'table', 'EducationOrganizationIdentificationSystemType'
go

/* 
 * TABLE: [edfi].[EducationOrganizationInstitutionTelephone] 
 */

CREATE TABLE [edfi].[EducationOrganizationInstitutionTelephone](
    [EducationOrganizationId]           int             NOT NULL,
    [InstitutionTelephoneNumberTypeId]  int             NOT NULL,
    [TelephoneNumber]                   nvarchar(24)    NOT NULL,
    [CreateDate]                        datetime        CONSTRAINT [EducationOrganizationInstitutionTelephone_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationOrganizationInstitutionTelephone] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [InstitutionTelephoneNumberTypeId])
)
go



IF OBJECT_ID('edfi.EducationOrganizationInstitutionTelephone') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationOrganizationInstitutionTelephone >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationOrganizationInstitutionTelephone >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInstitutionTelephone', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInstitutionTelephone', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'EducationOrganizationInstitutionTelephone', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInstitutionTelephone', 'column', 'InstitutionTelephoneNumberTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInstitutionTelephone', 'column', 'InstitutionTelephoneNumberTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for TelephoneNumber', 'schema', 'edfi', 'table', 'EducationOrganizationInstitutionTelephone', 'column', 'InstitutionTelephoneNumberTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInstitutionTelephone', 'column', 'TelephoneNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInstitutionTelephone', 'column', 'TelephoneNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The telephone number including the area code, and extension, if applicable.', 'schema', 'edfi', 'table', 'EducationOrganizationInstitutionTelephone', 'column', 'TelephoneNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInstitutionTelephone', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInstitutionTelephone'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The 10-digit telephone number, including the area code, for the person.', 'schema', 'edfi', 'table', 'EducationOrganizationInstitutionTelephone'
go

/* 
 * TABLE: [edfi].[EducationOrganizationInternationalAddress] 
 */

CREATE TABLE [edfi].[EducationOrganizationInternationalAddress](
    [EducationOrganizationId]  int              NOT NULL,
    [AddressTypeId]            int              NOT NULL,
    [AddressLine1]             nvarchar(150)    NOT NULL,
    [AddressLine2]             nvarchar(150)    NULL,
    [AddressLine3]             nvarchar(150)    NULL,
    [AddressLine4]             nvarchar(150)    NULL,
    [Latitude]                 nvarchar(20)     NULL,
    [Longitude]                nvarchar(20)     NULL,
    [BeginDate]                date             NULL,
    [EndDate]                  date             NULL,
    [CreateDate]               datetime         CONSTRAINT [EducationOrganizationInternationalAddress_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [CountryDescriptorId]      int              NOT NULL,
    CONSTRAINT [PK_EducationOrganizationInternationalAddress] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [AddressTypeId])
)
go



IF OBJECT_ID('edfi.EducationOrganizationInternationalAddress') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationOrganizationInternationalAddress >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationOrganizationInternationalAddress >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Address', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressLine1'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressLine1'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The first line of the address.', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressLine1'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressLine2'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressLine2'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The second line of the address.', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressLine2'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressLine3'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressLine3'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The third line of the address.', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressLine3'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressLine4'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressLine4'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The fourth line of the address.', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'AddressLine4'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'Latitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'Latitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic latitude of the physical address.', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'Latitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'Longitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'Longitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic longitude of the physical address.', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'Longitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The first date the address is valid. For physical addresses, the date the person moved to that address.', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'CountryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'CountryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', 'column', 'CountryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The set of elements that describes an address, including the street address and country for international students.', 'schema', 'edfi', 'table', 'EducationOrganizationInternationalAddress'
go

/* 
 * TABLE: [edfi].[EducationOrganizationInterventionPrescriptionAssociation] 
 */

CREATE TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation](
    [EducationOrganizationId]                          int                 NOT NULL,
    [InterventionPrescriptionIdentificationCode]       nvarchar(60)        NOT NULL,
    [InterventionPrescriptionEducationOrganizationId]  int                 NOT NULL,
    [BeginDate]                                        date                NULL,
    [EndDate]                                          date                NULL,
    [Id]                                               uniqueidentifier    CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                                 datetime            CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                                       datetime            CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationOrganizationInterventionPrescriptionAssociation] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [InterventionPrescriptionIdentificationCode], [InterventionPrescriptionEducationOrganizationId])
)
go



IF OBJECT_ID('edfi.EducationOrganizationInterventionPrescriptionAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationOrganizationInterventionPrescriptionAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationOrganizationInterventionPrescriptionAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'InterventionPrescriptionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'InterventionPrescriptionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'InterventionPrescriptionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'InterventionPrescriptionEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'InterventionPrescriptionEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'InterventionPrescriptionEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The begin date of the period during which the InterventionPrescription is available.', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The end date of the period during which the InterventionPrescription is available.', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association indicates interventions made available by an education organization. Often, a district-level education organization purchases a set of intervention prescriptions and makes them available to its schools for use on demand.', 'schema', 'edfi', 'table', 'EducationOrganizationInterventionPrescriptionAssociation'
go

/* 
 * TABLE: [edfi].[EducationOrganizationNetwork] 
 */

CREATE TABLE [edfi].[EducationOrganizationNetwork](
    [EducationOrganizationNetworkId]  int    NOT NULL,
    [NetworkPurposeTypeId]            int    NOT NULL,
    CONSTRAINT [PK_EducationOrganizationNetwork] PRIMARY KEY CLUSTERED ([EducationOrganizationNetworkId])
)
go



IF OBJECT_ID('edfi.EducationOrganizationNetwork') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationOrganizationNetwork >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationOrganizationNetwork >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetwork', 'column', 'EducationOrganizationNetworkId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetwork', 'column', 'EducationOrganizationNetworkId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a network of education organizations.', 'schema', 'edfi', 'table', 'EducationOrganizationNetwork', 'column', 'EducationOrganizationNetworkId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetwork', 'column', 'NetworkPurposeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetwork', 'column', 'NetworkPurposeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EducationOrganizationNetwork', 'column', 'NetworkPurposeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetwork', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetwork'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity is a self-organized membership network of peer-level education organizations intended to provide shared services or collective procurement.', 'schema', 'edfi', 'table', 'EducationOrganizationNetwork'
go

/* 
 * TABLE: [edfi].[EducationOrganizationNetworkAssociation] 
 */

CREATE TABLE [edfi].[EducationOrganizationNetworkAssociation](
    [MemberEducationOrganizationId]   int                 NOT NULL,
    [EducationOrganizationNetworkId]  int                 NOT NULL,
    [BeginDate]                       date                NULL,
    [EndDate]                         date                NULL,
    [Id]                              uniqueidentifier    CONSTRAINT [EducationOrganizationNetworkAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                datetime            CONSTRAINT [EducationOrganizationNetworkAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                      datetime            CONSTRAINT [EducationOrganizationNetworkAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationOrganizationNetworkAssociation] PRIMARY KEY CLUSTERED ([MemberEducationOrganizationId], [EducationOrganizationNetworkId])
)
go



IF OBJECT_ID('edfi.EducationOrganizationNetworkAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationOrganizationNetworkAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationOrganizationNetworkAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation', 'column', 'MemberEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation', 'column', 'MemberEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation', 'column', 'MemberEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation', 'column', 'EducationOrganizationNetworkId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation', 'column', 'EducationOrganizationNetworkId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation', 'column', 'EducationOrganizationNetworkId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date on which the EducationOrganization joined this network.', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date on which the EducationOrganization left this network.', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Properties of the association between the EducationOrganization and its network(s).', 'schema', 'edfi', 'table', 'EducationOrganizationNetworkAssociation'
go

/* 
 * TABLE: [edfi].[EducationOrganizationPeerAssociation] 
 */

CREATE TABLE [edfi].[EducationOrganizationPeerAssociation](
    [EducationOrganizationId]      int                 NOT NULL,
    [PeerEducationOrganizationId]  int                 NOT NULL,
    [Id]                           uniqueidentifier    CONSTRAINT [EducationOrganizationPeerAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]             datetime            CONSTRAINT [EducationOrganizationPeerAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                   datetime            CONSTRAINT [EducationOrganizationPeerAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationOrganizationPeerAssociation] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [PeerEducationOrganizationId])
)
go



IF OBJECT_ID('edfi.EducationOrganizationPeerAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationOrganizationPeerAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationOrganizationPeerAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationPeerAssociation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationPeerAssociation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'EducationOrganizationPeerAssociation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationPeerAssociation', 'column', 'PeerEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationPeerAssociation', 'column', 'PeerEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The associated peer organization(s) for the EducationOrganization.', 'schema', 'edfi', 'table', 'EducationOrganizationPeerAssociation', 'column', 'PeerEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationPeerAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationOrganizationPeerAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The association from an education organization to its peers.', 'schema', 'edfi', 'table', 'EducationOrganizationPeerAssociation'
go

/* 
 * TABLE: [edfi].[EducationPlanType] 
 */

CREATE TABLE [edfi].[EducationPlanType](
    [EducationPlanTypeId]  int                 IDENTITY(1,1),
    [CodeValue]            nvarchar(50)        NOT NULL,
    [Description]          nvarchar(1024)      NOT NULL,
    [ShortDescription]     nvarchar(450)       NOT NULL,
    [Id]                   uniqueidentifier    CONSTRAINT [EducationPlanType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]     datetime            CONSTRAINT [EducationPlanType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]           datetime            CONSTRAINT [EducationPlanType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EducationPlansType] PRIMARY KEY CLUSTERED ([EducationPlanTypeId])
)
go



IF OBJECT_ID('edfi.EducationPlanType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationPlanType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationPlanType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationPlanType', 'column', 'EducationPlanTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationPlanType', 'column', 'EducationPlanTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for EducationPlans', 'schema', 'edfi', 'table', 'EducationPlanType', 'column', 'EducationPlanTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationPlanType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationPlanType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for EducationPlans type.', 'schema', 'edfi', 'table', 'EducationPlanType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationPlanType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationPlanType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'EducationPlanType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationPlanType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationPlanType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the education plan type.
', 'schema', 'edfi', 'table', 'EducationPlanType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationPlanType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationPlanType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of education plan(s) the student is following, if appropriate. For example: Special education Vocational.', 'schema', 'edfi', 'table', 'EducationPlanType'
go

/* 
 * TABLE: [edfi].[EducationServiceCenter] 
 */

CREATE TABLE [edfi].[EducationServiceCenter](
    [EducationServiceCenterId]  int    NOT NULL,
    [StateEducationAgencyId]    int    NULL,
    CONSTRAINT [PK_EducationServiceCenter] PRIMARY KEY CLUSTERED ([EducationServiceCenterId])
)
go



IF OBJECT_ID('edfi.EducationServiceCenter') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EducationServiceCenter >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EducationServiceCenter >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationServiceCenter', 'column', 'EducationServiceCenterId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationServiceCenter', 'column', 'EducationServiceCenterId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier assigned to an education service center by the State Education Agency (SEA).', 'schema', 'edfi', 'table', 'EducationServiceCenter', 'column', 'EducationServiceCenterId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationServiceCenter', 'column', 'StateEducationAgencyId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationServiceCenter', 'column', 'StateEducationAgencyId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The SEA of which the ESC is an organizational component.', 'schema', 'edfi', 'table', 'EducationServiceCenter', 'column', 'StateEducationAgencyId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EducationServiceCenter', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EducationServiceCenter'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents a regional, multi-services public agency authorized by state law to develop, manage and provide services, programs, or other support options (e.g., construction, food services, and technology services) to LEAs.', 'schema', 'edfi', 'table', 'EducationServiceCenter'
go

/* 
 * TABLE: [edfi].[ElectronicMailType] 
 */

CREATE TABLE [edfi].[ElectronicMailType](
    [ElectronicMailTypeId]  int                 IDENTITY(1,1),
    [CodeValue]             nvarchar(50)        NOT NULL,
    [Description]           nvarchar(1024)      NOT NULL,
    [ShortDescription]      nvarchar(450)       NOT NULL,
    [Id]                    uniqueidentifier    CONSTRAINT [ElectronicMailType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]      datetime            CONSTRAINT [ElectronicMailType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]            datetime            CONSTRAINT [ElectronicMailType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ElectronicMailType] PRIMARY KEY CLUSTERED ([ElectronicMailTypeId])
)
go



IF OBJECT_ID('edfi.ElectronicMailType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ElectronicMailType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ElectronicMailType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ElectronicMailType', 'column', 'ElectronicMailTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ElectronicMailType', 'column', 'ElectronicMailTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ElectronicMail', 'schema', 'edfi', 'table', 'ElectronicMailType', 'column', 'ElectronicMailTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ElectronicMailType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ElectronicMailType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for ElectronicMail type.', 'schema', 'edfi', 'table', 'ElectronicMailType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ElectronicMailType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ElectronicMailType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'ElectronicMailType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ElectronicMailType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ElectronicMailType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the electronic mail type.
', 'schema', 'edfi', 'table', 'ElectronicMailType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ElectronicMailType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ElectronicMailType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of email listed for an individual or organization.', 'schema', 'edfi', 'table', 'ElectronicMailType'
go

/* 
 * TABLE: [edfi].[EmploymentStatusDescriptor] 
 */

CREATE TABLE [edfi].[EmploymentStatusDescriptor](
    [EmploymentStatusDescriptorId]  int    NOT NULL,
    [EmploymentStatusTypeId]        int    NOT NULL,
    CONSTRAINT [PK_EmploymentStatusDescriptor] PRIMARY KEY CLUSTERED ([EmploymentStatusDescriptorId])
)
go



IF OBJECT_ID('edfi.EmploymentStatusDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EmploymentStatusDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EmploymentStatusDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusDescriptor', 'column', 'EmploymentStatusDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusDescriptor', 'column', 'EmploymentStatusDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EmploymentStatusDescriptor', 'column', 'EmploymentStatusDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusDescriptor', 'column', 'EmploymentStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusDescriptor', 'column', 'EmploymentStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for EmploymentStatus', 'schema', 'edfi', 'table', 'EmploymentStatusDescriptor', 'column', 'EmploymentStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the type of employment or contract.', 'schema', 'edfi', 'table', 'EmploymentStatusDescriptor'
go

/* 
 * TABLE: [edfi].[EmploymentStatusType] 
 */

CREATE TABLE [edfi].[EmploymentStatusType](
    [EmploymentStatusTypeId]  int                 IDENTITY(1,1),
    [CodeValue]               nvarchar(50)        NOT NULL,
    [Description]             nvarchar(1024)      NOT NULL,
    [ShortDescription]        nvarchar(450)       NOT NULL,
    [Id]                      uniqueidentifier    CONSTRAINT [EmploymentStatusType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]        datetime            CONSTRAINT [EmploymentStatusType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]              datetime            CONSTRAINT [EmploymentStatusType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EmploymentStatusType] PRIMARY KEY CLUSTERED ([EmploymentStatusTypeId])
)
go



IF OBJECT_ID('edfi.EmploymentStatusType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EmploymentStatusType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EmploymentStatusType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusType', 'column', 'EmploymentStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusType', 'column', 'EmploymentStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for EmploymentStatus', 'schema', 'edfi', 'table', 'EmploymentStatusType', 'column', 'EmploymentStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for EmploymentStatus type.', 'schema', 'edfi', 'table', 'EmploymentStatusType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for EmploymentStatus type.', 'schema', 'edfi', 'table', 'EmploymentStatusType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Short description for employment status type.', 'schema', 'edfi', 'table', 'EmploymentStatusType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EmploymentStatusType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reflects the type of employment or contract.', 'schema', 'edfi', 'table', 'EmploymentStatusType'
go

/* 
 * TABLE: [edfi].[EntryGradeLevelReasonType] 
 */

CREATE TABLE [edfi].[EntryGradeLevelReasonType](
    [EntryGradeLevelReasonTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                    nvarchar(50)        NOT NULL,
    [Description]                  nvarchar(1024)      NULL,
    [ShortDescription]             nvarchar(450)       NOT NULL,
    [Id]                           uniqueidentifier    CONSTRAINT [EntryGradeLevelReasonType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]             datetime            CONSTRAINT [EntryGradeLevelReasonType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                   datetime            CONSTRAINT [EntryGradeLevelReasonType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EntryGradeLevelReasonType] PRIMARY KEY CLUSTERED ([EntryGradeLevelReasonTypeId])
)
go



IF OBJECT_ID('edfi.EntryGradeLevelReasonType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EntryGradeLevelReasonType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EntryGradeLevelReasonType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType', 'column', 'EntryGradeLevelReasonTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType', 'column', 'EntryGradeLevelReasonTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType', 'column', 'EntryGradeLevelReasonTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.', 'schema', 'edfi', 'table', 'EntryGradeLevelReasonType'
go

/* 
 * TABLE: [edfi].[EntryType] 
 */

CREATE TABLE [edfi].[EntryType](
    [EntryTypeId]       int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [EntryType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [EntryType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [EntryType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EntryType] PRIMARY KEY CLUSTERED ([EntryTypeId])
)
go



IF OBJECT_ID('edfi.EntryType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EntryType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EntryType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EntryType', 'column', 'EntryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EntryType', 'column', 'EntryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Entry', 'schema', 'edfi', 'table', 'EntryType', 'column', 'EntryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EntryType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EntryType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Entry type.', 'schema', 'edfi', 'table', 'EntryType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EntryType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EntryType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for Entry type.', 'schema', 'edfi', 'table', 'EntryType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EntryType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EntryType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Short description for entry type.', 'schema', 'edfi', 'table', 'EntryType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EntryType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EntryType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The process by which a student enters a school during a given academic session.', 'schema', 'edfi', 'table', 'EntryType'
go

/* 
 * TABLE: [edfi].[EntryTypeDescriptor] 
 */

CREATE TABLE [edfi].[EntryTypeDescriptor](
    [EntryTypeDescriptorId]  int    NOT NULL,
    [EntryTypeId]            int    NULL,
    CONSTRAINT [PK_EntryTypeDescriptor] PRIMARY KEY CLUSTERED ([EntryTypeDescriptorId])
)
go



IF OBJECT_ID('edfi.EntryTypeDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EntryTypeDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EntryTypeDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EntryTypeDescriptor', 'column', 'EntryTypeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EntryTypeDescriptor', 'column', 'EntryTypeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EntryTypeDescriptor', 'column', 'EntryTypeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EntryTypeDescriptor', 'column', 'EntryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EntryTypeDescriptor', 'column', 'EntryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Entry', 'schema', 'edfi', 'table', 'EntryTypeDescriptor', 'column', 'EntryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EntryTypeDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EntryTypeDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the process by which a student enters a school during a given academic session.', 'schema', 'edfi', 'table', 'EntryTypeDescriptor'
go

/* 
 * TABLE: [edfi].[EventCircumstanceType] 
 */

CREATE TABLE [edfi].[EventCircumstanceType](
    [EventCircumstanceTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                nvarchar(50)        NULL,
    [ShortDescription]         nvarchar(450)       NOT NULL,
    [Description]              nvarchar(1024)      NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [EventCircumstanceType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [EventCircumstanceType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [EventCircumstanceType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_EventCircumstanceType] PRIMARY KEY CLUSTERED ([EventCircumstanceTypeId])
)
go



IF OBJECT_ID('edfi.EventCircumstanceType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.EventCircumstanceType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.EventCircumstanceType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EventCircumstanceType', 'column', 'EventCircumstanceTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EventCircumstanceType', 'column', 'EventCircumstanceTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'EventCircumstanceType', 'column', 'EventCircumstanceTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EventCircumstanceType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EventCircumstanceType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'EventCircumstanceType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EventCircumstanceType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EventCircumstanceType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'EventCircumstanceType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EventCircumstanceType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EventCircumstanceType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'EventCircumstanceType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'EventCircumstanceType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'EventCircumstanceType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.', 'schema', 'edfi', 'table', 'EventCircumstanceType'
go

/* 
 * TABLE: [edfi].[ExitWithdrawType] 
 */

CREATE TABLE [edfi].[ExitWithdrawType](
    [ExitWithdrawTypeId]  int                 IDENTITY(1,1),
    [CodeValue]           nvarchar(50)        NOT NULL,
    [Description]         nvarchar(1024)      NOT NULL,
    [ShortDescription]    nvarchar(450)       NOT NULL,
    [Id]                  uniqueidentifier    CONSTRAINT [ExitWithdrawType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]    datetime            CONSTRAINT [ExitWithdrawType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]          datetime            CONSTRAINT [ExitWithdrawType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ExitWithdrawType] PRIMARY KEY CLUSTERED ([ExitWithdrawTypeId])
)
go



IF OBJECT_ID('edfi.ExitWithdrawType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ExitWithdrawType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ExitWithdrawType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawType', 'column', 'ExitWithdrawTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawType', 'column', 'ExitWithdrawTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ExitWithdraw', 'schema', 'edfi', 'table', 'ExitWithdrawType', 'column', 'ExitWithdrawTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for ExitWithdraw type.', 'schema', 'edfi', 'table', 'ExitWithdrawType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for ExitWithdraw type.', 'schema', 'edfi', 'table', 'ExitWithdrawType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Short description for exit withdraw type.', 'schema', 'edfi', 'table', 'ExitWithdrawType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The circumstances under which the student exited from membership in an educational institution.', 'schema', 'edfi', 'table', 'ExitWithdrawType'
go

/* 
 * TABLE: [edfi].[ExitWithdrawTypeDescriptor] 
 */

CREATE TABLE [edfi].[ExitWithdrawTypeDescriptor](
    [ExitWithdrawTypeDescriptorId]  int    NOT NULL,
    [ExitWithdrawTypeId]            int    NULL,
    CONSTRAINT [PK_ExitWithdrawTypeDescriptor] PRIMARY KEY CLUSTERED ([ExitWithdrawTypeDescriptorId])
)
go



IF OBJECT_ID('edfi.ExitWithdrawTypeDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ExitWithdrawTypeDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ExitWithdrawTypeDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawTypeDescriptor', 'column', 'ExitWithdrawTypeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawTypeDescriptor', 'column', 'ExitWithdrawTypeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ExitWithdrawTypeDescriptor', 'column', 'ExitWithdrawTypeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawTypeDescriptor', 'column', 'ExitWithdrawTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawTypeDescriptor', 'column', 'ExitWithdrawTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ExitWithdraw', 'schema', 'edfi', 'table', 'ExitWithdrawTypeDescriptor', 'column', 'ExitWithdrawTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawTypeDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ExitWithdrawTypeDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the circumstances under which the student exited from membership in an educational institution.', 'schema', 'edfi', 'table', 'ExitWithdrawTypeDescriptor'
go

/* 
 * TABLE: [edfi].[FeederSchoolAssociation] 
 */

CREATE TABLE [edfi].[FeederSchoolAssociation](
    [FeederSchoolId]                 int                 NOT NULL,
    [SchoolId]                       int                 NOT NULL,
    [BeginDate]                      date                NOT NULL,
    [EndDate]                        date                NULL,
    [FeederRelationshipDescription]  nvarchar(1024)      NULL,
    [Id]                             uniqueidentifier    CONSTRAINT [FeederSchoolAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]               datetime            CONSTRAINT [FeederSchoolAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                     datetime            CONSTRAINT [FeederSchoolAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_FeederSchoolAssociation] PRIMARY KEY CLUSTERED ([FeederSchoolId], [SchoolId], [BeginDate])
)
go



IF OBJECT_ID('edfi.FeederSchoolAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.FeederSchoolAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.FeederSchoolAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'FeederSchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'FeederSchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'FeederSchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year of the first day of the feeder school association.', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year of the last day of the feeder school association.', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'FeederRelationshipDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'FeederRelationshipDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Describes the relationship from the feeder school to the receiving school, for example by program emphasis, such as special education, language immersion, science, or performing art.', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', 'column', 'FeederRelationshipDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'FeederSchoolAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'FeederSchoolAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The association from feeder school to the receiving school.', 'schema', 'edfi', 'table', 'FeederSchoolAssociation'
go

/* 
 * TABLE: [edfi].[Grade] 
 */

CREATE TABLE [edfi].[Grade](
    [GradingPeriodDescriptorId]        int                 NOT NULL,
    [GradingPeriodBeginDate]           date                NOT NULL,
    [GradeTypeId]                      int                 NOT NULL,
    [PerformanceBaseConversionTypeId]  int                 NULL,
    [StudentUSI]                       int                 NOT NULL,
    [SchoolId]                         int                 NOT NULL,
    [ClassPeriodName]                  nvarchar(20)        NOT NULL,
    [ClassroomIdentificationCode]      nvarchar(20)        NOT NULL,
    [LocalCourseCode]                  nvarchar(60)        NOT NULL,
    [UniqueSectionCode]                nvarchar(255)       NOT NULL,
    [SequenceOfCourse]                 int                 NOT NULL,
    [SchoolYear]                       smallint            NOT NULL,
    [TermDescriptorId]                 int                 NOT NULL,
    [BeginDate]                        date                NOT NULL,
    [LetterGradeEarned]                nvarchar(20)        NULL,
    [NumericGradeEarned]               decimal(9, 2)       NULL,
    [DiagnosticStatement]              nvarchar(1024)      NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [Grade_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [Grade_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [Grade_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Grade] PRIMARY KEY CLUSTERED ([GradingPeriodDescriptorId], [GradingPeriodBeginDate], [GradeTypeId], [StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
)
go

CREATE UNIQUE NONCLUSTERED INDEX [INDEX IX_Grade] ON [edfi].[Grade]
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE = ON, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO

IF OBJECT_ID('edfi.Grade') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Grade >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Grade >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'GradingPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'GradingPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the grading period during the school year in which the grade is offered (e.g., 1st cycle, 1st semester)', 'schema', 'edfi', 'table', 'Grade', 'column', 'GradingPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'GradingPeriodBeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'GradingPeriodBeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the first day of the grading period.', 'schema', 'edfi', 'table', 'Grade', 'column', 'GradingPeriodBeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'GradeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'GradeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of grade (e.g., Exam, Final, Grading Period, Progress Report)', 'schema', 'edfi', 'table', 'Grade', 'column', 'GradeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'PerformanceBaseConversionTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'PerformanceBaseConversionTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The performance base conversion assessed for the student.', 'schema', 'edfi', 'table', 'Grade', 'column', 'PerformanceBaseConversionTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'Grade', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column
', 'schema', 'edfi', 'table', 'Grade', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period or AB schedules).
=', 'schema', 'edfi', 'table', 'Grade', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'Grade', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'Grade', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the section, that is defined for a campus by the classroom, the subjects taught, and the instructors that are assigned.  NEDM: Unique Course Code', 'schema', 'edfi', 'table', 'Grade', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a section is part of a sequence of parts for a course, the number if the sequence.  If the course has only onle part, the value of this section attribute should be 1.', 'schema', 'edfi', 'table', 'Grade', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'Grade', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Grade', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the Student''s entry or assignment to the Section.', 'schema', 'edfi', 'table', 'Grade', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'LetterGradeEarned'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'LetterGradeEarned'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', 'schema', 'edfi', 'table', 'Grade', 'column', 'LetterGradeEarned'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'NumericGradeEarned'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'NumericGradeEarned'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', 'schema', 'edfi', 'table', 'Grade', 'column', 'NumericGradeEarned'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'DiagnosticStatement'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade', 'column', 'DiagnosticStatement'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A statement provided by the teacher that provides information in addition to the grade or assessment score.', 'schema', 'edfi', 'table', 'Grade', 'column', 'DiagnosticStatement'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Grade', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Grade'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This educational entity represents an overall score or assessment tied to a course over a period of time (i.e., the grading period). Student grades are usually a compilation of marks and other scores.', 'schema', 'edfi', 'table', 'Grade'
go

/* 
 * TABLE: [edfi].[GradebookEntry] 
 */

CREATE TABLE [edfi].[GradebookEntry](
    [GradebookEntryTitle]          nvarchar(60)        NOT NULL,
    [ClassroomIdentificationCode]  nvarchar(20)        NOT NULL,
    [SchoolId]                     int                 NOT NULL,
    [ClassPeriodName]              nvarchar(20)        NOT NULL,
    [LocalCourseCode]              nvarchar(60)        NOT NULL,
    [SchoolYear]                   smallint            NOT NULL,
    [TermDescriptorId]             int                 NOT NULL,
    [UniqueSectionCode]            nvarchar(255)       NOT NULL,
    [SequenceOfCourse]             int                 NOT NULL,
    [DateAssigned]                 date                NOT NULL,
    [GradebookEntryTypeId]         int                 NULL,
    [GradingPeriodDescriptorId]    int                 NULL,
    [BeginDate]                    date                NULL,
    [Description]                  nvarchar(1024)      NULL,
    [Id]                           uniqueidentifier    CONSTRAINT [GradebookEntry_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]             datetime            CONSTRAINT [GradebookEntry_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                   datetime            CONSTRAINT [GradebookEntry_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GradebookEntry] PRIMARY KEY CLUSTERED ([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned])
)
go



IF OBJECT_ID('edfi.GradebookEntry') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GradebookEntry >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GradebookEntry >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'GradebookEntryTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'GradebookEntryTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name or title of the activity to be recorded in the gradebook entry.', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'GradebookEntryTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the section, that is defined for a campus by the classroom, the subjects taught, and the instructors that are assigned.  NEDM: Unique Course Code', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a section is part of a sequence of parts for a course, the number if the sequence.  If the course has only onle part, the value of this section attribute should be 1.', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'DateAssigned'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'DateAssigned'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the assignment, homework, or assessment was assigned or executed.', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'DateAssigned'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'GradebookEntryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'GradebookEntryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'GradebookEntryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'GradingPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'GradingPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'GradingPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the first day of the grading period.', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A detailed description of the entity.', 'schema', 'edfi', 'table', 'GradebookEntry', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntry'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents an assignment, homework, or classroom assessment to be recorded in a gradebook.', 'schema', 'edfi', 'table', 'GradebookEntry'
go

/* 
 * TABLE: [edfi].[GradebookEntryLearningObjective] 
 */

CREATE TABLE [edfi].[GradebookEntryLearningObjective](
    [SchoolId]                         int              NOT NULL,
    [ClassPeriodName]                  nvarchar(20)     NOT NULL,
    [ClassroomIdentificationCode]      nvarchar(20)     NOT NULL,
    [GradebookEntryTitle]              nvarchar(60)     NOT NULL,
    [DateAssigned]                     date             NOT NULL,
    [Objective]                        nvarchar(60)     NOT NULL,
    [AcademicSubjectDescriptorId]      int              NOT NULL,
    [ObjectiveGradeLevelDescriptorId]  int              NOT NULL,
    [SchoolYear]                       smallint         NOT NULL,
    [LocalCourseCode]                  nvarchar(60)     NOT NULL,
    [TermDescriptorId]                 int              NOT NULL,
    [UniqueSectionCode]                nvarchar(255)    NOT NULL,
    [SequenceOfCourse]                 int              NOT NULL,
    [CreateDate]                       datetime         CONSTRAINT [GradebookEntryLearningObjective_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GradebookEntryLearningObjective] PRIMARY KEY CLUSTERED ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [GradebookEntryTitle], [DateAssigned], [Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId], [SchoolYear], [LocalCourseCode], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse])
)
go



IF OBJECT_ID('edfi.GradebookEntryLearningObjective') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GradebookEntryLearningObjective >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GradebookEntryLearningObjective >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'GradebookEntryTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'GradebookEntryTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name or title of the activity to be recorded in the gradebook entry.', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'GradebookEntryTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'DateAssigned'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'DateAssigned'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the assignment, homework, or assessment was assigned or executed.', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'DateAssigned'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'Objective'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'Objective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The designated title of the learning objective.', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'Objective'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the section, that is defined for a campus by the classroom, the subjects taught, and the instructors that are assigned.  NEDM: Unique Course Code', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a section is part of a sequence of parts for a course, the number if the sequence.  If the course has only onle part, the value of this section attribute should be 1.', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Learning Objectives associated with the Gradebook Entry.', 'schema', 'edfi', 'table', 'GradebookEntryLearningObjective'
go

/* 
 * TABLE: [edfi].[GradebookEntryLearningStandard] 
 */

CREATE TABLE [edfi].[GradebookEntryLearningStandard](
    [SchoolId]                     int              NOT NULL,
    [ClassPeriodName]              nvarchar(20)     NOT NULL,
    [ClassroomIdentificationCode]  nvarchar(20)     NOT NULL,
    [GradebookEntryTitle]          nvarchar(60)     NOT NULL,
    [DateAssigned]                 date             NOT NULL,
    [LearningStandardId]           nvarchar(60)     NOT NULL,
    [SchoolYear]                   smallint         NOT NULL,
    [LocalCourseCode]              nvarchar(60)     NOT NULL,
    [TermDescriptorId]             int              NOT NULL,
    [UniqueSectionCode]            nvarchar(255)    NOT NULL,
    [SequenceOfCourse]             int              NOT NULL,
    [CreateDate]                   datetime         CONSTRAINT [GradebookEntryLearningStandard_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GradebookEntryLearningStandard] PRIMARY KEY CLUSTERED ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [GradebookEntryTitle], [DateAssigned], [LearningStandardId], [SchoolYear], [LocalCourseCode], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse])
)
go



IF OBJECT_ID('edfi.GradebookEntryLearningStandard') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GradebookEntryLearningStandard >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GradebookEntryLearningStandard >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period or AB schedules).', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'GradebookEntryTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'GradebookEntryTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name or title of the activity to be recorded in the GradebookEntry.', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'GradebookEntryTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'DateAssigned'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'DateAssigned'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the assignment, homework, or assessment was assigned or executed.', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'DateAssigned'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'LearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'LearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'LearningStandardId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the School that identifies the course offering provided for the instruction of students.', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors that are assigned.', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a Section is part of a sequence of parts for a course, the number of the sequence.', 'schema', 'edfi', 'table', 'GradebookEntryLearningStandard', 'column', 'SequenceOfCourse'
go

/* 
 * TABLE: [edfi].[GradebookEntryType] 
 */

CREATE TABLE [edfi].[GradebookEntryType](
    [GradebookEntryTypeId]  int                 IDENTITY(1,1),
    [CodeValue]             nvarchar(50)        NOT NULL,
    [Description]           nvarchar(1024)      NULL,
    [ShortDescription]      nvarchar(450)       NOT NULL,
    [Id]                    uniqueidentifier    CONSTRAINT [GradebookEntryType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]      datetime            CONSTRAINT [GradebookEntryType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]            datetime            CONSTRAINT [GradebookEntryType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GradebookEntryType] PRIMARY KEY CLUSTERED ([GradebookEntryTypeId])
)
go



IF OBJECT_ID('edfi.GradebookEntryType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GradebookEntryType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GradebookEntryType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryType', 'column', 'GradebookEntryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryType', 'column', 'GradebookEntryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GradebookEntryType', 'column', 'GradebookEntryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'GradebookEntryType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'GradebookEntryType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'GradebookEntryType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradebookEntryType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of the gradebook entry; for example, homework, assignment, quiz, unit test, oral presentation, etc.', 'schema', 'edfi', 'table', 'GradebookEntryType'
go

/* 
 * TABLE: [edfi].[GradeLevelDescriptor] 
 */

CREATE TABLE [edfi].[GradeLevelDescriptor](
    [GradeLevelDescriptorId]  int    NOT NULL,
    [GradeLevelTypeId]        int    NOT NULL,
    CONSTRAINT [PK_GradeLevelDescriptor] PRIMARY KEY CLUSTERED ([GradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.GradeLevelDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GradeLevelDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GradeLevelDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradeLevelDescriptor', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradeLevelDescriptor', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GradeLevelDescriptor', 'column', 'GradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradeLevelDescriptor', 'column', 'GradeLevelTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradeLevelDescriptor', 'column', 'GradeLevelTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for GradeLevel', 'schema', 'edfi', 'table', 'GradeLevelDescriptor', 'column', 'GradeLevelTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradeLevelDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradeLevelDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the set of grade levels. The map to known Ed-Fi enumeration values is required.', 'schema', 'edfi', 'table', 'GradeLevelDescriptor'
go

/* 
 * TABLE: [edfi].[GradeLevelType] 
 */

CREATE TABLE [edfi].[GradeLevelType](
    [GradeLevelTypeId]  int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Description]       nvarchar(1024)      NULL,
    [Id]                uniqueidentifier    CONSTRAINT [GradeLevelType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [GradeLevelType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [GradeLevelType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GradeLevelType] PRIMARY KEY CLUSTERED ([GradeLevelTypeId])
)
go



IF OBJECT_ID('edfi.GradeLevelType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GradeLevelType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GradeLevelType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradeLevelType', 'column', 'GradeLevelTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradeLevelType', 'column', 'GradeLevelTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for GradeLevel', 'schema', 'edfi', 'table', 'GradeLevelType', 'column', 'GradeLevelTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradeLevelType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradeLevelType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for GradeLevel type.', 'schema', 'edfi', 'table', 'GradeLevelType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradeLevelType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradeLevelType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Short description for grade level type.', 'schema', 'edfi', 'table', 'GradeLevelType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradeLevelType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradeLevelType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for GradeLevel type.', 'schema', 'edfi', 'table', 'GradeLevelType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradeLevelType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradeLevelType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The enumerated collection for specifying one or more grade levels.', 'schema', 'edfi', 'table', 'GradeLevelType'
go

/* 
 * TABLE: [edfi].[GradeType] 
 */

CREATE TABLE [edfi].[GradeType](
    [GradeTypeId]       int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [GradeType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [GradeType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [GradeType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GradeType] PRIMARY KEY CLUSTERED ([GradeTypeId])
)
go



IF OBJECT_ID('edfi.GradeType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GradeType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GradeType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradeType', 'column', 'GradeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradeType', 'column', 'GradeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Grade', 'schema', 'edfi', 'table', 'GradeType', 'column', 'GradeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradeType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradeType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Grade type.', 'schema', 'edfi', 'table', 'GradeType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradeType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradeType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'GradeType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradeType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradeType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the grade type.
', 'schema', 'edfi', 'table', 'GradeType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradeType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradeType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of grade in a report card or transcript (e.g., Final, Exam, Grading Period).', 'schema', 'edfi', 'table', 'GradeType'
go

/* 
 * TABLE: [edfi].[GradingPeriod] 
 */

CREATE TABLE [edfi].[GradingPeriod](
    [GradingPeriodDescriptorId]  int                 NOT NULL,
    [SchoolId]                   int                 NOT NULL,
    [BeginDate]                  date                NOT NULL,
    [TotalInstructionalDays]     int                 NOT NULL,
    [EndDate]                    date                NOT NULL,
    [PeriodSequence]             int                 NULL,
    [Id]                         uniqueidentifier    CONSTRAINT [GradingPeriod_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]           datetime            CONSTRAINT [GradingPeriod_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                 datetime            CONSTRAINT [GradingPeriod_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GradingPeriod] PRIMARY KEY CLUSTERED ([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
)
go



IF OBJECT_ID('edfi.GradingPeriod') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GradingPeriod >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GradingPeriod >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'GradingPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'GradingPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the grading period during the school year in which the grade is offered (e.g., 1st cycle, 1st semester)', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'GradingPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the first day of the GradingPeriod.', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'TotalInstructionalDays'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'TotalInstructionalDays'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Total days available for educational instruction during the grading period.', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'TotalInstructionalDays'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the last day of the GradingPeriod.', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'PeriodSequence'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'PeriodSequence'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The sequential order of this period relative to other periods.', 'schema', 'edfi', 'table', 'GradingPeriod', 'column', 'PeriodSequence'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriod', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriod'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents the time span for which grades are reported.', 'schema', 'edfi', 'table', 'GradingPeriod'
go

/* 
 * TABLE: [edfi].[GradingPeriodDescriptor] 
 */

CREATE TABLE [edfi].[GradingPeriodDescriptor](
    [GradingPeriodDescriptorId]  int    NOT NULL,
    [GradingPeriodTypeId]        int    NOT NULL,
    CONSTRAINT [PK_GradingPeriodDescriptor] PRIMARY KEY CLUSTERED ([GradingPeriodDescriptorId])
)
go



IF OBJECT_ID('edfi.GradingPeriodDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GradingPeriodDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GradingPeriodDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodDescriptor', 'column', 'GradingPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodDescriptor', 'column', 'GradingPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GradingPeriodDescriptor', 'column', 'GradingPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodDescriptor', 'column', 'GradingPeriodTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodDescriptor', 'column', 'GradingPeriodTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for GradingPeriod', 'schema', 'edfi', 'table', 'GradingPeriodDescriptor', 'column', 'GradingPeriodTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the name of the period for which grades are reported. The mapping of descriptor values to known Ed-Fi enumeration values is required.', 'schema', 'edfi', 'table', 'GradingPeriodDescriptor'
go

/* 
 * TABLE: [edfi].[GradingPeriodType] 
 */

CREATE TABLE [edfi].[GradingPeriodType](
    [GradingPeriodTypeId]  int                 IDENTITY(1,1),
    [CodeValue]            nvarchar(50)        NOT NULL,
    [Description]          nvarchar(1024)      NOT NULL,
    [PeriodSequence]       int                 NULL,
    [ShortDescription]     nvarchar(450)       NOT NULL,
    [Id]                   uniqueidentifier    CONSTRAINT [GradingPeriodType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]     datetime            CONSTRAINT [GradingPeriodType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]           datetime            CONSTRAINT [GradingPeriodType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GradingPeriodType] PRIMARY KEY CLUSTERED ([GradingPeriodTypeId])
)
go



IF OBJECT_ID('edfi.GradingPeriodType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GradingPeriodType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GradingPeriodType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'GradingPeriodTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'GradingPeriodTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for GradingPeriod', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'GradingPeriodTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for GradingPeriod type.', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'PeriodSequence'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'PeriodSequence'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The sequential order of this period relative to other periods.', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'PeriodSequence'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the grading period type.', 'schema', 'edfi', 'table', 'GradingPeriodType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GradingPeriodType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the period for which grades are reported.', 'schema', 'edfi', 'table', 'GradingPeriodType'
go

/* 
 * TABLE: [edfi].[GraduationPlan] 
 */

CREATE TABLE [edfi].[GraduationPlan](
    [GraduationPlanTypeDescriptorId]  int                 NOT NULL,
    [EducationOrganizationId]         int                 NOT NULL,
    [GraduationSchoolYear]            smallint            NOT NULL,
    [IndividualPlan]                  bit                 NULL,
    [TotalRequiredCredits]            decimal(9, 2)       NOT NULL,
    [TotalRequiredCreditTypeId]       int                 NULL,
    [TotalRequiredCreditConversion]   decimal(9, 2)       NULL,
    [Id]                              uniqueidentifier    CONSTRAINT [GraduationPlan_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                datetime            CONSTRAINT [GraduationPlan_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                      datetime            CONSTRAINT [GraduationPlan_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GraduationPlan] PRIMARY KEY CLUSTERED ([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
)
go



IF OBJECT_ID('edfi.GraduationPlan') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GraduationPlan >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GraduationPlan >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'GraduationPlanTypeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'GraduationPlanTypeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'GraduationPlanTypeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'GraduationSchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'GraduationSchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for School', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'GraduationSchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'IndividualPlan'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'IndividualPlan'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indicator of whether the GraduationPlan is tailored for an individual.', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'IndividualPlan'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'TotalRequiredCredits'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'TotalRequiredCredits'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The total number of credits required for graduation under this plan.', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'TotalRequiredCredits'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'TotalRequiredCreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'TotalRequiredCreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Credit', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'TotalRequiredCreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'TotalRequiredCreditConversion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'TotalRequiredCreditConversion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', 'schema', 'edfi', 'table', 'GraduationPlan', 'column', 'TotalRequiredCreditConversion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlan'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity is a plan outlining the required credits, credits by subject, credits by course, and other criteria required for graduation. A graduation plan may be one or more standard plans defined by an education organization and/or individual plans for some or all students.', 'schema', 'edfi', 'table', 'GraduationPlan'
go

/* 
 * TABLE: [edfi].[GraduationPlanCreditsByCourse] 
 */

CREATE TABLE [edfi].[GraduationPlanCreditsByCourse](
    [EducationOrganizationId]          int              NOT NULL,
    [Credits]                          decimal(9, 2)    NOT NULL,
    [CreditTypeId]                     int              NULL,
    [CreditConversion]                 decimal(9, 2)    NULL,
    [WhenTakenGradeLevelDescriptorId]  int              NULL,
    [GraduationPlanTypeDescriptorId]   int              NOT NULL,
    [GraduationSchoolYear]             smallint         NOT NULL,
    [CourseSetName]                    nvarchar(120)    NOT NULL,
    [CreateDate]                       datetime         CONSTRAINT [GraduationPlanCreditsByCourse_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GraduationPlanCreditsByCourse] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [CourseSetName])
)
go



IF OBJECT_ID('edfi.GraduationPlanCreditsByCourse') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GraduationPlanCreditsByCourse >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GraduationPlanCreditsByCourse >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'Credits'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'Credits'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The value of credits or units of value awarded for the completion of a course.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'Credits'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'CreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'CreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Credit', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'CreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'CreditConversion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'CreditConversion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'CreditConversion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'WhenTakenGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'WhenTakenGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade level when the student is planned to take the course.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'WhenTakenGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'GraduationPlanTypeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'GraduationPlanTypeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'GraduationPlanTypeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'GraduationSchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'GraduationSchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Graduation Plan', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'GraduationSchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'CourseSetName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'CourseSetName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifying name given to a collection of courses.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', 'column', 'CourseSetName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourse'
go

/* 
 * TABLE: [edfi].[GraduationPlanCreditsByCourseCourse] 
 */

CREATE TABLE [edfi].[GraduationPlanCreditsByCourseCourse](
    [EducationOrganizationId]         int              NOT NULL,
    [GraduationPlanTypeDescriptorId]  int              NOT NULL,
    [GraduationSchoolYear]            smallint         NOT NULL,
    [CourseSetName]                   nvarchar(120)    NOT NULL,
    [CourseEducationOrganizationId]   int              NOT NULL,
    [CourseCode]                      nvarchar(60)     NOT NULL,
    [CreateDate]                      datetime         CONSTRAINT [GraduationPlanCreditsByCourseCourse_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GraduationPlanCreditsByCourseCourse] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [CourseSetName], [CourseEducationOrganizationId], [CourseCode])
)
go



IF OBJECT_ID('edfi.GraduationPlanCreditsByCourseCourse') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GraduationPlanCreditsByCourseCourse >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GraduationPlanCreditsByCourseCourse >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column
', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'GraduationPlanTypeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'GraduationPlanTypeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'GraduationPlanTypeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'GraduationSchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'GraduationSchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'GraduationSchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'CourseSetName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'CourseSetName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifying name given to a collection of courses.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'CourseSetName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'CourseEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'CourseEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'CourseEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'CourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'CourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsByCourseCourse', 'column', 'CourseCode'
go

/* 
 * TABLE: [edfi].[GraduationPlanCreditsBySubject] 
 */

CREATE TABLE [edfi].[GraduationPlanCreditsBySubject](
    [EducationOrganizationId]         int              NOT NULL,
    [AcademicSubjectDescriptorId]     int              NOT NULL,
    [Credits]                         decimal(9, 2)    NOT NULL,
    [CreditTypeId]                    int              NULL,
    [CreditConversion]                decimal(9, 2)    NULL,
    [GraduationPlanTypeDescriptorId]  int              NOT NULL,
    [GraduationSchoolYear]            smallint         NOT NULL,
    [CreateDate]                      datetime         CONSTRAINT [GraduationPlanCreditsBySubject_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GraduationPlanCreditsBySubject] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [AcademicSubjectDescriptorId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear])
)
go



IF OBJECT_ID('edfi.GraduationPlanCreditsBySubject') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GraduationPlanCreditsBySubject >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GraduationPlanCreditsBySubject >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The intended major subject area of the graduation requirement.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'Credits'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'Credits'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The value of credits or units of value awarded for the completion of a course.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'Credits'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'CreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'CreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Credit', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'CreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'CreditConversion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'CreditConversion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'CreditConversion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'GraduationPlanTypeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'GraduationPlanTypeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'GraduationPlanTypeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'GraduationSchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'GraduationSchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for School', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', 'column', 'GraduationSchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The total number of credits required in a subject to graduate.  Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.', 'schema', 'edfi', 'table', 'GraduationPlanCreditsBySubject'
go

/* 
 * TABLE: [edfi].[GraduationPlanRequiredAssessment] 
 */

CREATE TABLE [edfi].[GraduationPlanRequiredAssessment](
    [AssessmentTitle]                 nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]     int             NOT NULL,
    [AssessedGradeLevelDescriptorId]  int             NOT NULL,
    [Version]                         int             NOT NULL,
    [EducationOrganizationId]         int             NOT NULL,
    [GraduationPlanTypeDescriptorId]  int             NOT NULL,
    [GraduationSchoolYear]            smallint        NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [GraduationPlanRequiredAssessment_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GraduationPlanRequiredAssessment] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear])
)
go



IF OBJECT_ID('edfi.GraduationPlanRequiredAssessment') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GraduationPlanRequiredAssessment >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GraduationPlanRequiredAssessment >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'GraduationPlanTypeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'GraduationPlanTypeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'GraduationPlanTypeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'GraduationSchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'GraduationSchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for School', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', 'column', 'GraduationSchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessment'
go

/* 
 * TABLE: [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] 
 */

CREATE TABLE [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel](
    [AssessmentTitle]                  nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]      int             NOT NULL,
    [AssessedGradeLevelDescriptorId]   int             NOT NULL,
    [Version]                          int             NOT NULL,
    [EducationOrganizationId]          int             NOT NULL,
    [GraduationPlanTypeDescriptorId]   int             NOT NULL,
    [GraduationSchoolYear]             smallint        NOT NULL,
    [PerformanceLevelDescriptorId]     int             NOT NULL,
    [AssessmentReportingMethodTypeId]  int             NOT NULL,
    [MinimumScore]                     nvarchar(35)    NULL,
    [MaximumScore]                     nvarchar(35)    NULL,
    [ResultDatatypeTypeId]             int             NULL,
    [CreateDate]              datetime        CONSTRAINT [GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear])
)
go



IF OBJECT_ID('edfi.GraduationPlanRequiredAssessmentAssessmentPerformanceLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GraduationPlanRequiredAssessmentAssessmentPerformanceLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GraduationPlanRequiredAssessmentAssessmentPerformanceLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the Assessment.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the assessment.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'GraduationPlanTypeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'GraduationPlanTypeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'GraduationPlanTypeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'GraduationSchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'GraduationSchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'GraduationSchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The performance level(s) defined for the assessment.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'AssessmentReportingMethodTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'AssessmentReportingMethodTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'AssessmentReportingMethodTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'MinimumScore'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'MinimumScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The minimum score required to make the indicated level of performance.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'MinimumScore'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'MaximumScore'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'MaximumScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The maximum score to make the indicated level of performance.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'MaximumScore'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'ResultDatatypeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'ResultDatatypeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', 'column', 'ResultDatatypeTypeId'
go

/* 
 * TABLE: [edfi].[GraduationPlanRequiredAssessmentScore] 
 */

CREATE TABLE [edfi].[GraduationPlanRequiredAssessmentScore](
    [AssessmentTitle]                  nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]      int             NOT NULL,
    [AssessedGradeLevelDescriptorId]   int             NOT NULL,
    [Version]                          int             NOT NULL,
    [EducationOrganizationId]          int             NOT NULL,
    [GraduationPlanTypeDescriptorId]   int             NOT NULL,
    [GraduationSchoolYear]             smallint        NOT NULL,
    [AssessmentReportingMethodTypeId]  int             NOT NULL,
    [MinimumScore]                     nvarchar(35)    NULL,
    [MaximumScore]                     nvarchar(35)    NULL,
    [ResultDatatypeTypeId]             int             NULL,
    [CreateDate]                       datetime        CONSTRAINT [GraduationPlanRequiredAssessmentScore_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GraduationPlanRequiredAssessmentScore] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [AssessmentReportingMethodTypeId])
)
go



IF OBJECT_ID('edfi.GraduationPlanRequiredAssessmentScore') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GraduationPlanRequiredAssessmentScore >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GraduationPlanRequiredAssessmentScore >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the Assessment.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the assessment.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'GraduationPlanTypeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'GraduationPlanTypeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'GraduationPlanTypeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'GraduationSchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'GraduationSchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for School', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'GraduationSchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'AssessmentReportingMethodTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'AssessmentReportingMethodTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'AssessmentReportingMethodTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'MinimumScore'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'MinimumScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The minimum score possible on the assessment.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'MinimumScore'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'MaximumScore'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'MaximumScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The maximum score possible on the assessment.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'MaximumScore'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'ResultDatatypeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'ResultDatatypeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', 'column', 'ResultDatatypeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.', 'schema', 'edfi', 'table', 'GraduationPlanRequiredAssessmentScore'
go

/* 
 * TABLE: [edfi].[GraduationPlanType] 
 */

CREATE TABLE [edfi].[GraduationPlanType](
    [GraduationPlanTypeId]  int                 IDENTITY(1,1),
    [CodeValue]             nvarchar(50)        NULL,
    [ShortDescription]      nvarchar(450)       NOT NULL,
    [Description]           nvarchar(1024)      NOT NULL,
    [Id]                    uniqueidentifier    CONSTRAINT [GraduationPlanType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]      datetime            CONSTRAINT [GraduationPlanType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]            datetime            CONSTRAINT [GraduationPlanType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GraduationPlanType] PRIMARY KEY CLUSTERED ([GraduationPlanTypeId])
)
go



IF OBJECT_ID('edfi.GraduationPlanType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GraduationPlanType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GraduationPlanType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanType', 'column', 'GraduationPlanTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanType', 'column', 'GraduationPlanTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for graduation plan type.', 'schema', 'edfi', 'table', 'GraduationPlanType', 'column', 'GraduationPlanTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for GraduationPlan type.', 'schema', 'edfi', 'table', 'GraduationPlanType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'GraduationPlanType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'GraduationPlanType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of academic plan the student is following for graduation.', 'schema', 'edfi', 'table', 'GraduationPlanType'
go

/* 
 * TABLE: [edfi].[GraduationPlanTypeDescriptor] 
 */

CREATE TABLE [edfi].[GraduationPlanTypeDescriptor](
    [GraduationPlanTypeDescriptorId]  int    NOT NULL,
    [GraduationPlanTypeId]            int    NULL,
    CONSTRAINT [PK_GraduationPlanTypeDescriptor] PRIMARY KEY CLUSTERED ([GraduationPlanTypeDescriptorId])
)
go



IF OBJECT_ID('edfi.GraduationPlanTypeDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GraduationPlanTypeDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GraduationPlanTypeDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanTypeDescriptor', 'column', 'GraduationPlanTypeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanTypeDescriptor', 'column', 'GraduationPlanTypeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GraduationPlanTypeDescriptor', 'column', 'GraduationPlanTypeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanTypeDescriptor', 'column', 'GraduationPlanTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanTypeDescriptor', 'column', 'GraduationPlanTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for graduation plan type.', 'schema', 'edfi', 'table', 'GraduationPlanTypeDescriptor', 'column', 'GraduationPlanTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanTypeDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GraduationPlanTypeDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the set of graduation plan types.', 'schema', 'edfi', 'table', 'GraduationPlanTypeDescriptor'
go

/* 
 * TABLE: [edfi].[GunFreeSchoolsActReportingStatusType] 
 */

CREATE TABLE [edfi].[GunFreeSchoolsActReportingStatusType](
    [GunFreeSchoolsActReportingStatusTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                               nvarchar(50)        NOT NULL,
    [Description]                             nvarchar(1024)      NOT NULL,
    [ShortDescription]                        nvarchar(450)       NOT NULL,
    [Id]                                      uniqueidentifier    CONSTRAINT [GunFreeSchoolsActReportingStatusType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                        datetime            CONSTRAINT [GunFreeSchoolsActReportingStatusType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                              datetime            CONSTRAINT [GunFreeSchoolsActReportingStatusType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_GunFreeSchoolsActReportingStatusType] PRIMARY KEY CLUSTERED ([GunFreeSchoolsActReportingStatusTypeId])
)
go



IF OBJECT_ID('edfi.GunFreeSchoolsActReportingStatusType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.GunFreeSchoolsActReportingStatusType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.GunFreeSchoolsActReportingStatusType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType', 'column', 'GunFreeSchoolsActReportingStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType', 'column', 'GunFreeSchoolsActReportingStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType', 'column', 'GunFreeSchoolsActReportingStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of whether the school or local education agency (LEA) submitted a Gun-Free Schools Act (GFSA) of 1994 report to the state, as defined by Title 18, Section 921.', 'schema', 'edfi', 'table', 'GunFreeSchoolsActReportingStatusType'
go

/* 
 * TABLE: [edfi].[IdentificationDocumentUseType] 
 */

CREATE TABLE [edfi].[IdentificationDocumentUseType](
    [IdentificationDocumentUseTypeId]  int                 IDENTITY(1,1),
    [Description]                      nvarchar(1024)      NULL,
    [CodeValue]                        nvarchar(50)        NULL,
    [ShortDescription]                 nvarchar(450)       NOT NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [IdentificationDocumentUseType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [IdentificationDocumentUseType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [IdentificationDocumentUseType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_IdentificationDocumentUseType] PRIMARY KEY CLUSTERED ([IdentificationDocumentUseTypeId])
)
go



IF OBJECT_ID('edfi.IdentificationDocumentUseType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.IdentificationDocumentUseType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.IdentificationDocumentUseType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType', 'column', 'IdentificationDocumentUseTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType', 'column', 'IdentificationDocumentUseTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType', 'column', 'IdentificationDocumentUseTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for identification document use type.', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the identification document use type.', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifies the type of use given to an identification document.', 'schema', 'edfi', 'table', 'IdentificationDocumentUseType'
go

/* 
 * TABLE: [edfi].[IncidentLocationType] 
 */

CREATE TABLE [edfi].[IncidentLocationType](
    [IncidentLocationTypeId]  int                 IDENTITY(1,1),
    [CodeValue]               nvarchar(50)        NOT NULL,
    [Description]             nvarchar(1024)      NOT NULL,
    [ShortDescription]        nvarchar(450)       NOT NULL,
    [Id]                      uniqueidentifier    CONSTRAINT [IncidentLocationType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]        datetime            CONSTRAINT [IncidentLocationType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]              datetime            CONSTRAINT [IncidentLocationType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_IncidentLocationType] PRIMARY KEY CLUSTERED ([IncidentLocationTypeId])
)
go



IF OBJECT_ID('edfi.IncidentLocationType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.IncidentLocationType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.IncidentLocationType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IncidentLocationType', 'column', 'IncidentLocationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IncidentLocationType', 'column', 'IncidentLocationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for IncidentLocation', 'schema', 'edfi', 'table', 'IncidentLocationType', 'column', 'IncidentLocationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IncidentLocationType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IncidentLocationType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for IncidentLocation type.', 'schema', 'edfi', 'table', 'IncidentLocationType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IncidentLocationType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IncidentLocationType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'IncidentLocationType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IncidentLocationType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IncidentLocationType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the incident location type.', 'schema', 'edfi', 'table', 'IncidentLocationType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IncidentLocationType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IncidentLocationType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifies where the incident occurred and whether or not it occurred on school property.', 'schema', 'edfi', 'table', 'IncidentLocationType'
go

/* 
 * TABLE: [edfi].[InstitutionTelephoneNumberType] 
 */

CREATE TABLE [edfi].[InstitutionTelephoneNumberType](
    [InstitutionTelephoneNumberTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                         nvarchar(50)        NOT NULL,
    [Description]                       nvarchar(1024)      NOT NULL,
    [ShortDescription]                  nvarchar(450)       NOT NULL,
    [Id]                                uniqueidentifier    CONSTRAINT [InstitutionTelephoneNumberType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                  datetime            CONSTRAINT [InstitutionTelephoneNumberType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                        datetime            CONSTRAINT [InstitutionTelephoneNumberType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InstitutionTelephoneNumberType] PRIMARY KEY CLUSTERED ([InstitutionTelephoneNumberTypeId])
)
go



IF OBJECT_ID('edfi.InstitutionTelephoneNumberType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InstitutionTelephoneNumberType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InstitutionTelephoneNumberType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType', 'column', 'InstitutionTelephoneNumberTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType', 'column', 'InstitutionTelephoneNumberTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for InstitutionalTelephoneNumber', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType', 'column', 'InstitutionTelephoneNumberTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for InstitutionalTelephoneNumber type.', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the institution telephone number typeShortDescription.', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of communication number listed for an organization.', 'schema', 'edfi', 'table', 'InstitutionTelephoneNumberType'
go

/* 
 * TABLE: [edfi].[IntegratedTechnologyStatusType] 
 */

CREATE TABLE [edfi].[IntegratedTechnologyStatusType](
    [IntegratedTechnologyStatusTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                         nvarchar(50)        NOT NULL,
    [ShortDescription]                  nvarchar(450)       NOT NULL,
    [Description]                       nvarchar(1024)      NOT NULL,
    [Id]                                uniqueidentifier    CONSTRAINT [IntegratedTechnologyStatusType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                  datetime            CONSTRAINT [IntegratedTechnologyStatusType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                        datetime            CONSTRAINT [IntegratedTechnologyStatusType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_IntegratedTechnologyStatusType] PRIMARY KEY CLUSTERED ([IntegratedTechnologyStatusTypeId])
)
go



IF OBJECT_ID('edfi.IntegratedTechnologyStatusType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.IntegratedTechnologyStatusType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.IntegratedTechnologyStatusType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType', 'column', 'IntegratedTechnologyStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType', 'column', 'IntegratedTechnologyStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType', 'column', 'IntegratedTechnologyStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for integrated technology status type.', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the integrated technology status type.', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description of integrated technology Status type.', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the extent to which the district has effectively and fully integrated technology, as defined by the state.', 'schema', 'edfi', 'table', 'IntegratedTechnologyStatusType'
go

/* 
 * TABLE: [edfi].[InteractivityStyleType] 
 */

CREATE TABLE [edfi].[InteractivityStyleType](
    [InteractivityStyleTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                 nvarchar(50)        NOT NULL,
    [ShortDescription]          nvarchar(450)       NOT NULL,
    [Description]               nvarchar(1024)      NOT NULL,
    [Id]                        uniqueidentifier    CONSTRAINT [InteractivityStyleType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]          datetime            CONSTRAINT [InteractivityStyleType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                datetime            CONSTRAINT [InteractivityStyleType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InteractivityStyleType] PRIMARY KEY CLUSTERED ([InteractivityStyleTypeId])
)
go



IF OBJECT_ID('edfi.InteractivityStyleType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InteractivityStyleType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InteractivityStyleType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InteractivityStyleType', 'column', 'InteractivityStyleTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InteractivityStyleType', 'column', 'InteractivityStyleTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InteractivityStyleType', 'column', 'InteractivityStyleTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InteractivityStyleType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InteractivityStyleType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'InteractivityStyleType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InteractivityStyleType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InteractivityStyleType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'InteractivityStyleType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InteractivityStyleType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InteractivityStyleType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'InteractivityStyleType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InteractivityStyleType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InteractivityStyleType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.', 'schema', 'edfi', 'table', 'InteractivityStyleType'
go

/* 
 * TABLE: [edfi].[InternetAccessType] 
 */

CREATE TABLE [edfi].[InternetAccessType](
    [InternetAccessTypeId]  int                 IDENTITY(1,1),
    [ShortDescription]      nvarchar(450)       NOT NULL,
    [Description]           nvarchar(1024)      NULL,
    [CodeValue]             nvarchar(50)        NULL,
    [Id]                    uniqueidentifier    CONSTRAINT [InternetAccessType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]      datetime            CONSTRAINT [InternetAccessType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]            datetime            CONSTRAINT [InternetAccessType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InternetAccessType] PRIMARY KEY CLUSTERED ([InternetAccessTypeId])
)
go



IF OBJECT_ID('edfi.InternetAccessType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InternetAccessType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InternetAccessType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InternetAccessType', 'column', 'InternetAccessTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InternetAccessType', 'column', 'InternetAccessTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InternetAccessType', 'column', 'InternetAccessTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InternetAccessType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InternetAccessType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'InternetAccessType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InternetAccessType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InternetAccessType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'InternetAccessType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InternetAccessType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InternetAccessType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for internet access type.', 'schema', 'edfi', 'table', 'InternetAccessType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InternetAccessType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InternetAccessType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of Internet access available.', 'schema', 'edfi', 'table', 'InternetAccessType'
go

/* 
 * TABLE: [edfi].[Intervention] 
 */

CREATE TABLE [edfi].[Intervention](
    [InterventionIdentificationCode]  nvarchar(60)        NOT NULL,
    [EducationOrganizationId]         int                 NOT NULL,
    [InterventionClassTypeId]         int                 NOT NULL,
    [DeliveryMethodTypeId]            int                 NOT NULL,
    [BeginDate]                       date                NOT NULL,
    [EndDate]                         date                NULL,
    [Id]                              uniqueidentifier    CONSTRAINT [Intervention_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                datetime            CONSTRAINT [Intervention_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                      datetime            CONSTRAINT [Intervention_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Intervention] PRIMARY KEY CLUSTERED ([InterventionIdentificationCode], [EducationOrganizationId])
)
go



IF OBJECT_ID('edfi.Intervention') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Intervention >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Intervention >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Intervention', 'column', 'InterventionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Intervention', 'column', 'InterventionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Intervention', 'column', 'InterventionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Intervention', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Intervention', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'Intervention', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Intervention', 'column', 'InterventionClassTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Intervention', 'column', 'InterventionClassTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Intervention', 'column', 'InterventionClassTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Intervention', 'column', 'DeliveryMethodTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Intervention', 'column', 'DeliveryMethodTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Intervention', 'column', 'DeliveryMethodTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Intervention', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Intervention', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The start date for the intervention implementation.', 'schema', 'edfi', 'table', 'Intervention', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Intervention', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Intervention', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The end date for the intervention implementation.', 'schema', 'edfi', 'table', 'Intervention', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Intervention', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Intervention'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An implementation of an instructional approach focusing on the specific techniques and materials used to teach a given subject.', 'schema', 'edfi', 'table', 'Intervention'
go

/* 
 * TABLE: [edfi].[InterventionAppropriateGradeLevel] 
 */

CREATE TABLE [edfi].[InterventionAppropriateGradeLevel](
    [InterventionIdentificationCode]  nvarchar(60)    NOT NULL,
    [EducationOrganizationId]         int             NOT NULL,
    [GradeLevelDescriptorId]          int             NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [InterventionAppropriateGradeLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionAppropriateGradeLevel] PRIMARY KEY CLUSTERED ([InterventionIdentificationCode], [EducationOrganizationId], [GradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.InterventionAppropriateGradeLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionAppropriateGradeLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionAppropriateGradeLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateGradeLevel', 'column', 'InterventionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateGradeLevel', 'column', 'InterventionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionAppropriateGradeLevel', 'column', 'InterventionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateGradeLevel', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateGradeLevel', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionAppropriateGradeLevel', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateGradeLevel', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateGradeLevel', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for GradeLevel', 'schema', 'edfi', 'table', 'InterventionAppropriateGradeLevel', 'column', 'GradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateGradeLevel', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateGradeLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Grade levels for the intervention.', 'schema', 'edfi', 'table', 'InterventionAppropriateGradeLevel'
go

/* 
 * TABLE: [edfi].[InterventionAppropriateSex] 
 */

CREATE TABLE [edfi].[InterventionAppropriateSex](
    [InterventionIdentificationCode]  nvarchar(60)    NOT NULL,
    [EducationOrganizationId]         int             NOT NULL,
    [SexTypeId]                       int             NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [InterventionAppropriateSex_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionAppropriateSex] PRIMARY KEY CLUSTERED ([InterventionIdentificationCode], [EducationOrganizationId], [SexTypeId])
)
go



IF OBJECT_ID('edfi.InterventionAppropriateSex') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionAppropriateSex >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionAppropriateSex >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateSex', 'column', 'InterventionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateSex', 'column', 'InterventionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionAppropriateSex', 'column', 'InterventionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateSex', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateSex', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionAppropriateSex', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateSex', 'column', 'SexTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateSex', 'column', 'SexTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Sex', 'schema', 'edfi', 'table', 'InterventionAppropriateSex', 'column', 'SexTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateSex', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionAppropriateSex'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Gender(s) for which the intervention is appropriate.', 'schema', 'edfi', 'table', 'InterventionAppropriateSex'
go

/* 
 * TABLE: [edfi].[InterventionClassType] 
 */

CREATE TABLE [edfi].[InterventionClassType](
    [InterventionClassTypeId]  int                 IDENTITY(1,1),
    [ShortDescription]         nvarchar(450)       NOT NULL,
    [CodeValue]                nvarchar(50)        NULL,
    [Description]              nvarchar(1024)      NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [InterventionClassType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [InterventionClassType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [InterventionClassType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionClassType] PRIMARY KEY CLUSTERED ([InterventionClassTypeId])
)
go



IF OBJECT_ID('edfi.InterventionClassType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionClassType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionClassType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionClassType', 'column', 'InterventionClassTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionClassType', 'column', 'InterventionClassTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionClassType', 'column', 'InterventionClassTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionClassType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionClassType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'InterventionClassType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionClassType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionClassType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for intervention class type.', 'schema', 'edfi', 'table', 'InterventionClassType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionClassType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionClassType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description of intervention class type.', 'schema', 'edfi', 'table', 'InterventionClassType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionClassType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionClassType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The way in which an intervention is used: curriculum, supplement, or practice.', 'schema', 'edfi', 'table', 'InterventionClassType'
go

/* 
 * TABLE: [edfi].[InterventionDiagnosis] 
 */

CREATE TABLE [edfi].[InterventionDiagnosis](
    [InterventionIdentificationCode]  nvarchar(60)    NOT NULL,
    [EducationOrganizationId]         int             NOT NULL,
    [DiagnosisDescriptorId]           int             NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [InterventionDiagnosis_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionDiagnosis] PRIMARY KEY CLUSTERED ([InterventionIdentificationCode], [EducationOrganizationId], [DiagnosisDescriptorId])
)
go



IF OBJECT_ID('edfi.InterventionDiagnosis') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionDiagnosis >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionDiagnosis >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionDiagnosis', 'column', 'InterventionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionDiagnosis', 'column', 'InterventionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionDiagnosis', 'column', 'InterventionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionDiagnosis', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionDiagnosis', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionDiagnosis', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionDiagnosis', 'column', 'DiagnosisDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionDiagnosis', 'column', 'DiagnosisDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionDiagnosis', 'column', 'DiagnosisDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionDiagnosis', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionDiagnosis'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Targeted purpose of the intervention (e.g., attendance issue, dropout risk).', 'schema', 'edfi', 'table', 'InterventionDiagnosis'
go

/* 
 * TABLE: [edfi].[InterventionEducationContent] 
 */

CREATE TABLE [edfi].[InterventionEducationContent](
    [InterventionIdentificationCode]  nvarchar(60)     NOT NULL,
    [EducationOrganizationId]         int              NOT NULL,
    [ContentIdentifier]               nvarchar(225)    NOT NULL,
    [CreateDate]                      datetime         CONSTRAINT [InterventionEducationContent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionEducationContent] PRIMARY KEY CLUSTERED ([InterventionIdentificationCode], [EducationOrganizationId], [ContentIdentifier])
)
go



IF OBJECT_ID('edfi.InterventionEducationContent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionEducationContent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionEducationContent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionEducationContent', 'column', 'InterventionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionEducationContent', 'column', 'InterventionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionEducationContent', 'column', 'InterventionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionEducationContent', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionEducationContent', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionEducationContent', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionEducationContent', 'column', 'ContentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionEducationContent', 'column', 'ContentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the content.', 'schema', 'edfi', 'table', 'InterventionEducationContent', 'column', 'ContentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionEducationContent', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionEducationContent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Resources related to or used in this intervention, including any documentation around the intervention prescription itself. Since an intervention prescription is intended to be a published intervention, an intervention prescription should have at least one such resource.', 'schema', 'edfi', 'table', 'InterventionEducationContent'
go

/* 
 * TABLE: [edfi].[InterventionEffectivenessRatingType] 
 */

CREATE TABLE [edfi].[InterventionEffectivenessRatingType](
    [InterventionEffectivenessRatingTypeId]  int                 IDENTITY(1,1),
    [ShortDescription]                       nvarchar(450)       NOT NULL,
    [CodeValue]                              nvarchar(50)        NULL,
    [Description]                            nvarchar(1024)      NULL,
    [Id]                                     uniqueidentifier    CONSTRAINT [InterventionEffectivenessRatingType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                       datetime            CONSTRAINT [InterventionEffectivenessRatingType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                             datetime            CONSTRAINT [InterventionEffectivenessRatingType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionEffectivenessRatingType] PRIMARY KEY CLUSTERED ([InterventionEffectivenessRatingTypeId])
)
go



IF OBJECT_ID('edfi.InterventionEffectivenessRatingType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionEffectivenessRatingType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionEffectivenessRatingType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType', 'column', 'InterventionEffectivenessRatingTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType', 'column', 'InterventionEffectivenessRatingTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType', 'column', 'InterventionEffectivenessRatingTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for intervention effectiveness rating type.', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description of intervention effectiveness rating type.', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Rating Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.', 'schema', 'edfi', 'table', 'InterventionEffectivenessRatingType'
go

/* 
 * TABLE: [edfi].[InterventionInterventionPrescription] 
 */

CREATE TABLE [edfi].[InterventionInterventionPrescription](
    [InterventionIdentificationCode]                   nvarchar(60)    NOT NULL,
    [EducationOrganizationId]                          int             NOT NULL,
    [InterventionPrescriptionIdentificationCode]       nvarchar(60)    NOT NULL,
    [InterventionPrescriptionEducationOrganizationId]  int             NOT NULL,
    [CreateDate]                                       datetime        CONSTRAINT [InterventionInterventionPrescription_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionInterventionPrescription] PRIMARY KEY CLUSTERED ([InterventionIdentificationCode], [EducationOrganizationId], [InterventionPrescriptionIdentificationCode], [InterventionPrescriptionEducationOrganizationId])
)
go



IF OBJECT_ID('edfi.InterventionInterventionPrescription') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionInterventionPrescription >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionInterventionPrescription >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription', 'column', 'InterventionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription', 'column', 'InterventionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription', 'column', 'InterventionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription', 'column', 'InterventionPrescriptionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription', 'column', 'InterventionPrescriptionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription', 'column', 'InterventionPrescriptionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription', 'column', 'InterventionPrescriptionEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription', 'column', 'InterventionPrescriptionEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription', 'column', 'InterventionPrescriptionEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The reference to the intervention prescription being followed in this intervention implementation.', 'schema', 'edfi', 'table', 'InterventionInterventionPrescription'
go

/* 
 * TABLE: [edfi].[InterventionLearningResourceMetadataURI] 
 */

CREATE TABLE [edfi].[InterventionLearningResourceMetadataURI](
    [InterventionIdentificationCode]  nvarchar(60)     NOT NULL,
    [EducationOrganizationId]         int              NOT NULL,
    [LearningResourceMetadataURI]     nvarchar(255)    NOT NULL,
    [CreateDate]                      datetime         CONSTRAINT [InterventionLearningResourceMetadataURI_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionLearningResourceMetadataURI] PRIMARY KEY CLUSTERED ([InterventionIdentificationCode], [EducationOrganizationId], [LearningResourceMetadataURI])
)
go



IF OBJECT_ID('edfi.InterventionLearningResourceMetadataURI') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionLearningResourceMetadataURI >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionLearningResourceMetadataURI >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionLearningResourceMetadataURI', 'column', 'InterventionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionLearningResourceMetadataURI', 'column', 'InterventionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionLearningResourceMetadataURI', 'column', 'InterventionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionLearningResourceMetadataURI', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionLearningResourceMetadataURI', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionLearningResourceMetadataURI', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionLearningResourceMetadataURI', 'column', 'LearningResourceMetadataURI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionLearningResourceMetadataURI', 'column', 'LearningResourceMetadataURI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL), file, or ftp locator.', 'schema', 'edfi', 'table', 'InterventionLearningResourceMetadataURI', 'column', 'LearningResourceMetadataURI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionLearningResourceMetadataURI', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionLearningResourceMetadataURI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Resources related to or used in this intervention, including any documentation around the intervention prescription itself. Since an intervention prescription is intended to be a published intervention, an intervention prescription should have at least one such resource.', 'schema', 'edfi', 'table', 'InterventionLearningResourceMetadataURI'
go

/* 
 * TABLE: [edfi].[InterventionMeetingTime] 
 */

CREATE TABLE [edfi].[InterventionMeetingTime](
    [InterventionIdentificationCode]  nvarchar(60)    NOT NULL,
    [EducationOrganizationId]         int             NOT NULL,
    [SchoolId]                        int             NOT NULL,
    [ClassPeriodName]                 nvarchar(20)    NOT NULL,
    [AlternateDayName]                nvarchar(20)    NULL,
    [StartTime]                       time(7)         NOT NULL,
    [EndTime]                         time(7)         NOT NULL,
    [OfficialAttendancePeriod]        bit             NULL,
    [CreateDate]                      datetime        CONSTRAINT [InterventionMeetingTime_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionMeetingTime] PRIMARY KEY CLUSTERED ([InterventionIdentificationCode], [EducationOrganizationId], [SchoolId], [ClassPeriodName])
)
go



IF OBJECT_ID('edfi.InterventionMeetingTime') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionMeetingTime >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionMeetingTime >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'InterventionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'InterventionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'InterventionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'AlternateDayName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'AlternateDayName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'used for the bell schedule, another name for day (e.g., Blue day, Red day).', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'AlternateDayName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'StartTime'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'StartTime'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the time of day the class begins.', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'StartTime'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'EndTime'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'EndTime'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the time of day the class ends.', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'EndTime'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'OfficialAttendancePeriod'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'OfficialAttendancePeriod'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator of whether this meeting time is used for official daily attendance.', 'schema', 'edfi', 'table', 'InterventionMeetingTime', 'column', 'OfficialAttendancePeriod'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionMeetingTime'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The times at which this intervention is scheduled to meet.', 'schema', 'edfi', 'table', 'InterventionMeetingTime'
go

/* 
 * TABLE: [edfi].[InterventionPopulationServed] 
 */

CREATE TABLE [edfi].[InterventionPopulationServed](
    [InterventionIdentificationCode]  nvarchar(60)    NOT NULL,
    [EducationOrganizationId]         int             NOT NULL,
    [PopulationServedTypeId]          int             NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [InterventionPopulationServed_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionPopulationServed] PRIMARY KEY CLUSTERED ([InterventionIdentificationCode], [EducationOrganizationId], [PopulationServedTypeId])
)
go



IF OBJECT_ID('edfi.InterventionPopulationServed') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionPopulationServed >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionPopulationServed >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPopulationServed', 'column', 'InterventionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPopulationServed', 'column', 'InterventionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionPopulationServed', 'column', 'InterventionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPopulationServed', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPopulationServed', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionPopulationServed', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPopulationServed', 'column', 'PopulationServedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPopulationServed', 'column', 'PopulationServedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for PopulationServed', 'schema', 'edfi', 'table', 'InterventionPopulationServed', 'column', 'PopulationServedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPopulationServed', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPopulationServed'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A subset of students that are the focus of the intervention. ', 'schema', 'edfi', 'table', 'InterventionPopulationServed'
go

/* 
 * TABLE: [edfi].[InterventionPrescription] 
 */

CREATE TABLE [edfi].[InterventionPrescription](
    [InterventionPrescriptionIdentificationCode]  nvarchar(60)        NOT NULL,
    [EducationOrganizationId]                     int                 NOT NULL,
    [InterventionClassTypeId]                     int                 NOT NULL,
    [DeliveryMethodTypeId]                        int                 NOT NULL,
    [Id]                                          uniqueidentifier    CONSTRAINT [InterventionPrescription_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                            datetime            CONSTRAINT [InterventionPrescription_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                                  datetime            CONSTRAINT [InterventionPrescription_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionPrescription] PRIMARY KEY CLUSTERED ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
)
go



IF OBJECT_ID('edfi.InterventionPrescription') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionPrescription >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionPrescription >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescription', 'column', 'InterventionPrescriptionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescription', 'column', 'InterventionPrescriptionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionPrescription', 'column', 'InterventionPrescriptionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescription', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescription', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionPrescription', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescription', 'column', 'InterventionClassTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescription', 'column', 'InterventionClassTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionPrescription', 'column', 'InterventionClassTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescription', 'column', 'DeliveryMethodTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescription', 'column', 'DeliveryMethodTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionPrescription', 'column', 'DeliveryMethodTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescription', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents a formal prescription of an instructional approach focusing on the specific techniques and materials used to teach a given subject. This can be prescribed by academic research, an interventions vendor, or another entity.', 'schema', 'edfi', 'table', 'InterventionPrescription'
go

/* 
 * TABLE: [edfi].[InterventionPrescriptionAppropriateGradeLevel] 
 */

CREATE TABLE [edfi].[InterventionPrescriptionAppropriateGradeLevel](
    [InterventionPrescriptionIdentificationCode]  nvarchar(60)    NOT NULL,
    [EducationOrganizationId]                     int             NOT NULL,
    [GradeLevelDescriptorId]                      int             NOT NULL,
    [CreateDate]                                  datetime        CONSTRAINT [InterventionPrescriptionAppropriateGradeLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionPrescriptionAppropriateGradeLevel] PRIMARY KEY CLUSTERED ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId], [GradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.InterventionPrescriptionAppropriateGradeLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionPrescriptionAppropriateGradeLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionPrescriptionAppropriateGradeLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateGradeLevel', 'column', 'InterventionPrescriptionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateGradeLevel', 'column', 'InterventionPrescriptionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateGradeLevel', 'column', 'InterventionPrescriptionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateGradeLevel', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateGradeLevel', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateGradeLevel', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateGradeLevel', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateGradeLevel', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for GradeLevel', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateGradeLevel', 'column', 'GradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateGradeLevel', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateGradeLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Grade levels for the prescribed intervention-if omitted, considered generally applicable.', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateGradeLevel'
go

/* 
 * TABLE: [edfi].[InterventionPrescriptionAppropriateSex] 
 */

CREATE TABLE [edfi].[InterventionPrescriptionAppropriateSex](
    [InterventionPrescriptionIdentificationCode]  nvarchar(60)    NOT NULL,
    [EducationOrganizationId]                     int             NOT NULL,
    [SexTypeId]                                   int             NOT NULL,
    [CreateDate]                                  datetime        CONSTRAINT [InterventionPrescriptionAppropriateSex_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionPrescriptionAppropriateSex] PRIMARY KEY CLUSTERED ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId], [SexTypeId])
)
go



IF OBJECT_ID('edfi.InterventionPrescriptionAppropriateSex') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionPrescriptionAppropriateSex >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionPrescriptionAppropriateSex >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateSex', 'column', 'InterventionPrescriptionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateSex', 'column', 'InterventionPrescriptionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateSex', 'column', 'InterventionPrescriptionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateSex', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateSex', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateSex', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateSex', 'column', 'SexTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateSex', 'column', 'SexTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Sex', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateSex', 'column', 'SexTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateSex', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateSex'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Gender(s) for which the intervention prescription is appropriate.', 'schema', 'edfi', 'table', 'InterventionPrescriptionAppropriateSex'
go

/* 
 * TABLE: [edfi].[InterventionPrescriptionDiagnosis] 
 */

CREATE TABLE [edfi].[InterventionPrescriptionDiagnosis](
    [InterventionPrescriptionIdentificationCode]  nvarchar(60)    NOT NULL,
    [EducationOrganizationId]                     int             NOT NULL,
    [DiagnosisDescriptorId]                       int             NOT NULL,
    [CreateDate]                                  datetime        CONSTRAINT [InterventionPrescriptionDiagnosis_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionPrescriptionDiagnosis] PRIMARY KEY CLUSTERED ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId], [DiagnosisDescriptorId])
)
go



IF OBJECT_ID('edfi.InterventionPrescriptionDiagnosis') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionPrescriptionDiagnosis >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionPrescriptionDiagnosis >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionDiagnosis', 'column', 'InterventionPrescriptionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionDiagnosis', 'column', 'InterventionPrescriptionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionPrescriptionDiagnosis', 'column', 'InterventionPrescriptionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionDiagnosis', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionDiagnosis', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionPrescriptionDiagnosis', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionDiagnosis', 'column', 'DiagnosisDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionDiagnosis', 'column', 'DiagnosisDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionPrescriptionDiagnosis', 'column', 'DiagnosisDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionDiagnosis', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionDiagnosis'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Targeted purpose of the intervention (e.g., attendance issue, dropout risk).', 'schema', 'edfi', 'table', 'InterventionPrescriptionDiagnosis'
go

/* 
 * TABLE: [edfi].[InterventionPrescriptionEducationContent] 
 */

CREATE TABLE [edfi].[InterventionPrescriptionEducationContent](
    [InterventionPrescriptionIdentificationCode]  nvarchar(60)     NOT NULL,
    [EducationOrganizationId]                     int              NOT NULL,
    [ContentIdentifier]                           nvarchar(225)    NOT NULL,
    [CreateDate]                                  datetime         CONSTRAINT [InterventionPrescriptionEducationContent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionPrescriptionEducationContent] PRIMARY KEY CLUSTERED ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId], [ContentIdentifier])
)
go



IF OBJECT_ID('edfi.InterventionPrescriptionEducationContent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionPrescriptionEducationContent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionPrescriptionEducationContent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionEducationContent', 'column', 'InterventionPrescriptionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionEducationContent', 'column', 'InterventionPrescriptionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionPrescriptionEducationContent', 'column', 'InterventionPrescriptionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionEducationContent', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionEducationContent', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionPrescriptionEducationContent', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionEducationContent', 'column', 'ContentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionEducationContent', 'column', 'ContentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the content.', 'schema', 'edfi', 'table', 'InterventionPrescriptionEducationContent', 'column', 'ContentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionEducationContent', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionEducationContent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Resources related to or used in this intervention prescription, including any documentation around the intervention prescription itself. Since an intervention prescription is intended to be a published intervention, an intervention prescription should have at least one such resource.', 'schema', 'edfi', 'table', 'InterventionPrescriptionEducationContent'
go

/* 
 * TABLE: [edfi].[InterventionPrescriptionLearningResourceMetadataURI] 
 */

CREATE TABLE [edfi].[InterventionPrescriptionLearningResourceMetadataURI](
    [InterventionPrescriptionIdentificationCode]  nvarchar(60)     NOT NULL,
    [EducationOrganizationId]                     int              NOT NULL,
    [LearningResourceMetadataURI]                 nvarchar(255)    NOT NULL,
    [CreateDate]                                  datetime         CONSTRAINT [InterventionPrescriptionLearningResourceMetadataURI_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionPrescriptionLearningResourceMetadataURI] PRIMARY KEY CLUSTERED ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId], [LearningResourceMetadataURI])
)
go



IF OBJECT_ID('edfi.InterventionPrescriptionLearningResourceMetadataURI') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionPrescriptionLearningResourceMetadataURI >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionPrescriptionLearningResourceMetadataURI >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionLearningResourceMetadataURI', 'column', 'InterventionPrescriptionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionLearningResourceMetadataURI', 'column', 'InterventionPrescriptionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionPrescriptionLearningResourceMetadataURI', 'column', 'InterventionPrescriptionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionLearningResourceMetadataURI', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionLearningResourceMetadataURI', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionPrescriptionLearningResourceMetadataURI', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionLearningResourceMetadataURI', 'column', 'LearningResourceMetadataURI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionLearningResourceMetadataURI', 'column', 'LearningResourceMetadataURI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL), file, or ftp locator.', 'schema', 'edfi', 'table', 'InterventionPrescriptionLearningResourceMetadataURI', 'column', 'LearningResourceMetadataURI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionLearningResourceMetadataURI', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionLearningResourceMetadataURI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Resources related to or used in this intervention prescription, including any documentation around the intervention prescription itself. Since an intervention prescription is intended to be a published intervention, an intervention prescription should have at least one such resource.', 'schema', 'edfi', 'table', 'InterventionPrescriptionLearningResourceMetadataURI'
go

/* 
 * TABLE: [edfi].[InterventionPrescriptionPopulationServed] 
 */

CREATE TABLE [edfi].[InterventionPrescriptionPopulationServed](
    [InterventionPrescriptionIdentificationCode]  nvarchar(60)    NOT NULL,
    [EducationOrganizationId]                     int             NOT NULL,
    [PopulationServedTypeId]                      int             NOT NULL,
    [CreateDate]                                  datetime        CONSTRAINT [InterventionPrescriptionPopulationServed_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionPrescriptionPopulationServed] PRIMARY KEY CLUSTERED ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId], [PopulationServedTypeId])
)
go



IF OBJECT_ID('edfi.InterventionPrescriptionPopulationServed') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionPrescriptionPopulationServed >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionPrescriptionPopulationServed >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionPopulationServed', 'column', 'InterventionPrescriptionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionPopulationServed', 'column', 'InterventionPrescriptionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionPrescriptionPopulationServed', 'column', 'InterventionPrescriptionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionPopulationServed', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionPopulationServed', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionPrescriptionPopulationServed', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionPopulationServed', 'column', 'PopulationServedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionPopulationServed', 'column', 'PopulationServedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for PopulationServed', 'schema', 'edfi', 'table', 'InterventionPrescriptionPopulationServed', 'column', 'PopulationServedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionPopulationServed', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionPopulationServed'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A subset of students that are the focus of the intervention.', 'schema', 'edfi', 'table', 'InterventionPrescriptionPopulationServed'
go

/* 
 * TABLE: [edfi].[InterventionPrescriptionURI] 
 */

CREATE TABLE [edfi].[InterventionPrescriptionURI](
    [InterventionPrescriptionIdentificationCode]  nvarchar(60)     NOT NULL,
    [EducationOrganizationId]                     int              NOT NULL,
    [URI]                                         nvarchar(255)    NOT NULL,
    [CreateDate]                                  datetime         CONSTRAINT [InterventionPrescriptionURI_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionPrescriptionURI] PRIMARY KEY CLUSTERED ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId], [URI])
)
go



IF OBJECT_ID('edfi.InterventionPrescriptionURI') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionPrescriptionURI >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionPrescriptionURI >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionURI', 'column', 'InterventionPrescriptionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionURI', 'column', 'InterventionPrescriptionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionPrescriptionURI', 'column', 'InterventionPrescriptionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionURI', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionURI', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionPrescriptionURI', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionURI', 'column', 'URI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionURI', 'column', 'URI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL), file, or ftp locator.', 'schema', 'edfi', 'table', 'InterventionPrescriptionURI', 'column', 'URI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionURI', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionPrescriptionURI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Resources related to or used in this intervention prescription, including any documentation around the intervention prescription itself. Since an intervention prescription is intended to be a published intervention, an intervention prescription should have at least one such resource.', 'schema', 'edfi', 'table', 'InterventionPrescriptionURI'
go

/* 
 * TABLE: [edfi].[InterventionStaff] 
 */

CREATE TABLE [edfi].[InterventionStaff](
    [InterventionIdentificationCode]  nvarchar(60)    NOT NULL,
    [EducationOrganizationId]         int             NOT NULL,
    [StaffUSI]                        int             NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [InterventionStaff_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionStaff] PRIMARY KEY CLUSTERED ([InterventionIdentificationCode], [EducationOrganizationId], [StaffUSI])
)
go



IF OBJECT_ID('edfi.InterventionStaff') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionStaff >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionStaff >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStaff', 'column', 'InterventionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStaff', 'column', 'InterventionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStaff', 'column', 'InterventionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStaff', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStaff', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionStaff', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStaff', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStaff', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'InterventionStaff', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStaff', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStaff'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff member associated with the intervention.', 'schema', 'edfi', 'table', 'InterventionStaff'
go

/* 
 * TABLE: [edfi].[InterventionStudy] 
 */

CREATE TABLE [edfi].[InterventionStudy](
    [InterventionStudyIdentificationCode]              nvarchar(60)        NOT NULL,
    [EducationOrganizationId]                          int                 NOT NULL,
    [InterventionPrescriptionIdentificationCode]       nvarchar(60)        NOT NULL,
    [InterventionPrescriptionEducationOrganizationId]  int                 NOT NULL,
    [Participants]                                     int                 NOT NULL,
    [DeliveryMethodTypeId]                             int                 NOT NULL,
    [InterventionClassTypeId]                          int                 NOT NULL,
    [Id]                                               uniqueidentifier    CONSTRAINT [InterventionStudy_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                                 datetime            CONSTRAINT [InterventionStudy_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                                       datetime            CONSTRAINT [InterventionStudy_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionStudy] PRIMARY KEY CLUSTERED ([InterventionStudyIdentificationCode], [EducationOrganizationId])
)
go



IF OBJECT_ID('edfi.InterventionStudy') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionStudy >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionStudy >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'InterventionStudyIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'InterventionStudyIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'InterventionStudyIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'InterventionPrescriptionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'InterventionPrescriptionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'InterventionPrescriptionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'InterventionPrescriptionEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'InterventionPrescriptionEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'InterventionPrescriptionEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'Participants'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'Participants'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of participants observed in the study.', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'Participants'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'DeliveryMethodTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'DeliveryMethodTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'DeliveryMethodTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'InterventionClassTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'InterventionClassTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStudy', 'column', 'InterventionClassTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudy'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An experimental or quasi-experimental study of an intervention technique.', 'schema', 'edfi', 'table', 'InterventionStudy'
go

/* 
 * TABLE: [edfi].[InterventionStudyAppropriateGradeLevel] 
 */

CREATE TABLE [edfi].[InterventionStudyAppropriateGradeLevel](
    [InterventionStudyIdentificationCode]  nvarchar(60)    NOT NULL,
    [EducationOrganizationId]              int             NOT NULL,
    [GradeLevelDescriptorId]               int             NOT NULL,
    [CreateDate]                           datetime        CONSTRAINT [InterventionStudyAppropriateGradeLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionStudyAppropriateGradeLevel] PRIMARY KEY CLUSTERED ([InterventionStudyIdentificationCode], [EducationOrganizationId], [GradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.InterventionStudyAppropriateGradeLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionStudyAppropriateGradeLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionStudyAppropriateGradeLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateGradeLevel', 'column', 'InterventionStudyIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateGradeLevel', 'column', 'InterventionStudyIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateGradeLevel', 'column', 'InterventionStudyIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateGradeLevel', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateGradeLevel', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateGradeLevel', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateGradeLevel', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateGradeLevel', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for GradeLevel', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateGradeLevel', 'column', 'GradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateGradeLevel', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateGradeLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Grade levels participating in this study.', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateGradeLevel'
go

/* 
 * TABLE: [edfi].[InterventionStudyAppropriateSex] 
 */

CREATE TABLE [edfi].[InterventionStudyAppropriateSex](
    [InterventionStudyIdentificationCode]  nvarchar(60)    NOT NULL,
    [EducationOrganizationId]              int             NOT NULL,
    [SexTypeId]                            int             NOT NULL,
    [CreateDate]                           datetime        CONSTRAINT [InterventionStudyAppropriateSex_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionStudyAppropriateSex] PRIMARY KEY CLUSTERED ([InterventionStudyIdentificationCode], [EducationOrganizationId], [SexTypeId])
)
go



IF OBJECT_ID('edfi.InterventionStudyAppropriateSex') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionStudyAppropriateSex >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionStudyAppropriateSex >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateSex', 'column', 'InterventionStudyIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateSex', 'column', 'InterventionStudyIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateSex', 'column', 'InterventionStudyIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateSex', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateSex', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateSex', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateSex', 'column', 'SexTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateSex', 'column', 'SexTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Sex', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateSex', 'column', 'SexTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateSex', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateSex'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Genders participating in this study-if omitted, considered to be all.', 'schema', 'edfi', 'table', 'InterventionStudyAppropriateSex'
go

/* 
 * TABLE: [edfi].[InterventionStudyEducationContent] 
 */

CREATE TABLE [edfi].[InterventionStudyEducationContent](
    [InterventionStudyIdentificationCode]  nvarchar(60)     NOT NULL,
    [EducationOrganizationId]              int              NOT NULL,
    [ContentIdentifier]                    nvarchar(225)    NOT NULL,
    [CreateDate]                           datetime         CONSTRAINT [InterventionStudyEducationContent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionStudyEducationContent] PRIMARY KEY CLUSTERED ([InterventionStudyIdentificationCode], [EducationOrganizationId], [ContentIdentifier])
)
go



IF OBJECT_ID('edfi.InterventionStudyEducationContent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionStudyEducationContent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionStudyEducationContent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyEducationContent', 'column', 'InterventionStudyIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyEducationContent', 'column', 'InterventionStudyIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStudyEducationContent', 'column', 'InterventionStudyIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyEducationContent', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyEducationContent', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionStudyEducationContent', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyEducationContent', 'column', 'ContentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyEducationContent', 'column', 'ContentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the content.', 'schema', 'edfi', 'table', 'InterventionStudyEducationContent', 'column', 'ContentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyEducationContent', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyEducationContent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reference to any published papers, reports or other documents about this intervention study.', 'schema', 'edfi', 'table', 'InterventionStudyEducationContent'
go

/* 
 * TABLE: [edfi].[InterventionStudyInterventionEffectiveness] 
 */

CREATE TABLE [edfi].[InterventionStudyInterventionEffectiveness](
    [InterventionStudyIdentificationCode]    nvarchar(60)    NOT NULL,
    [EducationOrganizationId]                int             NOT NULL,
    [DiagnosisDescriptorId]                  int             NOT NULL,
    [PopulationServedTypeId]                 int             NOT NULL,
    [GradeLevelDescriptorId]                 int             NOT NULL,
    [ImprovementIndex]                       int             NULL,
    [InterventionEffectivenessRatingTypeId]  int             NOT NULL,
    [CreateDate]                             datetime        CONSTRAINT [InterventionStudyInterventionEffectiveness_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionStudyInterventionEffectiveness] PRIMARY KEY CLUSTERED ([InterventionStudyIdentificationCode], [EducationOrganizationId], [DiagnosisDescriptorId], [PopulationServedTypeId], [GradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.InterventionStudyInterventionEffectiveness') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionStudyInterventionEffectiveness >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionStudyInterventionEffectiveness >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'InterventionStudyIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'InterventionStudyIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'InterventionStudyIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'DiagnosisDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'DiagnosisDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'DiagnosisDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'PopulationServedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'PopulationServedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for PopulationServed', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'PopulationServedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for GradeLevel', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'GradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'ImprovementIndex'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'ImprovementIndex'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Along a percentile distribution of students, the improvement index represents the change in an average student''s percentile rank that is considered to be due to the intervention.', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'ImprovementIndex'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'InterventionEffectivenessRatingTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'InterventionEffectivenessRatingTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', 'column', 'InterventionEffectivenessRatingTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Measurement of the effectiveness of the intervention per diagnosis.', 'schema', 'edfi', 'table', 'InterventionStudyInterventionEffectiveness'
go

/* 
 * TABLE: [edfi].[InterventionStudyLearningResourceMetadataURI] 
 */

CREATE TABLE [edfi].[InterventionStudyLearningResourceMetadataURI](
    [InterventionStudyIdentificationCode]  nvarchar(60)     NOT NULL,
    [EducationOrganizationId]              int              NOT NULL,
    [LearningResourceMetadataURI]          nvarchar(255)    NOT NULL,
    [CreateDate]                           datetime         CONSTRAINT [InterventionStudyLearningResourceMetadataURI_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionStudyLearningResourceMetadataURI] PRIMARY KEY CLUSTERED ([InterventionStudyIdentificationCode], [EducationOrganizationId], [LearningResourceMetadataURI])
)
go



IF OBJECT_ID('edfi.InterventionStudyLearningResourceMetadataURI') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionStudyLearningResourceMetadataURI >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionStudyLearningResourceMetadataURI >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyLearningResourceMetadataURI', 'column', 'InterventionStudyIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyLearningResourceMetadataURI', 'column', 'InterventionStudyIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStudyLearningResourceMetadataURI', 'column', 'InterventionStudyIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyLearningResourceMetadataURI', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyLearningResourceMetadataURI', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionStudyLearningResourceMetadataURI', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyLearningResourceMetadataURI', 'column', 'LearningResourceMetadataURI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyLearningResourceMetadataURI', 'column', 'LearningResourceMetadataURI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL), file, or ftp locator.', 'schema', 'edfi', 'table', 'InterventionStudyLearningResourceMetadataURI', 'column', 'LearningResourceMetadataURI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyLearningResourceMetadataURI', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyLearningResourceMetadataURI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reference to any published papers, reports or other documents about this intervention study.', 'schema', 'edfi', 'table', 'InterventionStudyLearningResourceMetadataURI'
go

/* 
 * TABLE: [edfi].[InterventionStudyPopulationServed] 
 */

CREATE TABLE [edfi].[InterventionStudyPopulationServed](
    [InterventionStudyIdentificationCode]  nvarchar(60)    NOT NULL,
    [EducationOrganizationId]              int             NOT NULL,
    [PopulationServedTypeId]               int             NOT NULL,
    [CreateDate]                           datetime        CONSTRAINT [InterventionStudyPopulationServed_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionStudyPopulationServed] PRIMARY KEY CLUSTERED ([InterventionStudyIdentificationCode], [EducationOrganizationId], [PopulationServedTypeId])
)
go



IF OBJECT_ID('edfi.InterventionStudyPopulationServed') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionStudyPopulationServed >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionStudyPopulationServed >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyPopulationServed', 'column', 'InterventionStudyIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyPopulationServed', 'column', 'InterventionStudyIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStudyPopulationServed', 'column', 'InterventionStudyIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyPopulationServed', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyPopulationServed', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionStudyPopulationServed', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyPopulationServed', 'column', 'PopulationServedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyPopulationServed', 'column', 'PopulationServedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for PopulationServed', 'schema', 'edfi', 'table', 'InterventionStudyPopulationServed', 'column', 'PopulationServedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyPopulationServed', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyPopulationServed'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A subset of students that are the focus of the intervention.', 'schema', 'edfi', 'table', 'InterventionStudyPopulationServed'
go

/* 
 * TABLE: [edfi].[InterventionStudyStateAbbreviation] 
 */

CREATE TABLE [edfi].[InterventionStudyStateAbbreviation](
    [InterventionStudyIdentificationCode]  nvarchar(60)    NOT NULL,
    [EducationOrganizationId]              int             NOT NULL,
    [StateAbbreviationTypeId]              int             NOT NULL,
    [CreateDate]                           datetime        CONSTRAINT [InterventionStudyStateAbbreviation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionStudyStateAbbreviation] PRIMARY KEY CLUSTERED ([InterventionStudyIdentificationCode], [EducationOrganizationId], [StateAbbreviationTypeId])
)
go



IF OBJECT_ID('edfi.InterventionStudyStateAbbreviation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionStudyStateAbbreviation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionStudyStateAbbreviation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyStateAbbreviation', 'column', 'InterventionStudyIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyStateAbbreviation', 'column', 'InterventionStudyIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStudyStateAbbreviation', 'column', 'InterventionStudyIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyStateAbbreviation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyStateAbbreviation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionStudyStateAbbreviation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyStateAbbreviation', 'column', 'StateAbbreviationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyStateAbbreviation', 'column', 'StateAbbreviationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for StateAbbreviationType', 'schema', 'edfi', 'table', 'InterventionStudyStateAbbreviation', 'column', 'StateAbbreviationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyStateAbbreviation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyStateAbbreviation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The abbreviation for the state (within the United States) or outlying area in which the school system that the participants of the study are considered to be a part of is located.', 'schema', 'edfi', 'table', 'InterventionStudyStateAbbreviation'
go

/* 
 * TABLE: [edfi].[InterventionStudyURI] 
 */

CREATE TABLE [edfi].[InterventionStudyURI](
    [InterventionStudyIdentificationCode]  nvarchar(60)     NOT NULL,
    [EducationOrganizationId]              int              NOT NULL,
    [URI]                                  nvarchar(255)    NOT NULL,
    [CreateDate]                           datetime         CONSTRAINT [InterventionStudyURI_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionStudyURI] PRIMARY KEY CLUSTERED ([InterventionStudyIdentificationCode], [EducationOrganizationId], [URI])
)
go



IF OBJECT_ID('edfi.InterventionStudyURI') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionStudyURI >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionStudyURI >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyURI', 'column', 'InterventionStudyIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyURI', 'column', 'InterventionStudyIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionStudyURI', 'column', 'InterventionStudyIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyURI', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyURI', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionStudyURI', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyURI', 'column', 'URI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyURI', 'column', 'URI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL), file, or ftp locator.', 'schema', 'edfi', 'table', 'InterventionStudyURI', 'column', 'URI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyURI', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionStudyURI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reference to any published papers, reports or other documents about this intervention study.', 'schema', 'edfi', 'table', 'InterventionStudyURI'
go

/* 
 * TABLE: [edfi].[InterventionURI] 
 */

CREATE TABLE [edfi].[InterventionURI](
    [InterventionIdentificationCode]  nvarchar(60)     NOT NULL,
    [EducationOrganizationId]         int              NOT NULL,
    [URI]                             nvarchar(255)    NOT NULL,
    [CreateDate]                      datetime         CONSTRAINT [InterventionURI_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_InterventionURI] PRIMARY KEY CLUSTERED ([InterventionIdentificationCode], [EducationOrganizationId], [URI])
)
go



IF OBJECT_ID('edfi.InterventionURI') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.InterventionURI >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.InterventionURI >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionURI', 'column', 'InterventionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionURI', 'column', 'InterventionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'InterventionURI', 'column', 'InterventionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionURI', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionURI', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'InterventionURI', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionURI', 'column', 'URI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionURI', 'column', 'URI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL), file, or ftp locator.', 'schema', 'edfi', 'table', 'InterventionURI', 'column', 'URI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'InterventionURI', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'InterventionURI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Resources related to or used in this intervention, including any documentation around the intervention prescription itself. Since an intervention prescription is intended to be a published intervention, an intervention prescription should have at least one such resource.', 'schema', 'edfi', 'table', 'InterventionURI'
go

/* 
 * TABLE: [edfi].[LanguageDescriptor] 
 */

CREATE TABLE [edfi].[LanguageDescriptor](
    [LanguageDescriptorId]  int    NOT NULL,
    [LanguageTypeId]        int    NULL,
    CONSTRAINT [PK_LanguageDescriptor] PRIMARY KEY CLUSTERED ([LanguageDescriptorId])
)
go



IF OBJECT_ID('edfi.LanguageDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LanguageDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LanguageDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LanguageDescriptor', 'column', 'LanguageDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LanguageDescriptor', 'column', 'LanguageDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'LanguageDescriptor', 'column', 'LanguageDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LanguageDescriptor', 'column', 'LanguageTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LanguageDescriptor', 'column', 'LanguageTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Language(s) the individual uses to communicate', 'schema', 'edfi', 'table', 'LanguageDescriptor', 'column', 'LanguageTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LanguageDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LanguageDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the language(s) that are spoken or written.', 'schema', 'edfi', 'table', 'LanguageDescriptor'
go

/* 
 * TABLE: [edfi].[LanguageType] 
 */

CREATE TABLE [edfi].[LanguageType](
    [LanguageTypeId]    int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [LanguageType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [LanguageType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [LanguageType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LanguagesType] PRIMARY KEY CLUSTERED ([LanguageTypeId])
)
go



IF OBJECT_ID('edfi.LanguageType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LanguageType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LanguageType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LanguageType', 'column', 'LanguageTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LanguageType', 'column', 'LanguageTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Language(s) the individual uses to communicate', 'schema', 'edfi', 'table', 'LanguageType', 'column', 'LanguageTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LanguageType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LanguageType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Languages type.', 'schema', 'edfi', 'table', 'LanguageType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LanguageType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LanguageType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for Languages type.', 'schema', 'edfi', 'table', 'LanguageType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LanguageType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LanguageType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Short description for languages type.', 'schema', 'edfi', 'table', 'LanguageType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LanguageType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LanguageType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Language the individual uses to communicate.', 'schema', 'edfi', 'table', 'LanguageType'
go

/* 
 * TABLE: [edfi].[LanguageUseType] 
 */

CREATE TABLE [edfi].[LanguageUseType](
    [LanguageUseTypeId]  int                 IDENTITY(1,1),
    [CodeValue]          nvarchar(50)        NOT NULL,
    [Description]        nvarchar(1024)      NOT NULL,
    [ShortDescription]   nvarchar(450)       NOT NULL,
    [Id]                 uniqueidentifier    CONSTRAINT [LanguageUseType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]   datetime            CONSTRAINT [LanguageUseType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]         datetime            CONSTRAINT [LanguageUseType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LanguageUseType] PRIMARY KEY CLUSTERED ([LanguageUseTypeId])
)
go



IF OBJECT_ID('edfi.LanguageUseType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LanguageUseType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LanguageUseType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LanguageUseType', 'column', 'LanguageUseTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LanguageUseType', 'column', 'LanguageUseTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'LanguageUseType', 'column', 'LanguageUseTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LanguageUseType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LanguageUseType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'LanguageUseType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LanguageUseType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LanguageUseType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'LanguageUseType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LanguageUseType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LanguageUseType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the language use type.', 'schema', 'edfi', 'table', 'LanguageUseType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LanguageUseType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LanguageUseType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The category denoting how a language is used.', 'schema', 'edfi', 'table', 'LanguageUseType'
go

/* 
 * TABLE: [edfi].[LearningObjective] 
 */

CREATE TABLE [edfi].[LearningObjective](
    [Objective]                              nvarchar(60)        NOT NULL,
    [AcademicSubjectDescriptorId]            int                 NOT NULL,
    [ObjectiveGradeLevelDescriptorId]        int                 NOT NULL,
    [LearningObjectiveId]                    nvarchar(60)        NULL,
    [Description]                            nvarchar(1024)      NULL,
    [ParentObjective]                        nvarchar(60)        NULL,
    [ParentAcademicSubjectDescriptorId]      int                 NULL,
    [ParentObjectiveGradeLevelDescriptorId]  int                 NULL,
    [Nomenclature]                           nvarchar(35)        NULL,
    [SuccessCriteria]                        nvarchar(150)       NULL,
    [Namespace]                              nvarchar(255)       NOT NULL,
    [Id]                                     uniqueidentifier    CONSTRAINT [LearningObjective_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                       datetime            CONSTRAINT [LearningObjective_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                             datetime            CONSTRAINT [LearningObjective_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LearningObjective] PRIMARY KEY CLUSTERED ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.LearningObjective') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LearningObjective >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LearningObjective >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'Objective'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'Objective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The designated title of the learning objective.', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'Objective'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade level for which the learning objective is targeted,', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'LearningObjectiveId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'LearningObjectiveId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'LearningObjectiveId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A detailed description of the entity.', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'ParentObjective'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'ParentObjective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The designated title of the learning objective.', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'ParentObjective'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'ParentAcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'ParentAcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'ParentAcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'ParentObjectiveGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'ParentObjectiveGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade level for which the learning objective is targeted,', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'ParentObjectiveGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'Nomenclature'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'Nomenclature'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reflects the common nomenclature for an element.', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'Nomenclature'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'SuccessCriteria'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'SuccessCriteria'
END
exec sys.sp_addextendedproperty 'MS_Description', 'One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective.', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'SuccessCriteria'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'Namespace'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'Namespace'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Namespace for the LearningObjective.
', 'schema', 'edfi', 'table', 'LearningObjective', 'column', 'Namespace'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjective', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents identified learning objectives for courses in specific grades.', 'schema', 'edfi', 'table', 'LearningObjective'
go

/* 
 * TABLE: [edfi].[LearningObjectiveContentStandard] 
 */

CREATE TABLE [edfi].[LearningObjectiveContentStandard](
    [Objective]                         nvarchar(60)     NOT NULL,
    [AcademicSubjectDescriptorId]       int              NOT NULL,
    [ObjectiveGradeLevelDescriptorId]   int              NOT NULL,
    [Title]                             nvarchar(75)     NOT NULL,
    [Version]                           nvarchar(50)     NULL,
    [URI]                               nvarchar(255)    NULL,
    [PublicationDate]                   date             NULL,
    [PublicationYear]                   smallint         NULL,
    [PublicationStatusTypeId]           int              NULL,
    [MandatingEducationOrganizationId]  int              NULL,
    [BeginDate]                         date             NULL,
    [EndDate]                           date             NULL,
    [CreateDate]                        datetime         CONSTRAINT [LearningObjectiveContentStandard_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LearningObjectiveContentStandard] PRIMARY KEY CLUSTERED ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.LearningObjectiveContentStandard') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LearningObjectiveContentStandard >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LearningObjectiveContentStandard >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'Objective'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'Objective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The designated title of the learning objective.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'Objective'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'ObjectiveGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'ObjectiveGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade level for which the learning objective is targeted,', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'ObjectiveGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'Title'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'Title'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the content standard, for example Common Core.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'Title'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the content.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'URI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'URI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL), file, or ftp locator.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'URI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'PublicationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'PublicationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date on which this content was first published.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'PublicationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'PublicationYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'PublicationYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The year at which this content was first published.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'PublicationYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'PublicationStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'PublicationStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'PublicationStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'MandatingEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'MandatingEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'MandatingEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The beginning of the period during which this learning standard document is intended for use.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The end of the period during which this learning standard document is intended for use.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents identified learning objectives for courses in specific grades.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandard'
go

/* 
 * TABLE: [edfi].[LearningObjectiveContentStandardAuthor] 
 */

CREATE TABLE [edfi].[LearningObjectiveContentStandardAuthor](
    [Objective]                        nvarchar(60)     NOT NULL,
    [AcademicSubjectDescriptorId]      int              NOT NULL,
    [ObjectiveGradeLevelDescriptorId]  int              NOT NULL,
    [Author]                           nvarchar(255)    NOT NULL,
    [CreateDate]                       datetime         CONSTRAINT [LearningObjectiveContentStandardAuthor_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LearningObjectiveContentStandardAuthor] PRIMARY KEY CLUSTERED ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId], [Author])
)
go



IF OBJECT_ID('edfi.LearningObjectiveContentStandardAuthor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LearningObjectiveContentStandardAuthor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LearningObjectiveContentStandardAuthor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor', 'column', 'Objective'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor', 'column', 'Objective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The designated title of the learning objective.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor', 'column', 'Objective'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor', 'column', 'ObjectiveGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor', 'column', 'ObjectiveGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade level for which the learning objective is targeted,', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor', 'column', 'ObjectiveGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor', 'column', 'Author'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor', 'column', 'Author'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The person or organization chiefly responsible for the intellectual content of the standard.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor', 'column', 'Author'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The person or organization chiefly responsible for the intellectual content of the standard.', 'schema', 'edfi', 'table', 'LearningObjectiveContentStandardAuthor'
go

/* 
 * TABLE: [edfi].[LearningObjectiveLearningStandard] 
 */

CREATE TABLE [edfi].[LearningObjectiveLearningStandard](
    [Objective]                        nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]      int             NOT NULL,
    [ObjectiveGradeLevelDescriptorId]  int             NOT NULL,
    [LearningStandardId]               nvarchar(60)    NOT NULL,
    [CreateDate]                       datetime        CONSTRAINT [LearningObjectiveLearningStandard_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LearningObjectiveLearningStandard] PRIMARY KEY CLUSTERED ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId], [LearningStandardId])
)
go



IF OBJECT_ID('edfi.LearningObjectiveLearningStandard') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LearningObjectiveLearningStandard >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LearningObjectiveLearningStandard >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveLearningStandard', 'column', 'Objective'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveLearningStandard', 'column', 'Objective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The designated title of the learning objective.', 'schema', 'edfi', 'table', 'LearningObjectiveLearningStandard', 'column', 'Objective'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveLearningStandard', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveLearningStandard', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'LearningObjectiveLearningStandard', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveLearningStandard', 'column', 'ObjectiveGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveLearningStandard', 'column', 'ObjectiveGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'LearningObjectiveLearningStandard', 'column', 'ObjectiveGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveLearningStandard', 'column', 'LearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningObjectiveLearningStandard', 'column', 'LearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', 'schema', 'edfi', 'table', 'LearningObjectiveLearningStandard', 'column', 'LearningStandardId'
go

/* 
 * TABLE: [edfi].[LearningStandard] 
 */

CREATE TABLE [edfi].[LearningStandard](
    [LearningStandardId]           nvarchar(60)        NOT NULL,
    [ParentLearningStandardId]     nvarchar(60)        NULL,
    [Description]                  nvarchar(1024)      NOT NULL,
    [LearningStandardItemCode]     nvarchar(60)        NULL,
    [URI]                          nvarchar(255)       NULL,
    [AcademicSubjectDescriptorId]  int                 NOT NULL,
    [CourseTitle]                  nvarchar(60)        NULL,
    [SuccessCriteria]              nvarchar(150)       NULL,
    [Id]                           uniqueidentifier    CONSTRAINT [LearningStandard_DF_Id] DEFAULT (newid()) NOT NULL,
    [Namespace]                    nvarchar(255)       NOT NULL,
    [LastModifiedDate]             datetime            CONSTRAINT [LearningStandard_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                   datetime            CONSTRAINT [LearningStandard_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LearningStandard] PRIMARY KEY CLUSTERED ([LearningStandardId])
)
go



IF OBJECT_ID('edfi.LearningStandard') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LearningStandard >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LearningStandard >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'LearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'LearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a Learning Standard.', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'LearningStandardId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'ParentLearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'ParentLearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Identifier for the specific learning standard (e.g., 111.15.3.1.A)', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'ParentLearningStandardId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A detailed description of the entity.', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'LearningStandardItemCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'LearningStandardItemCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'LearningStandardItemCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'URI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'URI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL), file, or ftp locator.', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'URI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Subject area for the learning standard.', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'CourseTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'CourseTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'CourseTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'SuccessCriteria'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'SuccessCriteria'
END
exec sys.sp_addextendedproperty 'MS_Description', 'One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningStandard.', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'SuccessCriteria'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'Namespace'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'Namespace'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Namespace for the LearningStandard.', 'schema', 'edfi', 'table', 'LearningStandard', 'column', 'Namespace'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandard', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandard'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity is a sub-element of a learning objective consisting of a precise statement of the expectation of a student''s proficiency.', 'schema', 'edfi', 'table', 'LearningStandard'
go

/* 
 * TABLE: [edfi].[LearningStandardContentStandard] 
 */

CREATE TABLE [edfi].[LearningStandardContentStandard](
    [LearningStandardId]                nvarchar(60)     NOT NULL,
    [Title]                             nvarchar(75)     NOT NULL,
    [Version]                           nvarchar(50)     NULL,
    [URI]                               nvarchar(255)    NULL,
    [PublicationDate]                   date             NULL,
    [PublicationYear]                   smallint         NULL,
    [PublicationStatusTypeId]           int              NULL,
    [MandatingEducationOrganizationId]  int              NULL,
    [BeginDate]                         date             NULL,
    [EndDate]                           date             NULL,
    [CreateDate]                        datetime         CONSTRAINT [LearningStandardContentStandard_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LearningStandardContentStandard] PRIMARY KEY CLUSTERED ([LearningStandardId])
)
go



IF OBJECT_ID('edfi.LearningStandardContentStandard') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LearningStandardContentStandard >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LearningStandardContentStandard >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'LearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'LearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Identifier for the specific learning standard (e.g., 111.15.3.1.A)', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'LearningStandardId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'Title'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'Title'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the content standard, for example Common Core.', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'Title'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the content.', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'URI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'URI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The public web site address (URL), file, or ftp locator.', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'URI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'PublicationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'PublicationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date on which this content was first published.', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'PublicationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'PublicationYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'PublicationYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The year at which this content was first published.', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'PublicationYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'PublicationStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'PublicationStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'PublicationStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'MandatingEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'MandatingEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'MandatingEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The beginning of the period during which this learning standard document is intended for use.', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The end of the period during which this learning standard document is intended for use.', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandard'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Content Standard from which the Learning Standard was derived.', 'schema', 'edfi', 'table', 'LearningStandardContentStandard'
go

/* 
 * TABLE: [edfi].[LearningStandardContentStandardAuthor] 
 */

CREATE TABLE [edfi].[LearningStandardContentStandardAuthor](
    [LearningStandardId]  nvarchar(60)     NOT NULL,
    [Author]              nvarchar(255)    NOT NULL,
    [CreateDate]          datetime         CONSTRAINT [LearningStandardContentStandardAuthor_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LearningStandardContentStandardAuthor] PRIMARY KEY CLUSTERED ([LearningStandardId], [Author])
)
go



IF OBJECT_ID('edfi.LearningStandardContentStandardAuthor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LearningStandardContentStandardAuthor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LearningStandardContentStandardAuthor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandardAuthor', 'column', 'LearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandardAuthor', 'column', 'LearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Identifier for the specific learning standard (e.g., 111.15.3.1.A)', 'schema', 'edfi', 'table', 'LearningStandardContentStandardAuthor', 'column', 'LearningStandardId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandardAuthor', 'column', 'Author'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandardAuthor', 'column', 'Author'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The person or organization chiefly responsible for the intellectual content of the standard.', 'schema', 'edfi', 'table', 'LearningStandardContentStandardAuthor', 'column', 'Author'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandardAuthor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardContentStandardAuthor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The person or organization chiefly responsible for the intellectual content of the standard.', 'schema', 'edfi', 'table', 'LearningStandardContentStandardAuthor'
go

/* 
 * TABLE: [edfi].[LearningStandardGradeLevel] 
 */

CREATE TABLE [edfi].[LearningStandardGradeLevel](
    [LearningStandardId]      nvarchar(60)    NOT NULL,
    [GradeLevelDescriptorId]  int             NOT NULL,
    [CreateDate]              datetime        CONSTRAINT [LearningStandardGradeLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LearningStandardGradeLevel] PRIMARY KEY CLUSTERED ([LearningStandardId], [GradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.LearningStandardGradeLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LearningStandardGradeLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LearningStandardGradeLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardGradeLevel', 'column', 'LearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardGradeLevel', 'column', 'LearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', 'schema', 'edfi', 'table', 'LearningStandardGradeLevel', 'column', 'LearningStandardId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardGradeLevel', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardGradeLevel', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'LearningStandardGradeLevel', 'column', 'GradeLevelDescriptorId'
go

/* 
 * TABLE: [edfi].[LearningStandardIdentificationCode] 
 */

CREATE TABLE [edfi].[LearningStandardIdentificationCode](
    [LearningStandardId]   nvarchar(60)    NOT NULL,
    [IdentificationCode]   nvarchar(60)    NOT NULL,
    [ContentStandardName]  nvarchar(65)    NOT NULL,
    [CreateDate]           datetime        CONSTRAINT [LearningStandardIdentificationCode_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LearningStandardIdentificationCode] PRIMARY KEY CLUSTERED ([LearningStandardId], [IdentificationCode], [ContentStandardName])
)
go



IF OBJECT_ID('edfi.LearningStandardIdentificationCode') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LearningStandardIdentificationCode >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LearningStandardIdentificationCode >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardIdentificationCode', 'column', 'LearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardIdentificationCode', 'column', 'LearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Provide user information to lookup and link to an existing learning standard record in the receiving system', 'schema', 'edfi', 'table', 'LearningStandardIdentificationCode', 'column', 'LearningStandardId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardIdentificationCode', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardIdentificationCode', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'LearningStandardIdentificationCode', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardIdentificationCode', 'column', 'ContentStandardName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardIdentificationCode', 'column', 'ContentStandardName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the content standard, for example Common Core.', 'schema', 'edfi', 'table', 'LearningStandardIdentificationCode', 'column', 'ContentStandardName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardIdentificationCode', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning Standard.', 'schema', 'edfi', 'table', 'LearningStandardIdentificationCode'
go

/* 
 * TABLE: [edfi].[LearningStandardPrerequisiteLearningStandard] 
 */

CREATE TABLE [edfi].[LearningStandardPrerequisiteLearningStandard](
    [LearningStandardId]              nvarchar(60)    NOT NULL,
    [PrerequisiteLearningStandardId]  nvarchar(60)    NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [LearningStandardPrerequisiteLearningStandard_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LearningStandardPrerequisiteLearningStandard] PRIMARY KEY CLUSTERED ([LearningStandardId], [PrerequisiteLearningStandardId])
)
go



IF OBJECT_ID('edfi.LearningStandardPrerequisiteLearningStandard') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LearningStandardPrerequisiteLearningStandard >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LearningStandardPrerequisiteLearningStandard >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardPrerequisiteLearningStandard', 'column', 'LearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardPrerequisiteLearningStandard', 'column', 'LearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', 'schema', 'edfi', 'table', 'LearningStandardPrerequisiteLearningStandard', 'column', 'LearningStandardId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LearningStandardPrerequisiteLearningStandard', 'column', 'PrerequisiteLearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LearningStandardPrerequisiteLearningStandard', 'column', 'PrerequisiteLearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', 'schema', 'edfi', 'table', 'LearningStandardPrerequisiteLearningStandard', 'column', 'PrerequisiteLearningStandardId'
go

/* 
 * TABLE: [edfi].[LeaveEvent] 
 */

CREATE TABLE [edfi].[LeaveEvent](
    [StaffUSI]                  int                 NOT NULL,
    [EventDate]                 date                NOT NULL,
    [LeaveEventCategoryTypeId]  int                 NOT NULL,
    [LeaveEventReason]          nvarchar(40)        NULL,
    [HoursOnLeave]              decimal(18, 2)      NULL,
    [SubstituteAssigned]        bit                 NULL,
    [Id]                        uniqueidentifier    CONSTRAINT [LeaveEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]          datetime            CONSTRAINT [LeaveEvent_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                datetime            CONSTRAINT [LeaveEvent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LeaveEvent] PRIMARY KEY CLUSTERED ([StaffUSI], [EventDate], [LeaveEventCategoryTypeId])
)
go



IF OBJECT_ID('edfi.LeaveEvent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LeaveEvent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LeaveEvent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'EventDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'EventDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Date for this leave event.', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'EventDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'LeaveEventCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'LeaveEventCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The code describing the type of leave taken, for example:  Sick  Personal  Vacation', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'LeaveEventCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'LeaveEventReason'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'LeaveEventReason'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Expanded reason for the staff leave.', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'LeaveEventReason'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'HoursOnLeave'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'HoursOnLeave'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The hours the staff was absent, if not the entire working day.', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'HoursOnLeave'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'SubstituteAssigned'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'SubstituteAssigned'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator of whether a substitute was assigned during the period of staff leave.', 'schema', 'edfi', 'table', 'LeaveEvent', 'column', 'SubstituteAssigned'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LeaveEvent', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LeaveEvent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This event entity represents the recording of the dates of staff leave (e.g., sick leave, personal time, vacation).', 'schema', 'edfi', 'table', 'LeaveEvent'
go

/* 
 * TABLE: [edfi].[LeaveEventCategoryType] 
 */

CREATE TABLE [edfi].[LeaveEventCategoryType](
    [LeaveEventCategoryTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                 nvarchar(50)        NOT NULL,
    [Description]               nvarchar(1024)      NOT NULL,
    [ShortDescription]          nvarchar(450)       NOT NULL,
    [Id]                        uniqueidentifier    CONSTRAINT [LeaveEventCategoryType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]          datetime            CONSTRAINT [LeaveEventCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                datetime            CONSTRAINT [LeaveEventCategoryType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LeaveEventCategoryType] PRIMARY KEY CLUSTERED ([LeaveEventCategoryTypeId])
)
go



IF OBJECT_ID('edfi.LeaveEventCategoryType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LeaveEventCategoryType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LeaveEventCategoryType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LeaveEventCategoryType', 'column', 'LeaveEventCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LeaveEventCategoryType', 'column', 'LeaveEventCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for LeaveEventCategory', 'schema', 'edfi', 'table', 'LeaveEventCategoryType', 'column', 'LeaveEventCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LeaveEventCategoryType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LeaveEventCategoryType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for LeaveEventCategory type.', 'schema', 'edfi', 'table', 'LeaveEventCategoryType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LeaveEventCategoryType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LeaveEventCategoryType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'LeaveEventCategoryType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LeaveEventCategoryType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LeaveEventCategoryType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the leave event category type.', 'schema', 'edfi', 'table', 'LeaveEventCategoryType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LeaveEventCategoryType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LeaveEventCategoryType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code describing the type of the leave event.', 'schema', 'edfi', 'table', 'LeaveEventCategoryType'
go

/* 
 * TABLE: [edfi].[LevelDescriptor] 
 */

CREATE TABLE [edfi].[LevelDescriptor](
    [LevelDescriptorId]  int    NOT NULL,
    CONSTRAINT [PK_LevelDescriptor] PRIMARY KEY CLUSTERED ([LevelDescriptorId])
)
go



IF OBJECT_ID('edfi.LevelDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LevelDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LevelDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LevelDescriptor', 'column', 'LevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LevelDescriptor', 'column', 'LevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'LevelDescriptor', 'column', 'LevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LevelDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LevelDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the grade level(s) certified for teaching.', 'schema', 'edfi', 'table', 'LevelDescriptor'
go

/* 
 * TABLE: [edfi].[LevelDescriptorGradeLevel] 
 */

CREATE TABLE [edfi].[LevelDescriptorGradeLevel](
    [LevelDescriptorId]       int         NOT NULL,
    [GradeLevelDescriptorId]  int         NOT NULL,
    [CreateDate]              datetime    CONSTRAINT [LevelDescriptorGradeLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LevelDescriptorGradeLevel] PRIMARY KEY CLUSTERED ([LevelDescriptorId], [GradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.LevelDescriptorGradeLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LevelDescriptorGradeLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LevelDescriptorGradeLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LevelDescriptorGradeLevel', 'column', 'LevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LevelDescriptorGradeLevel', 'column', 'LevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'LevelDescriptorGradeLevel', 'column', 'LevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LevelDescriptorGradeLevel', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LevelDescriptorGradeLevel', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for GradeLevel', 'schema', 'edfi', 'table', 'LevelDescriptorGradeLevel', 'column', 'GradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LevelDescriptorGradeLevel', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LevelDescriptorGradeLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The mapping to known grade levels for which certification exists.', 'schema', 'edfi', 'table', 'LevelDescriptorGradeLevel'
go

/* 
 * TABLE: [edfi].[LevelOfEducationDescriptor] 
 */

CREATE TABLE [edfi].[LevelOfEducationDescriptor](
    [LevelOfEducationDescriptorId]  int    NOT NULL,
    [LevelOfEducationTypeId]        int    NULL,
    CONSTRAINT [PK_LevelOfEducationDescriptor] PRIMARY KEY CLUSTERED ([LevelOfEducationDescriptorId])
)
go



IF OBJECT_ID('edfi.LevelOfEducationDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LevelOfEducationDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LevelOfEducationDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationDescriptor', 'column', 'LevelOfEducationDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationDescriptor', 'column', 'LevelOfEducationDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'LevelOfEducationDescriptor', 'column', 'LevelOfEducationDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationDescriptor', 'column', 'LevelOfEducationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationDescriptor', 'column', 'LevelOfEducationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for LevelOfEducation', 'schema', 'edfi', 'table', 'LevelOfEducationDescriptor', 'column', 'LevelOfEducationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the different levels of education achievable.', 'schema', 'edfi', 'table', 'LevelOfEducationDescriptor'
go

/* 
 * TABLE: [edfi].[LevelOfEducationType] 
 */

CREATE TABLE [edfi].[LevelOfEducationType](
    [LevelOfEducationTypeId]  int                 IDENTITY(1,1),
    [CodeValue]               nvarchar(50)        NOT NULL,
    [Description]             nvarchar(1024)      NOT NULL,
    [ShortDescription]        nvarchar(450)       NOT NULL,
    [Id]                      uniqueidentifier    CONSTRAINT [LevelOfEducationType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]        datetime            CONSTRAINT [LevelOfEducationType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]              datetime            CONSTRAINT [LevelOfEducationType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LevelOfEducationType] PRIMARY KEY CLUSTERED ([LevelOfEducationTypeId])
)
go



IF OBJECT_ID('edfi.LevelOfEducationType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LevelOfEducationType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LevelOfEducationType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationType', 'column', 'LevelOfEducationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationType', 'column', 'LevelOfEducationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for LevelOfEducation', 'schema', 'edfi', 'table', 'LevelOfEducationType', 'column', 'LevelOfEducationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for LevelOfEducation type.', 'schema', 'edfi', 'table', 'LevelOfEducationType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for LevelOfEducation type.', 'schema', 'edfi', 'table', 'LevelOfEducationType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Short description for LevelOfEducation type.', 'schema', 'edfi', 'table', 'LevelOfEducationType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LevelOfEducationType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The enumeration of the different levels of education achievable.', 'schema', 'edfi', 'table', 'LevelOfEducationType'
go

/* 
 * TABLE: [edfi].[LimitedEnglishProficiencyDescriptor] 
 */

CREATE TABLE [edfi].[LimitedEnglishProficiencyDescriptor](
    [LimitedEnglishProficiencyDescriptorId]  int    NOT NULL,
    [LimitedEnglishProficiencyTypeId]        int    NOT NULL,
    CONSTRAINT [PK_LimitedEnglishProficiencyDescriptor] PRIMARY KEY CLUSTERED ([LimitedEnglishProficiencyDescriptorId])
)
go



IF OBJECT_ID('edfi.LimitedEnglishProficiencyDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LimitedEnglishProficiencyDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LimitedEnglishProficiencyDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyDescriptor', 'column', 'LimitedEnglishProficiencyDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyDescriptor', 'column', 'LimitedEnglishProficiencyDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyDescriptor', 'column', 'LimitedEnglishProficiencyDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyDescriptor', 'column', 'LimitedEnglishProficiencyTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyDescriptor', 'column', 'LimitedEnglishProficiencyTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for LimitedEnglishProficiency', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyDescriptor', 'column', 'LimitedEnglishProficiencyTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the indications that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. The mapping of descriptor values to known Ed-Fi enumeration values is required.', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyDescriptor'
go

/* 
 * TABLE: [edfi].[LimitedEnglishProficiencyType] 
 */

CREATE TABLE [edfi].[LimitedEnglishProficiencyType](
    [LimitedEnglishProficiencyTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                        nvarchar(50)        NOT NULL,
    [Description]                      nvarchar(1024)      NOT NULL,
    [ShortDescription]                 nvarchar(450)       NOT NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [LimitedEnglishProficiencyType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [LimitedEnglishProficiencyType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [LimitedEnglishProficiencyType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LimitedEnglishProficiencyType] PRIMARY KEY CLUSTERED ([LimitedEnglishProficiencyTypeId])
)
go



IF OBJECT_ID('edfi.LimitedEnglishProficiencyType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LimitedEnglishProficiencyType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LimitedEnglishProficiencyType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType', 'column', 'LimitedEnglishProficiencyTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType', 'column', 'LimitedEnglishProficiencyTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for LimitedEnglishProficiency', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType', 'column', 'LimitedEnglishProficiencyTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for LimitedEnglishProficiency type.', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the limited English proficiency type.', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication that the student has been identified as Limited English Proficient or English Proficient by the Language Proficiency Assessment Committee (LPAC).', 'schema', 'edfi', 'table', 'LimitedEnglishProficiencyType'
go

/* 
 * TABLE: [edfi].[LocalEducationAgency] 
 */

CREATE TABLE [edfi].[LocalEducationAgency](
    [LocalEducationAgencyId]              int    NOT NULL,
    [ParentLocalEducationAgencyId]        int    NULL,
    [LocalEducationAgencyCategoryTypeId]  int    NOT NULL,
    [CharterStatusTypeId]                 int    NULL,
    [EducationServiceCenterId]            int    NULL,
    [StateEducationAgencyId]              int    NULL,
    CONSTRAINT [PK_LocalEducationAgency] PRIMARY KEY CLUSTERED ([LocalEducationAgencyId])
)
go



IF OBJECT_ID('edfi.LocalEducationAgency') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LocalEducationAgency >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LocalEducationAgency >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'LocalEducationAgencyId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'LocalEducationAgencyId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier assigned to a local education agency by the State Education Agency (SEA).', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'LocalEducationAgencyId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'ParentLocalEducationAgencyId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'ParentLocalEducationAgencyId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'ParentLocalEducationAgencyId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'LocalEducationAgencyCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'LocalEducationAgencyCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for LEACategory', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'LocalEducationAgencyCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'CharterStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'CharterStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CharterStatus', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'CharterStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'EducationServiceCenterId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'EducationServiceCenterId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationServiceCenter Identity Column', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'EducationServiceCenterId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'StateEducationAgencyId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'StateEducationAgencyId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'StateEducationAgency Identity Column', 'schema', 'edfi', 'table', 'LocalEducationAgency', 'column', 'StateEducationAgencyId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgency', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgency'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents an administrative unit at the local level which exists primarily to operate schools or to contract for educational services. It includes school districts, charter schools, charter management organizations, or other local administrative organizations.', 'schema', 'edfi', 'table', 'LocalEducationAgency'
go

/* 
 * TABLE: [edfi].[LocalEducationAgencyAccountability] 
 */

CREATE TABLE [edfi].[LocalEducationAgencyAccountability](
    [LocalEducationAgencyId]                  int         NOT NULL,
    [SchoolYear]                              smallint    NOT NULL,
    [GunFreeSchoolsActReportingStatusTypeId]  int         NULL,
    [SchoolChoiceImplementStatusTypeId]       int         NULL,
    [CreateDate]                              datetime    CONSTRAINT [LocalEducationAgencyAccountability_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LocalEducationAgencyAccountability] PRIMARY KEY CLUSTERED ([LocalEducationAgencyId], [SchoolYear])
)
go



IF OBJECT_ID('edfi.LocalEducationAgencyAccountability') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LocalEducationAgencyAccountability >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LocalEducationAgencyAccountability >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability', 'column', 'LocalEducationAgencyId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability', 'column', 'LocalEducationAgencyId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability', 'column', 'LocalEducationAgencyId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for School', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability', 'column', 'GunFreeSchoolsActReportingStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability', 'column', 'GunFreeSchoolsActReportingStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability', 'column', 'GunFreeSchoolsActReportingStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability', 'column', 'SchoolChoiceImplementStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability', 'column', 'SchoolChoiceImplementStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability', 'column', 'SchoolChoiceImplementStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity maintains information about federal reporting and accountability for Local Education Agencies.', 'schema', 'edfi', 'table', 'LocalEducationAgencyAccountability'
go

/* 
 * TABLE: [edfi].[LocalEducationAgencyCategoryType] 
 */

CREATE TABLE [edfi].[LocalEducationAgencyCategoryType](
    [LocalEducationAgencyCategoryTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                           nvarchar(50)        NOT NULL,
    [Description]                         nvarchar(1024)      NOT NULL,
    [ShortDescription]                    nvarchar(450)       NOT NULL,
    [Id]                                  uniqueidentifier    CONSTRAINT [LocalEducationAgencyCategoryType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                    datetime            CONSTRAINT [LocalEducationAgencyCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                          datetime            CONSTRAINT [LocalEducationAgencyCategoryType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LEACategoryType] PRIMARY KEY CLUSTERED ([LocalEducationAgencyCategoryTypeId])
)
go



IF OBJECT_ID('edfi.LocalEducationAgencyCategoryType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LocalEducationAgencyCategoryType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LocalEducationAgencyCategoryType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType', 'column', 'LocalEducationAgencyCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType', 'column', 'LocalEducationAgencyCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for LEACategory', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType', 'column', 'LocalEducationAgencyCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for LEACategory type.', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the local education agency category type.', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The category of local education agency/district. For example: Independent or Charter.', 'schema', 'edfi', 'table', 'LocalEducationAgencyCategoryType'
go

/* 
 * TABLE: [edfi].[LocalEducationAgencyFederalFunds] 
 */

CREATE TABLE [edfi].[LocalEducationAgencyFederalFunds](
    [LocalEducationAgencyId]                              int                 NOT NULL,
    [FiscalYear]                                          int                 NOT NULL,
    [InnovativeDollarsSpent]                              money               NULL,
    [InnovativeDollarsSpentOnStrategicPriorities]         money               NULL,
    [InnovativeProgramsFundsReceived]                     money               NULL,
    [SchoolImprovementAllocation]                         money               NULL,
    [SupplementalEducationalServicesFundsSpent]           money               NULL,
    [SupplementalEducationalServicesPerPupilExpenditure]  money               NULL,
    [SchoolImprovementReservedFundsPercentage]            decimal(5, 4)       NULL,
    [StateAssessmentAdministrationFunding]                decimal(5, 4)       NULL,
    [Id]                                                  uniqueidentifier    CONSTRAINT [LocalEducationAgencyFederalFunds_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                                    datetime            CONSTRAINT [LocalEducationAgencyFederalFunds_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                                          datetime            CONSTRAINT [LocalEducationAgencyFederalFunds_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_LocalEducationAgencyFederalFunds] PRIMARY KEY CLUSTERED ([LocalEducationAgencyId], [FiscalYear])
)
go



IF OBJECT_ID('edfi.LocalEducationAgencyFederalFunds') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.LocalEducationAgencyFederalFunds >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.LocalEducationAgencyFederalFunds >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'LocalEducationAgencyId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'LocalEducationAgencyId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'LocalEducationAgencyId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'FiscalYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'FiscalYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The school year for which the accountability is reported.', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'FiscalYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'InnovativeDollarsSpent'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'InnovativeDollarsSpent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The total Title V, Part A funds expended by LEAs.', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'InnovativeDollarsSpent'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'InnovativeDollarsSpentOnStrategicPriorities'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'InnovativeDollarsSpentOnStrategicPriorities'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities.', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'InnovativeDollarsSpentOnStrategicPriorities'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'InnovativeProgramsFundsReceived'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'InnovativeProgramsFundsReceived'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The total Title V, Part A funds received by LEAs.', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'InnovativeProgramsFundsReceived'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'SchoolImprovementAllocation'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'SchoolImprovementAllocation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The amount of Section 1003(a) and 1003(g) allocations to LEAs.', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'SchoolImprovementAllocation'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'SupplementalEducationalServicesFundsSpent'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'SupplementalEducationalServicesFundsSpent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended.', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'SupplementalEducationalServicesFundsSpent'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'SupplementalEducationalServicesPerPupilExpenditure'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'SupplementalEducationalServicesPerPupilExpenditure'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA.', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'SupplementalEducationalServicesPerPupilExpenditure'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'SchoolImprovementReservedFundsPercentage'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'SchoolImprovementReservedFundsPercentage'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and §200.100(a) of ED''s regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA.', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'SchoolImprovementReservedFundsPercentage'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'StateAssessmentAdministrationFunding'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'StateAssessmentAdministrationFunding'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state''s schools and LEAs are held accountable for results.', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', 'column', 'StateAssessmentAdministrationFunding'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Contains the information about the reception and use of federal funds for reporting purposes.', 'schema', 'edfi', 'table', 'LocalEducationAgencyFederalFunds'
go

/* 
 * TABLE: [edfi].[Location] 
 */

CREATE TABLE [edfi].[Location](
    [SchoolId]                     int                 NOT NULL,
    [ClassroomIdentificationCode]  nvarchar(20)        NOT NULL,
    [MaximumNumberOfSeats]         int                 NULL,
    [OptimalNumberOfSeats]         int                 NULL,
    [Id]                           uniqueidentifier    CONSTRAINT [Location_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]             datetime            CONSTRAINT [Location_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                   datetime            CONSTRAINT [Location_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Location] PRIMARY KEY CLUSTERED ([SchoolId], [ClassroomIdentificationCode])
)
go



IF OBJECT_ID('edfi.Location') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Location >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Location >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Location', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Location', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Location Identity Column', 'schema', 'edfi', 'table', 'Location', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Location', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Location', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'Location', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Location', 'column', 'MaximumNumberOfSeats'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Location', 'column', 'MaximumNumberOfSeats'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The most number of seats the class can maintain.', 'schema', 'edfi', 'table', 'Location', 'column', 'MaximumNumberOfSeats'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Location', 'column', 'OptimalNumberOfSeats'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Location', 'column', 'OptimalNumberOfSeats'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of seats that is most favorable to the class.', 'schema', 'edfi', 'table', 'Location', 'column', 'OptimalNumberOfSeats'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Location', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Location'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents the physical space where students gather for a particular class/section. The Location may be an indoor or outdoor area designated for the purpose of meeting the educational needs of students.', 'schema', 'edfi', 'table', 'Location'
go

/* 
 * TABLE: [edfi].[MagnetSpecialProgramEmphasisSchoolType] 
 */

CREATE TABLE [edfi].[MagnetSpecialProgramEmphasisSchoolType](
    [MagnetSpecialProgramEmphasisSchoolTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                                 nvarchar(50)        NOT NULL,
    [Description]                               nvarchar(1024)      NOT NULL,
    [ShortDescription]                          nvarchar(450)       NOT NULL,
    [Id]                                        uniqueidentifier    CONSTRAINT [MagnetSpecialProgramEmphasisSchoolType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                          datetime            CONSTRAINT [MagnetSpecialProgramEmphasisSchoolType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                                datetime            CONSTRAINT [MagnetSpecialProgramEmphasisSchoolType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_MagnetSpecialProgramEmphasisSchoolType] PRIMARY KEY CLUSTERED ([MagnetSpecialProgramEmphasisSchoolTypeId])
)
go



IF OBJECT_ID('edfi.MagnetSpecialProgramEmphasisSchoolType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.MagnetSpecialProgramEmphasisSchoolType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.MagnetSpecialProgramEmphasisSchoolType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType', 'column', 'MagnetSpecialProgramEmphasisSchoolTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType', 'column', 'MagnetSpecialProgramEmphasisSchoolTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for MagnetSpecialProgramEmphasisSchool', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType', 'column', 'MagnetSpecialProgramEmphasisSchoolTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for MagnetSpecialProgramEmphasisSchool type.', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the magnet special program emphasis school type.', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A school that has been designed to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language).', 'schema', 'edfi', 'table', 'MagnetSpecialProgramEmphasisSchoolType'
go

/* 
 * TABLE: [edfi].[MediumOfInstructionType] 
 */

CREATE TABLE [edfi].[MediumOfInstructionType](
    [MediumOfInstructionTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                  nvarchar(50)        NOT NULL,
    [Description]                nvarchar(1024)      NOT NULL,
    [ShortDescription]           nvarchar(450)       NOT NULL,
    [Id]                         uniqueidentifier    CONSTRAINT [MediumOfInstructionType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]           datetime            CONSTRAINT [MediumOfInstructionType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                 datetime            CONSTRAINT [MediumOfInstructionType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_MediumOfInstructionType] PRIMARY KEY CLUSTERED ([MediumOfInstructionTypeId])
)
go



IF OBJECT_ID('edfi.MediumOfInstructionType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.MediumOfInstructionType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.MediumOfInstructionType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MediumOfInstructionType', 'column', 'MediumOfInstructionTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MediumOfInstructionType', 'column', 'MediumOfInstructionTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for MediumOfInstruction', 'schema', 'edfi', 'table', 'MediumOfInstructionType', 'column', 'MediumOfInstructionTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MediumOfInstructionType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MediumOfInstructionType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for MediumOfInstruction type.', 'schema', 'edfi', 'table', 'MediumOfInstructionType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MediumOfInstructionType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MediumOfInstructionType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'MediumOfInstructionType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MediumOfInstructionType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MediumOfInstructionType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the medium of instruction type.', 'schema', 'edfi', 'table', 'MediumOfInstructionType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MediumOfInstructionType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MediumOfInstructionType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The media through which teachers provide instruction to students and students and teachers communicate about instructional matters.', 'schema', 'edfi', 'table', 'MediumOfInstructionType'
go

/* 
 * TABLE: [edfi].[MeetingDayType] 
 */

CREATE TABLE [edfi].[MeetingDayType](
    [MeetingDayTypeId]  int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [MeetingDayType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [MeetingDayType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [MeetingDayType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_MeetingDaysType] PRIMARY KEY CLUSTERED ([MeetingDayTypeId])
)
go



IF OBJECT_ID('edfi.MeetingDayType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.MeetingDayType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.MeetingDayType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MeetingDayType', 'column', 'MeetingDayTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MeetingDayType', 'column', 'MeetingDayTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for MeetingsDays', 'schema', 'edfi', 'table', 'MeetingDayType', 'column', 'MeetingDayTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MeetingDayType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MeetingDayType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for MeetingsDays type.', 'schema', 'edfi', 'table', 'MeetingDayType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MeetingDayType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MeetingDayType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'MeetingDayType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MeetingDayType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MeetingDayType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the meeting day type.', 'schema', 'edfi', 'table', 'MeetingDayType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MeetingDayType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MeetingDayType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The enumeration items for the day(s) of the week (e.g., Monday, Wednesday) that the class meets or an indication that a class meets "out-of-school" or "self-paced".', 'schema', 'edfi', 'table', 'MeetingDayType'
go

/* 
 * TABLE: [edfi].[MethodCreditEarnedType] 
 */

CREATE TABLE [edfi].[MethodCreditEarnedType](
    [MethodCreditEarnedTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                 nvarchar(50)        NOT NULL,
    [Description]               nvarchar(1024)      NOT NULL,
    [ShortDescription]          nvarchar(450)       NOT NULL,
    [Id]                        uniqueidentifier    CONSTRAINT [MethodCreditEarnedType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]          datetime            CONSTRAINT [MethodCreditEarnedType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                datetime            CONSTRAINT [MethodCreditEarnedType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_MethodCreditEarnedType] PRIMARY KEY CLUSTERED ([MethodCreditEarnedTypeId])
)
go



IF OBJECT_ID('edfi.MethodCreditEarnedType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.MethodCreditEarnedType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.MethodCreditEarnedType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MethodCreditEarnedType', 'column', 'MethodCreditEarnedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MethodCreditEarnedType', 'column', 'MethodCreditEarnedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for MethodCreditEarned', 'schema', 'edfi', 'table', 'MethodCreditEarnedType', 'column', 'MethodCreditEarnedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MethodCreditEarnedType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MethodCreditEarnedType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for MethodCreditEarned type.', 'schema', 'edfi', 'table', 'MethodCreditEarnedType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MethodCreditEarnedType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MethodCreditEarnedType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'MethodCreditEarnedType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MethodCreditEarnedType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MethodCreditEarnedType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the method credit earned type.', 'schema', 'edfi', 'table', 'MethodCreditEarnedType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'MethodCreditEarnedType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'MethodCreditEarnedType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The method the credits were earned, for example: Classroom, Examination, Transfer.', 'schema', 'edfi', 'table', 'MethodCreditEarnedType'
go

/* 
 * TABLE: [edfi].[NetworkPurposeType] 
 */

CREATE TABLE [edfi].[NetworkPurposeType](
    [NetworkPurposeTypeId]  int                 IDENTITY(1,1),
    [ShortDescription]      nvarchar(450)       NOT NULL,
    [Description]           nvarchar(1024)      NULL,
    [CodeValue]             nvarchar(50)        NULL,
    [Id]                    uniqueidentifier    CONSTRAINT [NetworkPurposeType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]      datetime            CONSTRAINT [NetworkPurposeType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]            datetime            CONSTRAINT [NetworkPurposeType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_NetworkPurposeType] PRIMARY KEY CLUSTERED ([NetworkPurposeTypeId])
)
go



IF OBJECT_ID('edfi.NetworkPurposeType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.NetworkPurposeType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.NetworkPurposeType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'NetworkPurposeType', 'column', 'NetworkPurposeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'NetworkPurposeType', 'column', 'NetworkPurposeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'NetworkPurposeType', 'column', 'NetworkPurposeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'NetworkPurposeType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'NetworkPurposeType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'NetworkPurposeType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'NetworkPurposeType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'NetworkPurposeType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'NetworkPurposeType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'NetworkPurposeType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'NetworkPurposeType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for network purpose type.', 'schema', 'edfi', 'table', 'NetworkPurposeType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'NetworkPurposeType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'NetworkPurposeType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The purpose(s) of the network, e.g. shared services, collective procurement.', 'schema', 'edfi', 'table', 'NetworkPurposeType'
go

/* 
 * TABLE: [edfi].[ObjectiveAssessment] 
 */

CREATE TABLE [edfi].[ObjectiveAssessment](
    [AssessmentTitle]                 nvarchar(60)        NOT NULL,
    [AcademicSubjectDescriptorId]     int                 NOT NULL,
    [AssessedGradeLevelDescriptorId]  int                 NOT NULL,
    [Version]                         int                 NOT NULL,
    [IdentificationCode]              nvarchar(60)        NOT NULL,
    [ParentIdentificationCode]        nvarchar(60)        NULL,
    [MaxRawScore]                     int                 NULL,
    [PercentOfAssessment]             decimal(5, 4)       NULL,
    [Nomenclature]                    nvarchar(35)        NULL,
    [Description]                     nvarchar(1024)      NULL,
    [Id]                              uniqueidentifier    CONSTRAINT [ObjectiveAssessment_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                datetime            CONSTRAINT [ObjectiveAssessment_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                      datetime            CONSTRAINT [ObjectiveAssessment_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ObjectiveAssessment] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
)
go



IF OBJECT_ID('edfi.ObjectiveAssessment') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ObjectiveAssessment >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ObjectiveAssessment >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'ParentIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'ParentIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'ParentIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'MaxRawScore'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'MaxRawScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The maximum raw score achievable across all assessment items that are correct and scored at the maximum.', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'MaxRawScore'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'PercentOfAssessment'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'PercentOfAssessment'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The percentage of the Assessment that tests this objective.', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'PercentOfAssessment'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'Nomenclature'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'Nomenclature'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reflects the common nomenclature for an element.', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'Nomenclature'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A detailed description of the entity.', 'schema', 'edfi', 'table', 'ObjectiveAssessment', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessment'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents subtests that assess specific learning objectives.', 'schema', 'edfi', 'table', 'ObjectiveAssessment'
go

/* 
 * TABLE: [edfi].[ObjectiveAssessmentAssessmentItem] 
 */

CREATE TABLE [edfi].[ObjectiveAssessmentAssessmentItem](
    [AssessmentTitle]                   nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]       int             NOT NULL,
    [AssessedGradeLevelDescriptorId]    int             NOT NULL,
    [Version]                           int             NOT NULL,
    [IdentificationCode]                nvarchar(60)    NOT NULL,
    [AssessmentItemIdentificationCode]  nvarchar(60)    NOT NULL,
    [CreateDate]                        datetime        CONSTRAINT [ObjectiveAssessmentAssessmentItem_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ObjectiveAssessmentAssessmentItem] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [AssessmentItemIdentificationCode])
)
go



IF OBJECT_ID('edfi.ObjectiveAssessmentAssessmentItem') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ObjectiveAssessmentAssessmentItem >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ObjectiveAssessmentAssessmentItem >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'AssessmentItemIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'AssessmentItemIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', 'column', 'AssessmentItemIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem'
END
exec sys.sp_addextendedproperty 'MS_Description', 'References individual test items, if appropriate.', 'schema', 'edfi', 'table', 'ObjectiveAssessmentAssessmentItem'
go

/* 
 * TABLE: [edfi].[ObjectiveAssessmentLearningObjective] 
 */

CREATE TABLE [edfi].[ObjectiveAssessmentLearningObjective](
    [AssessmentTitle]                 nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]     int             NOT NULL,
    [AssessedGradeLevelDescriptorId]  int             NOT NULL,
    [Version]                         int             NOT NULL,
    [IdentificationCode]              nvarchar(60)    NOT NULL,
    [Objective]                       nvarchar(60)    NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [ObjectiveAssessmentLearningObjective_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ObjectiveAssessmentLearningObjective_1] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [Objective])
)
go



IF OBJECT_ID('edfi.ObjectiveAssessmentLearningObjective') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ObjectiveAssessmentLearningObjective >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ObjectiveAssessmentLearningObjective >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'Objective'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'Objective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The designated title of the learning objective.', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', 'column', 'Objective'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'References the Learning Objective(s) the Objective Assessment tests.', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningObjective'
go

/* 
 * TABLE: [edfi].[ObjectiveAssessmentLearningStandard] 
 */

CREATE TABLE [edfi].[ObjectiveAssessmentLearningStandard](
    [AssessmentTitle]                 nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]     int             NOT NULL,
    [AssessedGradeLevelDescriptorId]  int             NOT NULL,
    [Version]                         int             NOT NULL,
    [IdentificationCode]              nvarchar(60)    NOT NULL,
    [LearningStandardId]              nvarchar(60)    NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [ObjectiveAssessmentLearningStandard_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ObjectiveAssessmentLearningStandard] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [LearningStandardId])
)
go



IF OBJECT_ID('edfi.ObjectiveAssessmentLearningStandard') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ObjectiveAssessmentLearningStandard >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ObjectiveAssessmentLearningStandard >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'LearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'LearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Identifier for the specific learning standard (e.g., 111.15.3.1.A)', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', 'column', 'LearningStandardId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Learning Standard tested by this objective assessment.', 'schema', 'edfi', 'table', 'ObjectiveAssessmentLearningStandard'
go

/* 
 * TABLE: [edfi].[ObjectiveAssessmentPerformanceLevel] 
 */

CREATE TABLE [edfi].[ObjectiveAssessmentPerformanceLevel](
    [AssessmentTitle]                  nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]      int             NOT NULL,
    [AssessedGradeLevelDescriptorId]   int             NOT NULL,
    [Version]                          int             NOT NULL,
    [IdentificationCode]               nvarchar(60)    NOT NULL,
    [PerformanceLevelDescriptorId]     int             NOT NULL,
    [AssessmentReportingMethodTypeId]  int             NOT NULL,
    [MinimumScore]                     nvarchar(35)    NULL,
    [MaximumScore]                     nvarchar(35)    NULL,
    [ResultDatatypeTypeId]             int             NULL,
    [CreateDate]                       datetime        CONSTRAINT [ObjectiveAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ObjectiveAssessmentPerformanceLevel] PRIMARY KEY CLUSTERED ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [PerformanceLevelDescriptorId], [AssessmentReportingMethodTypeId])
)
go



IF OBJECT_ID('edfi.ObjectiveAssessmentPerformanceLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ObjectiveAssessmentPerformanceLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ObjectiveAssessmentPerformanceLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Performance Level Descriptor', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'AssessmentReportingMethodTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'AssessmentReportingMethodTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AssessmentReportingMethod', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'AssessmentReportingMethodTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'MinimumScore'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'MinimumScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The minimum score required to make the indicated level of performance.', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'MinimumScore'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'MaximumScore'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'MaximumScore'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The maximum score to make the indicated level of performance.', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'MaximumScore'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'ResultDatatypeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'ResultDatatypeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', 'column', 'ResultDatatypeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Definition of the performance levels and the associated cut scores. Three styles are supported:  1. Specification of performance level by minimum and maximum score    2. Specification of performance level by cut score, using only minimum score    3. Specification of performance level without any mapping to scores.', 'schema', 'edfi', 'table', 'ObjectiveAssessmentPerformanceLevel'
go

/* 
 * TABLE: [edfi].[OldEthnicityType] 
 */

CREATE TABLE [edfi].[OldEthnicityType](
    [OldEthnicityTypeId]  int                 IDENTITY(1,1),
    [CodeValue]           nvarchar(50)        NOT NULL,
    [Description]         nvarchar(1024)      NOT NULL,
    [ShortDescription]    nvarchar(450)       NOT NULL,
    [Id]                  uniqueidentifier    CONSTRAINT [OldEthnicityType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]    datetime            CONSTRAINT [OldEthnicityType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]          datetime            CONSTRAINT [OldEthnicityType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_OldEthnicityType] PRIMARY KEY CLUSTERED ([OldEthnicityTypeId])
)
go



IF OBJECT_ID('edfi.OldEthnicityType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.OldEthnicityType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.OldEthnicityType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OldEthnicityType', 'column', 'OldEthnicityTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OldEthnicityType', 'column', 'OldEthnicityTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for OldEthnicity', 'schema', 'edfi', 'table', 'OldEthnicityType', 'column', 'OldEthnicityTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OldEthnicityType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OldEthnicityType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for OldEthnicity type.', 'schema', 'edfi', 'table', 'OldEthnicityType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OldEthnicityType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OldEthnicityType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'OldEthnicityType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OldEthnicityType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OldEthnicityType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the old ethnicity type.', 'schema', 'edfi', 'table', 'OldEthnicityType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OldEthnicityType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OldEthnicityType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Previous definition of Ethnicity combining Hispanic/Latino and Race.', 'schema', 'edfi', 'table', 'OldEthnicityType'
go

/* 
 * TABLE: [edfi].[OpenStaffPosition] 
 */

CREATE TABLE [edfi].[OpenStaffPosition](
    [EducationOrganizationId]          int                 NOT NULL,
    [EmploymentStatusDescriptorId]     int                 NOT NULL,
    [StaffClassificationDescriptorId]  int                 NOT NULL,
    [RequisitionNumber]                nvarchar(20)        NOT NULL,
    [DatePosted]                       date                NOT NULL,
    [PositionTitle]                    nvarchar(100)       NULL,
    [ProgramAssignmentDescriptorId]    int                 NULL,
    [DatePostingRemoved]               date                NULL,
    [PostingResultTypeId]              int                 NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [OpenStaffPosition_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [OpenStaffPosition_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [OpenStaffPosition_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_OpenStaffPosition] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [EmploymentStatusDescriptorId], [StaffClassificationDescriptorId], [RequisitionNumber], [DatePosted])
)
go



IF OBJECT_ID('edfi.OpenStaffPosition') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.OpenStaffPosition >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.OpenStaffPosition >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'EmploymentStatusDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'EmploymentStatusDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'EmploymentStatusDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'StaffClassificationDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'StaffClassificationDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The position''''s title or rank (e.g., Counselor, teacher, etc)', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'StaffClassificationDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'RequisitionNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'RequisitionNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'RequisitionNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'DatePosted'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'DatePosted'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Date the OpenStaffPosition was posted.', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'DatePosted'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'PositionTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'PositionTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The descriptive name of an individual''s position.', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'PositionTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'ProgramAssignmentDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'ProgramAssignmentDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'ProgramAssignmentDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'DatePostingRemoved'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'DatePostingRemoved'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the posting was removed or filled.', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'DatePostingRemoved'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'PostingResultTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'PostingResultTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indication of whether the position was filled or retired without filling.', 'schema', 'edfi', 'table', 'OpenStaffPosition', 'column', 'PostingResultTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPosition'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents an open staff position that the education organization is seeking to fill.', 'schema', 'edfi', 'table', 'OpenStaffPosition'
go

/* 
 * TABLE: [edfi].[OpenStaffPositionAcademicSubject] 
 */

CREATE TABLE [edfi].[OpenStaffPositionAcademicSubject](
    [EducationOrganizationId]          int             NOT NULL,
    [StaffClassificationDescriptorId]  int             NOT NULL,
    [RequisitionNumber]                nvarchar(20)    NOT NULL,
    [DatePosted]                       date            NOT NULL,
    [AcademicSubjectDescriptorId]      int             NOT NULL,
    [EmploymentStatusDescriptorId]     int             NOT NULL,
    [CreateDate]                       datetime        CONSTRAINT [OpenStaffPositionAcademicSubject_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_OpenStaffPositionAcademicSubjects] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [StaffClassificationDescriptorId], [RequisitionNumber], [DatePosted], [AcademicSubjectDescriptorId], [EmploymentStatusDescriptorId])
)
go



IF OBJECT_ID('edfi.OpenStaffPositionAcademicSubject') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.OpenStaffPositionAcademicSubject >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.OpenStaffPositionAcademicSubject >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'StaffClassificationDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'StaffClassificationDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'StaffClassificationDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'RequisitionNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'RequisitionNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'RequisitionNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'DatePosted'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'DatePosted'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the position was posted.', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'DatePosted'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AcademicSubject', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'EmploymentStatusDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'EmploymentStatusDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', 'column', 'EmploymentStatusDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The teaching field required for the position: for example: English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.', 'schema', 'edfi', 'table', 'OpenStaffPositionAcademicSubject'
go

/* 
 * TABLE: [edfi].[OpenStaffPositionInstructionalGradeLevel] 
 */

CREATE TABLE [edfi].[OpenStaffPositionInstructionalGradeLevel](
    [EducationOrganizationId]          int             NOT NULL,
    [StaffClassificationDescriptorId]  int             NOT NULL,
    [RequisitionNumber]                nvarchar(20)    NOT NULL,
    [DatePosted]                       date            NOT NULL,
    [GradeLevelDescriptorId]           int             NOT NULL,
    [EmploymentStatusDescriptorId]     int             NOT NULL,
    [CreateDate]                       datetime        CONSTRAINT [OpenStaffPositionInstructionalGradeLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_OpenStaffPositionInstructionalGradeLevels] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [StaffClassificationDescriptorId], [RequisitionNumber], [DatePosted], [GradeLevelDescriptorId], [EmploymentStatusDescriptorId])
)
go



IF OBJECT_ID('edfi.OpenStaffPositionInstructionalGradeLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.OpenStaffPositionInstructionalGradeLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.OpenStaffPositionInstructionalGradeLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'StaffClassificationDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'StaffClassificationDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'StaffClassificationDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'RequisitionNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'RequisitionNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'RequisitionNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'DatePosted'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'DatePosted'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the position was posted.', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'DatePosted'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The set of grade levels for which the position''s assignment is responsible.', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'GradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'EmploymentStatusDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'EmploymentStatusDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', 'column', 'EmploymentStatusDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The set of grade levels for which the position''s assignment is responsible.', 'schema', 'edfi', 'table', 'OpenStaffPositionInstructionalGradeLevel'
go

/* 
 * TABLE: [edfi].[OperationalStatusType] 
 */

CREATE TABLE [edfi].[OperationalStatusType](
    [OperationalStatusTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                nvarchar(50)        NOT NULL,
    [Description]              nvarchar(1024)      NOT NULL,
    [ShortDescription]         nvarchar(450)       NOT NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [OperationalStatusType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [OperationalStatusType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [OperationalStatusType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_OperationalStatusType] PRIMARY KEY CLUSTERED ([OperationalStatusTypeId])
)
go



IF OBJECT_ID('edfi.OperationalStatusType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.OperationalStatusType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.OperationalStatusType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OperationalStatusType', 'column', 'OperationalStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OperationalStatusType', 'column', 'OperationalStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for OperationalStatus', 'schema', 'edfi', 'table', 'OperationalStatusType', 'column', 'OperationalStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OperationalStatusType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OperationalStatusType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for OperationalStatus type.', 'schema', 'edfi', 'table', 'OperationalStatusType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OperationalStatusType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OperationalStatusType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'OperationalStatusType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OperationalStatusType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OperationalStatusType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the operational status type.', 'schema', 'edfi', 'table', 'OperationalStatusType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OperationalStatusType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OperationalStatusType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The current operational status of the education organization (e.g., active, inactive).', 'schema', 'edfi', 'table', 'OperationalStatusType'
go

/* 
 * TABLE: [edfi].[OtherNameType] 
 */

CREATE TABLE [edfi].[OtherNameType](
    [OtherNameTypeId]   int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [OtherNameType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [OtherNameType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [OtherNameType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_OtherNameType] PRIMARY KEY CLUSTERED ([OtherNameTypeId])
)
go



IF OBJECT_ID('edfi.OtherNameType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.OtherNameType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.OtherNameType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OtherNameType', 'column', 'OtherNameTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OtherNameType', 'column', 'OtherNameTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for OtherName', 'schema', 'edfi', 'table', 'OtherNameType', 'column', 'OtherNameTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OtherNameType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OtherNameType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for OtherName type.', 'schema', 'edfi', 'table', 'OtherNameType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OtherNameType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OtherNameType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'OtherNameType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OtherNameType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OtherNameType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the other name type.', 'schema', 'edfi', 'table', 'OtherNameType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'OtherNameType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'OtherNameType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The types of alternate names for a person.', 'schema', 'edfi', 'table', 'OtherNameType'
go

/* 
 * TABLE: [edfi].[Parent] 
 */

CREATE TABLE [edfi].[Parent](
    [ParentUSI]             int                 IDENTITY(1,1),
    [ParentUniqueId]        nvarchar(32)        NOT NULL,
    [PersonalTitlePrefix]   nvarchar(30)        NULL,
    [FirstName]             nvarchar(75)        NOT NULL,
    [MiddleName]            nvarchar(75)        NULL,
    [LastSurname]           nvarchar(75)        NOT NULL,
    [GenerationCodeSuffix]  nvarchar(10)        NULL,
    [MaidenName]            nvarchar(75)        NULL,
    [SexTypeId]             int                 NULL,
    [LoginId]               nvarchar(60)        NULL,
    [Id]                    uniqueidentifier    CONSTRAINT [Parent_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]      datetime            CONSTRAINT [Parent_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]            datetime            CONSTRAINT [Parent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Parent] PRIMARY KEY CLUSTERED ([ParentUSI])
)
go



IF OBJECT_ID('edfi.Parent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Parent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Parent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'ParentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'ParentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Parent Identity Column', 'schema', 'edfi', 'table', 'Parent', 'column', 'ParentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'ParentUniqueId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'ParentUniqueId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique alphanumeric code assigned to a parent.', 'schema', 'edfi', 'table', 'Parent', 'column', 'ParentUniqueId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'PersonalTitlePrefix'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'PersonalTitlePrefix'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A prefix used to denote the title, degree, position, or seniority of the person.', 'schema', 'edfi', 'table', 'Parent', 'column', 'PersonalTitlePrefix'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'FirstName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'FirstName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', 'schema', 'edfi', 'table', 'Parent', 'column', 'FirstName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'MiddleName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'MiddleName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', 'schema', 'edfi', 'table', 'Parent', 'column', 'MiddleName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'LastSurname'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'LastSurname'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name borne in common by members of a family.', 'schema', 'edfi', 'table', 'Parent', 'column', 'LastSurname'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'GenerationCodeSuffix'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'GenerationCodeSuffix'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', 'schema', 'edfi', 'table', 'Parent', 'column', 'GenerationCodeSuffix'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'MaidenName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'MaidenName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The person''s maiden name.', 'schema', 'edfi', 'table', 'Parent', 'column', 'MaidenName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'SexTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'SexTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A person''''s gender.', 'schema', 'edfi', 'table', 'Parent', 'column', 'SexTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'LoginId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Parent', 'column', 'LoginId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The login ID for the user; used for security access control interface.', 'schema', 'edfi', 'table', 'Parent', 'column', 'LoginId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Parent', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Parent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents a parent or guardian of a student, such as mother, father, or caretaker.', 'schema', 'edfi', 'table', 'Parent'
go

/* 
 * TABLE: [edfi].[ParentAddress] 
 */

CREATE TABLE [edfi].[ParentAddress](
    [ParentUSI]                 int              NOT NULL,
    [AddressTypeId]             int              NOT NULL,
    [StreetNumberName]          nvarchar(150)    NOT NULL,
    [ApartmentRoomSuiteNumber]  nvarchar(50)     NULL,
    [BuildingSiteNumber]        nvarchar(20)     NULL,
    [City]                      nvarchar(30)     NOT NULL,
    [StateAbbreviationTypeId]   int              NOT NULL,
    [PostalCode]                nvarchar(17)     NOT NULL,
    [NameOfCounty]              nvarchar(30)     NULL,
    [CountyFIPSCode]            nvarchar(5)      NULL,
    [Latitude]                  nvarchar(20)     NULL,
    [Longitude]                 nvarchar(20)     NULL,
    [BeginDate]                 date             NULL,
    [EndDate]                   date             NULL,
    [CreateDate]                datetime         CONSTRAINT [ParentAddress_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ParentAddress] PRIMARY KEY CLUSTERED ([ParentUSI], [AddressTypeId])
)
go



IF OBJECT_ID('edfi.ParentAddress') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ParentAddress >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ParentAddress >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'ParentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'ParentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Parent Identity Column', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'ParentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'AddressTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'AddressTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Address', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'AddressTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'StreetNumberName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'StreetNumberName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The street number and street name or post office box number of an address.', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'StreetNumberName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'ApartmentRoomSuiteNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'ApartmentRoomSuiteNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The apartment, room, or suite number of an address.', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'ApartmentRoomSuiteNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'BuildingSiteNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'BuildingSiteNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of the building on the site, if more than one building shares the same address.', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'BuildingSiteNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'City'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'City'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the city in which an address is located.', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'City'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'StateAbbreviationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'StateAbbreviationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The abbreviation for the state (within the United States) or outlying area in which an address is located.', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'StateAbbreviationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'PostalCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'PostalCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The five or nine digit zip code or overseas postal code portion of an address.', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'PostalCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'NameOfCounty'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'NameOfCounty'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'NameOfCounty'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'CountyFIPSCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'CountyFIPSCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Definition The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'CountyFIPSCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'Latitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'Latitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic latitude of the physical address.', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'Latitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'Longitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'Longitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic longitude of the physical address.', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'Longitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The first date the address is valid. For physical addresses, the date the person moved to that address.', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', 'schema', 'edfi', 'table', 'ParentAddress', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentAddress', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentAddress'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Parent''s address, if different from the student address.', 'schema', 'edfi', 'table', 'ParentAddress'
go

/* 
 * TABLE: [edfi].[ParentElectronicMail] 
 */

CREATE TABLE [edfi].[ParentElectronicMail](
    [ParentUSI]                     int              NOT NULL,
    [ElectronicMailTypeId]          int              NOT NULL,
    [ElectronicMailAddress]         nvarchar(128)    NOT NULL,
    [PrimaryEmailAddressIndicator]  bit              NULL,
    [CreateDate]                    datetime         CONSTRAINT [ParentElectronicMail_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ParentElectronicMail] PRIMARY KEY CLUSTERED ([ParentUSI], [ElectronicMailTypeId])
)
go



IF OBJECT_ID('edfi.ParentElectronicMail') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ParentElectronicMail >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ParentElectronicMail >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentElectronicMail', 'column', 'ParentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentElectronicMail', 'column', 'ParentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Parent Identity Column', 'schema', 'edfi', 'table', 'ParentElectronicMail', 'column', 'ParentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentElectronicMail', 'column', 'ElectronicMailTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentElectronicMail', 'column', 'ElectronicMailTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ElectronicMail', 'schema', 'edfi', 'table', 'ParentElectronicMail', 'column', 'ElectronicMailTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentElectronicMail', 'column', 'ElectronicMailAddress'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentElectronicMail', 'column', 'ElectronicMailAddress'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The electronic mail (e-mail) address listed for an individual or organization.', 'schema', 'edfi', 'table', 'ParentElectronicMail', 'column', 'ElectronicMailAddress'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentElectronicMail', 'column', 'PrimaryEmailAddressIndicator'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentElectronicMail', 'column', 'PrimaryEmailAddressIndicator'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.', 'schema', 'edfi', 'table', 'ParentElectronicMail', 'column', 'PrimaryEmailAddressIndicator'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentElectronicMail', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentElectronicMail'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The numbers, letters and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.', 'schema', 'edfi', 'table', 'ParentElectronicMail'
go

/* 
 * TABLE: [edfi].[ParentIdentificationDocument] 
 */

CREATE TABLE [edfi].[ParentIdentificationDocument](
    [DocumentTitle]                          nvarchar(60)     NULL,
    [PersonalInformationVerificationTypeId]  int              NOT NULL,
    [DocumentExpirationDate]                 date             NULL,
    [IssuerDocumentIdentificationCode]       nvarchar(60)     NULL,
    [IssuerName]                             nvarchar(150)    NULL,
    [IdentificationDocumentUseTypeId]        int              NOT NULL,
    [ParentUSI]                              int              NOT NULL,
    [CreateDate]                             datetime         CONSTRAINT [ParentIdentificationDocument_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [IssuerCountryDescriptorId]              int              NULL,
    CONSTRAINT [PK_ParentIdentificationDocument] PRIMARY KEY CLUSTERED ([PersonalInformationVerificationTypeId], [IdentificationDocumentUseTypeId], [ParentUSI])
)
go



IF OBJECT_ID('edfi.ParentIdentificationDocument') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ParentIdentificationDocument >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ParentIdentificationDocument >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'DocumentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'DocumentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title of the document given by the issuer.', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'DocumentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'PersonalInformationVerificationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'PersonalInformationVerificationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for PersonalInformationVerification', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'PersonalInformationVerificationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'DocumentExpirationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'DocumentExpirationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The day when the document  expires, if null then never expires.', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'DocumentExpirationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'IssuerDocumentIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'IssuerDocumentIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The unique identifier on the issuer''s identification system.', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'IssuerDocumentIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'IssuerName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'IssuerName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Name of the entity or institution that issued the document.', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'IssuerName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'IdentificationDocumentUseTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'IdentificationDocumentUseTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'IdentificationDocumentUseTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'ParentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'ParentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Parent Identity Column', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'ParentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'IssuerCountryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'IssuerCountryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', 'column', 'IssuerCountryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentIdentificationDocument'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This type represents the valid document that a person uses for identification.', 'schema', 'edfi', 'table', 'ParentIdentificationDocument'
go

/* 
 * TABLE: [edfi].[ParentInternationalAddress] 
 */

CREATE TABLE [edfi].[ParentInternationalAddress](
    [ParentUSI]            int              NOT NULL,
    [AddressTypeId]        int              NOT NULL,
    [AddressLine1]         nvarchar(150)    NOT NULL,
    [AddressLine2]         nvarchar(150)    NULL,
    [AddressLine3]         nvarchar(150)    NULL,
    [AddressLine4]         nvarchar(150)    NULL,
    [Latitude]             nvarchar(20)     NULL,
    [Longitude]            nvarchar(20)     NULL,
    [BeginDate]            date             NULL,
    [EndDate]              date             NULL,
    [CreateDate]           datetime         CONSTRAINT [ParentInternationalAddress_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [CountryDescriptorId]  int              NOT NULL,
    CONSTRAINT [PK_ParentInternationalAddress] PRIMARY KEY CLUSTERED ([ParentUSI], [AddressTypeId])
)
go



IF OBJECT_ID('edfi.ParentInternationalAddress') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ParentInternationalAddress >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ParentInternationalAddress >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'ParentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'ParentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Parent Identity Column', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'ParentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Address', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressLine1'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressLine1'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The first line of the address.', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressLine1'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressLine2'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressLine2'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The second line of the address.', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressLine2'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressLine3'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressLine3'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The third line of the address.', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressLine3'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressLine4'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressLine4'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The fourth line of the address.', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'AddressLine4'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'Latitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'Latitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic latitude of the physical address.', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'Latitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'Longitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'Longitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic longitude of the physical address.', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'Longitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The first date the address is valid. For physical addresses, the date the person moved to that address.', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'CountryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'CountryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ParentInternationalAddress', 'column', 'CountryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentInternationalAddress'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Parent''s address, if different from the student address.', 'schema', 'edfi', 'table', 'ParentInternationalAddress'
go

/* 
 * TABLE: [edfi].[ParentOtherName] 
 */

CREATE TABLE [edfi].[ParentOtherName](
    [ParentUSI]             int             NOT NULL,
    [OtherNameTypeId]       int             NOT NULL,
    [PersonalTitlePrefix]   nvarchar(30)    NULL,
    [FirstName]             nvarchar(75)    NOT NULL,
    [MiddleName]            nvarchar(75)    NULL,
    [LastSurname]           nvarchar(75)    NOT NULL,
    [GenerationCodeSuffix]  nvarchar(10)    NULL,
    [CreateDate]            datetime        CONSTRAINT [ParentOtherName_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ParentOtherName] PRIMARY KEY CLUSTERED ([ParentUSI], [OtherNameTypeId])
)
go



IF OBJECT_ID('edfi.ParentOtherName') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ParentOtherName >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ParentOtherName >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'ParentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'ParentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Parent Identity Column', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'ParentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'OtherNameTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'OtherNameTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for OtherName', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'OtherNameTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'PersonalTitlePrefix'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'PersonalTitlePrefix'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A prefix used to denote the title, degree, position, or seniority of the person.', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'PersonalTitlePrefix'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'FirstName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'FirstName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'FirstName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'MiddleName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'MiddleName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'MiddleName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'LastSurname'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'LastSurname'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name borne in common by members of a family.', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'LastSurname'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'GenerationCodeSuffix'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'GenerationCodeSuffix'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', 'schema', 'edfi', 'table', 'ParentOtherName', 'column', 'GenerationCodeSuffix'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentOtherName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Other names (e.g., alias, nickname, previous legal name) associated with a person.', 'schema', 'edfi', 'table', 'ParentOtherName'
go

/* 
 * TABLE: [edfi].[ParentTelephone] 
 */

CREATE TABLE [edfi].[ParentTelephone](
    [ParentUSI]                       int             NOT NULL,
    [TelephoneNumberTypeId]           int             NOT NULL,
    [OrderOfPriority]                 int             NULL,
    [TextMessageCapabilityIndicator]  bit             NULL,
    [TelephoneNumber]                 nvarchar(24)    NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [ParentTelephone_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ParentTelephone] PRIMARY KEY CLUSTERED ([ParentUSI], [TelephoneNumberTypeId])
)
go



IF OBJECT_ID('edfi.ParentTelephone') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ParentTelephone >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ParentTelephone >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'ParentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'ParentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Parent Identity Column', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'ParentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'TelephoneNumberTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'TelephoneNumberTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for TelephoneNumber', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'TelephoneNumberTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'OrderOfPriority'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'OrderOfPriority'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'OrderOfPriority'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'TextMessageCapabilityIndicator'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'TextMessageCapabilityIndicator'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'TextMessageCapabilityIndicator'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'TelephoneNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'TelephoneNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The telephone number including the area code, and extension, if applicable.', 'schema', 'edfi', 'table', 'ParentTelephone', 'column', 'TelephoneNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ParentTelephone', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ParentTelephone'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The 10-digit telephone number, including the area code, for the person.', 'schema', 'edfi', 'table', 'ParentTelephone'
go

/* 
 * TABLE: [edfi].[Payroll] 
 */

CREATE TABLE [edfi].[Payroll](
    [StaffUSI]                 int                 NOT NULL,
    [EducationOrganizationId]  int                 NOT NULL,
    [AccountNumber]            nvarchar(50)        NOT NULL,
    [FiscalYear]               int                 NOT NULL,
    [AsOfDate]                 date                NOT NULL,
    [AmountToDate]             money               NOT NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [Payroll_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [Payroll_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [Payroll_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Payroll] PRIMARY KEY CLUSTERED ([StaffUSI], [EducationOrganizationId], [AccountNumber], [FiscalYear], [AsOfDate])
)
go



IF OBJECT_ID('edfi.Payroll') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Payroll >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Payroll >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Payroll', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Payroll', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'Payroll', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Payroll', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Payroll', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'Payroll', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Payroll', 'column', 'AccountNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Payroll', 'column', 'AccountNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Account with which the Payroll expense is associated.', 'schema', 'edfi', 'table', 'Payroll', 'column', 'AccountNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Payroll', 'column', 'FiscalYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Payroll', 'column', 'FiscalYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The financial accounting year.  NEDM: Fiscal Year', 'schema', 'edfi', 'table', 'Payroll', 'column', 'FiscalYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Payroll', 'column', 'AsOfDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Payroll', 'column', 'AsOfDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date of the reported payroll element.', 'schema', 'edfi', 'table', 'Payroll', 'column', 'AsOfDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Payroll', 'column', 'AmountToDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Payroll', 'column', 'AmountToDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Current balance (amount paid to employee) for account for the fiscal year.', 'schema', 'edfi', 'table', 'Payroll', 'column', 'AmountToDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Payroll', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Payroll'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This financial entity represents the sum of the financial transactions to date for employee compensation. An "employee" who performs services under the direction of the employing institution or agency, is compensated for such services by the employer and is eligible for employee benefits and wage or salary tax withholdings.', 'schema', 'edfi', 'table', 'Payroll'
go

/* 
 * TABLE: [edfi].[PerformanceBaseConversionType] 
 */

CREATE TABLE [edfi].[PerformanceBaseConversionType](
    [PerformanceBaseConversionTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                        nvarchar(50)        NOT NULL,
    [Description]                      nvarchar(1024)      NOT NULL,
    [ShortDescription]                 nvarchar(450)       NOT NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [PerformanceBaseConversionType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [PerformanceBaseConversionType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [PerformanceBaseConversionType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_PerformanceBaseType] PRIMARY KEY CLUSTERED ([PerformanceBaseConversionTypeId])
)
go



IF OBJECT_ID('edfi.PerformanceBaseConversionType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.PerformanceBaseConversionType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.PerformanceBaseConversionType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType', 'column', 'PerformanceBaseConversionTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType', 'column', 'PerformanceBaseConversionTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for PerformanceBase', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType', 'column', 'PerformanceBaseConversionTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for PerformanceBase type.', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for PerformanceBase type.', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Defines standard levels of competency or performance that can be used for dashboard visualizations: advanced, proficient, basic, and below basic.', 'schema', 'edfi', 'table', 'PerformanceBaseConversionType'
go

/* 
 * TABLE: [edfi].[PerformanceLevelDescriptor] 
 */

CREATE TABLE [edfi].[PerformanceLevelDescriptor](
    [PerformanceLevelDescriptorId]     int    NOT NULL,
    [PerformanceBaseConversionTypeId]  int    NULL,
    CONSTRAINT [PK_PerformanceLevelDescriptor] PRIMARY KEY CLUSTERED ([PerformanceLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.PerformanceLevelDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.PerformanceLevelDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.PerformanceLevelDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PerformanceLevelDescriptor', 'column', 'PerformanceLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PerformanceLevelDescriptor', 'column', 'PerformanceLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Performance Level Descriptor', 'schema', 'edfi', 'table', 'PerformanceLevelDescriptor', 'column', 'PerformanceLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PerformanceLevelDescriptor', 'column', 'PerformanceBaseConversionTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PerformanceLevelDescriptor', 'column', 'PerformanceBaseConversionTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'PerformanceLevelDescriptor', 'column', 'PerformanceBaseConversionTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PerformanceLevelDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PerformanceLevelDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines various levels or thresholds for performance on the assessment.', 'schema', 'edfi', 'table', 'PerformanceLevelDescriptor'
go

/* 
 * TABLE: [edfi].[PersonalInformationVerificationType] 
 */

CREATE TABLE [edfi].[PersonalInformationVerificationType](
    [PersonalInformationVerificationTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                              nvarchar(50)        NOT NULL,
    [Description]                            nvarchar(1024)      NOT NULL,
    [ShortDescription]                       nvarchar(450)       NOT NULL,
    [Id]                                     uniqueidentifier    CONSTRAINT [PersonalInformationVerificationType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                       datetime            CONSTRAINT [PersonalInformationVerificationType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                             datetime            CONSTRAINT [PersonalInformationVerificationType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_DocumentCategoryType] PRIMARY KEY CLUSTERED ([PersonalInformationVerificationTypeId])
)
go



IF OBJECT_ID('edfi.PersonalInformationVerificationType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.PersonalInformationVerificationType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.PersonalInformationVerificationType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType', 'column', 'PersonalInformationVerificationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType', 'column', 'PersonalInformationVerificationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for PersonalInformationVerification', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType', 'column', 'PersonalInformationVerificationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for PersonalInformationVerification type.', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the personal information verification type.', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The evidence presented to verify one''s personal identity; for example: driver''s license, passport, birth certificate, etc.', 'schema', 'edfi', 'table', 'PersonalInformationVerificationType'
go

/* 
 * TABLE: [edfi].[PopulationServedType] 
 */

CREATE TABLE [edfi].[PopulationServedType](
    [PopulationServedTypeId]  int                 IDENTITY(1,1),
    [CodeValue]               nvarchar(50)        NOT NULL,
    [Description]             nvarchar(1024)      NOT NULL,
    [ShortDescription]        nvarchar(450)       NOT NULL,
    [Id]                      uniqueidentifier    CONSTRAINT [PopulationServedType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]        datetime            CONSTRAINT [PopulationServedType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]              datetime            CONSTRAINT [PopulationServedType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_PopulationServedType] PRIMARY KEY CLUSTERED ([PopulationServedTypeId])
)
go



IF OBJECT_ID('edfi.PopulationServedType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.PopulationServedType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.PopulationServedType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PopulationServedType', 'column', 'PopulationServedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PopulationServedType', 'column', 'PopulationServedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for PopulationServed', 'schema', 'edfi', 'table', 'PopulationServedType', 'column', 'PopulationServedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PopulationServedType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PopulationServedType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for PopulationServed type.', 'schema', 'edfi', 'table', 'PopulationServedType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PopulationServedType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PopulationServedType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'PopulationServedType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PopulationServedType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PopulationServedType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the population served type.', 'schema', 'edfi', 'table', 'PopulationServedType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PopulationServedType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PopulationServedType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of students the Section is offered and tailored to.', 'schema', 'edfi', 'table', 'PopulationServedType'
go

/* 
 * TABLE: [edfi].[PostingResultType] 
 */

CREATE TABLE [edfi].[PostingResultType](
    [PostingResultTypeId]  int                 IDENTITY(1,1),
    [CodeValue]            nvarchar(50)        NOT NULL,
    [Description]          nvarchar(1024)      NOT NULL,
    [ShortDescription]     nvarchar(450)       NOT NULL,
    [Id]                   uniqueidentifier    CONSTRAINT [PostingResultType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]     datetime            CONSTRAINT [PostingResultType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]           datetime            CONSTRAINT [PostingResultType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_PostingResultType] PRIMARY KEY CLUSTERED ([PostingResultTypeId])
)
go



IF OBJECT_ID('edfi.PostingResultType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.PostingResultType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.PostingResultType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostingResultType', 'column', 'PostingResultTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostingResultType', 'column', 'PostingResultTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for PostingResult', 'schema', 'edfi', 'table', 'PostingResultType', 'column', 'PostingResultTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostingResultType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostingResultType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for PostingResult type.', 'schema', 'edfi', 'table', 'PostingResultType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostingResultType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostingResultType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'PostingResultType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostingResultType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostingResultType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the posting result type.', 'schema', 'edfi', 'table', 'PostingResultType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostingResultType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostingResultType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indication of whether the position was filled or retired without filling.', 'schema', 'edfi', 'table', 'PostingResultType'
go

/* 
 * TABLE: [edfi].[PostSecondaryEvent] 
 */

CREATE TABLE [edfi].[PostSecondaryEvent](
    [StudentUSI]                        int                 NOT NULL,
    [PostSecondaryEventCategoryTypeId]  int                 NOT NULL,
    [EventDate]                         date                NOT NULL,
    [Id]                                uniqueidentifier    CONSTRAINT [PostSecondaryEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                  datetime            CONSTRAINT [PostSecondaryEvent_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                        datetime            CONSTRAINT [PostSecondaryEvent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_PostSecondaryEvent] PRIMARY KEY CLUSTERED ([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate])
)
go



IF OBJECT_ID('edfi.PostSecondaryEvent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.PostSecondaryEvent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.PostSecondaryEvent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEvent', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEvent', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'PostSecondaryEvent', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEvent', 'column', 'PostSecondaryEventCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEvent', 'column', 'PostSecondaryEventCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The postsecondary event that is logged (e.g., FAFSA application, college application, college acceptance)', 'schema', 'edfi', 'table', 'PostSecondaryEvent', 'column', 'PostSecondaryEventCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEvent', 'column', 'EventDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEvent', 'column', 'EventDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the event occurred or was recorded.', 'schema', 'edfi', 'table', 'PostSecondaryEvent', 'column', 'EventDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEvent', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEvent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity captures significant postsecondary events during a student''s high school tenure (e.g., FAFSA application or college application, acceptance, and enrollment) or during a student''s enrollment at a post-secondary institution.', 'schema', 'edfi', 'table', 'PostSecondaryEvent'
go

/* 
 * TABLE: [edfi].[PostSecondaryEventCategoryType] 
 */

CREATE TABLE [edfi].[PostSecondaryEventCategoryType](
    [PostSecondaryEventCategoryTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                         nvarchar(50)        NOT NULL,
    [Description]                       nvarchar(1024)      NOT NULL,
    [ShortDescription]                  nvarchar(450)       NOT NULL,
    [Id]                                uniqueidentifier    CONSTRAINT [PostSecondaryEventCategoryType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                  datetime            CONSTRAINT [PostSecondaryEventCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                        datetime            CONSTRAINT [PostSecondaryEventCategoryType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_PostSecondaryEventCategoryType] PRIMARY KEY CLUSTERED ([PostSecondaryEventCategoryTypeId])
)
go



IF OBJECT_ID('edfi.PostSecondaryEventCategoryType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.PostSecondaryEventCategoryType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.PostSecondaryEventCategoryType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType', 'column', 'PostSecondaryEventCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType', 'column', 'PostSecondaryEventCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for PostSecondaryEventCategory', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType', 'column', 'PostSecondaryEventCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for PostSecondaryEventCategory type.', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the post secondary event category type.', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code describing the type of post-secondary event (e.g., college application or acceptance).', 'schema', 'edfi', 'table', 'PostSecondaryEventCategoryType'
go

/* 
 * TABLE: [edfi].[PostSecondaryEventPostSecondaryInstitution] 
 */

CREATE TABLE [edfi].[PostSecondaryEventPostSecondaryInstitution](
    [StudentUSI]                                int             NOT NULL,
    [PostSecondaryEventCategoryTypeId]          int             NOT NULL,
    [EventDate]                                 date            NOT NULL,
    [NameOfInstitution]                         nvarchar(75)    NOT NULL,
    [PostSecondaryInstitutionId]                nvarchar(30)    NULL,
    [PostSecondaryInstitutionLevelTypeId]       int             NULL,
    [AdministrativeFundingControlDescriptorId]  int             NULL,
    [CreateDate]                                datetime        CONSTRAINT [PostSecondaryEventPostSecondaryInstitution_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_PostSecondaryEventPostSecondaryInstitution] PRIMARY KEY CLUSTERED ([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate])
)
go



IF OBJECT_ID('edfi.PostSecondaryEventPostSecondaryInstitution') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.PostSecondaryEventPostSecondaryInstitution >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.PostSecondaryEventPostSecondaryInstitution >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'PostSecondaryEventCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'PostSecondaryEventCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The postsecondary event that is logged (e.g., FAFSA application, college application, college acceptance)', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'PostSecondaryEventCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'EventDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'EventDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the event occurred or was recorded.', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'EventDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'NameOfInstitution'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'NameOfInstitution'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The full, legally accepted name of the institution.', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'NameOfInstitution'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'PostSecondaryInstitutionId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'PostSecondaryInstitutionId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to the postsecondary organization.', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'PostSecondaryInstitutionId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'PostSecondaryInstitutionLevelTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'PostSecondaryInstitutionLevelTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'PostSecondaryInstitutionLevelTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'AdministrativeFundingControlDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'AdministrativeFundingControlDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AdministrationFundingControl', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', 'column', 'AdministrativeFundingControlDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An organization that provides educational programs for individuals who have completed or otherwise left educational programs in secondary school(s).', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitution'
go

/* 
 * TABLE: [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] 
 */

CREATE TABLE [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode](
    [StudentUSI]                                             int             NOT NULL,
    [PostSecondaryEventCategoryTypeId]                       int             NOT NULL,
    [EventDate]                                              date            NOT NULL,
    [IdentificationCode]                                     nvarchar(60)    NOT NULL,
    [CreateDate]                                             datetime        CONSTRAINT [PostSecondaryEventPostSecondaryInstitutionIdentificationCode_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [EducationOrganizationIdentificationSystemDescriptorId]  int             NOT NULL,
    CONSTRAINT [PK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode] PRIMARY KEY CLUSTERED ([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate], [EducationOrganizationIdentificationSystemDescriptorId])
)
go



IF OBJECT_ID('edfi.PostSecondaryEventPostSecondaryInstitutionIdentificationCode') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.PostSecondaryEventPostSecondaryInstitutionIdentificationCode >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.PostSecondaryEventPostSecondaryInstitutionIdentificationCode >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'PostSecondaryEventCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'PostSecondaryEventCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The postsecondary event that is logged (e.g., FAFSA application, college application, college acceptance)', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'PostSecondaryEventCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'EventDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'EventDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the event occurred or was recorded.', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'EventDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code that is assigned to an education organization by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'EducationOrganizationIdentificationSystemDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'EducationOrganizationIdentificationSystemDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', 'column', 'EducationOrganizationIdentificationSystemDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to an education organization by a school, school system, state or other agency or entity.', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionIdentificationCode'
go

/* 
 * TABLE: [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] 
 */

CREATE TABLE [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction](
    [StudentUSI]                        int         NOT NULL,
    [PostSecondaryEventCategoryTypeId]  int         NOT NULL,
    [EventDate]                         date        NOT NULL,
    [MediumOfInstructionTypeId]         int         NOT NULL,
    [CreateDate]                        datetime    CONSTRAINT [PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] PRIMARY KEY CLUSTERED ([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate], [MediumOfInstructionTypeId])
)
go



IF OBJECT_ID('edfi.PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', 'column', 'PostSecondaryEventCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', 'column', 'PostSecondaryEventCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The postsecondary event that is logged (e.g., FAFSA application, college application, college acceptance)', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', 'column', 'PostSecondaryEventCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', 'column', 'EventDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', 'column', 'EventDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the event occurred or was recorded.', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', 'column', 'EventDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', 'column', 'MediumOfInstructionTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', 'column', 'MediumOfInstructionTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for MediumOfInstruction', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', 'column', 'MediumOfInstructionTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The categories in which an institution serves the students.', 'schema', 'edfi', 'table', 'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction'
go

/* 
 * TABLE: [edfi].[PostSecondaryInstitutionLevelType] 
 */

CREATE TABLE [edfi].[PostSecondaryInstitutionLevelType](
    [PostSecondaryInstitutionLevelTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                            nvarchar(50)        NOT NULL,
    [Description]                          nvarchar(1024)      NULL,
    [ShortDescription]                     nvarchar(450)       NOT NULL,
    [Id]                                   uniqueidentifier    CONSTRAINT [PostSecondaryInstitutionLevelType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                     datetime            CONSTRAINT [PostSecondaryInstitutionLevelType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                           datetime            CONSTRAINT [PostSecondaryInstitutionLevelType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_PostSecondaryInstitutionLevelType] PRIMARY KEY CLUSTERED ([PostSecondaryInstitutionLevelTypeId])
)
go



IF OBJECT_ID('edfi.PostSecondaryInstitutionLevelType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.PostSecondaryInstitutionLevelType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.PostSecondaryInstitutionLevelType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType', 'column', 'PostSecondaryInstitutionLevelTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType', 'column', 'PostSecondaryInstitutionLevelTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType', 'column', 'PostSecondaryInstitutionLevelTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A classification of whether a post-secondary institution''s highest level of offering is a program of 4 years or higher (4 year), 2 but less than 4 years (2 year) or less than 2 years.', 'schema', 'edfi', 'table', 'PostSecondaryInstitutionLevelType'
go

/* 
 * TABLE: [edfi].[Program] 
 */

CREATE TABLE [edfi].[Program](
    [EducationOrganizationId]  int                 NOT NULL,
    [ProgramTypeId]            int                 NOT NULL,
    [ProgramName]              nvarchar(60)        NOT NULL,
    [ProgramId]                nvarchar(20)        NULL,
    [ProgramSponsorTypeId]     int                 NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [Program_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [Program_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [Program_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Program] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
)
go



IF OBJECT_ID('edfi.Program') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Program >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Program >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Program', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Program', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'Program', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Program', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Program', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Program', 'schema', 'edfi', 'table', 'Program', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Program', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Program', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'Program', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Program', 'column', 'ProgramId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Program', 'column', 'ProgramId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'Program', 'column', 'ProgramId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Program', 'column', 'ProgramSponsorTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Program', 'column', 'ProgramSponsorTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ProgramSponsor', 'schema', 'edfi', 'table', 'Program', 'column', 'ProgramSponsorTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Program', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Program'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents any program designed to work in conjunction with, or as a supplement to, the main academic program. Programs may provide instruction, training, services, or benefits through federal, state, or local agencies. Programs may also include organized extracurricular activities for students.', 'schema', 'edfi', 'table', 'Program'
go

/* 
 * TABLE: [edfi].[ProgramAssignmentDescriptor] 
 */

CREATE TABLE [edfi].[ProgramAssignmentDescriptor](
    [ProgramAssignmentDescriptorId]  int    NOT NULL,
    [ProgramAssignmentTypeId]        int    NULL,
    CONSTRAINT [PK_ProgramAssignmentDescriptor] PRIMARY KEY CLUSTERED ([ProgramAssignmentDescriptorId])
)
go



IF OBJECT_ID('edfi.ProgramAssignmentDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ProgramAssignmentDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ProgramAssignmentDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentDescriptor', 'column', 'ProgramAssignmentDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentDescriptor', 'column', 'ProgramAssignmentDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ProgramAssignmentDescriptor', 'column', 'ProgramAssignmentDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentDescriptor', 'column', 'ProgramAssignmentTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentDescriptor', 'column', 'ProgramAssignmentTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ProgramAssignment', 'schema', 'edfi', 'table', 'ProgramAssignmentDescriptor', 'column', 'ProgramAssignmentTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the name of the education program for which a teacher is assigned to a school.', 'schema', 'edfi', 'table', 'ProgramAssignmentDescriptor'
go

/* 
 * TABLE: [edfi].[ProgramAssignmentType] 
 */

CREATE TABLE [edfi].[ProgramAssignmentType](
    [ProgramAssignmentTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                nvarchar(50)        NOT NULL,
    [Description]              nvarchar(1024)      NOT NULL,
    [ShortDescription]         nvarchar(450)       NOT NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [ProgramAssignmentType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [ProgramAssignmentType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [ProgramAssignmentType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ProgramAssignmentType] PRIMARY KEY CLUSTERED ([ProgramAssignmentTypeId])
)
go



IF OBJECT_ID('edfi.ProgramAssignmentType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ProgramAssignmentType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ProgramAssignmentType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentType', 'column', 'ProgramAssignmentTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentType', 'column', 'ProgramAssignmentTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ProgramAssignment', 'schema', 'edfi', 'table', 'ProgramAssignmentType', 'column', 'ProgramAssignmentTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for ProgramAssignment type.', 'schema', 'edfi', 'table', 'ProgramAssignmentType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for ProgramAssignment type.', 'schema', 'edfi', 'table', 'ProgramAssignmentType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'ProgramAssignmentType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramAssignmentType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the education program for which a teacher is assigned to a school.', 'schema', 'edfi', 'table', 'ProgramAssignmentType'
go

/* 
 * TABLE: [edfi].[ProgramCharacteristic] 
 */

CREATE TABLE [edfi].[ProgramCharacteristic](
    [EducationOrganizationId]            int             NOT NULL,
    [ProgramTypeId]                      int             NOT NULL,
    [ProgramCharacteristicDescriptorId]  int             NOT NULL,
    [ProgramName]                        nvarchar(60)    NOT NULL,
    [CreateDate]                         datetime        CONSTRAINT [ProgramCharacteristic_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ProgramCharacteristic] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [ProgramTypeId], [ProgramCharacteristicDescriptorId], [ProgramName])
)
go



IF OBJECT_ID('edfi.ProgramCharacteristic') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ProgramCharacteristic >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ProgramCharacteristic >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristic', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristic', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'ProgramCharacteristic', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristic', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristic', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ProgramCharacteristic', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristic', 'column', 'ProgramCharacteristicDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristic', 'column', 'ProgramCharacteristicDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ProgramCharacteristic', 'column', 'ProgramCharacteristicDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristic', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristic', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'ProgramCharacteristic', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristic', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristic'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reflects important characteristics of the Program, such as categories or particular indications.', 'schema', 'edfi', 'table', 'ProgramCharacteristic'
go

/* 
 * TABLE: [edfi].[ProgramCharacteristicDescriptor] 
 */

CREATE TABLE [edfi].[ProgramCharacteristicDescriptor](
    [ProgramCharacteristicDescriptorId]  int    NOT NULL,
    [ProgramCharacteristicTypeId]        int    NULL,
    CONSTRAINT [PK_ProgramCharacteristicDescriptor] PRIMARY KEY CLUSTERED ([ProgramCharacteristicDescriptorId])
)
go



IF OBJECT_ID('edfi.ProgramCharacteristicDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ProgramCharacteristicDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ProgramCharacteristicDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicDescriptor', 'column', 'ProgramCharacteristicDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicDescriptor', 'column', 'ProgramCharacteristicDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ProgramCharacteristicDescriptor', 'column', 'ProgramCharacteristicDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicDescriptor', 'column', 'ProgramCharacteristicTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicDescriptor', 'column', 'ProgramCharacteristicTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ProgramCharacteristicDescriptor', 'column', 'ProgramCharacteristicTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines important characteristics of the Program, such as categories or particular indications.', 'schema', 'edfi', 'table', 'ProgramCharacteristicDescriptor'
go

/* 
 * TABLE: [edfi].[ProgramCharacteristicType] 
 */

CREATE TABLE [edfi].[ProgramCharacteristicType](
    [ProgramCharacteristicTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                    nvarchar(50)        NOT NULL,
    [Description]                  nvarchar(1024)      NULL,
    [ShortDescription]             nvarchar(450)       NOT NULL,
    [Id]                           uniqueidentifier    CONSTRAINT [ProgramCharacteristicType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]             datetime            CONSTRAINT [ProgramCharacteristicType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                   datetime            CONSTRAINT [ProgramCharacteristicType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ProgramCharacteristicType] PRIMARY KEY CLUSTERED ([ProgramCharacteristicTypeId])
)
go



IF OBJECT_ID('edfi.ProgramCharacteristicType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ProgramCharacteristicType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ProgramCharacteristicType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicType', 'column', 'ProgramCharacteristicTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicType', 'column', 'ProgramCharacteristicTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ProgramCharacteristicType', 'column', 'ProgramCharacteristicTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'ProgramCharacteristicType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'ProgramCharacteristicType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'ProgramCharacteristicType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramCharacteristicType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reflects important characteristics of the Program, such as categories or particular indications.', 'schema', 'edfi', 'table', 'ProgramCharacteristicType'
go

/* 
 * TABLE: [edfi].[ProgramLearningObjective] 
 */

CREATE TABLE [edfi].[ProgramLearningObjective](
    [EducationOrganizationId]          int             NOT NULL,
    [ProgramTypeId]                    int             NOT NULL,
    [Objective]                        nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]      int             NOT NULL,
    [ObjectiveGradeLevelDescriptorId]  int             NOT NULL,
    [ProgramName]                      nvarchar(60)    NOT NULL,
    [CreateDate]                       datetime        CONSTRAINT [ProgramLearningObjective_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ProgramLearningStandard] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [ProgramTypeId], [Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId], [ProgramName])
)
go



IF OBJECT_ID('edfi.ProgramLearningObjective') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ProgramLearningObjective >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ProgramLearningObjective >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'Objective'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'Objective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The designated title of the learning objective.', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'Objective'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade level for which the learning objective is targeted,', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'ProgramLearningObjective', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningObjective', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningObjective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Learning Standard followed by this program.', 'schema', 'edfi', 'table', 'ProgramLearningObjective'
go

/* 
 * TABLE: [edfi].[ProgramLearningStandard] 
 */

CREATE TABLE [edfi].[ProgramLearningStandard](
    [EducationOrganizationId]  int             NOT NULL,
    [ProgramTypeId]            int             NOT NULL,
    [LearningStandardId]       nvarchar(60)    NOT NULL,
    [ProgramName]              nvarchar(60)    NOT NULL,
    [CreateDate]               datetime        CONSTRAINT [ProgramLearningStandard_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ProgramLearningObjective] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [ProgramTypeId], [LearningStandardId], [ProgramName])
)
go



IF OBJECT_ID('edfi.ProgramLearningStandard') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ProgramLearningStandard >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ProgramLearningStandard >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningStandard', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningStandard', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'ProgramLearningStandard', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningStandard', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningStandard', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ProgramLearningStandard', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningStandard', 'column', 'LearningStandardId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningStandard', 'column', 'LearningStandardId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Identifier for the specific learning standard (e.g., 111.15.3.1.A)', 'schema', 'edfi', 'table', 'ProgramLearningStandard', 'column', 'LearningStandardId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningStandard', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningStandard', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'ProgramLearningStandard', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningStandard', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramLearningStandard'
END
exec sys.sp_addextendedproperty 'MS_Description', 'References the Learning Objective(s) the Program is associated with.', 'schema', 'edfi', 'table', 'ProgramLearningStandard'
go

/* 
 * TABLE: [edfi].[ProgramService] 
 */

CREATE TABLE [edfi].[ProgramService](
    [EducationOrganizationId]  int             NOT NULL,
    [ProgramTypeId]            int             NOT NULL,
    [ServiceDescriptorId]      int             NOT NULL,
    [ProgramName]              nvarchar(60)    NOT NULL,
    [CreateDate]               datetime        CONSTRAINT [ProgramService_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ProgramService] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [ProgramTypeId], [ServiceDescriptorId], [ProgramName])
)
go



IF OBJECT_ID('edfi.ProgramService') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ProgramService >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ProgramService >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramService', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramService', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'ProgramService', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramService', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramService', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ProgramService', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramService', 'column', 'ServiceDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramService', 'column', 'ServiceDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Service Descriptor', 'schema', 'edfi', 'table', 'ProgramService', 'column', 'ServiceDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramService', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramService', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'ProgramService', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramService', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramService'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Defines the services this program provides to students.', 'schema', 'edfi', 'table', 'ProgramService'
go

/* 
 * TABLE: [edfi].[ProgramSponsorType] 
 */

CREATE TABLE [edfi].[ProgramSponsorType](
    [ProgramSponsorTypeId]  int                 IDENTITY(1,1),
    [CodeValue]             nvarchar(50)        NOT NULL,
    [Description]           nvarchar(1024)      NOT NULL,
    [ShortDescription]      nvarchar(450)       NOT NULL,
    [Id]                    uniqueidentifier    CONSTRAINT [ProgramSponsorType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]      datetime            CONSTRAINT [ProgramSponsorType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]            datetime            CONSTRAINT [ProgramSponsorType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ProgramSponsorType] PRIMARY KEY CLUSTERED ([ProgramSponsorTypeId])
)
go



IF OBJECT_ID('edfi.ProgramSponsorType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ProgramSponsorType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ProgramSponsorType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramSponsorType', 'column', 'ProgramSponsorTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramSponsorType', 'column', 'ProgramSponsorTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ProgramSponsor', 'schema', 'edfi', 'table', 'ProgramSponsorType', 'column', 'ProgramSponsorTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramSponsorType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramSponsorType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for ProgramSponsor type.', 'schema', 'edfi', 'table', 'ProgramSponsorType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramSponsorType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramSponsorType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'ProgramSponsorType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramSponsorType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramSponsorType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the program sponsor type.', 'schema', 'edfi', 'table', 'ProgramSponsorType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramSponsorType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramSponsorType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Ultimate and intermediate providers of funds for a particular educational or service program or activity or for an individual''s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Org).', 'schema', 'edfi', 'table', 'ProgramSponsorType'
go

/* 
 * TABLE: [edfi].[ProgramType] 
 */

CREATE TABLE [edfi].[ProgramType](
    [ProgramTypeId]     int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [ProgramType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [ProgramType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [ProgramType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ProgramType] PRIMARY KEY CLUSTERED ([ProgramTypeId])
)
go



IF OBJECT_ID('edfi.ProgramType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ProgramType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ProgramType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramType', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramType', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Program', 'schema', 'edfi', 'table', 'ProgramType', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Program type.', 'schema', 'edfi', 'table', 'ProgramType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'ProgramType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the program type.', 'schema', 'edfi', 'table', 'ProgramType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ProgramType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ProgramType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'ProgramType'
go

/* 
 * TABLE: [edfi].[PublicationStatusType] 
 */

CREATE TABLE [edfi].[PublicationStatusType](
    [PublicationStatusTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                nvarchar(50)        NULL,
    [ShortDescription]         nvarchar(450)       NOT NULL,
    [Description]              nvarchar(1024)      NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [PublicationStatusType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [PublicationStatusType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [PublicationStatusType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_PublicationStatusType] PRIMARY KEY CLUSTERED ([PublicationStatusTypeId])
)
go



IF OBJECT_ID('edfi.PublicationStatusType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.PublicationStatusType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.PublicationStatusType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PublicationStatusType', 'column', 'PublicationStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PublicationStatusType', 'column', 'PublicationStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'PublicationStatusType', 'column', 'PublicationStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PublicationStatusType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PublicationStatusType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'PublicationStatusType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PublicationStatusType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PublicationStatusType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'PublicationStatusType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PublicationStatusType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PublicationStatusType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'PublicationStatusType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'PublicationStatusType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'PublicationStatusType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).', 'schema', 'edfi', 'table', 'PublicationStatusType'
go

/* 
 * TABLE: [edfi].[RaceType] 
 */

CREATE TABLE [edfi].[RaceType](
    [RaceTypeId]        int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [RaceType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [RaceType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [RaceType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_RaceType] PRIMARY KEY CLUSTERED ([RaceTypeId])
)
go



IF OBJECT_ID('edfi.RaceType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.RaceType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.RaceType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RaceType', 'column', 'RaceTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RaceType', 'column', 'RaceTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Race', 'schema', 'edfi', 'table', 'RaceType', 'column', 'RaceTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RaceType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RaceType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Race type.', 'schema', 'edfi', 'table', 'RaceType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RaceType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RaceType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'RaceType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RaceType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RaceType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the race type.', 'schema', 'edfi', 'table', 'RaceType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RaceType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RaceType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The enumeration items defining the racial categories which most clearly reflects the individual''s recognition of his or her community or with which the individual most identifies.', 'schema', 'edfi', 'table', 'RaceType'
go

/* 
 * TABLE: [edfi].[ReasonExitedDescriptor] 
 */

CREATE TABLE [edfi].[ReasonExitedDescriptor](
    [ReasonExitedDescriptorId]  int    NOT NULL,
    [ReasonExitedTypeId]        int    NULL,
    CONSTRAINT [PK_ReasonExitedDescriptor] PRIMARY KEY CLUSTERED ([ReasonExitedDescriptorId])
)
go



IF OBJECT_ID('edfi.ReasonExitedDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ReasonExitedDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ReasonExitedDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedDescriptor', 'column', 'ReasonExitedDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedDescriptor', 'column', 'ReasonExitedDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ReasonExitedDescriptor', 'column', 'ReasonExitedDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedDescriptor', 'column', 'ReasonExitedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedDescriptor', 'column', 'ReasonExitedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ReasonExited', 'schema', 'edfi', 'table', 'ReasonExitedDescriptor', 'column', 'ReasonExitedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the reason a student exited a program.', 'schema', 'edfi', 'table', 'ReasonExitedDescriptor'
go

/* 
 * TABLE: [edfi].[ReasonExitedType] 
 */

CREATE TABLE [edfi].[ReasonExitedType](
    [ReasonExitedTypeId]  int                 IDENTITY(1,1),
    [CodeValue]           nvarchar(50)        NOT NULL,
    [Description]         nvarchar(1024)      NOT NULL,
    [ShortDescription]    nvarchar(450)       NOT NULL,
    [Id]                  uniqueidentifier    CONSTRAINT [ReasonExitedType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]    datetime            CONSTRAINT [ReasonExitedType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]          datetime            CONSTRAINT [ReasonExitedType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ReasonExitedType] PRIMARY KEY CLUSTERED ([ReasonExitedTypeId])
)
go



IF OBJECT_ID('edfi.ReasonExitedType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ReasonExitedType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ReasonExitedType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedType', 'column', 'ReasonExitedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedType', 'column', 'ReasonExitedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ReasonExited', 'schema', 'edfi', 'table', 'ReasonExitedType', 'column', 'ReasonExitedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for ReasonExited type.', 'schema', 'edfi', 'table', 'ReasonExitedType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for ReasonExited type.', 'schema', 'edfi', 'table', 'ReasonExitedType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'ReasonExitedType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReasonExitedType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The reason the child left the program within a school or district.', 'schema', 'edfi', 'table', 'ReasonExitedType'
go

/* 
 * TABLE: [edfi].[ReasonNotTestedType] 
 */

CREATE TABLE [edfi].[ReasonNotTestedType](
    [ReasonNotTestedTypeId]  int                 IDENTITY(1,1),
    [CodeValue]              nvarchar(50)        NOT NULL,
    [Description]            nvarchar(1024)      NOT NULL,
    [ShortDescription]       nvarchar(450)       NOT NULL,
    [Id]                     uniqueidentifier    CONSTRAINT [ReasonNotTestedType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]       datetime            CONSTRAINT [ReasonNotTestedType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]             datetime            CONSTRAINT [ReasonNotTestedType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ReasonNotTestedType] PRIMARY KEY CLUSTERED ([ReasonNotTestedTypeId])
)
go



IF OBJECT_ID('edfi.ReasonNotTestedType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ReasonNotTestedType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ReasonNotTestedType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReasonNotTestedType', 'column', 'ReasonNotTestedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReasonNotTestedType', 'column', 'ReasonNotTestedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ReasonNotTested', 'schema', 'edfi', 'table', 'ReasonNotTestedType', 'column', 'ReasonNotTestedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReasonNotTestedType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReasonNotTestedType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for ReasonNotTested type.', 'schema', 'edfi', 'table', 'ReasonNotTestedType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReasonNotTestedType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReasonNotTestedType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'ReasonNotTestedType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReasonNotTestedType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReasonNotTestedType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the reason not tested type.', 'schema', 'edfi', 'table', 'ReasonNotTestedType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReasonNotTestedType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReasonNotTestedType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The primary reason student is not tested. For example: Absent Refusal by parent Refusal by student Medical waiver Illness Disruptive behavior LEP Exempt ...', 'schema', 'edfi', 'table', 'ReasonNotTestedType'
go

/* 
 * TABLE: [edfi].[RecognitionType] 
 */

CREATE TABLE [edfi].[RecognitionType](
    [RecognitionTypeId]  int                 IDENTITY(1,1),
    [CodeValue]          nvarchar(50)        NOT NULL,
    [Description]        nvarchar(1024)      NOT NULL,
    [ShortDescription]   nvarchar(450)       NOT NULL,
    [Id]                 uniqueidentifier    CONSTRAINT [RecognitionType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]   datetime            CONSTRAINT [RecognitionType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]         datetime            CONSTRAINT [RecognitionType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_RecognitionType] PRIMARY KEY CLUSTERED ([RecognitionTypeId])
)
go



IF OBJECT_ID('edfi.RecognitionType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.RecognitionType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.RecognitionType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RecognitionType', 'column', 'RecognitionTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RecognitionType', 'column', 'RecognitionTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Recognition', 'schema', 'edfi', 'table', 'RecognitionType', 'column', 'RecognitionTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RecognitionType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RecognitionType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Recognition type.', 'schema', 'edfi', 'table', 'RecognitionType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RecognitionType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RecognitionType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'RecognitionType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RecognitionType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RecognitionType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the recognition type.', 'schema', 'edfi', 'table', 'RecognitionType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RecognitionType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RecognitionType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The nature of recognition given to the student for accomplishments in a co-curricular, or extra-curricular activity.', 'schema', 'edfi', 'table', 'RecognitionType'
go

/* 
 * TABLE: [edfi].[RelationType] 
 */

CREATE TABLE [edfi].[RelationType](
    [RelationTypeId]    int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [RelationType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [RelationType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [RelationType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_RelationType] PRIMARY KEY CLUSTERED ([RelationTypeId])
)
go



IF OBJECT_ID('edfi.RelationType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.RelationType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.RelationType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RelationType', 'column', 'RelationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RelationType', 'column', 'RelationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Relation', 'schema', 'edfi', 'table', 'RelationType', 'column', 'RelationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RelationType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RelationType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Relation type.', 'schema', 'edfi', 'table', 'RelationType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RelationType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RelationType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'RelationType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RelationType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RelationType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the relation type.', 'schema', 'edfi', 'table', 'RelationType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RelationType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RelationType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The nature of an individual''s relationship to a student.', 'schema', 'edfi', 'table', 'RelationType'
go

/* 
 * TABLE: [edfi].[RepeatIdentifierType] 
 */

CREATE TABLE [edfi].[RepeatIdentifierType](
    [RepeatIdentifierTypeId]  int                 IDENTITY(1,1),
    [CodeValue]               nvarchar(50)        NOT NULL,
    [Description]             nvarchar(1024)      NOT NULL,
    [ShortDescription]        nvarchar(450)       NOT NULL,
    [Id]                      uniqueidentifier    CONSTRAINT [RepeatIdentifierType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]        datetime            CONSTRAINT [RepeatIdentifierType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]              datetime            CONSTRAINT [RepeatIdentifierType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_RepeatIdentifierType] PRIMARY KEY CLUSTERED ([RepeatIdentifierTypeId])
)
go



IF OBJECT_ID('edfi.RepeatIdentifierType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.RepeatIdentifierType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.RepeatIdentifierType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RepeatIdentifierType', 'column', 'RepeatIdentifierTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RepeatIdentifierType', 'column', 'RepeatIdentifierTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for RepeatIdentifier', 'schema', 'edfi', 'table', 'RepeatIdentifierType', 'column', 'RepeatIdentifierTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RepeatIdentifierType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RepeatIdentifierType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for RepeatIdentifier type.', 'schema', 'edfi', 'table', 'RepeatIdentifierType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RepeatIdentifierType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RepeatIdentifierType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'RepeatIdentifierType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RepeatIdentifierType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RepeatIdentifierType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the repeat identifier type.', 'schema', 'edfi', 'table', 'RepeatIdentifierType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RepeatIdentifierType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RepeatIdentifierType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication as to whether a student has previously taken a given course.', 'schema', 'edfi', 'table', 'RepeatIdentifierType'
go

/* 
 * TABLE: [edfi].[ReportCard] 
 */

CREATE TABLE [edfi].[ReportCard](
    [StudentUSI]                 int                 NOT NULL,
    [EducationOrganizationId]    int                 NOT NULL,
    [GradingPeriodDescriptorId]  int                 NOT NULL,
    [GradingPeriodBeginDate]     date                NOT NULL,
    [SchoolId]                   int                 NOT NULL,
    [GPAGivenGradingPeriod]      decimal(18, 4)      NULL,
    [GPACumulative]              decimal(18, 4)      NULL,
    [NumberOfDaysAbsent]         decimal(18, 4)      NULL,
    [NumberOfDaysInAttendance]   decimal(18, 4)      NULL,
    [NumberOfDaysTardy]          int                 NULL,
    [Id]                         uniqueidentifier    CONSTRAINT [ReportCard_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]           datetime            CONSTRAINT [ReportCard_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                 datetime            CONSTRAINT [ReportCard_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ReportCard] PRIMARY KEY CLUSTERED ([StudentUSI], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
)
go



IF OBJECT_ID('edfi.ReportCard') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ReportCard >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ReportCard >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'GradingPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'GradingPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the grading period during the school year in which the grade is offered (e.g., 1st cycle, 1st semester)', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'GradingPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'GradingPeriodBeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'GradingPeriodBeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the first day of the grading period.', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'GradingPeriodBeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'GPAGivenGradingPeriod'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'GPAGivenGradingPeriod'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A measure of average performance in all courses taken by an individual for the current grading period.', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'GPAGivenGradingPeriod'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'GPACumulative'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'GPACumulative'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A measure of cumulative average performance in all courses taken by an individual from the beginning of the school year through the current grading period.', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'GPACumulative'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'NumberOfDaysAbsent'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'NumberOfDaysAbsent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of days an individual is absent when school is in session during a given reporting period.', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'NumberOfDaysAbsent'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'NumberOfDaysInAttendance'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'NumberOfDaysInAttendance'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of days an individual is present when school is in session during a given reporting period.', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'NumberOfDaysInAttendance'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'NumberOfDaysTardy'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'NumberOfDaysTardy'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of days an individual is tardy during a given reporting period.', 'schema', 'edfi', 'table', 'ReportCard', 'column', 'NumberOfDaysTardy'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCard', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCard'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This educational entity represents the collection of student grades for courses taken during a grading period.', 'schema', 'edfi', 'table', 'ReportCard'
go

/* 
 * TABLE: [edfi].[ReportCardGrade] 
 */

CREATE TABLE [edfi].[ReportCardGrade](
    [CreateDate]                   datetime         CONSTRAINT [ReportCardGrade_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [EducationOrganizationId]      int              NOT NULL,
    [GradingPeriodDescriptorId]    int              NOT NULL,
    [GradingPeriodBeginDate]       date             NOT NULL,
    [GradeTypeId]                  int              NOT NULL,
    [StudentUSI]                   int              NOT NULL,
    [SchoolId]                     int              NOT NULL,
    [ClassPeriodName]              nvarchar(20)     NOT NULL,
    [ClassroomIdentificationCode]  nvarchar(20)     NOT NULL,
    [LocalCourseCode]              nvarchar(60)     NOT NULL,
    [UniqueSectionCode]            nvarchar(255)    NOT NULL,
    [SequenceOfCourse]             int              NOT NULL,
    [SchoolYear]                   smallint         NOT NULL,
    [TermDescriptorId]             int              NOT NULL,
    [BeginDate]                    date             NOT NULL,
    CONSTRAINT [PK_ReportCardGrade] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [GradeTypeId], [StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
)
go



IF OBJECT_ID('edfi.ReportCardGrade') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ReportCardGrade >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ReportCardGrade >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'GradingPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'GradingPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the grading period during the school year in which the grade is offered (e.g., 1st cycle, 1st semester)', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'GradingPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'GradingPeriodBeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'GradingPeriodBeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the first day of the grading period.', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'GradingPeriodBeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'GradeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'GradeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of grade (e.g., Exam, Final, Grading Period, Progress Report)', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'GradeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period or AB schedules).
=', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the section, that is defined for a campus by the classroom, the subjects taught, and the instructors that are assigned.  NEDM: Unique Course Code', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a section is part of a sequence of parts for a course, the number if the sequence.  If the course has only onle part, the value of this section attribute should be 1.', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the Student''s entry or assignment to the Section.', 'schema', 'edfi', 'table', 'ReportCardGrade', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardGrade'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Grades for the classes attended by the student for this grading period.', 'schema', 'edfi', 'table', 'ReportCardGrade'
go

/* 
 * TABLE: [edfi].[ReportCardStudentCompetencyObjective] 
 */

CREATE TABLE [edfi].[ReportCardStudentCompetencyObjective](
    [StudentUSI]                         int             NOT NULL,
    [Objective]                          nvarchar(60)    NOT NULL,
    [ObjectiveGradeLevelDescriptorId]    int             NOT NULL,
    [ObjectiveEducationOrganizationId]   int             NOT NULL,
    [GradingPeriodDescriptorId]          int             NOT NULL,
    [GradingPeriodBeginDate]             date            NOT NULL,
    [SchoolId]                           int             NOT NULL,
    [ReportCardEducationOrganizationId]  int             NOT NULL,
    [CreateDate]                         datetime        CONSTRAINT [ReportCardStudentCompetencyObjective_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ReportCardStudentCompetencyObjective] PRIMARY KEY CLUSTERED ([StudentUSI], [Objective], [ObjectiveGradeLevelDescriptorId], [ObjectiveEducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId], [ReportCardEducationOrganizationId])
)
go



IF OBJECT_ID('edfi.ReportCardStudentCompetencyObjective') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ReportCardStudentCompetencyObjective >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ReportCardStudentCompetencyObjective >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'Objective'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'Objective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The designated title of the learning objective.', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'Objective'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'ObjectiveGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade level for which the learning objective is targeted,', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'ObjectiveEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'ObjectiveEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'ObjectiveEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'GradingPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'GradingPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'GradingPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'GradingPeriodBeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'GradingPeriodBeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the first day of the grading period.', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'GradingPeriodBeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'ReportCardEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'ReportCardEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', 'column', 'ReportCardEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The student competency evaluations associated for this grading period.', 'schema', 'edfi', 'table', 'ReportCardStudentCompetencyObjective'
go

/* 
 * TABLE: [edfi].[ReportCardStudentLearningObjective] 
 */

CREATE TABLE [edfi].[ReportCardStudentLearningObjective](
    [ReportCardEducationOrganizationId]  int             NOT NULL,
    [StudentUSI]                         int             NOT NULL,
    [Objective]                          nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]        int             NOT NULL,
    [ObjectiveGradeLevelDescriptorId]    int             NOT NULL,
    [GradingPeriodDescriptorId]          int             NOT NULL,
    [GradingPeriodBeginDate]             date            NOT NULL,
    [SchoolId]                           int             NOT NULL,
    [CreateDate]                         datetime        CONSTRAINT [ReportCardStudentLearningObjective_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ReportCardStudentLearningObjective] PRIMARY KEY CLUSTERED ([ReportCardEducationOrganizationId], [StudentUSI], [Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
)
go



IF OBJECT_ID('edfi.ReportCardStudentLearningObjective') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ReportCardStudentLearningObjective >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ReportCardStudentLearningObjective >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'ReportCardEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'ReportCardEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'ReportCardEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'Objective'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'Objective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The designated title of the learning objective.', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'Objective'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'GradingPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'GradingPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'GradingPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'GradingPeriodBeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'GradingPeriodBeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date of the reported payroll element.', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'GradingPeriodBeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'ReportCardStudentLearningObjective', 'column', 'SchoolId'
go

/* 
 * TABLE: [edfi].[ReporterDescriptionDescriptor] 
 */

CREATE TABLE [edfi].[ReporterDescriptionDescriptor](
    [ReporterDescriptionDescriptorId]  int    NOT NULL,
    [ReporterDescriptionTypeId]        int    NULL,
    CONSTRAINT [PK_ReporterDescriptionDescriptor] PRIMARY KEY CLUSTERED ([ReporterDescriptionDescriptorId])
)
go



IF OBJECT_ID('edfi.ReporterDescriptionDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ReporterDescriptionDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ReporterDescriptionDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionDescriptor', 'column', 'ReporterDescriptionDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionDescriptor', 'column', 'ReporterDescriptionDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ReporterDescriptionDescriptor', 'column', 'ReporterDescriptionDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionDescriptor', 'column', 'ReporterDescriptionTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionDescriptor', 'column', 'ReporterDescriptionTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ReporterDescription', 'schema', 'edfi', 'table', 'ReporterDescriptionDescriptor', 'column', 'ReporterDescriptionTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the type of individual who reported an incident.', 'schema', 'edfi', 'table', 'ReporterDescriptionDescriptor'
go

/* 
 * TABLE: [edfi].[ReporterDescriptionType] 
 */

CREATE TABLE [edfi].[ReporterDescriptionType](
    [ReporterDescriptionTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                  nvarchar(50)        NOT NULL,
    [Description]                nvarchar(1024)      NOT NULL,
    [ShortDescription]           nvarchar(450)       NOT NULL,
    [Id]                         uniqueidentifier    CONSTRAINT [ReporterDescriptionType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]           datetime            CONSTRAINT [ReporterDescriptionType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                 datetime            CONSTRAINT [ReporterDescriptionType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ReporterDescriptionType] PRIMARY KEY CLUSTERED ([ReporterDescriptionTypeId])
)
go



IF OBJECT_ID('edfi.ReporterDescriptionType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ReporterDescriptionType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ReporterDescriptionType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionType', 'column', 'ReporterDescriptionTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionType', 'column', 'ReporterDescriptionTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ReporterDescription', 'schema', 'edfi', 'table', 'ReporterDescriptionType', 'column', 'ReporterDescriptionTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for ReporterDescription type.', 'schema', 'edfi', 'table', 'ReporterDescriptionType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'ReporterDescriptionType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the reporter description type.', 'schema', 'edfi', 'table', 'ReporterDescriptionType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ReporterDescriptionType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Information on the type of individual who reported the incident.', 'schema', 'edfi', 'table', 'ReporterDescriptionType'
go

/* 
 * TABLE: [edfi].[ResidencyStatusDescriptor] 
 */

CREATE TABLE [edfi].[ResidencyStatusDescriptor](
    [ResidencyStatusDescriptorId]  int    NOT NULL,
    [ResidencyStatusTypeId]        int    NULL,
    CONSTRAINT [PK_ResidencyStatusDescriptor] PRIMARY KEY CLUSTERED ([ResidencyStatusDescriptorId])
)
go



IF OBJECT_ID('edfi.ResidencyStatusDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ResidencyStatusDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ResidencyStatusDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusDescriptor', 'column', 'ResidencyStatusDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusDescriptor', 'column', 'ResidencyStatusDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ResidencyStatusDescriptor', 'column', 'ResidencyStatusDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusDescriptor', 'column', 'ResidencyStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusDescriptor', 'column', 'ResidencyStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ResidencyStatusDescriptor', 'column', 'ResidencyStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines indications of the location of a person''s legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.', 'schema', 'edfi', 'table', 'ResidencyStatusDescriptor'
go

/* 
 * TABLE: [edfi].[ResidencyStatusType] 
 */

CREATE TABLE [edfi].[ResidencyStatusType](
    [ResidencyStatusTypeId]  int                 IDENTITY(1,1),
    [CodeValue]              nvarchar(50)        NOT NULL,
    [Description]            nvarchar(1024)      NOT NULL,
    [ShortDescription]       nvarchar(450)       NOT NULL,
    [Id]                     uniqueidentifier    CONSTRAINT [ResidencyStatusType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]       datetime            CONSTRAINT [ResidencyStatusType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]             datetime            CONSTRAINT [ResidencyStatusType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ResidencyStatusType] PRIMARY KEY CLUSTERED ([ResidencyStatusTypeId])
)
go



IF OBJECT_ID('edfi.ResidencyStatusType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ResidencyStatusType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ResidencyStatusType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusType', 'column', 'ResidencyStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusType', 'column', 'ResidencyStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ResidencyStatusType', 'column', 'ResidencyStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'ResidencyStatusType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'ResidencyStatusType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'ResidencyStatusType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResidencyStatusType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the location of a persons legal residence relative to (within or outside) the boundaries of the public school attended and its administrative unit.', 'schema', 'edfi', 'table', 'ResidencyStatusType'
go

/* 
 * TABLE: [edfi].[ResponseIndicatorType] 
 */

CREATE TABLE [edfi].[ResponseIndicatorType](
    [ResponseIndicatorTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                nvarchar(50)        NOT NULL,
    [Description]              nvarchar(1024)      NOT NULL,
    [ShortDescription]         nvarchar(450)       NOT NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [ResponseIndicatorType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [ResponseIndicatorType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [ResponseIndicatorType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ResponseIndicatorType] PRIMARY KEY CLUSTERED ([ResponseIndicatorTypeId])
)
go



IF OBJECT_ID('edfi.ResponseIndicatorType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ResponseIndicatorType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ResponseIndicatorType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResponseIndicatorType', 'column', 'ResponseIndicatorTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResponseIndicatorType', 'column', 'ResponseIndicatorTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ResponseIndicator', 'schema', 'edfi', 'table', 'ResponseIndicatorType', 'column', 'ResponseIndicatorTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResponseIndicatorType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResponseIndicatorType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for ResponseIndicator type.', 'schema', 'edfi', 'table', 'ResponseIndicatorType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResponseIndicatorType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResponseIndicatorType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'ResponseIndicatorType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResponseIndicatorType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResponseIndicatorType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the response indicator type.', 'schema', 'edfi', 'table', 'ResponseIndicatorType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResponseIndicatorType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResponseIndicatorType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator of the response. For example: Nonscorable response Ineffective response Effective response Partial response ...', 'schema', 'edfi', 'table', 'ResponseIndicatorType'
go

/* 
 * TABLE: [edfi].[ResponsibilityDescriptor] 
 */

CREATE TABLE [edfi].[ResponsibilityDescriptor](
    [ResponsibilityDescriptorId]  int    NOT NULL,
    [ResponsibilityTypeId]        int    NULL,
    CONSTRAINT [PK_ResponsibilityDescriptor] PRIMARY KEY CLUSTERED ([ResponsibilityDescriptorId])
)
go



IF OBJECT_ID('edfi.ResponsibilityDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ResponsibilityDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ResponsibilityDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityDescriptor', 'column', 'ResponsibilityDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityDescriptor', 'column', 'ResponsibilityDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ResponsibilityDescriptor', 'column', 'ResponsibilityDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityDescriptor', 'column', 'ResponsibilityTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityDescriptor', 'column', 'ResponsibilityTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ResponsibilityDescriptor', 'column', 'ResponsibilityTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines types of responsibility an education organization may have for a student (e.g., accountability, attendance, funding).', 'schema', 'edfi', 'table', 'ResponsibilityDescriptor'
go

/* 
 * TABLE: [edfi].[ResponsibilityType] 
 */

CREATE TABLE [edfi].[ResponsibilityType](
    [ResponsibilityTypeId]  int                 IDENTITY(1,1),
    [CodeValue]             nvarchar(50)        NOT NULL,
    [ShortDescription]      nvarchar(450)       NOT NULL,
    [Description]           nvarchar(1024)      NOT NULL,
    [Id]                    uniqueidentifier    CONSTRAINT [ResponsibilityType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]      datetime            CONSTRAINT [ResponsibilityType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]            datetime            CONSTRAINT [ResponsibilityType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ResponsibilityType] PRIMARY KEY CLUSTERED ([ResponsibilityTypeId])
)
go



IF OBJECT_ID('edfi.ResponsibilityType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ResponsibilityType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ResponsibilityType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityType', 'column', 'ResponsibilityTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityType', 'column', 'ResponsibilityTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ResponsibilityType', 'column', 'ResponsibilityTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'ResponsibilityType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'ResponsibilityType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'ResponsibilityType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResponsibilityType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indications of an education organization''s responsibility for a student, such as accountability, attendance, funding, etc.', 'schema', 'edfi', 'table', 'ResponsibilityType'
go

/* 
 * TABLE: [edfi].[RestraintEvent] 
 */

CREATE TABLE [edfi].[RestraintEvent](
    [StudentUSI]                    int                 NOT NULL,
    [SchoolId]                      int                 NOT NULL,
    [RestraintEventIdentifier]      nvarchar(20)        NOT NULL,
    [EventDate]                     date                NOT NULL,
    [EducationalEnvironmentTypeId]  int                 NULL,
    [Id]                            uniqueidentifier    CONSTRAINT [RestraintEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]              datetime            CONSTRAINT [RestraintEvent_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                    datetime            CONSTRAINT [RestraintEvent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_RestraintEvent] PRIMARY KEY CLUSTERED ([StudentUSI], [SchoolId], [RestraintEventIdentifier], [EventDate])
)
go



IF OBJECT_ID('edfi.RestraintEvent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.RestraintEvent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.RestraintEvent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'RestraintEventIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'RestraintEventIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a restraint event by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'RestraintEventIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'EventDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'EventDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the RestraintEvent.', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'EventDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'EducationalEnvironmentTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'EducationalEnvironmentTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The setting where the restrint was exercised..', 'schema', 'edfi', 'table', 'RestraintEvent', 'column', 'EducationalEnvironmentTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEvent', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEvent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This event entity represents the instances where a special education student was physically or mechanically restrained due to imminent serious physical harm to themselves or others, imminent serious property destruction or a combination of both imminent serious physical harm to themselves or others and imminent serious property destruction.', 'schema', 'edfi', 'table', 'RestraintEvent'
go

/* 
 * TABLE: [edfi].[RestraintEventProgram] 
 */

CREATE TABLE [edfi].[RestraintEventProgram](
    [StudentUSI]                int             NOT NULL,
    [SchoolId]                  int             NOT NULL,
    [RestraintEventIdentifier]  nvarchar(20)    NOT NULL,
    [EventDate]                 date            NOT NULL,
    [ProgramTypeId]             int             NOT NULL,
    [ProgramName]               nvarchar(60)    NOT NULL,
    [EducationOrganizationId]   int             NOT NULL,
    [CreateDate]                datetime        CONSTRAINT [RestraintEventProgram_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_RestraintEventProgram] PRIMARY KEY CLUSTERED ([StudentUSI], [SchoolId], [RestraintEventIdentifier], [EventDate], [ProgramTypeId], [ProgramName], [EducationOrganizationId])
)
go



IF OBJECT_ID('edfi.RestraintEventProgram') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.RestraintEventProgram >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.RestraintEventProgram >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'RestraintEventIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'RestraintEventIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a restraint event by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'RestraintEventIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'EventDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'EventDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day and year of the restraint event.', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'EventDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The program associated with the student.', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Education Organization of the program', 'schema', 'edfi', 'table', 'RestraintEventProgram', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventProgram'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Special Education program associated with the restraint event.', 'schema', 'edfi', 'table', 'RestraintEventProgram'
go

/* 
 * TABLE: [edfi].[RestraintEventReason] 
 */

CREATE TABLE [edfi].[RestraintEventReason](
    [StudentUSI]                  int             NOT NULL,
    [SchoolId]                    int             NOT NULL,
    [RestraintEventIdentifier]    nvarchar(20)    NOT NULL,
    [EventDate]                   date            NOT NULL,
    [RestraintEventReasonTypeId]  int             NOT NULL,
    [CreateDate]                  datetime        CONSTRAINT [RestraintEventReason_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_RestraintEventReason] PRIMARY KEY CLUSTERED ([StudentUSI], [SchoolId], [RestraintEventIdentifier], [EventDate], [RestraintEventReasonTypeId])
)
go



IF OBJECT_ID('edfi.RestraintEventReason') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.RestraintEventReason >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.RestraintEventReason >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'RestraintEventIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'RestraintEventIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a restraint event by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'RestraintEventIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'EventDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'EventDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day and year of the resteraint event.', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'EventDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'RestraintEventReasonTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'RestraintEventReasonTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The categorization of the circumstances or reason for the restraint.', 'schema', 'edfi', 'table', 'RestraintEventReason', 'column', 'RestraintEventReasonTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReason', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReason'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The items of categorization of the circumstances or reasons for the restraint.', 'schema', 'edfi', 'table', 'RestraintEventReason'
go

/* 
 * TABLE: [edfi].[RestraintEventReasonType] 
 */

CREATE TABLE [edfi].[RestraintEventReasonType](
    [RestraintEventReasonTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                   nvarchar(50)        NOT NULL,
    [Description]                 nvarchar(1024)      NOT NULL,
    [ShortDescription]            nvarchar(450)       NOT NULL,
    [Id]                          uniqueidentifier    CONSTRAINT [RestraintEventReasonType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]            datetime            CONSTRAINT [RestraintEventReasonType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                  datetime            CONSTRAINT [RestraintEventReasonType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_RestraintEventReasonsType] PRIMARY KEY CLUSTERED ([RestraintEventReasonTypeId])
)
go



IF OBJECT_ID('edfi.RestraintEventReasonType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.RestraintEventReasonType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.RestraintEventReasonType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReasonType', 'column', 'RestraintEventReasonTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReasonType', 'column', 'RestraintEventReasonTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for RestraintEventReasons', 'schema', 'edfi', 'table', 'RestraintEventReasonType', 'column', 'RestraintEventReasonTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReasonType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReasonType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for RestraintEventReasons type.', 'schema', 'edfi', 'table', 'RestraintEventReasonType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReasonType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReasonType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'RestraintEventReasonType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReasonType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReasonType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the restraint event reason type.', 'schema', 'edfi', 'table', 'RestraintEventReasonType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReasonType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RestraintEventReasonType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The items of categorization of the circumstances or reason for the restraint.', 'schema', 'edfi', 'table', 'RestraintEventReasonType'
go

/* 
 * TABLE: [edfi].[ResultDatatypeType] 
 */

CREATE TABLE [edfi].[ResultDatatypeType](
    [ResultDatatypeTypeId]  int                 IDENTITY(1,1),
    [CodeValue]             nvarchar(50)        NULL,
    [ShortDescription]      nvarchar(450)       NOT NULL,
    [Description]           nvarchar(1024)      NULL,
    [Id]                    uniqueidentifier    CONSTRAINT [ResultDatatypeType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]      datetime            CONSTRAINT [ResultDatatypeType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]            datetime            CONSTRAINT [ResultDatatypeType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_ResultDatatypeType] PRIMARY KEY CLUSTERED ([ResultDatatypeTypeId])
)
go



IF OBJECT_ID('edfi.ResultDatatypeType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ResultDatatypeType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ResultDatatypeType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResultDatatypeType', 'column', 'ResultDatatypeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResultDatatypeType', 'column', 'ResultDatatypeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'ResultDatatypeType', 'column', 'ResultDatatypeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResultDatatypeType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResultDatatypeType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'ResultDatatypeType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResultDatatypeType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResultDatatypeType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'ResultDatatypeType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResultDatatypeType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResultDatatypeType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'ResultDatatypeType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ResultDatatypeType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ResultDatatypeType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The results can be expressed as a number, percentile, range, level, etc.', 'schema', 'edfi', 'table', 'ResultDatatypeType'
go

/* 
 * TABLE: [edfi].[RetestIndicatorType] 
 */

CREATE TABLE [edfi].[RetestIndicatorType](
    [RetestIndicatorTypeId]  int                 IDENTITY(1,1),
    [CodeValue]              nvarchar(50)        NOT NULL,
    [Description]            nvarchar(1024)      NOT NULL,
    [ShortDescription]       nvarchar(450)       NOT NULL,
    [Id]                     uniqueidentifier    CONSTRAINT [RetestIndicatorType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]       datetime            CONSTRAINT [RetestIndicatorType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]             datetime            CONSTRAINT [RetestIndicatorType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_RetestIndicatorType] PRIMARY KEY CLUSTERED ([RetestIndicatorTypeId])
)
go



IF OBJECT_ID('edfi.RetestIndicatorType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.RetestIndicatorType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.RetestIndicatorType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RetestIndicatorType', 'column', 'RetestIndicatorTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RetestIndicatorType', 'column', 'RetestIndicatorTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for RetestIndicator', 'schema', 'edfi', 'table', 'RetestIndicatorType', 'column', 'RetestIndicatorTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RetestIndicatorType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RetestIndicatorType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for RetestIndicator type.', 'schema', 'edfi', 'table', 'RetestIndicatorType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RetestIndicatorType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RetestIndicatorType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'RetestIndicatorType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RetestIndicatorType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RetestIndicatorType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the retest indicator type.', 'schema', 'edfi', 'table', 'RetestIndicatorType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'RetestIndicatorType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'RetestIndicatorType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator if the test was retaken. For example: Primary administration First retest Second retest ...', 'schema', 'edfi', 'table', 'RetestIndicatorType'
go

/* 
 * TABLE: [edfi].[School] 
 */

CREATE TABLE [edfi].[School](
    [SchoolId]                                  int         NOT NULL,
    [LocalEducationAgencyId]                    int         NULL,
    [SchoolTypeId]                              int         NULL,
    [CharterStatusTypeId]                       int         NULL,
    [TitleIPartASchoolDesignationTypeId]        int         NULL,
    [MagnetSpecialProgramEmphasisSchoolTypeId]  int         NULL,
    [AdministrativeFundingControlDescriptorId]  int         NULL,
    [InternetAccessTypeId]                      int         NULL,
    [CharterApprovalAgencyTypeId]               int         NULL,
    [CharterApprovalSchoolYear]                 smallint    NULL,
    CONSTRAINT [PK_School] PRIMARY KEY CLUSTERED ([SchoolId])
)
go



IF OBJECT_ID('edfi.School') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.School >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.School >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier assigned to a school by the State Education Agency (SEA).', 'schema', 'edfi', 'table', 'School', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'LocalEducationAgencyId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'LocalEducationAgencyId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'School', 'column', 'LocalEducationAgencyId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'SchoolTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'SchoolTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The instructional categorization of the school (e.g., Regular, Alternative)', 'schema', 'edfi', 'table', 'School', 'column', 'SchoolTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'CharterStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'CharterStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school.', 'schema', 'edfi', 'table', 'School', 'column', 'CharterStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'TitleIPartASchoolDesignationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'TitleIPartASchoolDesignationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Denotes the Title I Part A designation for the school.', 'schema', 'edfi', 'table', 'School', 'column', 'TitleIPartASchoolDesignationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'MagnetSpecialProgramEmphasisSchoolTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'MagnetSpecialProgramEmphasisSchoolTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2)to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language).', 'schema', 'edfi', 'table', 'School', 'column', 'MagnetSpecialProgramEmphasisSchoolTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'AdministrativeFundingControlDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'AdministrativeFundingControlDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'School', 'column', 'AdministrativeFundingControlDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'InternetAccessTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'InternetAccessTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'School', 'column', 'InternetAccessTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'CharterApprovalAgencyTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'CharterApprovalAgencyTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for MagnetSpecialProgramEmphasisSchool', 'schema', 'edfi', 'table', 'School', 'column', 'CharterApprovalAgencyTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'CharterApprovalSchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'School', 'column', 'CharterApprovalSchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for School', 'schema', 'edfi', 'table', 'School', 'column', 'CharterApprovalSchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'School', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'School'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents an educational organization that includes staff and students who participate in classes and educational activity groups.', 'schema', 'edfi', 'table', 'School'
go

/* 
 * TABLE: [edfi].[SchoolCategory] 
 */

CREATE TABLE [edfi].[SchoolCategory](
    [SchoolId]              int         NOT NULL,
    [SchoolCategoryTypeId]  int         NOT NULL,
    [CreateDate]            datetime    CONSTRAINT [SchoolCategory_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SchoolCategory] PRIMARY KEY CLUSTERED ([SchoolId], [SchoolCategoryTypeId])
)
go



IF OBJECT_ID('edfi.SchoolCategory') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SchoolCategory >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SchoolCategory >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolCategory', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolCategory', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'SchoolCategory', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolCategory', 'column', 'SchoolCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolCategory', 'column', 'SchoolCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The one or more categories of school. For example: High School, Middle School, and/or Elementary School.', 'schema', 'edfi', 'table', 'SchoolCategory', 'column', 'SchoolCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolCategory', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolCategory'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The category of school. (e.g., High School, Middle School or Elementary School).', 'schema', 'edfi', 'table', 'SchoolCategory'
go

/* 
 * TABLE: [edfi].[SchoolCategoryType] 
 */

CREATE TABLE [edfi].[SchoolCategoryType](
    [SchoolCategoryTypeId]  int                 IDENTITY(1,1),
    [CodeValue]             nvarchar(50)        NOT NULL,
    [Description]           nvarchar(1024)      NOT NULL,
    [ShortDescription]      nvarchar(450)       NOT NULL,
    [Id]                    uniqueidentifier    CONSTRAINT [SchoolCategoryType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]      datetime            CONSTRAINT [SchoolCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]            datetime            CONSTRAINT [SchoolCategoryType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SchoolCategoryType] PRIMARY KEY CLUSTERED ([SchoolCategoryTypeId])
)
go



IF OBJECT_ID('edfi.SchoolCategoryType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SchoolCategoryType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SchoolCategoryType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolCategoryType', 'column', 'SchoolCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolCategoryType', 'column', 'SchoolCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for SchoolCategory', 'schema', 'edfi', 'table', 'SchoolCategoryType', 'column', 'SchoolCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolCategoryType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolCategoryType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for SchoolCategory type.', 'schema', 'edfi', 'table', 'SchoolCategoryType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolCategoryType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolCategoryType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'SchoolCategoryType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolCategoryType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolCategoryType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the school category type.', 'schema', 'edfi', 'table', 'SchoolCategoryType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolCategoryType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolCategoryType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The category of school. For example: High School, Middle School, Elementary School.', 'schema', 'edfi', 'table', 'SchoolCategoryType'
go

/* 
 * TABLE: [edfi].[SchoolChoiceImplementStatusType] 
 */

CREATE TABLE [edfi].[SchoolChoiceImplementStatusType](
    [SchoolChoiceImplementStatusTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                          nvarchar(50)        NOT NULL,
    [Description]                        nvarchar(1024)      NULL,
    [ShortDescription]                   nvarchar(450)       NOT NULL,
    [Id]                                 uniqueidentifier    CONSTRAINT [SchoolChoiceImplementStatusType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                   datetime            CONSTRAINT [SchoolChoiceImplementStatusType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                         datetime            CONSTRAINT [SchoolChoiceImplementStatusType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SchoolChoiceImplementStatusType] PRIMARY KEY CLUSTERED ([SchoolChoiceImplementStatusTypeId])
)
go



IF OBJECT_ID('edfi.SchoolChoiceImplementStatusType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SchoolChoiceImplementStatusType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SchoolChoiceImplementStatusType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType', 'column', 'SchoolChoiceImplementStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType', 'column', 'SchoolChoiceImplementStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType', 'column', 'SchoolChoiceImplementStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of whether the LEA was able to implement the provisions for public school choice under Title I, Part A, Section 1116 of ESEA, as amended.', 'schema', 'edfi', 'table', 'SchoolChoiceImplementStatusType'
go

/* 
 * TABLE: [edfi].[SchoolFoodServicesEligibilityDescriptor] 
 */

CREATE TABLE [edfi].[SchoolFoodServicesEligibilityDescriptor](
    [SchoolFoodServicesEligibilityDescriptorId]  int    NOT NULL,
    [SchoolFoodServicesEligibilityTypeId]        int    NULL,
    CONSTRAINT [PK_SchoolFoodServicesEligibilityDescriptor] PRIMARY KEY CLUSTERED ([SchoolFoodServicesEligibilityDescriptorId])
)
go



IF OBJECT_ID('edfi.SchoolFoodServicesEligibilityDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SchoolFoodServicesEligibilityDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SchoolFoodServicesEligibilityDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityDescriptor', 'column', 'SchoolFoodServicesEligibilityDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityDescriptor', 'column', 'SchoolFoodServicesEligibilityDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityDescriptor', 'column', 'SchoolFoodServicesEligibilityDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityDescriptor', 'column', 'SchoolFoodServicesEligibilityTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityDescriptor', 'column', 'SchoolFoodServicesEligibilityTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for SchoolFoodServicesEligibility', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityDescriptor', 'column', 'SchoolFoodServicesEligibilityTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines indications of a student''s level of eligibility for breakfast, lunch, snack, supper, and milk programs.', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityDescriptor'
go

/* 
 * TABLE: [edfi].[SchoolFoodServicesEligibilityType] 
 */

CREATE TABLE [edfi].[SchoolFoodServicesEligibilityType](
    [SchoolFoodServicesEligibilityTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                            nvarchar(50)        NOT NULL,
    [Description]                          nvarchar(1024)      NOT NULL,
    [ShortDescription]                     nvarchar(450)       NOT NULL,
    [Id]                                   uniqueidentifier    CONSTRAINT [SchoolFoodServicesEligibilityType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                     datetime            CONSTRAINT [SchoolFoodServicesEligibilityType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                           datetime            CONSTRAINT [SchoolFoodServicesEligibilityType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SchoolFoodServicesEligibilityType] PRIMARY KEY CLUSTERED ([SchoolFoodServicesEligibilityTypeId])
)
go



IF OBJECT_ID('edfi.SchoolFoodServicesEligibilityType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SchoolFoodServicesEligibilityType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SchoolFoodServicesEligibilityType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType', 'column', 'SchoolFoodServicesEligibilityTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType', 'column', 'SchoolFoodServicesEligibilityTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for SchoolFoodServicesEligibility', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType', 'column', 'SchoolFoodServicesEligibilityTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for SchoolFoodServicesEligibility type.', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for SchoolFoodServicesEligibility type.', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of a student''s level of eligibility for breakfast, lunch, snack, supper and milk programs.', 'schema', 'edfi', 'table', 'SchoolFoodServicesEligibilityType'
go

/* 
 * TABLE: [edfi].[SchoolGradeLevel] 
 */

CREATE TABLE [edfi].[SchoolGradeLevel](
    [SchoolId]                int         NOT NULL,
    [GradeLevelDescriptorId]  int         NOT NULL,
    [CreateDate]              datetime    CONSTRAINT [SchoolGradeLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SchoolGradeLevel] PRIMARY KEY CLUSTERED ([SchoolId], [GradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.SchoolGradeLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SchoolGradeLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SchoolGradeLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolGradeLevel', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolGradeLevel', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'SchoolGradeLevel', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolGradeLevel', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolGradeLevel', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade levels served at the school.', 'schema', 'edfi', 'table', 'SchoolGradeLevel', 'column', 'GradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolGradeLevel', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolGradeLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade levels served at the school.', 'schema', 'edfi', 'table', 'SchoolGradeLevel'
go

/* 
 * TABLE: [edfi].[SchoolType] 
 */

CREATE TABLE [edfi].[SchoolType](
    [SchoolTypeId]      int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [SchoolType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [SchoolType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [SchoolType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SchoolType] PRIMARY KEY CLUSTERED ([SchoolTypeId])
)
go



IF OBJECT_ID('edfi.SchoolType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SchoolType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SchoolType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolType', 'column', 'SchoolTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolType', 'column', 'SchoolTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for School', 'schema', 'edfi', 'table', 'SchoolType', 'column', 'SchoolTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for School type.', 'schema', 'edfi', 'table', 'SchoolType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'SchoolType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the school type.', 'schema', 'edfi', 'table', 'SchoolType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of education institution as classified by its primary focus.', 'schema', 'edfi', 'table', 'SchoolType'
go

/* 
 * TABLE: [edfi].[SchoolYearType] 
 */

CREATE TABLE [edfi].[SchoolYearType](
    [SchoolYear]             smallint            NOT NULL,
    [SchoolYearDescription]  nvarchar(50)        NOT NULL,
    [CurrentSchoolYear]      bit                 NOT NULL,
    [Id]                     uniqueidentifier    CONSTRAINT [SchoolYearType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]       datetime            CONSTRAINT [SchoolYearType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]             datetime            CONSTRAINT [SchoolYearType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SchoolYearType] PRIMARY KEY CLUSTERED ([SchoolYear])
)
go



IF OBJECT_ID('edfi.SchoolYearType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SchoolYearType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SchoolYearType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolYearType', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolYearType', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for School', 'schema', 'edfi', 'table', 'SchoolYearType', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolYearType', 'column', 'SchoolYearDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolYearType', 'column', 'SchoolYearDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for SchoolYear type.', 'schema', 'edfi', 'table', 'SchoolYearType', 'column', 'SchoolYearDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolYearType', 'column', 'CurrentSchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolYearType', 'column', 'CurrentSchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for SchoolYear type.', 'schema', 'edfi', 'table', 'SchoolYearType', 'column', 'CurrentSchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SchoolYearType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SchoolYearType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifier for a school year.', 'schema', 'edfi', 'table', 'SchoolYearType'
go

/* 
 * TABLE: [edfi].[Section] 
 */

CREATE TABLE [edfi].[Section](
    [SchoolId]                         int                 NOT NULL,
    [ClassPeriodName]                  nvarchar(20)        NOT NULL,
    [ClassroomIdentificationCode]      nvarchar(20)        NOT NULL,
    [LocalCourseCode]                  nvarchar(60)        NOT NULL,
    [TermDescriptorId]                 int                 NOT NULL,
    [SchoolYear]                       smallint            NOT NULL,
    [UniqueSectionCode]                nvarchar(255)       NOT NULL,
    [SequenceOfCourse]                 int                 NOT NULL,
    [EducationalEnvironmentTypeId]     int                 NULL,
    [MediumOfInstructionTypeId]        int                 NULL,
    [PopulationServedTypeId]           int                 NULL,
    [AvailableCreditTypeId]            int                 NULL,
    [AvailableCreditConversion]        decimal(9, 2)       NULL,
    [InstructionLanguageDescriptorId]  int                 NULL,
    [AvailableCredits]                 decimal(9, 2)       NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [Section_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [Section_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [Section_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Section] PRIMARY KEY CLUSTERED ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
)
go



IF OBJECT_ID('edfi.Section') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Section >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Section >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'Section', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period', 'schema', 'edfi', 'table', 'Section', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'Section', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'Section', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Section', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'Section', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the Section, that is defined by the classroom, the subjects taught, and the instructors that are assigned.', 'schema', 'edfi', 'table', 'Section', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a Section is part of a sequence of parts for a course, the number if the sequence. If the course has only one part, the value of this Section attribute should be 1.', 'schema', 'edfi', 'table', 'Section', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'EducationalEnvironmentTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'EducationalEnvironmentTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The setting in which a child receives education and related services; for example:  Center-based instruction  Home-based instruction  Hospital class  Mainstream  Residential care and treatment facility  ....', 'schema', 'edfi', 'table', 'Section', 'column', 'EducationalEnvironmentTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'MediumOfInstructionTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'MediumOfInstructionTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The media through which teachers provide instruction to students and students and teachers communicate about instructional matters; for example:  Technology-based instruction in classroom  Correspondence instruction  Face-to-face instruction  Virtual/On-line Distance learning  Center-based instruction  ...', 'schema', 'edfi', 'table', 'Section', 'column', 'MediumOfInstructionTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'PopulationServedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'PopulationServedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The population for which the course was designed; for example:  Bilingual students  Remedial education students  Gifted and talented students  Career and Technical Education students  Special education students  ....', 'schema', 'edfi', 'table', 'Section', 'column', 'PopulationServedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'AvailableCreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'AvailableCreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of credits or units of value awarded for the completion of a course.', 'schema', 'edfi', 'table', 'Section', 'column', 'AvailableCreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'AvailableCreditConversion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'AvailableCreditConversion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', 'schema', 'edfi', 'table', 'Section', 'column', 'AvailableCreditConversion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'InstructionLanguageDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'InstructionLanguageDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Section', 'column', 'InstructionLanguageDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'AvailableCredits'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section', 'column', 'AvailableCredits'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Credits or units of value awarded for the completion of a course.', 'schema', 'edfi', 'table', 'Section', 'column', 'AvailableCredits'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Section', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Section'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents a setting in which organized instruction of course content is provided, in-person or otherwise, to one or more students for a given period of time. A course offering may be offered to more than one section.', 'schema', 'edfi', 'table', 'Section'
go

/* 
 * TABLE: [edfi].[SectionAttendanceTakenEvent] 
 */

CREATE TABLE [edfi].[SectionAttendanceTakenEvent](
    [EventDate]                    date                NOT NULL,
    [StaffUSI]                     int                 NULL,
    [Id]                           uniqueidentifier    CONSTRAINT [SectionAttendanceTakenEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]             datetime            CONSTRAINT [SectionAttendanceTakenEvent_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                   datetime            CONSTRAINT [SectionAttendanceTakenEvent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [SchoolId]                     int                 NOT NULL,
    [ClassPeriodName]              nvarchar(20)        NOT NULL,
    [ClassroomIdentificationCode]  nvarchar(20)        NOT NULL,
    [LocalCourseCode]              nvarchar(60)        NOT NULL,
    [TermDescriptorId]             int                 NOT NULL,
    [SchoolYear]                   smallint            NOT NULL,
    [UniqueSectionCode]            nvarchar(255)       NOT NULL,
    [SequenceOfCourse]             int                 NOT NULL,
    [Date]                         date                NOT NULL,
    CONSTRAINT [PK_SectionAttendanceTakenEvent] PRIMARY KEY CLUSTERED ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse], [Date])
)
go



IF OBJECT_ID('edfi.SectionAttendanceTakenEvent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SectionAttendanceTakenEvent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SectionAttendanceTakenEvent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'EventDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'EventDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the SectionAttendanceTakenEvent was submitted, which could be a different date than the instructional day.', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'EventDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique alphanumeric code assigned to a staff.', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the Section, that is defined by the classroom, the subjects taught, and the instructors that are assigned.', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a Section is part of a sequence of parts for a course, the number if the sequence. If the course has only one part, the value of this Section attribute should be 1.', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'Date'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'Date'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year of the CalendarDate.', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', 'column', 'Date'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Captures attendance taken event for given section.', 'schema', 'edfi', 'table', 'SectionAttendanceTakenEvent'
go

/* 
 * TABLE: [edfi].[SectionCharacteristic] 
 */

CREATE TABLE [edfi].[SectionCharacteristic](
    [SectionCharacteristicDescriptorId]  int              NOT NULL,
    [ClassroomIdentificationCode]        nvarchar(20)     NOT NULL,
    [SchoolId]                           int              NOT NULL,
    [ClassPeriodName]                    nvarchar(20)     NOT NULL,
    [LocalCourseCode]                    nvarchar(60)     NOT NULL,
    [SchoolYear]                         smallint         NOT NULL,
    [TermDescriptorId]                   int              NOT NULL,
    [UniqueSectionCode]                  nvarchar(255)    NOT NULL,
    [SequenceOfCourse]                   int              NOT NULL,
    [CreateDate]                         datetime         CONSTRAINT [SectionCharacteristic_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SectionCharacteristic] PRIMARY KEY CLUSTERED ([SectionCharacteristicDescriptorId], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse])
)
go



IF OBJECT_ID('edfi.SectionCharacteristic') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SectionCharacteristic >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SectionCharacteristic >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'SectionCharacteristicDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'SectionCharacteristicDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'SectionCharacteristicDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the section, that is defined for a campus by the classroom, the subjects taught, and the instructors that are assigned.  NEDM: Unique Course Code', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a section is part of a sequence of parts for a course, the number if the sequence.  If the course has only onle part, the value of this section attribute should be 1.', 'schema', 'edfi', 'table', 'SectionCharacteristic', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristic'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reflects important characteristics of the Section, such as whether or not attendance is taken and the Section is graded.', 'schema', 'edfi', 'table', 'SectionCharacteristic'
go

/* 
 * TABLE: [edfi].[SectionCharacteristicDescriptor] 
 */

CREATE TABLE [edfi].[SectionCharacteristicDescriptor](
    [SectionCharacteristicDescriptorId]  int    NOT NULL,
    [SectionCharacteristicTypeId]        int    NULL,
    CONSTRAINT [PK_SectionCharacteristicDescriptor] PRIMARY KEY CLUSTERED ([SectionCharacteristicDescriptorId])
)
go



IF OBJECT_ID('edfi.SectionCharacteristicDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SectionCharacteristicDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SectionCharacteristicDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicDescriptor', 'column', 'SectionCharacteristicDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicDescriptor', 'column', 'SectionCharacteristicDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SectionCharacteristicDescriptor', 'column', 'SectionCharacteristicDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicDescriptor', 'column', 'SectionCharacteristicTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicDescriptor', 'column', 'SectionCharacteristicTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SectionCharacteristicDescriptor', 'column', 'SectionCharacteristicTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines characteristics of a Section, such as whether attendance is taken and the Section is graded.', 'schema', 'edfi', 'table', 'SectionCharacteristicDescriptor'
go

/* 
 * TABLE: [edfi].[SectionCharacteristicType] 
 */

CREATE TABLE [edfi].[SectionCharacteristicType](
    [SectionCharacteristicTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                    nvarchar(50)        NULL,
    [ShortDescription]             nvarchar(450)       NOT NULL,
    [Description]                  nvarchar(1024)      NULL,
    [Id]                           uniqueidentifier    CONSTRAINT [SectionCharacteristicType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]             datetime            CONSTRAINT [SectionCharacteristicType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                   datetime            CONSTRAINT [SectionCharacteristicType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SectionCharacteristicsType] PRIMARY KEY CLUSTERED ([SectionCharacteristicTypeId])
)
go



IF OBJECT_ID('edfi.SectionCharacteristicType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SectionCharacteristicType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SectionCharacteristicType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicType', 'column', 'SectionCharacteristicTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicType', 'column', 'SectionCharacteristicTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SectionCharacteristicType', 'column', 'SectionCharacteristicTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'SectionCharacteristicType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'SectionCharacteristicType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'SectionCharacteristicType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionCharacteristicType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Enumeration items for Section Characteristics.', 'schema', 'edfi', 'table', 'SectionCharacteristicType'
go

/* 
 * TABLE: [edfi].[SectionProgram] 
 */

CREATE TABLE [edfi].[SectionProgram](
    [ClassroomIdentificationCode]  nvarchar(20)     NOT NULL,
    [SchoolId]                     int              NOT NULL,
    [ClassPeriodName]              nvarchar(20)     NOT NULL,
    [LocalCourseCode]              nvarchar(60)     NOT NULL,
    [SchoolYear]                   smallint         NOT NULL,
    [TermDescriptorId]             int              NOT NULL,
    [UniqueSectionCode]            nvarchar(255)    NOT NULL,
    [SequenceOfCourse]             int              NOT NULL,
    [ProgramTypeId]                int              NOT NULL,
    [ProgramName]                  nvarchar(60)     NOT NULL,
    [EducationOrganizationId]      int              NOT NULL,
    [CreateDate]                   datetime         CONSTRAINT [SectionProgram_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SectionProgram] PRIMARY KEY CLUSTERED ([ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [ProgramTypeId], [ProgramName], [EducationOrganizationId])
)
go



IF OBJECT_ID('edfi.SectionProgram') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SectionProgram >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SectionProgram >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the section, that is defined for a campus by the classroom, the subjects taught, and the instructors that are assigned.  NEDM: Unique Course Code', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a section is part of a sequence of parts for a course, the number if the sequence.  If the course has only onle part, the value of this section attribute should be 1.', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Program', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'SectionProgram', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SectionProgram', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SectionProgram'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Optional reference to program (e.g., CTE) to which the section is associated.', 'schema', 'edfi', 'table', 'SectionProgram'
go

/* 
 * TABLE: [edfi].[SeparationReasonDescriptor] 
 */

CREATE TABLE [edfi].[SeparationReasonDescriptor](
    [SeparationReasonDescriptorId]  int    NOT NULL,
    [SeparationReasonTypeId]        int    NULL,
    CONSTRAINT [PK_SeparationReasonDescriptor] PRIMARY KEY CLUSTERED ([SeparationReasonDescriptorId])
)
go



IF OBJECT_ID('edfi.SeparationReasonDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SeparationReasonDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SeparationReasonDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonDescriptor', 'column', 'SeparationReasonDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonDescriptor', 'column', 'SeparationReasonDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SeparationReasonDescriptor', 'column', 'SeparationReasonDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonDescriptor', 'column', 'SeparationReasonTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonDescriptor', 'column', 'SeparationReasonTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for SeparationReason', 'schema', 'edfi', 'table', 'SeparationReasonDescriptor', 'column', 'SeparationReasonTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the reasons for terminating the employment.', 'schema', 'edfi', 'table', 'SeparationReasonDescriptor'
go

/* 
 * TABLE: [edfi].[SeparationReasonType] 
 */

CREATE TABLE [edfi].[SeparationReasonType](
    [SeparationReasonTypeId]  int                 IDENTITY(1,1),
    [CodeValue]               nvarchar(50)        NOT NULL,
    [Description]             nvarchar(1024)      NOT NULL,
    [ShortDescription]        nvarchar(450)       NOT NULL,
    [Id]                      uniqueidentifier    CONSTRAINT [SeparationReasonType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]        datetime            CONSTRAINT [SeparationReasonType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]              datetime            CONSTRAINT [SeparationReasonType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SeparationReasonType] PRIMARY KEY CLUSTERED ([SeparationReasonTypeId])
)
go



IF OBJECT_ID('edfi.SeparationReasonType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SeparationReasonType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SeparationReasonType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonType', 'column', 'SeparationReasonTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonType', 'column', 'SeparationReasonTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for SeparationReason', 'schema', 'edfi', 'table', 'SeparationReasonType', 'column', 'SeparationReasonTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for SeparationReason type.', 'schema', 'edfi', 'table', 'SeparationReasonType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'SeparationReasonType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the separation reason type.', 'schema', 'edfi', 'table', 'SeparationReasonType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SeparationReasonType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reason for terminating the employment; for example: Employment in education, Employment outside of education, Retirement, Family/personal relocation and Change of assignment.', 'schema', 'edfi', 'table', 'SeparationReasonType'
go

/* 
 * TABLE: [edfi].[SeparationType] 
 */

CREATE TABLE [edfi].[SeparationType](
    [SeparationTypeId]  int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [SeparationType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [SeparationType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [SeparationType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SeparationType] PRIMARY KEY CLUSTERED ([SeparationTypeId])
)
go



IF OBJECT_ID('edfi.SeparationType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SeparationType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SeparationType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SeparationType', 'column', 'SeparationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SeparationType', 'column', 'SeparationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Separation', 'schema', 'edfi', 'table', 'SeparationType', 'column', 'SeparationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SeparationType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SeparationType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Separation type.', 'schema', 'edfi', 'table', 'SeparationType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SeparationType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SeparationType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'SeparationType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SeparationType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SeparationType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the separation type.', 'schema', 'edfi', 'table', 'SeparationType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SeparationType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SeparationType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Type of employment separation; for example: Voluntary separation, Involuntary separation, Mutual agreement. Other, etc.', 'schema', 'edfi', 'table', 'SeparationType'
go

/* 
 * TABLE: [edfi].[ServiceDescriptor] 
 */

CREATE TABLE [edfi].[ServiceDescriptor](
    [ServiceDescriptorId]  int             NOT NULL,
    [ServiceCategory]      nvarchar(50)    NULL,
    CONSTRAINT [PK_ServiceDescriptor] PRIMARY KEY CLUSTERED ([ServiceDescriptorId])
)
go



IF OBJECT_ID('edfi.ServiceDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.ServiceDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.ServiceDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ServiceDescriptor', 'column', 'ServiceDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ServiceDescriptor', 'column', 'ServiceDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Service Descriptor', 'schema', 'edfi', 'table', 'ServiceDescriptor', 'column', 'ServiceDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ServiceDescriptor', 'column', 'ServiceCategory'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ServiceDescriptor', 'column', 'ServiceCategory'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The category of service provided by a program.', 'schema', 'edfi', 'table', 'ServiceDescriptor', 'column', 'ServiceCategory'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'ServiceDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'ServiceDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the services provided by an education organization to populations of students associated with a program.', 'schema', 'edfi', 'table', 'ServiceDescriptor'
go

/* 
 * TABLE: [edfi].[Session] 
 */

CREATE TABLE [edfi].[Session](
    [SchoolId]                int                 NOT NULL,
    [SchoolYear]              smallint            NOT NULL,
    [TermDescriptorId]        int                 NOT NULL,
    [SessionName]             nvarchar(60)        NOT NULL,
    [BeginDate]               date                NOT NULL,
    [EndDate]                 date                NOT NULL,
    [TotalInstructionalDays]  int                 NOT NULL,
    [Id]                      uniqueidentifier    CONSTRAINT [Session_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]        datetime            CONSTRAINT [Session_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]              datetime            CONSTRAINT [Session_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Session] PRIMARY KEY CLUSTERED ([SchoolId], [SchoolYear], [TermDescriptorId])
)
go



IF OBJECT_ID('edfi.Session') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Session >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Session >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Session', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Session', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'Session', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Session', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Session', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year (e.g., 2010/11).', 'schema', 'edfi', 'table', 'Session', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Session', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Session', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Session', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Session', 'column', 'SessionName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Session', 'column', 'SessionName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).  NEDM: Session Type', 'schema', 'edfi', 'table', 'Session', 'column', 'SessionName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Session', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Session', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the first day of the Session.', 'schema', 'edfi', 'table', 'Session', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Session', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Session', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the last day of the Session.', 'schema', 'edfi', 'table', 'Session', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Session', 'column', 'TotalInstructionalDays'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Session', 'column', 'TotalInstructionalDays'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The total number of instructional days in the school calendar.', 'schema', 'edfi', 'table', 'Session', 'column', 'TotalInstructionalDays'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Session', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Session'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents the prescribed span of time when an education institution is open, instruction is provided and students are under the direction and guidance of teachers and/or education institution administration. A session may be interrupted by one or more vacations.', 'schema', 'edfi', 'table', 'Session'
go

/* 
 * TABLE: [edfi].[SessionAcademicWeek] 
 */

CREATE TABLE [edfi].[SessionAcademicWeek](
    [SchoolId]          int             NOT NULL,
    [CreateDate]        datetime        CONSTRAINT [SessionAcademicWeek_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [WeekIdentifier]    nvarchar(80)    NOT NULL,
    [SchoolYear]        smallint        NOT NULL,
    [TermDescriptorId]  int             NOT NULL,
    CONSTRAINT [PK_SessionAcademicWeek] PRIMARY KEY CLUSTERED ([SchoolId], [WeekIdentifier], [SchoolYear], [TermDescriptorId])
)
go



IF OBJECT_ID('edfi.SessionAcademicWeek') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SessionAcademicWeek >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SessionAcademicWeek >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SessionAcademicWeek', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SessionAcademicWeek', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'SessionAcademicWeek', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SessionAcademicWeek', 'column', 'WeekIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SessionAcademicWeek', 'column', 'WeekIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The campus label for the week.', 'schema', 'edfi', 'table', 'SessionAcademicWeek', 'column', 'WeekIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SessionAcademicWeek', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SessionAcademicWeek', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year (e.g., 2010/11).', 'schema', 'edfi', 'table', 'SessionAcademicWeek', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SessionAcademicWeek', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SessionAcademicWeek', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SessionAcademicWeek', 'column', 'TermDescriptorId'
go

/* 
 * TABLE: [edfi].[SessionGradingPeriod] 
 */

CREATE TABLE [edfi].[SessionGradingPeriod](
    [SchoolYear]                 smallint    NOT NULL,
    [TermDescriptorId]           int         NOT NULL,
    [SchoolId]                   int         NOT NULL,
    [GradingPeriodDescriptorId]  int         NOT NULL,
    [BeginDate]                  date        NOT NULL,
    [CreateDate]                 datetime    CONSTRAINT [SessionGradingPeriod_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SessionGradingPeriod] PRIMARY KEY CLUSTERED ([SchoolYear], [TermDescriptorId], [SchoolId], [GradingPeriodDescriptorId], [BeginDate])
)
go



IF OBJECT_ID('edfi.SessionGradingPeriod') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SessionGradingPeriod >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SessionGradingPeriod >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'GradingPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'GradingPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the grading period during the school year in which the grade is offered (e.g., 1st cycle, 1st semester)', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'GradingPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the first day of the grading period.', 'schema', 'edfi', 'table', 'SessionGradingPeriod', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SessionGradingPeriod', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SessionGradingPeriod'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Grading periods associated with the session calendar.', 'schema', 'edfi', 'table', 'SessionGradingPeriod'
go

/* 
 * TABLE: [edfi].[SexType] 
 */

CREATE TABLE [edfi].[SexType](
    [SexTypeId]         int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [SexType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [SexType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [SexType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SexType] PRIMARY KEY CLUSTERED ([SexTypeId])
)
go



IF OBJECT_ID('edfi.SexType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SexType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SexType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SexType', 'column', 'SexTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SexType', 'column', 'SexTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Sex', 'schema', 'edfi', 'table', 'SexType', 'column', 'SexTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SexType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SexType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Sex type.', 'schema', 'edfi', 'table', 'SexType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SexType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SexType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'SexType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SexType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SexType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the sex type.', 'schema', 'edfi', 'table', 'SexType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SexType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SexType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A person''s gender.', 'schema', 'edfi', 'table', 'SexType'
go

/* 
 * TABLE: [edfi].[SpecialEducationSettingDescriptor] 
 */

CREATE TABLE [edfi].[SpecialEducationSettingDescriptor](
    [SpecialEducationSettingDescriptorId]  int    NOT NULL,
    [SpecialEducationSettingTypeId]        int    NULL,
    CONSTRAINT [PK_SpecialEducationSettingDescriptor] PRIMARY KEY CLUSTERED ([SpecialEducationSettingDescriptorId])
)
go



IF OBJECT_ID('edfi.SpecialEducationSettingDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SpecialEducationSettingDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SpecialEducationSettingDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingDescriptor', 'column', 'SpecialEducationSettingDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingDescriptor', 'column', 'SpecialEducationSettingDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SpecialEducationSettingDescriptor', 'column', 'SpecialEducationSettingDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingDescriptor', 'column', 'SpecialEducationSettingTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingDescriptor', 'column', 'SpecialEducationSettingTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SpecialEducationSettingDescriptor', 'column', 'SpecialEducationSettingTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the major instructional setting (more than 50 percent of a student''s special education program).', 'schema', 'edfi', 'table', 'SpecialEducationSettingDescriptor'
go

/* 
 * TABLE: [edfi].[SpecialEducationSettingType] 
 */

CREATE TABLE [edfi].[SpecialEducationSettingType](
    [SpecialEducationSettingTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                      nvarchar(50)        NOT NULL,
    [Description]                    nvarchar(1024)      NOT NULL,
    [ShortDescription]               nvarchar(450)       NOT NULL,
    [Id]                             uniqueidentifier    CONSTRAINT [SpecialEducationSettingType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]               datetime            CONSTRAINT [SpecialEducationSettingType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                     datetime            CONSTRAINT [SpecialEducationSettingType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_SpecialEducationSettingType] PRIMARY KEY CLUSTERED ([SpecialEducationSettingTypeId])
)
go



IF OBJECT_ID('edfi.SpecialEducationSettingType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.SpecialEducationSettingType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.SpecialEducationSettingType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingType', 'column', 'SpecialEducationSettingTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingType', 'column', 'SpecialEducationSettingTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'SpecialEducationSettingType', 'column', 'SpecialEducationSettingTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'SpecialEducationSettingType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'SpecialEducationSettingType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'SpecialEducationSettingType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'SpecialEducationSettingType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The major instructional setting for a student. (more than 50% of a studentӳ special education program).', 'schema', 'edfi', 'table', 'SpecialEducationSettingType'
go

/* 
 * TABLE: [edfi].[Staff] 
 */

CREATE TABLE [edfi].[Staff](
    [StaffUSI]                                      int                 IDENTITY(1,1),
    [PersonalTitlePrefix]                           nvarchar(30)        NULL,
    [FirstName]                                     nvarchar(75)        NOT NULL,
    [MiddleName]                                    nvarchar(75)        NULL,
    [LastSurname]                                   nvarchar(75)        NOT NULL,
    [GenerationCodeSuffix]                          nvarchar(10)        NULL,
    [MaidenName]                                    nvarchar(75)        NULL,
    [SexTypeId]                                     int                 NULL,
    [BirthDate]                                     date                NULL,
    [HispanicLatinoEthnicity]                       bit                 NOT NULL,
    [OldEthnicityTypeId]                            int                 NULL,
    [HighestCompletedLevelOfEducationDescriptorId]  int                 NULL,
    [YearsOfPriorProfessionalExperience]            decimal(5, 2)       NULL,
    [YearsOfPriorTeachingExperience]                decimal(5, 2)       NULL,
    [HighlyQualifiedTeacher]                        bit                 NULL,
    [LoginId]                                       nvarchar(60)        NULL,
    [CitizenshipStatusTypeId]                       int                 NULL,
    [StaffUniqueId]                                 nvarchar(32)        NOT NULL,
    [Id]                                            uniqueidentifier    CONSTRAINT [Staff_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                              datetime            CONSTRAINT [Staff_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                                    datetime            CONSTRAINT [Staff_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_Staff] PRIMARY KEY CLUSTERED ([StaffUSI])
)
go



IF OBJECT_ID('edfi.Staff') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Staff >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Staff >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'Staff', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'PersonalTitlePrefix'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'PersonalTitlePrefix'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A prefix used to denote the title, degree, position, or seniority of the person.', 'schema', 'edfi', 'table', 'Staff', 'column', 'PersonalTitlePrefix'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'FirstName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'FirstName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', 'schema', 'edfi', 'table', 'Staff', 'column', 'FirstName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'MiddleName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'MiddleName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', 'schema', 'edfi', 'table', 'Staff', 'column', 'MiddleName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'LastSurname'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'LastSurname'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name borne in common by members of a family.', 'schema', 'edfi', 'table', 'Staff', 'column', 'LastSurname'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'GenerationCodeSuffix'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'GenerationCodeSuffix'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', 'schema', 'edfi', 'table', 'Staff', 'column', 'GenerationCodeSuffix'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'MaidenName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'MaidenName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The person''s maiden name.', 'schema', 'edfi', 'table', 'Staff', 'column', 'MaidenName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'SexTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'SexTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A person''''s gender.', 'schema', 'edfi', 'table', 'Staff', 'column', 'SexTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'BirthDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'BirthDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which an individual was born.', 'schema', 'edfi', 'table', 'Staff', 'column', 'BirthDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'HispanicLatinoEthnicity'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'HispanicLatinoEthnicity'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino."', 'schema', 'edfi', 'table', 'Staff', 'column', 'HispanicLatinoEthnicity'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'OldEthnicityTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'OldEthnicityTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Previous definition of Ethnicity combining Hispanic/latino and race:  1 - American Indian or Alaskan Native  2 - Asian or Pacific Islander  3 - Black, not of Hispanic origin  4 - Hispanic  5 - White, not of Hispanic origin', 'schema', 'edfi', 'table', 'Staff', 'column', 'OldEthnicityTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'HighestCompletedLevelOfEducationDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'HighestCompletedLevelOfEducationDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Staff', 'column', 'HighestCompletedLevelOfEducationDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'YearsOfPriorProfessionalExperience'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'YearsOfPriorProfessionalExperience'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The total number of years that an individual has previously held a similar professional position in one or more education institutions.', 'schema', 'edfi', 'table', 'Staff', 'column', 'YearsOfPriorProfessionalExperience'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'YearsOfPriorTeachingExperience'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'YearsOfPriorTeachingExperience'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The total number of years that an individual has previously held a teaching position in one or more education institutions.', 'schema', 'edfi', 'table', 'Staff', 'column', 'YearsOfPriorTeachingExperience'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'HighlyQualifiedTeacher'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'HighlyQualifiedTeacher'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.', 'schema', 'edfi', 'table', 'Staff', 'column', 'HighlyQualifiedTeacher'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'LoginId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'LoginId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The login ID for the user; used for security access control interface.', 'schema', 'edfi', 'table', 'Staff', 'column', 'LoginId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'CitizenshipStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'CitizenshipStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Staff', 'column', 'CitizenshipStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'StaffUniqueId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff', 'column', 'StaffUniqueId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique alphanumeric code assigned to a staff.', 'schema', 'edfi', 'table', 'Staff', 'column', 'StaffUniqueId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Staff', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Staff'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents an individual who performs specified activities for any public or private education institution or agency that provides instructional and/or support services to students or staff at the early childhood level through high school completion. For example, this includes: 1. An "employee" who performs services under the direction of the employing institution or agency is compensated for such services by the employer and is eligible for employee benefits and wage or salary tax withholdings 2. A "contractor" or "consultant" who performs services for an agreed upon fee or an employee of a management service contracted to work on site 3. A "volunteer" who performs services on a voluntary and uncompensated basis 4. An in-kind service provider 5. An independent contractor or businessperson working at a school site.', 'schema', 'edfi', 'table', 'Staff'
go

/* 
 * TABLE: [edfi].[StaffAddress] 
 */

CREATE TABLE [edfi].[StaffAddress](
    [StaffUSI]                  int              NOT NULL,
    [AddressTypeId]             int              NOT NULL,
    [StreetNumberName]          nvarchar(150)    NOT NULL,
    [ApartmentRoomSuiteNumber]  nvarchar(50)     NULL,
    [BuildingSiteNumber]        nvarchar(20)     NULL,
    [City]                      nvarchar(30)     NOT NULL,
    [StateAbbreviationTypeId]   int              NOT NULL,
    [PostalCode]                nvarchar(17)     NOT NULL,
    [NameOfCounty]              nvarchar(30)     NULL,
    [CountyFIPSCode]            nvarchar(5)      NULL,
    [Latitude]                  nvarchar(20)     NULL,
    [Longitude]                 nvarchar(20)     NULL,
    [BeginDate]                 date             NULL,
    [EndDate]                   date             NULL,
    [CreateDate]                datetime         CONSTRAINT [StaffAddress_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffAddress] PRIMARY KEY CLUSTERED ([StaffUSI], [AddressTypeId])
)
go



IF OBJECT_ID('edfi.StaffAddress') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffAddress >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffAddress >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Address Identity Column', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'AddressTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'AddressTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Address', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'AddressTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'StreetNumberName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'StreetNumberName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The street number and street name or post office box number of an address.', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'StreetNumberName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'ApartmentRoomSuiteNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'ApartmentRoomSuiteNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The apartment, room, or suite number of an address.', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'ApartmentRoomSuiteNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'BuildingSiteNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'BuildingSiteNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of the building on the site, if more than one building shares the same address.', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'BuildingSiteNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'City'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'City'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the city in which an address is located.', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'City'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'StateAbbreviationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'StateAbbreviationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The abbreviation for the state (within the United States) or outlying area in which an address is located.', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'StateAbbreviationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'PostalCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'PostalCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The five or nine digit zip code or overseas postal code portion of an address.', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'PostalCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'NameOfCounty'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'NameOfCounty'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'NameOfCounty'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'CountyFIPSCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'CountyFIPSCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Definition The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'CountyFIPSCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'Latitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'Latitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic latitude of the physical address.', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'Latitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'Longitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'Longitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic longitude of the physical address.', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'Longitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The first date the address is valid. For physical addresses, the date the person moved to that address.', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', 'schema', 'edfi', 'table', 'StaffAddress', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffAddress', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffAddress'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The set of elements that describes an address, including the street address, city, state and ZIP code.', 'schema', 'edfi', 'table', 'StaffAddress'
go

/* 
 * TABLE: [edfi].[StaffClassificationDescriptor] 
 */

CREATE TABLE [edfi].[StaffClassificationDescriptor](
    [StaffClassificationDescriptorId]  int    NOT NULL,
    [StaffClassificationTypeId]        int    NULL,
    CONSTRAINT [PK_StaffClassificationDescriptor] PRIMARY KEY CLUSTERED ([StaffClassificationDescriptorId])
)
go



IF OBJECT_ID('edfi.StaffClassificationDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffClassificationDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffClassificationDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationDescriptor', 'column', 'StaffClassificationDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationDescriptor', 'column', 'StaffClassificationDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffClassificationDescriptor', 'column', 'StaffClassificationDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationDescriptor', 'column', 'StaffClassificationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationDescriptor', 'column', 'StaffClassificationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for StaffClassification', 'schema', 'edfi', 'table', 'StaffClassificationDescriptor', 'column', 'StaffClassificationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines an individual''s title of employment, official status or rank.', 'schema', 'edfi', 'table', 'StaffClassificationDescriptor'
go

/* 
 * TABLE: [edfi].[StaffClassificationType] 
 */

CREATE TABLE [edfi].[StaffClassificationType](
    [StaffClassificationTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                  nvarchar(50)        NOT NULL,
    [Description]                nvarchar(1024)      NOT NULL,
    [ShortDescription]           nvarchar(450)       NOT NULL,
    [Id]                         uniqueidentifier    CONSTRAINT [StaffClassificationType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]           datetime            CONSTRAINT [StaffClassificationType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                 datetime            CONSTRAINT [StaffClassificationType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffClassificationType] PRIMARY KEY CLUSTERED ([StaffClassificationTypeId])
)
go



IF OBJECT_ID('edfi.StaffClassificationType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffClassificationType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffClassificationType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationType', 'column', 'StaffClassificationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationType', 'column', 'StaffClassificationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for StaffClassification', 'schema', 'edfi', 'table', 'StaffClassificationType', 'column', 'StaffClassificationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for StaffClassification type.', 'schema', 'edfi', 'table', 'StaffClassificationType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for StaffClassification type.', 'schema', 'edfi', 'table', 'StaffClassificationType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'StaffClassificationType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffClassificationType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An individual''s title of employment, official status or rank.', 'schema', 'edfi', 'table', 'StaffClassificationType'
go

/* 
 * TABLE: [edfi].[StaffCohortAssociation] 
 */

CREATE TABLE [edfi].[StaffCohortAssociation](
    [StaffUSI]                 int                 NOT NULL,
    [EducationOrganizationId]  int                 NOT NULL,
    [CohortIdentifier]         nvarchar(20)        NOT NULL,
    [BeginDate]                date                NOT NULL,
    [EndDate]                  date                NULL,
    [StudentRecordAccess]      bit                 NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [StaffCohortAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [StaffCohortAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [StaffCohortAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffCohortAssociation] PRIMARY KEY CLUSTERED ([StaffUSI], [EducationOrganizationId], [CohortIdentifier], [BeginDate])
)
go



IF OBJECT_ID('edfi.StaffCohortAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffCohortAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffCohortAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'CohortIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'CohortIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name or ID for the cohort.', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'CohortIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Start date for the association of staff to this cohort.', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'End date for the association of staff to this cohort.', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'StudentRecordAccess'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'StudentRecordAccess'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator of whether the staff has access to the student records of the cohort per district interpretation of FERPA and other privacy laws, regulations, and policies.', 'schema', 'edfi', 'table', 'StaffCohortAssociation', 'column', 'StudentRecordAccess'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCohortAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCohortAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association indicates the Staff associated with a cohort of students.', 'schema', 'edfi', 'table', 'StaffCohortAssociation'
go

/* 
 * TABLE: [edfi].[StaffCredential] 
 */

CREATE TABLE [edfi].[StaffCredential](
    [StaffUSI]                             int         NOT NULL,
    [CredentialFieldDescriptorId]          int         NOT NULL,
    [CredentialTypeId]                     int         NOT NULL,
    [LevelDescriptorId]                    int         NOT NULL,
    [TeachingCredentialDescriptorId]       int         NOT NULL,
    [CredentialIssuanceDate]               date        NOT NULL,
    [CredentialExpirationDate]             date        NULL,
    [TeachingCredentialBasisTypeId]        int         NULL,
    [StateOfIssueStateAbbreviationTypeId]  int         NULL,
    [CreateDate]                           datetime    CONSTRAINT [StaffCredential_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffCredential] PRIMARY KEY CLUSTERED ([StaffUSI], [CredentialFieldDescriptorId], [CredentialTypeId], [LevelDescriptorId], [TeachingCredentialDescriptorId], [CredentialIssuanceDate])
)
go



IF OBJECT_ID('edfi.StaffCredential') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffCredential >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffCredential >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a staff by a state education agency.', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'CredentialFieldDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'CredentialFieldDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The field of certification for the certificate (e.g., Mathematics, Music)', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'CredentialFieldDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'CredentialTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'CredentialTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the category of credential an individual holds.', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'CredentialTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'LevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'LevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'LevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'TeachingCredentialDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'TeachingCredentialDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'TeachingCredentialDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'CredentialIssuanceDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'CredentialIssuanceDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which an active credential was issued to an individual.', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'CredentialIssuanceDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'CredentialExpirationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'CredentialExpirationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which an active credential held by an individual will expire.', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'CredentialExpirationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'TeachingCredentialBasisTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'TeachingCredentialBasisTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the pre-determined criteria for granting the teaching credential that an individual holds.', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'TeachingCredentialBasisTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'StateOfIssueStateAbbreviationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'StateOfIssueStateAbbreviationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for StateAbbreviationType', 'schema', 'edfi', 'table', 'StaffCredential', 'column', 'StateOfIssueStateAbbreviationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffCredential', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffCredential'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The legal document giving authorization to perform teaching assignment services.', 'schema', 'edfi', 'table', 'StaffCredential'
go

/* 
 * TABLE: [edfi].[StaffEducationOrganizationAssignmentAssociation] 
 */

CREATE TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation](
    [StaffUSI]                           int                 NOT NULL,
    [EducationOrganizationId]            int                 NOT NULL,
    [StaffClassificationDescriptorId]    int                 NOT NULL,
    [BeginDate]                          date                NOT NULL,
    [PositionTitle]                      nvarchar(100)       NULL,
    [EndDate]                            date                NULL,
    [OrderOfAssignment]                  int                 NULL,
    [EmploymentEducationOrganizationId]  int                 NULL,
    [EmploymentStatusDescriptorId]       int                 NULL,
    [EmploymentHireDate]                 date                NULL,
    [Id]                                 uniqueidentifier    CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                   datetime            CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                         datetime            CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffEducationOrgAssignmentAssociation] PRIMARY KEY CLUSTERED ([StaffUSI], [EducationOrganizationId], [StaffClassificationDescriptorId], [BeginDate])
)
go



IF OBJECT_ID('edfi.StaffEducationOrganizationAssignmentAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffEducationOrganizationAssignmentAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffEducationOrganizationAssignmentAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'StaffClassificationDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'StaffClassificationDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The titles of employment, official status, or rank of education staff.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'StaffClassificationDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the start or effective date of a staff member''s employment, contract, or relationship with the LEA.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'PositionTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'PositionTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The descriptive name of an individual''s position.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'PositionTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the end or termination date of a staff member''s employment, contract, or relationship with the LEA.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'OrderOfAssignment'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'OrderOfAssignment'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Describes whether the assignment is this the staff member''s primary assignment, secondary assignment, etc.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'OrderOfAssignment'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EmploymentEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EmploymentEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EmploymentEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EmploymentStatusDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EmploymentStatusDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EmploymentStatusDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EmploymentHireDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EmploymentHireDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which an individual was hired for a position.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', 'column', 'EmploymentHireDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association indicates the education organization to which a staff member provides services; also known as school of service.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationAssignmentAssociation'
go

/* 
 * TABLE: [edfi].[StaffEducationOrganizationEmploymentAssociation] 
 */

CREATE TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation](
    [EducationOrganizationId]       int                 NOT NULL,
    [StaffUSI]                      int                 NOT NULL,
    [EmploymentStatusDescriptorId]  int                 NOT NULL,
    [HireDate]                      date                NOT NULL,
    [EndDate]                       date                NULL,
    [SeparationTypeId]              int                 NULL,
    [SeparationReasonDescriptorId]  int                 NULL,
    [Department]                    nvarchar(3)         NULL,
    [FullTimeEquivalency]           decimal(5, 4)       NULL,
    [OfferDate]                     date                NULL,
    [HourlyWage]                    money               NULL,
    [Id]                            uniqueidentifier    CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]              datetime            CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                    datetime            CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffEducationOrganizationEmploymentAssociation] PRIMARY KEY CLUSTERED ([EducationOrganizationId], [StaffUSI], [EmploymentStatusDescriptorId], [HireDate])
)
go



IF OBJECT_ID('edfi.StaffEducationOrganizationEmploymentAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffEducationOrganizationEmploymentAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffEducationOrganizationEmploymentAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'EmploymentStatusDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'EmploymentStatusDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'EmploymentStatusDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'HireDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'HireDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which an individual was hired for a position.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'HireDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'SeparationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'SeparationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Type of employment separation; for example:  Voluntary separation  Involuntary separation  Mutual agreement  Other', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'SeparationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'SeparationReasonDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'SeparationReasonDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'SeparationReasonDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'Department'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'Department'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The department or suborganization the employee/contractor is associated with in the Education Organization.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'Department'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'FullTimeEquivalency'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'FullTimeEquivalency'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'FullTimeEquivalency'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'OfferDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'OfferDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Date at which the staff member was made an official offer for this employment.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'OfferDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'HourlyWage'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'HourlyWage'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Hourly wage associated with the employment position being reported.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', 'column', 'HourlyWage'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association indicates the EducationOrganization an employee, contractor, volunteer, or other service provider is formally associated with typically indicated by which organization the staff member has a services contract with or receives compensation from.', 'schema', 'edfi', 'table', 'StaffEducationOrganizationEmploymentAssociation'
go

/* 
 * TABLE: [edfi].[StaffElectronicMail] 
 */

CREATE TABLE [edfi].[StaffElectronicMail](
    [StaffUSI]                      int              NOT NULL,
    [ElectronicMailTypeId]          int              NOT NULL,
    [ElectronicMailAddress]         nvarchar(128)    NOT NULL,
    [PrimaryEmailAddressIndicator]  bit              NULL,
    [CreateDate]                    datetime         CONSTRAINT [StaffElectronicMail_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffElectronicMail] PRIMARY KEY CLUSTERED ([StaffUSI], [ElectronicMailTypeId])
)
go



IF OBJECT_ID('edfi.StaffElectronicMail') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffElectronicMail >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffElectronicMail >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffElectronicMail', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffElectronicMail', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a staff by a state education agency.', 'schema', 'edfi', 'table', 'StaffElectronicMail', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffElectronicMail', 'column', 'ElectronicMailTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffElectronicMail', 'column', 'ElectronicMailTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ElectronicMail', 'schema', 'edfi', 'table', 'StaffElectronicMail', 'column', 'ElectronicMailTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffElectronicMail', 'column', 'ElectronicMailAddress'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffElectronicMail', 'column', 'ElectronicMailAddress'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The electronic mail (e-mail) address listed for an individual or organization.', 'schema', 'edfi', 'table', 'StaffElectronicMail', 'column', 'ElectronicMailAddress'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffElectronicMail', 'column', 'PrimaryEmailAddressIndicator'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffElectronicMail', 'column', 'PrimaryEmailAddressIndicator'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.', 'schema', 'edfi', 'table', 'StaffElectronicMail', 'column', 'PrimaryEmailAddressIndicator'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffElectronicMail', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffElectronicMail'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The numbers, letters and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.', 'schema', 'edfi', 'table', 'StaffElectronicMail'
go

/* 
 * TABLE: [edfi].[StaffIdentificationCode] 
 */

CREATE TABLE [edfi].[StaffIdentificationCode](
    [StaffUSI]                                 int             NOT NULL,
    [AssigningOrganizationIdentificationCode]  nvarchar(60)    NULL,
    [IdentificationCode]                       nvarchar(60)    NOT NULL,
    [CreateDate]                               datetime        CONSTRAINT [StaffIdentificationCode_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [StaffIdentificationSystemDescriptorId]    int             NOT NULL,
    CONSTRAINT [PK_StaffIdentificationCode] PRIMARY KEY CLUSTERED ([StaffUSI], [StaffIdentificationSystemDescriptorId])
)
go



IF OBJECT_ID('edfi.StaffIdentificationCode') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffIdentificationCode >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffIdentificationCode >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationCode', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationCode', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a staff by a state education agency.', 'schema', 'edfi', 'table', 'StaffIdentificationCode', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The organization code or name assigning the staff Identification Code.', 'schema', 'edfi', 'table', 'StaffIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationCode', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationCode', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'StaffIdentificationCode', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationCode', 'column', 'StaffIdentificationSystemDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationCode', 'column', 'StaffIdentificationSystemDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffIdentificationCode', 'column', 'StaffIdentificationSystemDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationCode', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to a staff member.', 'schema', 'edfi', 'table', 'StaffIdentificationCode'
go

/* 
 * TABLE: [edfi].[StaffIdentificationDocument] 
 */

CREATE TABLE [edfi].[StaffIdentificationDocument](
    [PersonalInformationVerificationTypeId]  int              NOT NULL,
    [IdentificationDocumentUseTypeId]        int              NOT NULL,
    [StaffUSI]                               int              NOT NULL,
    [DocumentTitle]                          nvarchar(60)     NULL,
    [DocumentExpirationDate]                 date             NULL,
    [IssuerDocumentIdentificationCode]       nvarchar(60)     NULL,
    [IssuerName]                             nvarchar(150)    NULL,
    [CreateDate]                             datetime         CONSTRAINT [StaffIdentificationDocument_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [IssuerCountryDescriptorId]              int              NULL,
    CONSTRAINT [PK_StaffIdentificationDocument] PRIMARY KEY CLUSTERED ([PersonalInformationVerificationTypeId], [IdentificationDocumentUseTypeId], [StaffUSI])
)
go



IF OBJECT_ID('edfi.StaffIdentificationDocument') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffIdentificationDocument >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffIdentificationDocument >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'PersonalInformationVerificationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'PersonalInformationVerificationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for PersonalInformationVerification', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'PersonalInformationVerificationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'IdentificationDocumentUseTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'IdentificationDocumentUseTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'IdentificationDocumentUseTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'DocumentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'DocumentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title of the document given by the issuer.', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'DocumentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'DocumentExpirationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'DocumentExpirationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The day when the document  expires, if null then never expires.', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'DocumentExpirationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'IssuerDocumentIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'IssuerDocumentIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The unique identifier on the issuer''s identification system.', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'IssuerDocumentIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'IssuerName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'IssuerName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Name of the entity or institution that issued the document.', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'IssuerName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'IssuerCountryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'IssuerCountryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', 'column', 'IssuerCountryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationDocument'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Represents the valid document that a person uses for identification.', 'schema', 'edfi', 'table', 'StaffIdentificationDocument'
go

/* 
 * TABLE: [edfi].[StaffIdentificationSystemDescriptor] 
 */

CREATE TABLE [edfi].[StaffIdentificationSystemDescriptor](
    [StaffIdentificationSystemTypeId]        int    NULL,
    [StaffIdentificationSystemDescriptorId]  int    NOT NULL,
    CONSTRAINT [PK_StaffIdentificationSystemDescriptor] PRIMARY KEY CLUSTERED ([StaffIdentificationSystemDescriptorId])
)
go



IF OBJECT_ID('edfi.StaffIdentificationSystemDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffIdentificationSystemDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffIdentificationSystemDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemDescriptor', 'column', 'StaffIdentificationSystemTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemDescriptor', 'column', 'StaffIdentificationSystemTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for StaffIdentificationSystem', 'schema', 'edfi', 'table', 'StaffIdentificationSystemDescriptor', 'column', 'StaffIdentificationSystemTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemDescriptor', 'column', 'StaffIdentificationSystemDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemDescriptor', 'column', 'StaffIdentificationSystemDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffIdentificationSystemDescriptor', 'column', 'StaffIdentificationSystemDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the originating record system and code that is used for record-keeping purposes of the staff.', 'schema', 'edfi', 'table', 'StaffIdentificationSystemDescriptor'
go

/* 
 * TABLE: [edfi].[StaffIdentificationSystemType] 
 */

CREATE TABLE [edfi].[StaffIdentificationSystemType](
    [StaffIdentificationSystemTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                        nvarchar(50)        NOT NULL,
    [Description]                      nvarchar(1024)      NOT NULL,
    [ShortDescription]                 nvarchar(450)       NOT NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [StaffIdentificationSystemType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [StaffIdentificationSystemType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [StaffIdentificationSystemType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffIdentificationSystemType] PRIMARY KEY CLUSTERED ([StaffIdentificationSystemTypeId])
)
go



IF OBJECT_ID('edfi.StaffIdentificationSystemType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffIdentificationSystemType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffIdentificationSystemType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType', 'column', 'StaffIdentificationSystemTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType', 'column', 'StaffIdentificationSystemTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for StaffIdentificationSystem', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType', 'column', 'StaffIdentificationSystemTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for StaffIdentificationSystem type.', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the staff identification system type.', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to a staff member.', 'schema', 'edfi', 'table', 'StaffIdentificationSystemType'
go

/* 
 * TABLE: [edfi].[StaffInternationalAddress] 
 */

CREATE TABLE [edfi].[StaffInternationalAddress](
    [StaffUSI]             int              NOT NULL,
    [AddressTypeId]        int              NOT NULL,
    [AddressLine1]         nvarchar(150)    NOT NULL,
    [AddressLine2]         nvarchar(150)    NULL,
    [AddressLine3]         nvarchar(150)    NULL,
    [AddressLine4]         nvarchar(150)    NULL,
    [Latitude]             nvarchar(20)     NULL,
    [Longitude]            nvarchar(20)     NULL,
    [BeginDate]            date             NULL,
    [EndDate]              date             NULL,
    [CreateDate]           datetime         CONSTRAINT [StaffInternationalAddress_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [CountryDescriptorId]  int              NOT NULL,
    CONSTRAINT [PK_StaffInternationalAddress] PRIMARY KEY CLUSTERED ([StaffUSI], [AddressTypeId])
)
go



IF OBJECT_ID('edfi.StaffInternationalAddress') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffInternationalAddress >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffInternationalAddress >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Address', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressLine1'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressLine1'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The first line of the address.', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressLine1'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressLine2'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressLine2'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The second line of the address.', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressLine2'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressLine3'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressLine3'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The third line of the address.', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressLine3'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressLine4'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressLine4'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The fourth line of the address.', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'AddressLine4'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'Latitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'Latitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic latitude of the physical address.', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'Latitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'Longitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'Longitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic longitude of the physical address.', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'Longitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The first date the address is valid. For physical addresses, the date the person moved to that address.', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'CountryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'CountryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffInternationalAddress', 'column', 'CountryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffInternationalAddress'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The set of elements that describes an address, including the street address, city, state and ZIP code.', 'schema', 'edfi', 'table', 'StaffInternationalAddress'
go

/* 
 * TABLE: [edfi].[StaffLanguage] 
 */

CREATE TABLE [edfi].[StaffLanguage](
    [StaffUSI]              int         NOT NULL,
    [LanguageDescriptorId]  int         NOT NULL,
    [CreateDate]            datetime    CONSTRAINT [StaffLanguage_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffLanguages] PRIMARY KEY CLUSTERED ([StaffUSI], [LanguageDescriptorId])
)
go



IF OBJECT_ID('edfi.StaffLanguage') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffLanguage >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffLanguage >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffLanguage', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffLanguage', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'StaffLanguage', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffLanguage', 'column', 'LanguageDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffLanguage', 'column', 'LanguageDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffLanguage', 'column', 'LanguageDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffLanguage', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffLanguage'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Language(s) the individual uses to communicate.', 'schema', 'edfi', 'table', 'StaffLanguage'
go

/* 
 * TABLE: [edfi].[StaffLanguageUse] 
 */

CREATE TABLE [edfi].[StaffLanguageUse](
    [StaffUSI]              int         NOT NULL,
    [LanguageDescriptorId]  int         NOT NULL,
    [LanguageUseTypeId]     int         NOT NULL,
    [CreateDate]            datetime    CONSTRAINT [StaffLanguageUse_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffLanguageUse] PRIMARY KEY CLUSTERED ([StaffUSI], [LanguageDescriptorId], [LanguageUseTypeId])
)
go



IF OBJECT_ID('edfi.StaffLanguageUse') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffLanguageUse >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffLanguageUse >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffLanguageUse', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffLanguageUse', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique alphanumeric code assigned to a staff.', 'schema', 'edfi', 'table', 'StaffLanguageUse', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffLanguageUse', 'column', 'LanguageDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffLanguageUse', 'column', 'LanguageDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffLanguageUse', 'column', 'LanguageDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffLanguageUse', 'column', 'LanguageUseTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffLanguageUse', 'column', 'LanguageUseTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffLanguageUse', 'column', 'LanguageUseTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffLanguageUse', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffLanguageUse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).', 'schema', 'edfi', 'table', 'StaffLanguageUse'
go

/* 
 * TABLE: [edfi].[StaffOtherName] 
 */

CREATE TABLE [edfi].[StaffOtherName](
    [StaffUSI]              int             NOT NULL,
    [OtherNameTypeId]       int             NOT NULL,
    [PersonalTitlePrefix]   nvarchar(30)    NULL,
    [FirstName]             nvarchar(75)    NOT NULL,
    [MiddleName]            nvarchar(75)    NULL,
    [LastSurname]           nvarchar(75)    NOT NULL,
    [GenerationCodeSuffix]  nvarchar(10)    NULL,
    [CreateDate]            datetime        CONSTRAINT [StaffOtherName_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffOtherName] PRIMARY KEY CLUSTERED ([StaffUSI], [OtherNameTypeId])
)
go



IF OBJECT_ID('edfi.StaffOtherName') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffOtherName >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffOtherName >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a staff by a state education agency.', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'OtherNameTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'OtherNameTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for OtherName', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'OtherNameTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'PersonalTitlePrefix'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'PersonalTitlePrefix'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A prefix used to denote the title, degree, position, or seniority of the person.', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'PersonalTitlePrefix'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'FirstName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'FirstName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'FirstName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'MiddleName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'MiddleName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'MiddleName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'LastSurname'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'LastSurname'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name borne in common by members of a family.', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'LastSurname'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'GenerationCodeSuffix'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'GenerationCodeSuffix'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', 'schema', 'edfi', 'table', 'StaffOtherName', 'column', 'GenerationCodeSuffix'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffOtherName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Other names (e.g., alias, nickname, previous legal name) associated with a person.', 'schema', 'edfi', 'table', 'StaffOtherName'
go

/* 
 * TABLE: [edfi].[StaffProgramAssociation] 
 */

CREATE TABLE [edfi].[StaffProgramAssociation](
    [ProgramEducationOrganizationId]  int                 NOT NULL,
    [ProgramTypeId]                   int                 NOT NULL,
    [StaffUSI]                        int                 NOT NULL,
    [BeginDate]                       date                NOT NULL,
    [EndDate]                         date                NULL,
    [StudentRecordAccess]             bit                 NULL,
    [ProgramName]                     nvarchar(60)        NOT NULL,
    [Id]                              uniqueidentifier    CONSTRAINT [StaffProgramAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                datetime            CONSTRAINT [StaffProgramAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                      datetime            CONSTRAINT [StaffProgramAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffProgramAssociation] PRIMARY KEY CLUSTERED ([ProgramEducationOrganizationId], [ProgramTypeId], [StaffUSI], [BeginDate], [ProgramName])
)
go



IF OBJECT_ID('edfi.StaffProgramAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffProgramAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'ProgramEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'ProgramEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'ProgramEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Program', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Start date for the association of staff to this program.', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'End date for the association of staff to this program.', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'StudentRecordAccess'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'StudentRecordAccess'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator of whether the staff has access to the student records of the program per district interpretation of FERPA and other privacy laws, regulations, and policies.', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'StudentRecordAccess'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'StaffProgramAssociation', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffProgramAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association indicates the Staff associated with a program.', 'schema', 'edfi', 'table', 'StaffProgramAssociation'
go

/* 
 * TABLE: [edfi].[StaffRace] 
 */

CREATE TABLE [edfi].[StaffRace](
    [StaffUSI]    int         NOT NULL,
    [RaceTypeId]  int         NOT NULL,
    [CreateDate]  datetime    CONSTRAINT [StaffRace_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffRace] PRIMARY KEY CLUSTERED ([StaffUSI], [RaceTypeId])
)
go



IF OBJECT_ID('edfi.StaffRace') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffRace >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffRace >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffRace', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffRace', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a staff by a state education agency.', 'schema', 'edfi', 'table', 'StaffRace', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffRace', 'column', 'RaceTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffRace', 'column', 'RaceTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The general racial category which most clearly reflects the individual''''s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.        AMERICAN-INDIAN-ALASKA-NATIVE-CODE        ASIAN-CODE        BLACK-AFRICAN-AMERICAN-CODE        NATIVE-HAWAIIAN-PACIFIC-ISLANDER-CODE        WHITE-CODE', 'schema', 'edfi', 'table', 'StaffRace', 'column', 'RaceTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffRace', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffRace'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The general racial category which most clearly reflects the individual''s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.', 'schema', 'edfi', 'table', 'StaffRace'
go

/* 
 * TABLE: [edfi].[StaffSchoolAssociation] 
 */

CREATE TABLE [edfi].[StaffSchoolAssociation](
    [StaffUSI]                       int                 NOT NULL,
    [ProgramAssignmentDescriptorId]  int                 NOT NULL,
    [SchoolId]                       int                 NOT NULL,
    [SchoolYear]                     smallint            NULL,
    [Id]                             uniqueidentifier    CONSTRAINT [StaffSchoolAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]               datetime            CONSTRAINT [StaffSchoolAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                     datetime            CONSTRAINT [StaffSchoolAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffSchoolAssociation] PRIMARY KEY CLUSTERED ([StaffUSI], [ProgramAssignmentDescriptorId], [SchoolId])
)
go



IF OBJECT_ID('edfi.StaffSchoolAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffSchoolAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffSchoolAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociation', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociation', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique alphanumeric code assigned to a staff.', 'schema', 'edfi', 'table', 'StaffSchoolAssociation', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociation', 'column', 'ProgramAssignmentDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociation', 'column', 'ProgramAssignmentDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the program for which the individual is assigned; for example:  Regular education  Title I-Academic  Title I-Non-Academic  Special Education  Bilingual/English as a Second Language  NEDM: Program Assignment', 'schema', 'edfi', 'table', 'StaffSchoolAssociation', 'column', 'ProgramAssignmentDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociation', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociation', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StaffSchoolAssociation', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociation', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociation', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StaffSchoolAssociation', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association indicates the School(s) to which a staff member provides instructional services.', 'schema', 'edfi', 'table', 'StaffSchoolAssociation'
go

/* 
 * TABLE: [edfi].[StaffSchoolAssociationAcademicSubject] 
 */

CREATE TABLE [edfi].[StaffSchoolAssociationAcademicSubject](
    [StaffUSI]                       int         NOT NULL,
    [ProgramAssignmentDescriptorId]  int         NOT NULL,
    [SchoolId]                       int         NOT NULL,
    [AcademicSubjectDescriptorId]    int         NOT NULL,
    [CreateDate]                     datetime    CONSTRAINT [StaffSchoolAssociationAcademicSubject_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffSchoolAssociationAcademicSubject] PRIMARY KEY CLUSTERED ([StaffUSI], [ProgramAssignmentDescriptorId], [SchoolId], [AcademicSubjectDescriptorId])
)
go



IF OBJECT_ID('edfi.StaffSchoolAssociationAcademicSubject') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffSchoolAssociationAcademicSubject >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffSchoolAssociationAcademicSubject >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique alphanumeric code assigned to a staff.', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject', 'column', 'ProgramAssignmentDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject', 'column', 'ProgramAssignmentDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the program for which the individual is assigned; for example:  Regular education  Title I-Academic  Title I-Non-Academic  Special Education  Bilingual/English as a Second Language  NEDM: Program Assignment', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject', 'column', 'ProgramAssignmentDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AcademicSubject', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The teaching field taught by an individual: for example: English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.', 'schema', 'edfi', 'table', 'StaffSchoolAssociationAcademicSubject'
go

/* 
 * TABLE: [edfi].[StaffSchoolAssociationGradeLevel] 
 */

CREATE TABLE [edfi].[StaffSchoolAssociationGradeLevel](
    [StaffUSI]                       int         NOT NULL,
    [ProgramAssignmentDescriptorId]  int         NOT NULL,
    [SchoolId]                       int         NOT NULL,
    [GradeLevelDescriptorId]         int         NOT NULL,
    [CreateDate]                     datetime    CONSTRAINT [StaffSchoolAssociationGradeLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffSchoolAssociationGradeLevel] PRIMARY KEY CLUSTERED ([StaffUSI], [ProgramAssignmentDescriptorId], [SchoolId], [GradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.StaffSchoolAssociationGradeLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffSchoolAssociationGradeLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffSchoolAssociationGradeLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique alphanumeric code assigned to a staff.', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel', 'column', 'ProgramAssignmentDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel', 'column', 'ProgramAssignmentDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the program for which the individual is assigned; for example:  Regular education  Title I-Academic  Title I-Non-Academic  Special Education  Bilingual/English as a Second Language  NEDM: Program Assignment', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel', 'column', 'ProgramAssignmentDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel', 'column', 'GradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The set of grade levels for which the individual''s assignment is responsible.', 'schema', 'edfi', 'table', 'StaffSchoolAssociationGradeLevel'
go

/* 
 * TABLE: [edfi].[StaffSectionAssociation] 
 */

CREATE TABLE [edfi].[StaffSectionAssociation](
    [StaffUSI]                         int                 NOT NULL,
    [ClassroomIdentificationCode]      nvarchar(20)        NOT NULL,
    [SchoolId]                         int                 NOT NULL,
    [ClassPeriodName]                  nvarchar(20)        NOT NULL,
    [LocalCourseCode]                  nvarchar(60)        NOT NULL,
    [SchoolYear]                       smallint            NOT NULL,
    [TermDescriptorId]                 int                 NOT NULL,
    [UniqueSectionCode]                nvarchar(255)       NOT NULL,
    [SequenceOfCourse]                 int                 NOT NULL,
    [ClassroomPositionDescriptorId]    int                 NOT NULL,
    [BeginDate]                        date                NULL,
    [EndDate]                          date                NULL,
    [HighlyQualifiedTeacher]           bit                 NULL,
    [TeacherStudentDataLinkExclusion]  bit                 NULL,
    [PercentageContribution]           decimal(5, 4)       NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [StaffSectionAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [StaffSectionAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [StaffSectionAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_TeacherSectionAssociation] PRIMARY KEY CLUSTERED ([StaffUSI], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse])
)
go



IF OBJECT_ID('edfi.StaffSectionAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffSectionAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffSectionAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the section, that is defined for a campus by the classroom, the subjects taught, and the instructors that are assigned.  NEDM: Unique Course Code', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a section is part of a sequence of parts for a course, the number if the sequence.  If the course has only onle part, the value of this section attribute should be 1.', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'ClassroomPositionDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'ClassroomPositionDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'ClassroomPositionDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of a teacher''s assignment to the Section. If blank, defaults to the first day of the first grading period for the Section.', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the last day of a staff member''s assignment to the Section.', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'HighlyQualifiedTeacher'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'HighlyQualifiedTeacher'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught.', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'HighlyQualifiedTeacher'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'TeacherStudentDataLinkExclusion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'TeacherStudentDataLinkExclusion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'TeacherStudentDataLinkExclusion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'PercentageContribution'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'PercentageContribution'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage.', 'schema', 'edfi', 'table', 'StaffSectionAssociation', 'column', 'PercentageContribution'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffSectionAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association indicates the class sections to which a staff member is assigned.', 'schema', 'edfi', 'table', 'StaffSectionAssociation'
go

/* 
 * TABLE: [edfi].[StaffTelephone] 
 */

CREATE TABLE [edfi].[StaffTelephone](
    [StaffUSI]                        int             NOT NULL,
    [TelephoneNumberTypeId]           int             NOT NULL,
    [OrderOfPriority]                 int             NULL,
    [TextMessageCapabilityIndicator]  bit             NULL,
    [TelephoneNumber]                 nvarchar(24)    NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [StaffTelephone_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffTelephone] PRIMARY KEY CLUSTERED ([StaffUSI], [TelephoneNumberTypeId])
)
go



IF OBJECT_ID('edfi.StaffTelephone') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffTelephone >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffTelephone >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a staff by a state education agency.', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'TelephoneNumberTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'TelephoneNumberTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for TelephoneNumber', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'TelephoneNumberTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'OrderOfPriority'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'OrderOfPriority'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'OrderOfPriority'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'TextMessageCapabilityIndicator'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'TextMessageCapabilityIndicator'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'TextMessageCapabilityIndicator'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'TelephoneNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'TelephoneNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The telephone number including the area code, and extension, if applicable.', 'schema', 'edfi', 'table', 'StaffTelephone', 'column', 'TelephoneNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffTelephone', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffTelephone'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The 10-digit telephone number, including the area code, for the person.', 'schema', 'edfi', 'table', 'StaffTelephone'
go

/* 
 * TABLE: [edfi].[StaffVisa] 
 */

CREATE TABLE [edfi].[StaffVisa](
    [StaffUSI]    int         NOT NULL,
    [VisaTypeId]  int         NOT NULL,
    [CreateDate]  datetime    CONSTRAINT [StaffVisa_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StaffVisa] PRIMARY KEY CLUSTERED ([StaffUSI], [VisaTypeId])
)
go



IF OBJECT_ID('edfi.StaffVisa') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StaffVisa >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StaffVisa >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffVisa', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffVisa', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'StaffVisa', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffVisa', 'column', 'VisaTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffVisa', 'column', 'VisaTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StaffVisa', 'column', 'VisaTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StaffVisa', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StaffVisa'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Describe the types of visa that a non-U.S. citizen staff member holds.', 'schema', 'edfi', 'table', 'StaffVisa'
go

/* 
 * TABLE: [edfi].[StateAbbreviationType] 
 */

CREATE TABLE [edfi].[StateAbbreviationType](
    [StateAbbreviationTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                nvarchar(50)        NOT NULL,
    [Description]              nvarchar(1024)      NOT NULL,
    [ShortDescription]         nvarchar(450)       NOT NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [StateAbbreviationType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [StateAbbreviationType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [StateAbbreviationType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StateAbbreviationType] PRIMARY KEY CLUSTERED ([StateAbbreviationTypeId])
)
go



IF OBJECT_ID('edfi.StateAbbreviationType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StateAbbreviationType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StateAbbreviationType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateAbbreviationType', 'column', 'StateAbbreviationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateAbbreviationType', 'column', 'StateAbbreviationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for StateAbbreviationType', 'schema', 'edfi', 'table', 'StateAbbreviationType', 'column', 'StateAbbreviationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateAbbreviationType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateAbbreviationType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for StateAbbreviationType type.', 'schema', 'edfi', 'table', 'StateAbbreviationType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateAbbreviationType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateAbbreviationType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'StateAbbreviationType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateAbbreviationType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateAbbreviationType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the state abbreviation type.', 'schema', 'edfi', 'table', 'StateAbbreviationType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateAbbreviationType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateAbbreviationType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The abbreviation for the state (within the United States) or outlying area in which an address is located.', 'schema', 'edfi', 'table', 'StateAbbreviationType'
go

/* 
 * TABLE: [edfi].[StateEducationAgency] 
 */

CREATE TABLE [edfi].[StateEducationAgency](
    [StateEducationAgencyId]  int    NOT NULL,
    CONSTRAINT [PK_StateEducationAgency] PRIMARY KEY CLUSTERED ([StateEducationAgencyId])
)
go



IF OBJECT_ID('edfi.StateEducationAgency') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StateEducationAgency >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StateEducationAgency >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgency', 'column', 'StateEducationAgencyId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgency', 'column', 'StateEducationAgencyId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier assigned to a state education agency by the StateEducationAgency (SEA).', 'schema', 'edfi', 'table', 'StateEducationAgency', 'column', 'StateEducationAgencyId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgency', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgency'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents the agency of the state charged with the primary responsibility for coordinating and supervising public instruction, including the setting of standards for elementary and secondary instructional programs.', 'schema', 'edfi', 'table', 'StateEducationAgency'
go

/* 
 * TABLE: [edfi].[StateEducationAgencyAccountability] 
 */

CREATE TABLE [edfi].[StateEducationAgencyAccountability](
    [StateEducationAgencyId]      int         NOT NULL,
    [SchoolYear]                  smallint    NOT NULL,
    [CTEGraduationRateInclusion]  bit         NULL,
    [CreateDate]                  datetime    CONSTRAINT [StateEducationAgencyAccountability_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StateEducationAgencyAccountability] PRIMARY KEY CLUSTERED ([StateEducationAgencyId], [SchoolYear])
)
go



IF OBJECT_ID('edfi.StateEducationAgencyAccountability') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StateEducationAgencyAccountability >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StateEducationAgencyAccountability >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyAccountability', 'column', 'StateEducationAgencyId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyAccountability', 'column', 'StateEducationAgencyId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'StateEducationAgency Identity Column', 'schema', 'edfi', 'table', 'StateEducationAgencyAccountability', 'column', 'StateEducationAgencyId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyAccountability', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyAccountability', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The school year for which the accountability is reported.', 'schema', 'edfi', 'table', 'StateEducationAgencyAccountability', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyAccountability', 'column', 'CTEGraduationRateInclusion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyAccountability', 'column', 'CTEGraduationRateInclusion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of whether CTE concentrators are included in the state''s computation of its graduation rate.', 'schema', 'edfi', 'table', 'StateEducationAgencyAccountability', 'column', 'CTEGraduationRateInclusion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyAccountability', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyAccountability'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity maintains information about federal reporting and accountability for StateEducationAgency(s).', 'schema', 'edfi', 'table', 'StateEducationAgencyAccountability'
go

/* 
 * TABLE: [edfi].[StateEducationAgencyFederalFunds] 
 */

CREATE TABLE [edfi].[StateEducationAgencyFederalFunds](
    [StateEducationAgencyId]            int                 NOT NULL,
    [FiscalYear]                        int                 NOT NULL,
    [FederalProgramsFundingAllocation]  money               NULL,
    [Id]                                uniqueidentifier    CONSTRAINT [StateEducationAgencyFederalFunds_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                  datetime            CONSTRAINT [StateEducationAgencyFederalFunds_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                        datetime            CONSTRAINT [StateEducationAgencyFederalFunds_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StateEducationAgencyFederalFunds] PRIMARY KEY CLUSTERED ([StateEducationAgencyId], [FiscalYear])
)
go



IF OBJECT_ID('edfi.StateEducationAgencyFederalFunds') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StateEducationAgencyFederalFunds >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StateEducationAgencyFederalFunds >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyFederalFunds', 'column', 'StateEducationAgencyId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyFederalFunds', 'column', 'StateEducationAgencyId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'StateEducationAgency Identity Column', 'schema', 'edfi', 'table', 'StateEducationAgencyFederalFunds', 'column', 'StateEducationAgencyId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyFederalFunds', 'column', 'FiscalYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyFederalFunds', 'column', 'FiscalYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The fiscal year for which the federal funds are received.', 'schema', 'edfi', 'table', 'StateEducationAgencyFederalFunds', 'column', 'FiscalYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyFederalFunds', 'column', 'FederalProgramsFundingAllocation'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyFederalFunds', 'column', 'FederalProgramsFundingAllocation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The amount of federal dollars distributed to local education agencies (LEAs), retained by the state education agency (SEA) for program administration or other approved state-level activities (including unallocated, transferred to another state agency, or distributed to entities other than LEAs).', 'schema', 'edfi', 'table', 'StateEducationAgencyFederalFunds', 'column', 'FederalProgramsFundingAllocation'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyFederalFunds', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StateEducationAgencyFederalFunds'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Contains the information about the reception and use of federal funds for reporting purposes.', 'schema', 'edfi', 'table', 'StateEducationAgencyFederalFunds'
go

/* 
 * TABLE: [edfi].[Student] 
 */

CREATE TABLE [edfi].[Student](
    [StudentUSI]                                 int                 IDENTITY(1,1),
    [PersonalTitlePrefix]                        nvarchar(30)        NULL,
    [FirstName]                                  nvarchar(75)        NOT NULL,
    [MiddleName]                                 nvarchar(75)        NULL,
    [LastSurname]                                nvarchar(75)        NOT NULL,
    [GenerationCodeSuffix]                       nvarchar(10)        NULL,
    [MaidenName]                                 nvarchar(75)        NULL,
    [SexTypeId]                                  int                 NOT NULL,
    [BirthDate]                                  date                NOT NULL,
    [BirthCity]                                  nvarchar(30)        NULL,
    [BirthStateAbbreviationTypeId]               int                 NULL,
    [DateEnteredUS]                              date                NULL,
    [MultipleBirthStatus]                        bit                 NULL,
    [ProfileThumbnail]                           nvarchar(59)        NULL,
    [HispanicLatinoEthnicity]                    bit                 NOT NULL,
    [OldEthnicityTypeId]                         int                 NULL,
    [EconomicDisadvantaged]                      bit                 NULL,
    [SchoolFoodServicesEligibilityDescriptorId]  int                 NULL,
    [LimitedEnglishProficiencyDescriptorId]      int                 NULL,
    [DisplacementStatus]                         nvarchar(30)        NULL,
    [LoginId]                                    nvarchar(60)        NULL,
    [BirthInternationalProvince]                 nvarchar(150)       NULL,
    [CitizenshipStatusTypeId]                    int                 NULL,
    [StudentUniqueId]                            nvarchar(32)        NOT NULL,
    [Id]                                         uniqueidentifier    CONSTRAINT [Student_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                           datetime            CONSTRAINT [Student_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                                 datetime            CONSTRAINT [Student_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    [BirthCountryDescriptorId]                   int                 NULL,
    CONSTRAINT [PK_Student] PRIMARY KEY CLUSTERED ([StudentUSI])
)
go



IF OBJECT_ID('edfi.Student') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.Student >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.Student >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'Student', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'PersonalTitlePrefix'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'PersonalTitlePrefix'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A prefix used to denote the title, degree, position, or seniority of the person.', 'schema', 'edfi', 'table', 'Student', 'column', 'PersonalTitlePrefix'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'FirstName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'FirstName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', 'schema', 'edfi', 'table', 'Student', 'column', 'FirstName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'MiddleName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'MiddleName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', 'schema', 'edfi', 'table', 'Student', 'column', 'MiddleName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'LastSurname'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'LastSurname'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name borne in common by members of a family.', 'schema', 'edfi', 'table', 'Student', 'column', 'LastSurname'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'GenerationCodeSuffix'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'GenerationCodeSuffix'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', 'schema', 'edfi', 'table', 'Student', 'column', 'GenerationCodeSuffix'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'MaidenName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'MaidenName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The person''s maiden name.', 'schema', 'edfi', 'table', 'Student', 'column', 'MaidenName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'SexTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'SexTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A person''''s gender.', 'schema', 'edfi', 'table', 'Student', 'column', 'SexTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which an individual was born.', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthCity'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthCity'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The set of elements that capture relevant data regarding a person''s birth, including birth date and place of birth.', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthCity'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthStateAbbreviationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthStateAbbreviationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthStateAbbreviationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'DateEnteredUS'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'DateEnteredUS'
END
exec sys.sp_addextendedproperty 'MS_Description', 'For students born outside of the U.S., the date the student entered the U.S.', 'schema', 'edfi', 'table', 'Student', 'column', 'DateEnteredUS'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'MultipleBirthStatus'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'MultipleBirthStatus'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)', 'schema', 'edfi', 'table', 'Student', 'column', 'MultipleBirthStatus'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'ProfileThumbnail'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'ProfileThumbnail'
END
exec sys.sp_addextendedproperty 'MS_Description', 'ProfileThumbnail.', 'schema', 'edfi', 'table', 'Student', 'column', 'ProfileThumbnail'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'HispanicLatinoEthnicity'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'HispanicLatinoEthnicity'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino."', 'schema', 'edfi', 'table', 'Student', 'column', 'HispanicLatinoEthnicity'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'OldEthnicityTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'OldEthnicityTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Previous definition of Ethnicity combining Hispanic/latino and race:  1 - American Indian or Alaskan Native  2 - Asian or Pacific Islander  3 - Black, not of Hispanic origin  4 - Hispanic  5 - White, not of Hispanic origin', 'schema', 'edfi', 'table', 'Student', 'column', 'OldEthnicityTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'EconomicDisadvantaged'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'EconomicDisadvantaged'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of inadequate financial condition of an individual''s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.', 'schema', 'edfi', 'table', 'Student', 'column', 'EconomicDisadvantaged'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'SchoolFoodServicesEligibilityDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'SchoolFoodServicesEligibilityDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Student', 'column', 'SchoolFoodServicesEligibilityDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'LimitedEnglishProficiencyDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'LimitedEnglishProficiencyDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication that the student has sufficient difficulty speaking, reading, writing, or understanding the English language, as to require special English Language services.', 'schema', 'edfi', 'table', 'Student', 'column', 'LimitedEnglishProficiencyDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'DisplacementStatus'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'DisplacementStatus'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.', 'schema', 'edfi', 'table', 'Student', 'column', 'DisplacementStatus'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'LoginId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'LoginId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The login ID for the user; used for security access control interface.', 'schema', 'edfi', 'table', 'Student', 'column', 'LoginId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthInternationalProvince'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthInternationalProvince'
END
exec sys.sp_addextendedproperty 'MS_Description', 'For students born outside of the US, the Province or jurisdiction in which an individual is born.', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthInternationalProvince'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'CitizenshipStatusTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'CitizenshipStatusTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Student', 'column', 'CitizenshipStatusTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'StudentUniqueId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'StudentUniqueId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique alphanumeric code assigned to a student.', 'schema', 'edfi', 'table', 'Student', 'column', 'StudentUniqueId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthCountryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthCountryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'Student', 'column', 'BirthCountryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'Student', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'Student'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents an individual for whom instruction, services, and/or care are provided in an early childhood, elementary, or secondary educational program under the jurisdiction of a school, education agency or other institution or program. A student is a person who has been enrolled in a school or other educational institution.', 'schema', 'edfi', 'table', 'Student'
go

/* 
 * TABLE: [edfi].[StudentAcademicRecord] 
 */

CREATE TABLE [edfi].[StudentAcademicRecord](
    [StudentUSI]                           int                 NOT NULL,
    [EducationOrganizationId]              int                 NOT NULL,
    [SchoolYear]                           smallint            NOT NULL,
    [TermDescriptorId]                     int                 NOT NULL,
    [CumulativeEarnedCreditTypeId]         int                 NULL,
    [CumulativeEarnedCreditConversion]     decimal(9, 2)       NULL,
    [CumulativeEarnedCredits]              decimal(9, 2)       NULL,
    [CumulativeAttemptedCreditTypeId]      int                 NULL,
    [CumulativeAttemptedCreditConversion]  decimal(9, 2)       NULL,
    [CumulativeAttemptedCredits]           decimal(9, 2)       NULL,
    [CumulativeGradePointsEarned]          decimal(18, 4)      NULL,
    [CumulativeGradePointAverage]          decimal(18, 4)      NULL,
    [GradeValueQualifier]                  nvarchar(80)        NULL,
    [ProjectedGraduationDate]              date                NULL,
    [SessionEarnedCreditTypeId]            int                 NULL,
    [SessionEarnedCreditConversion]        decimal(9, 2)       NULL,
    [SessionEarnedCredits]                 decimal(9, 2)       NULL,
    [SessionAttemptedCreditTypeId]         int                 NULL,
    [SessionAttemptedCreditConversion]     decimal(9, 2)       NULL,
    [SessionAttemptedCredits]              decimal(9, 2)       NULL,
    [SessionGradePointsEarned]             decimal(18, 4)      NULL,
    [SessionGradePointAverage]             decimal(18, 4)      NULL,
    [Id]                                   uniqueidentifier    CONSTRAINT [StudentAcademicRecord_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                     datetime            CONSTRAINT [StudentAcademicRecord_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                           datetime            CONSTRAINT [StudentAcademicRecord_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAcademicRecord] PRIMARY KEY CLUSTERED ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentAcademicRecord') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAcademicRecord >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAcademicRecord >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeEarnedCreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeEarnedCreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Credit', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeEarnedCreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeEarnedCreditConversion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeEarnedCreditConversion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeEarnedCreditConversion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeEarnedCredits'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeEarnedCredits'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The cumulative number of credits an individual earns by completing courses or examinations during his or her enrollment in the current school as well as those credits transferred from schools in which the individual had been previously enrolled.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeEarnedCredits'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeAttemptedCreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeAttemptedCreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Credit', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeAttemptedCreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeAttemptedCreditConversion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeAttemptedCreditConversion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeAttemptedCreditConversion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeAttemptedCredits'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeAttemptedCredits'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The cumulative number of credits an individual attempts to earn by taking courses during his or her enrollment in the current school as well as those credits transferred from schools in which the individual had been previously enrolled.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeAttemptedCredits'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeGradePointsEarned'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeGradePointsEarned'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeGradePointsEarned'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeGradePointAverage'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeGradePointAverage'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'CumulativeGradePointAverage'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'GradeValueQualifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'GradeValueQualifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student''s Grade Point Average (A=4, B=3, C=2, D=1 in a four-point system) or letter equivalents for percentage grades (90-100%=A, 80-90%=B, etc.).', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'GradeValueQualifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'ProjectedGraduationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'ProjectedGraduationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month and year the student is projected to graduate.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'ProjectedGraduationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionEarnedCreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionEarnedCreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Credit', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionEarnedCreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionEarnedCreditConversion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionEarnedCreditConversion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionEarnedCreditConversion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionEarnedCredits'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionEarnedCredits'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of an credits an individual earned in this session.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionEarnedCredits'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionAttemptedCreditTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionAttemptedCreditTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Credit', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionAttemptedCreditTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionAttemptedCreditConversion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionAttemptedCreditConversion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionAttemptedCreditConversion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionAttemptedCredits'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionAttemptedCredits'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of an credits an individual attempted to earn in this session.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionAttemptedCredits'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionGradePointsEarned'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionGradePointsEarned'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of grade points an individual earned for this session.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionGradePointsEarned'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionGradePointAverage'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionGradePointAverage'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.', 'schema', 'edfi', 'table', 'StudentAcademicRecord', 'column', 'SessionGradePointAverage'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecord'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This educational entity represents the cumulative record of academic achievement for a student.', 'schema', 'edfi', 'table', 'StudentAcademicRecord'
go

/* 
 * TABLE: [edfi].[StudentAcademicRecordAcademicHonor] 
 */

CREATE TABLE [edfi].[StudentAcademicRecordAcademicHonor](
    [AcademicHonorCategoryTypeId]      int              NOT NULL,
    [StudentUSI]                       int              NOT NULL,
    [SchoolYear]                       smallint         NOT NULL,
    [TermDescriptorId]                 int              NOT NULL,
    [EducationOrganizationId]          int              NOT NULL,
    [HonorDescription]                 nvarchar(80)     NULL,
    [HonorAwardDate]                   date             NULL,
    [HonorAwardExpiresDate]            date             NULL,
    [AchievementTitle]                 nvarchar(60)     NULL,
    [AchievementCategoryDescriptorId]  int              NULL,
    [AchievementCategorySystem]        nvarchar(60)     NULL,
    [IssuerName]                       nvarchar(150)    NULL,
    [IssuerOriginURL]                  nvarchar(255)    NULL,
    [Criteria]                         nvarchar(150)    NULL,
    [CriteriaURL]                      nvarchar(255)    NULL,
    [EvidenceStatement]                nvarchar(150)    NULL,
    [ImageURL]                         nvarchar(255)    NULL,
    [CreateDate]                       datetime         CONSTRAINT [StudentAcademicRecordAcademicHonor_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAcademicRecordAcademicHonor] PRIMARY KEY CLUSTERED ([AcademicHonorCategoryTypeId], [StudentUSI], [SchoolYear], [TermDescriptorId], [EducationOrganizationId])
)
go



IF OBJECT_ID('edfi.StudentAcademicRecordAcademicHonor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAcademicRecordAcademicHonor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAcademicRecordAcademicHonor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'AcademicHonorCategoryTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'AcademicHonorCategoryTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A designation of the type of academic distinctions earned by or awarded to the student.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'AcademicHonorCategoryTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'HonorDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'HonorDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A description of the type of academic distinctions earned by or awarded to the individual.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'HonorDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'HonorAwardDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'HonorAwardDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the honor was awarded or earned.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'HonorAwardDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'HonorAwardExpiresDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'HonorAwardExpiresDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Date on which the award expires.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'HonorAwardExpiresDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'AchievementTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'AchievementTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title assigned to the achievement.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'AchievementTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'AchievementCategoryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'AchievementCategoryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'AchievementCategoryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'AchievementCategorySystem'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'AchievementCategorySystem'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The system that defines the categories by which an achievement is attributed to the learner.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'AchievementCategorySystem'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'IssuerName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'IssuerName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the agent issuing the award.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'IssuerName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'IssuerOriginURL'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'IssuerOriginURL'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Uniform Resource Locator (URL) from which the award was issued.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'IssuerOriginURL'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'Criteria'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'Criteria'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The criteria for competency-based completion of the achievement/award.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'Criteria'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'CriteriaURL'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'CriteriaURL'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'CriteriaURL'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'EvidenceStatement'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'EvidenceStatement'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A statement or reference describing the evidence that the learner met the criteria for attainment of the achievement.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'EvidenceStatement'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'ImageURL'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'ImageURL'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the achievement.', 'schema', 'edfi', 'table', 'StudentAcademicRecordAcademicHonor', 'column', 'ImageURL'
go

/* 
 * TABLE: [edfi].[StudentAcademicRecordClassRanking] 
 */

CREATE TABLE [edfi].[StudentAcademicRecordClassRanking](
    [StudentUSI]               int         NOT NULL,
    [SchoolYear]               smallint    NOT NULL,
    [TermDescriptorId]         int         NOT NULL,
    [EducationOrganizationId]  int         NOT NULL,
    [ClassRank]                int         NOT NULL,
    [TotalNumberInClass]       int         NOT NULL,
    [PercentageRanking]        int         NULL,
    [ClassRankingDate]         date        NULL,
    [CreateDate]               datetime    CONSTRAINT [StudentAcademicRecordClassRanking_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAcademicRecordClassRanking] PRIMARY KEY CLUSTERED ([StudentUSI], [SchoolYear], [TermDescriptorId], [EducationOrganizationId])
)
go



IF OBJECT_ID('edfi.StudentAcademicRecordClassRanking') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAcademicRecordClassRanking >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAcademicRecordClassRanking >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'ClassRank'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'ClassRank'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The academic rank of a student in relation to his or her graduating class (e.g., 1st, 2nd, 3rd).', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'ClassRank'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'TotalNumberInClass'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'TotalNumberInClass'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The total number of students in the student''s graduating class.', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'TotalNumberInClass'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'PercentageRanking'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'PercentageRanking'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The academic percentage rank of a student in relation to his or her graduating class (e.g., 95%, 80%, 50%).', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'PercentageRanking'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'ClassRankingDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'ClassRankingDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Date class ranking was determined.', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', 'column', 'ClassRankingDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The academic rank information of a student in relation to his or her graduating class', 'schema', 'edfi', 'table', 'StudentAcademicRecordClassRanking'
go

/* 
 * TABLE: [edfi].[StudentAcademicRecordDiploma] 
 */

CREATE TABLE [edfi].[StudentAcademicRecordDiploma](
    [StudentUSI]                       int              NOT NULL,
    [DiplomaTypeId]                    int              NOT NULL,
    [SchoolYear]                       smallint         NOT NULL,
    [TermDescriptorId]                 int              NOT NULL,
    [EducationOrganizationId]          int              NOT NULL,
    [DiplomaAwardDate]                 date             NOT NULL,
    [DiplomaLevelTypeId]               int              NULL,
    [CTECompleter]                     bit              NULL,
    [DiplomaDescription]               nvarchar(80)     NULL,
    [DiplomaAwardExpiresDate]          date             NULL,
    [AchievementTitle]                 nvarchar(60)     NULL,
    [AchievementCategoryDescriptorId]  int              NULL,
    [AchievementCategorySystem]        nvarchar(60)     NULL,
    [IssuerName]                       nvarchar(150)    NULL,
    [IssuerOriginURL]                  nvarchar(255)    NULL,
    [Criteria]                         nvarchar(150)    NULL,
    [CriteriaURL]                      nvarchar(255)    NULL,
    [EvidenceStatement]                nvarchar(150)    NULL,
    [ImageURL]                         nvarchar(255)    NULL,
    [CreateDate]                       datetime         CONSTRAINT [StudentAcademicRecordDiploma_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAcademicRecordDiploma] PRIMARY KEY CLUSTERED ([StudentUSI], [DiplomaTypeId], [SchoolYear], [TermDescriptorId], [EducationOrganizationId], [DiplomaAwardDate])
)
go



IF OBJECT_ID('edfi.StudentAcademicRecordDiploma') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAcademicRecordDiploma >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAcademicRecordDiploma >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaAwardDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaAwardDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the student met graduation requirements and was awarded a diploma.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaAwardDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaLevelTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaLevelTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.  Minimum high school program  Recommended high school program  Distinguished Achievement Program', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaLevelTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'CTECompleter'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'CTECompleter'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicated a student who reached a state-defined threshold of vocational education and who attained a high school diploma or its recognized state equivalent or GED.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'CTECompleter'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of diploma given to the student for accomplishments.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaAwardExpiresDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaAwardExpiresDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Date on which the award expires.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'DiplomaAwardExpiresDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'AchievementTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'AchievementTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title assigned to the achievement.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'AchievementTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'AchievementCategoryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'AchievementCategoryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'AchievementCategoryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'AchievementCategorySystem'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'AchievementCategorySystem'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The system that defines the categories by which an achievement is attributed to the learner.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'AchievementCategorySystem'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'IssuerName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'IssuerName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the agent issuing the award.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'IssuerName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'IssuerOriginURL'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'IssuerOriginURL'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Uniform Resource Locator (URL) from which the award was issued.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'IssuerOriginURL'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'Criteria'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'Criteria'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The criteria for competency-based completion of the achievement/award.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'Criteria'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'CriteriaURL'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'CriteriaURL'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'CriteriaURL'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'EvidenceStatement'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'EvidenceStatement'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A statement or reference describing the evidence that the learner met the criteria for attainment of the achievement.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'EvidenceStatement'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'ImageURL'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'ImageURL'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the achievement.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', 'column', 'ImageURL'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This educational entity represents the conferring or certification by an educational organization that the student has successfully completed a particular course of study. It represents the electronic version of its physical document counterpart.', 'schema', 'edfi', 'table', 'StudentAcademicRecordDiploma'
go

/* 
 * TABLE: [edfi].[StudentAcademicRecordRecognition] 
 */

CREATE TABLE [edfi].[StudentAcademicRecordRecognition](
    [RecognitionTypeId]                int              NOT NULL,
    [StudentUSI]                       int              NOT NULL,
    [EducationOrganizationId]          int              NOT NULL,
    [SchoolYear]                       smallint         NOT NULL,
    [TermDescriptorId]                 int              NOT NULL,
    [RecognitionDescription]           nvarchar(80)     NULL,
    [RecognitionAwardDate]             date             NULL,
    [RecognitionAwardExpiresDate]      date             NULL,
    [AchievementTitle]                 nvarchar(60)     NULL,
    [AchievementCategoryDescriptorId]  int              NULL,
    [AchievementCategorySystem]        nvarchar(60)     NULL,
    [IssuerName]                       nvarchar(150)    NULL,
    [IssuerOriginURL]                  nvarchar(255)    NULL,
    [Criteria]                         nvarchar(150)    NULL,
    [CriteriaURL]                      nvarchar(255)    NULL,
    [EvidenceStatement]                nvarchar(150)    NULL,
    [ImageURL]                         nvarchar(255)    NULL,
    [CreateDate]                       datetime         CONSTRAINT [StudentAcademicRecordRecognition_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAcademicRecordRecognition] PRIMARY KEY CLUSTERED ([RecognitionTypeId], [StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentAcademicRecordRecognition') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAcademicRecordRecognition >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAcademicRecordRecognition >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'RecognitionTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'RecognitionTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The nature of recognition given to the student for accomplishments in a co-curricular, or extra-curricular activity.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'RecognitionTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'RecognitionDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'RecognitionDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of recognition given to the student for accomplishments in a co-curricular or extra-curricular activity.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'RecognitionDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'RecognitionAwardDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'RecognitionAwardDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the recognition was awarded or earned.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'RecognitionAwardDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'RecognitionAwardExpiresDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'RecognitionAwardExpiresDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Date on which the award expires.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'RecognitionAwardExpiresDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'AchievementTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'AchievementTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title assigned to the achievement.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'AchievementTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'AchievementCategoryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'AchievementCategoryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'AchievementCategoryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'AchievementCategorySystem'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'AchievementCategorySystem'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The system that defines the categories by which an achievement is attributed to the learner.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'AchievementCategorySystem'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'IssuerName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'IssuerName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the agent issuing the award.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'IssuerName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'IssuerOriginURL'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'IssuerOriginURL'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Uniform Resource Locator (URL) from which the award was issued.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'IssuerOriginURL'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'Criteria'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'Criteria'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The criteria for competency-based completion of the achievement/award.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'Criteria'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'CriteriaURL'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'CriteriaURL'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'CriteriaURL'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'EvidenceStatement'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'EvidenceStatement'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A statement or reference describing the evidence that the learner met the criteria for attainment of the achievement.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'EvidenceStatement'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'ImageURL'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'ImageURL'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the achievement.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', 'column', 'ImageURL'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Recognition given to the student for accomplishments in a co-curricular or extra-curricular activity.', 'schema', 'edfi', 'table', 'StudentAcademicRecordRecognition'
go

/* 
 * TABLE: [edfi].[StudentAcademicRecordReportCard] 
 */

CREATE TABLE [edfi].[StudentAcademicRecordReportCard](
    [StudentUSI]                 int         NOT NULL,
    [SchoolYear]                 smallint    NOT NULL,
    [TermDescriptorId]           int         NOT NULL,
    [EducationOrganizationId]    int         NOT NULL,
    [GradingPeriodDescriptorId]  int         NOT NULL,
    [GradingPeriodBeginDate]     date        NOT NULL,
    [SchoolId]                   int         NOT NULL,
    [CreateDate]                 datetime    CONSTRAINT [StudentAcademicRecordReportCard_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAcademicRecordReportCard] PRIMARY KEY CLUSTERED ([StudentUSI], [SchoolYear], [TermDescriptorId], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
)
go



IF OBJECT_ID('edfi.StudentAcademicRecordReportCard') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAcademicRecordReportCard >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAcademicRecordReportCard >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'GradingPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'GradingPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the grading period during the school year in which the grade is offered (e.g., 1st cycle, 1st semester)', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'GradingPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'GradingPeriodBeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'GradingPeriodBeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the first day of the grading period.', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'GradingPeriodBeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Report cards for the student.', 'schema', 'edfi', 'table', 'StudentAcademicRecordReportCard'
go

/* 
 * TABLE: [edfi].[StudentAddress] 
 */

CREATE TABLE [edfi].[StudentAddress](
    [StudentUSI]                int              NOT NULL,
    [AddressTypeId]             int              NOT NULL,
    [StreetNumberName]          nvarchar(150)    NOT NULL,
    [ApartmentRoomSuiteNumber]  nvarchar(50)     NULL,
    [BuildingSiteNumber]        nvarchar(20)     NULL,
    [City]                      nvarchar(30)     NOT NULL,
    [StateAbbreviationTypeId]   int              NOT NULL,
    [PostalCode]                nvarchar(17)     NOT NULL,
    [NameOfCounty]              nvarchar(30)     NULL,
    [CountyFIPSCode]            nvarchar(5)      NULL,
    [Latitude]                  nvarchar(20)     NULL,
    [Longitude]                 nvarchar(20)     NULL,
    [BeginDate]                 date             NULL,
    [EndDate]                   date             NULL,
    [CreateDate]                datetime         CONSTRAINT [StudentAddress_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAddress] PRIMARY KEY CLUSTERED ([StudentUSI], [AddressTypeId])
)
go



IF OBJECT_ID('edfi.StudentAddress') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAddress >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAddress >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'AddressTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'AddressTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Address', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'AddressTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'StreetNumberName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'StreetNumberName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The street number and street name or post office box number of an address.', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'StreetNumberName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'ApartmentRoomSuiteNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'ApartmentRoomSuiteNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The apartment, room, or suite number of an address.', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'ApartmentRoomSuiteNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'BuildingSiteNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'BuildingSiteNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of the building on the site, if more than one building shares the same address.', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'BuildingSiteNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'City'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'City'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the city in which an address is located.', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'City'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'StateAbbreviationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'StateAbbreviationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The abbreviation for the state (within the United States) or outlying area in which an address is located.', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'StateAbbreviationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'PostalCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'PostalCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The five or nine digit zip code or overseas postal code portion of an address.', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'PostalCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'NameOfCounty'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'NameOfCounty'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'NameOfCounty'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'CountyFIPSCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'CountyFIPSCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Definition The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'CountyFIPSCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'Latitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'Latitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic latitude of the physical address.', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'Latitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'Longitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'Longitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic longitude of the physical address.', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'Longitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The first date the address is valid. For physical addresses, the date the person moved to that address.', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', 'schema', 'edfi', 'table', 'StudentAddress', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAddress', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAddress'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The set of elements that describes an address, including the street address, city, state, and ZIP code.', 'schema', 'edfi', 'table', 'StudentAddress'
go

/* 
 * TABLE: [edfi].[StudentAssessment] 
 */

CREATE TABLE [edfi].[StudentAssessment](
    [StudentUSI]                          int                 NOT NULL,
    [AssessmentTitle]                     nvarchar(60)        NOT NULL,
    [AcademicSubjectDescriptorId]         int                 NOT NULL,
    [AssessedGradeLevelDescriptorId]      int                 NOT NULL,
    [Version]                             int                 NOT NULL,
    [AdministrationDate]                  date                NOT NULL,
    [AdministrationEndDate]               date                NULL,
    [SerialNumber]                        nvarchar(60)        NULL,
    [AdministrationLanguageDescriptorId]  int                 NULL,
    [AdministrationEnvironmentTypeId]     int                 NULL,
    [RetestIndicatorTypeId]               int                 NULL,
    [ReasonNotTestedTypeId]               int                 NULL,
    [WhenAssessedGradeLevelDescriptorId]  int                 NULL,
    [EventCircumstanceTypeId]             int                 NULL,
    [EventDescription]                    nvarchar(1024)      NULL,
    [Id]                                  uniqueidentifier    CONSTRAINT [StudentAssessment_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                    datetime            CONSTRAINT [StudentAssessment_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                          datetime            CONSTRAINT [StudentAssessment_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAssessment] PRIMARY KEY CLUSTERED ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
)
go



IF OBJECT_ID('edfi.StudentAssessment') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAssessment >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAssessment >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AdministrationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AdministrationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AdministrationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AdministrationEndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AdministrationEndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Assessment Administration End Date, if administered over multiple days.', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AdministrationEndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'SerialNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'SerialNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The unique number for the assessment form or answer document.', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'SerialNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AdministrationLanguageDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AdministrationLanguageDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AdministrationLanguageDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AdministrationEnvironmentTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AdministrationEnvironmentTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The environment in which the test was administered.  For example:  Electronic  Classroom  Testing Center  ...  ....', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'AdministrationEnvironmentTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'RetestIndicatorTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'RetestIndicatorTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator if the test was retaken.  For example:  Primary administration  First retest  Second retest  ...', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'RetestIndicatorTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'ReasonNotTestedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'ReasonNotTestedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The primary reason student is not tested. For example:  Absent  Refusal by parent  Refusal by student  Medical waiver  Illness  Disruptive behavior  LEP Exempt  ...', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'ReasonNotTestedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'WhenAssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'WhenAssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade level of a student when assessed.', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'WhenAssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'EventCircumstanceTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'EventCircumstanceTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'EventCircumstanceTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'EventDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'EventDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Describes special events that occur before during or after the assessment session that may impact use of results.', 'schema', 'edfi', 'table', 'StudentAssessment', 'column', 'EventDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessment'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents the analysis or scoring of a student''s response on an assessment. The analysis results in a value that represents a student''s performance on a set of items on a test.', 'schema', 'edfi', 'table', 'StudentAssessment'
go

/* 
 * TABLE: [edfi].[StudentAssessmentAccommodation] 
 */

CREATE TABLE [edfi].[StudentAssessmentAccommodation](
    [StudentUSI]                      int             NOT NULL,
    [AssessmentTitle]                 nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]     int             NOT NULL,
    [AssessedGradeLevelDescriptorId]  int             NOT NULL,
    [Version]                         int             NOT NULL,
    [AdministrationDate]              date            NOT NULL,
    [AccommodationDescriptorId]       int             NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [StudentAssessmentAccommodation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAssessmentAccommodation] PRIMARY KEY CLUSTERED ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate], [AccommodationDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentAssessmentAccommodation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAssessmentAccommodation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAssessmentAccommodation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AdministrationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AdministrationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.  NEDM: Assessment Administration Date', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AdministrationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AccommodationDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AccommodationDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', 'column', 'AccommodationDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The specific type of special variation used in how an examination is presented, how it is administered or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examination measures. The proper use of accommodations does not substantially change academic level or performance criteria (e.g., Braille, Enlarged Monitor View, Extra Time, Large Print, Setting, Oral Administration).', 'schema', 'edfi', 'table', 'StudentAssessmentAccommodation'
go

/* 
 * TABLE: [edfi].[StudentAssessmentItem] 
 */

CREATE TABLE [edfi].[StudentAssessmentItem](
    [StudentUSI]                      int               NOT NULL,
    [AssessmentTitle]                 nvarchar(60)      NOT NULL,
    [AcademicSubjectDescriptorId]     int               NOT NULL,
    [AssessedGradeLevelDescriptorId]  int               NOT NULL,
    [Version]                         int               NOT NULL,
    [IdentificationCode]              nvarchar(60)      NOT NULL,
    [AdministrationDate]              date              NOT NULL,
    [AssessmentResponse]              nvarchar(60)      NULL,
    [ResponseIndicatorTypeId]         int               NULL,
    [AssessmentItemResultTypeId]      int               NOT NULL,
    [RawScoreResult]                  int               NULL,
    [TimeAssessed]                    nvarchar(30)      NULL,
    [DescriptiveFeedback]             nvarchar(1024)    NULL,
    [CreateDate]                      datetime          CONSTRAINT [StudentAssessmentItem_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAssessmentItem] PRIMARY KEY CLUSTERED ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [AdministrationDate])
)
go



IF OBJECT_ID('edfi.StudentAssessmentItem') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAssessmentItem >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAssessmentItem >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AdministrationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AdministrationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.  NEDM: Assessment Administration Date', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AdministrationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AssessmentResponse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AssessmentResponse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A student''s response to a stimulus on a test.', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AssessmentResponse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'ResponseIndicatorTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'ResponseIndicatorTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator of the response.  For example:  Nonscorable response  Ineffective response  Effective response  Partial response  ...', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'ResponseIndicatorTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AssessmentItemResultTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AssessmentItemResultTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The analyzed result of a student''''s response to an assessment item.. For example:  Correct  Incorrect  Met standard  ...', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'AssessmentItemResultTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'RawScoreResult'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'RawScoreResult'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A meaningful raw score of the performance of an individual on an assessment item.', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'RawScoreResult'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'TimeAssessed'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'TimeAssessed'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The overall time a student actually spent during the AssessmentItem.', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'TimeAssessed'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'DescriptiveFeedback'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'DescriptiveFeedback'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formative descriptive feedback that was given to a learner in response to the results from a scored/evaluated assessment item.', 'schema', 'edfi', 'table', 'StudentAssessmentItem', 'column', 'DescriptiveFeedback'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentItem'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents the student''s response to an assessment item and the item-level scores such as correct, incorrect, or met standard.', 'schema', 'edfi', 'table', 'StudentAssessmentItem'
go

/* 
 * TABLE: [edfi].[StudentAssessmentPerformanceLevel] 
 */

CREATE TABLE [edfi].[StudentAssessmentPerformanceLevel](
    [StudentUSI]                      int             NOT NULL,
    [AssessmentTitle]                 nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]     int             NOT NULL,
    [AssessedGradeLevelDescriptorId]  int             NOT NULL,
    [Version]                         int             NOT NULL,
    [AdministrationDate]              date            NOT NULL,
    [PerformanceLevelDescriptorId]    int             NOT NULL,
    [PerformanceLevelMet]             bit             NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [StudentAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAssessmentPerformanceLevel] PRIMARY KEY CLUSTERED ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate], [PerformanceLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentAssessmentPerformanceLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAssessmentPerformanceLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAssessmentPerformanceLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'AdministrationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'AdministrationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.  NEDM: Assessment Administration Date', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'AdministrationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Performance Level Descriptor', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'PerformanceLevelMet'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'PerformanceLevelMet'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Optional indicator of whether the performance level was met.', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', 'column', 'PerformanceLevelMet'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates the various levels or thresholds for the performance achieved by the student on the assessment.', 'schema', 'edfi', 'table', 'StudentAssessmentPerformanceLevel'
go

/* 
 * TABLE: [edfi].[StudentAssessmentScoreResult] 
 */

CREATE TABLE [edfi].[StudentAssessmentScoreResult](
    [StudentUSI]                       int             NOT NULL,
    [AssessmentTitle]                  nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]      int             NOT NULL,
    [AssessedGradeLevelDescriptorId]   int             NOT NULL,
    [Version]                          int             NOT NULL,
    [AdministrationDate]               date            NOT NULL,
    [AssessmentReportingMethodTypeId]  int             NOT NULL,
    [Result]                           nvarchar(35)    NOT NULL,
    [ResultDatatypeTypeId]             int             NOT NULL,
    [CreateDate]                       datetime        CONSTRAINT [StudentAssessmentScoreResult_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAssessmentScoreResult] PRIMARY KEY CLUSTERED ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate], [AssessmentReportingMethodTypeId])
)
go



IF OBJECT_ID('edfi.StudentAssessmentScoreResult') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAssessmentScoreResult >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAssessmentScoreResult >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AdministrationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AdministrationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.  NEDM: Assessment Administration Date', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AdministrationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AssessmentReportingMethodTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AssessmentReportingMethodTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the analytic score.  For example:  Percentile  Quantile measure  Lexile measure  Vertical scale score  TPM score  ...  ...', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'AssessmentReportingMethodTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'Result'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'Result'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'Result'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'ResultDatatypeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'ResultDatatypeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', 'column', 'ResultDatatypeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', 'schema', 'edfi', 'table', 'StudentAssessmentScoreResult'
go

/* 
 * TABLE: [edfi].[StudentAssessmentStudentObjectiveAssessment] 
 */

CREATE TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment](
    [StudentUSI]                      int             NOT NULL,
    [AssessmentTitle]                 nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]     int             NOT NULL,
    [AssessedGradeLevelDescriptorId]  int             NOT NULL,
    [Version]                         int             NOT NULL,
    [IdentificationCode]              nvarchar(60)    NOT NULL,
    [AdministrationDate]              date            NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [StudentAssessmentStudentObjectiveAssessment_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAssessmentStudentObjectiveAssessment] PRIMARY KEY CLUSTERED ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [AdministrationDate])
)
go



IF OBJECT_ID('edfi.StudentAssessmentStudentObjectiveAssessment') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAssessmentStudentObjectiveAssessment >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAssessmentStudentObjectiveAssessment >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'AdministrationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'AdministrationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.  NEDM: Assessment Administration Date', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', 'column', 'AdministrationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity holds the score and or performance levels earned for an objective assessment by a student.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessment'
go

/* 
 * TABLE: [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] 
 */

CREATE TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel](
    [StudentUSI]                      int             NOT NULL,
    [AssessmentTitle]                 nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]     int             NOT NULL,
    [AssessedGradeLevelDescriptorId]  int             NOT NULL,
    [Version]                         int             NOT NULL,
    [IdentificationCode]              nvarchar(60)    NOT NULL,
    [AdministrationDate]              date            NOT NULL,
    [PerformanceLevelDescriptorId]    int             NOT NULL,
    [PerformanceLevelMet]             bit             NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] PRIMARY KEY CLUSTERED ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [AdministrationDate], [PerformanceLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentAssessmentStudentObjectiveAssessmentPerformanceLevel') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAssessmentStudentObjectiveAssessmentPerformanceLevel >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAssessmentStudentObjectiveAssessmentPerformanceLevel >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:  Adult  Prekindergarten  First grade  Second grade  ...', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'AdministrationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'AdministrationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'AdministrationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'PerformanceLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'PerformanceLevelMet'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'PerformanceLevelMet'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator of whether the student met the designated performance level.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', 'column', 'PerformanceLevelMet'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The performance level(s) achieved for the objective assessment.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel'
go

/* 
 * TABLE: [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] 
 */

CREATE TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult](
    [StudentUSI]                       int             NOT NULL,
    [AssessmentTitle]                  nvarchar(60)    NOT NULL,
    [AcademicSubjectDescriptorId]      int             NOT NULL,
    [AssessedGradeLevelDescriptorId]   int             NOT NULL,
    [Version]                          int             NOT NULL,
    [IdentificationCode]               nvarchar(60)    NOT NULL,
    [AdministrationDate]               date            NOT NULL,
    [AssessmentReportingMethodTypeId]  int             NOT NULL,
    [Result]                           nvarchar(35)    NOT NULL,
    [ResultDatatypeTypeId]             int             NOT NULL,
    [CreateDate]                       datetime        CONSTRAINT [StudentAssessmentStudentObjectiveAssessmentScoreResult_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentAssessmentStudentObjectiveAssessmentScoreResult] PRIMARY KEY CLUSTERED ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [AdministrationDate], [AssessmentReportingMethodTypeId])
)
go



IF OBJECT_ID('edfi.StudentAssessmentStudentObjectiveAssessmentScoreResult') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentAssessmentStudentObjectiveAssessmentScoreResult >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentAssessmentStudentObjectiveAssessmentScoreResult >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AssessmentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AssessmentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title or name of the assessment.  NEDM: Assessment Title', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AssessmentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.  NEDM: Assessment Content, Academic Subject', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AssessedGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AssessedGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The typical grade level for which an assessment is designed. If the test assessment spans a range of grades, then this attribute holds the highest grade assessed.  If only one grade level is assessed, then only this attribute is used. For example:
Adult
Prekindergarten
First grade
Second grade
...', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AssessedGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'Version'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'Version'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The version identifier for the test assessment.  NEDM: Assessment Version', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'Version'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AdministrationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AdministrationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.  NEDM: Assessment Administration Date', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AdministrationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AssessmentReportingMethodTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AssessmentReportingMethodTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AssessmentReportingMethod', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'AssessmentReportingMethodTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'Result'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'Result'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'Result'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'ResultDatatypeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'ResultDatatypeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', 'column', 'ResultDatatypeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', 'schema', 'edfi', 'table', 'StudentAssessmentStudentObjectiveAssessmentScoreResult'
go

/* 
 * TABLE: [edfi].[StudentCharacteristic] 
 */

CREATE TABLE [edfi].[StudentCharacteristic](
    [StudentUSI]                         int             NOT NULL,
    [StudentCharacteristicDescriptorId]  int             NOT NULL,
    [BeginDate]                          date            NULL,
    [EndDate]                            date            NULL,
    [DesignatedBy]                       nvarchar(60)    NULL,
    [CreateDate]                         datetime        CONSTRAINT [StudentCharacteristic_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentCharacteristics] PRIMARY KEY CLUSTERED ([StudentUSI], [StudentCharacteristicDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentCharacteristic') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentCharacteristic >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentCharacteristic >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'StudentCharacteristicDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'StudentCharacteristicDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The characteristic designated for the student.', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'StudentCharacteristicDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the characteristic was designated.', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the characteristic was removed.', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'DesignatedBy'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'DesignatedBy'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The person, organization, or department that made a student designation.', 'schema', 'edfi', 'table', 'StudentCharacteristic', 'column', 'DesignatedBy'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristic', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristic'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reflects important characteristics of the student''s home situation: Displaced Homemaker, Homeless, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, Unaccompanied Youth.', 'schema', 'edfi', 'table', 'StudentCharacteristic'
go

/* 
 * TABLE: [edfi].[StudentCharacteristicDescriptor] 
 */

CREATE TABLE [edfi].[StudentCharacteristicDescriptor](
    [StudentCharacteristicDescriptorId]  int    NOT NULL,
    [StudentCharacteristicTypeId]        int    NULL,
    CONSTRAINT [PK_StudentCharacteristicDescriptor] PRIMARY KEY CLUSTERED ([StudentCharacteristicDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentCharacteristicDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentCharacteristicDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentCharacteristicDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicDescriptor', 'column', 'StudentCharacteristicDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicDescriptor', 'column', 'StudentCharacteristicDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentCharacteristicDescriptor', 'column', 'StudentCharacteristicDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicDescriptor', 'column', 'StudentCharacteristicTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicDescriptor', 'column', 'StudentCharacteristicTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentCharacteristicDescriptor', 'column', 'StudentCharacteristicTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the set of important characteristics of the student.', 'schema', 'edfi', 'table', 'StudentCharacteristicDescriptor'
go

/* 
 * TABLE: [edfi].[StudentCharacteristicType] 
 */

CREATE TABLE [edfi].[StudentCharacteristicType](
    [StudentCharacteristicTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                    nvarchar(50)        NOT NULL,
    [Description]                  nvarchar(1024)      NOT NULL,
    [ShortDescription]             nvarchar(450)       NOT NULL,
    [Id]                           uniqueidentifier    CONSTRAINT [StudentCharacteristicType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]             datetime            CONSTRAINT [StudentCharacteristicType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                   datetime            CONSTRAINT [StudentCharacteristicType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentCharacteristicsType] PRIMARY KEY CLUSTERED ([StudentCharacteristicTypeId])
)
go



IF OBJECT_ID('edfi.StudentCharacteristicType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentCharacteristicType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentCharacteristicType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicType', 'column', 'StudentCharacteristicTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicType', 'column', 'StudentCharacteristicTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for StudentCharacteristics', 'schema', 'edfi', 'table', 'StudentCharacteristicType', 'column', 'StudentCharacteristicTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for StudentCharacteristics type.', 'schema', 'edfi', 'table', 'StudentCharacteristicType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'StudentCharacteristicType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the student characteristic type.', 'schema', 'edfi', 'table', 'StudentCharacteristicType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCharacteristicType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Enumeration items for the important characteristics of the student''s home situation: Displaced Homemaker, Homeless, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent and Unaccompanied Youth.', 'schema', 'edfi', 'table', 'StudentCharacteristicType'
go

/* 
 * TABLE: [edfi].[StudentCohortAssociation] 
 */

CREATE TABLE [edfi].[StudentCohortAssociation](
    [StudentUSI]               int                 NOT NULL,
    [EducationOrganizationId]  int                 NOT NULL,
    [CohortIdentifier]         nvarchar(20)        NOT NULL,
    [BeginDate]                date                NOT NULL,
    [EndDate]                  date                NULL,
    [Id]                       uniqueidentifier    CONSTRAINT [StudentCohortAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]         datetime            CONSTRAINT [StudentCohortAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]               datetime            CONSTRAINT [StudentCohortAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentCohortAssociation] PRIMARY KEY CLUSTERED ([StudentUSI], [EducationOrganizationId], [CohortIdentifier], [BeginDate])
)
go



IF OBJECT_ID('edfi.StudentCohortAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentCohortAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentCohortAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'CohortIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'CohortIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name or ID for the cohort.', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'CohortIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the Student was first identified as part of the Cohort.', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the Student was removed as part of the Cohort.', 'schema', 'edfi', 'table', 'StudentCohortAssociation', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association represents the Cohort(s) for which a student is designated.', 'schema', 'edfi', 'table', 'StudentCohortAssociation'
go

/* 
 * TABLE: [edfi].[StudentCohortAssociationSection] 
 */

CREATE TABLE [edfi].[StudentCohortAssociationSection](
    [StudentUSI]                   int              NOT NULL,
    [ClassroomIdentificationCode]  nvarchar(20)     NOT NULL,
    [SchoolId]                     int              NOT NULL,
    [ClassPeriodName]              nvarchar(20)     NOT NULL,
    [LocalCourseCode]              nvarchar(60)     NOT NULL,
    [SchoolYear]                   smallint         NOT NULL,
    [TermDescriptorId]             int              NOT NULL,
    [UniqueSectionCode]            nvarchar(255)    NOT NULL,
    [SequenceOfCourse]             int              NOT NULL,
    [EducationOrganizationId]      int              NOT NULL,
    [CohortIdentifier]             nvarchar(20)     NOT NULL,
    [BeginDate]                    date             NOT NULL,
    [CreateDate]                   datetime         CONSTRAINT [StudentCohortAssociationSection_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentCohortAssociationSection] PRIMARY KEY CLUSTERED ([StudentUSI], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [EducationOrganizationId], [CohortIdentifier], [BeginDate])
)
go



IF OBJECT_ID('edfi.StudentCohortAssociationSection') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentCohortAssociationSection >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentCohortAssociationSection >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the section, that is defined for a campus by the classroom, the subjects taught, and the instructors that are assigned.  NEDM: Unique Course Code', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a section is part of a sequence of parts for a course, the number if the sequence.  If the course has only onle part, the value of this section attribute should be 1.', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'CohortIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'CohortIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name or ID for the cohort.', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'CohortIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The start date for assignment to this cohort.', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The cohort representing the subdivision of students within one or more sections. For example, a group of students may be given additional instruction and tracked as a cohort.', 'schema', 'edfi', 'table', 'StudentCohortAssociationSection'
go

/* 
 * TABLE: [edfi].[StudentCohortYear] 
 */

CREATE TABLE [edfi].[StudentCohortYear](
    [StudentUSI]        int         NOT NULL,
    [CohortYearTypeId]  int         NOT NULL,
    [SchoolYear]        smallint    NOT NULL,
    [CreateDate]        datetime    CONSTRAINT [StudentCohortYear_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentCohortYears] PRIMARY KEY CLUSTERED ([StudentUSI], [CohortYearTypeId], [SchoolYear])
)
go



IF OBJECT_ID('edfi.StudentCohortYear') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentCohortYear >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentCohortYear >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortYear', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortYear', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentCohortYear', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortYear', 'column', 'CohortYearTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortYear', 'column', 'CohortYearTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for CohortYear', 'schema', 'edfi', 'table', 'StudentCohortYear', 'column', 'CohortYearTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortYear', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortYear', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentCohortYear', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCohortYear', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCohortYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.', 'schema', 'edfi', 'table', 'StudentCohortYear'
go

/* 
 * TABLE: [edfi].[StudentCompetencyObjective] 
 */

CREATE TABLE [edfi].[StudentCompetencyObjective](
    [StudentUSI]                        int                 NOT NULL,
    [Objective]                         nvarchar(60)        NOT NULL,
    [ObjectiveGradeLevelDescriptorId]   int                 NOT NULL,
    [ObjectiveEducationOrganizationId]  int                 NOT NULL,
    [CompetencyLevelDescriptorId]       int                 NOT NULL,
    [ProgramEducationOrganizationId]    int                 NULL,
    [ProgramTypeId]                     int                 NULL,
    [ProgramName]                       nvarchar(60)        NULL,
    [EducationOrganizationId]           int                 NULL,
    [SchoolId]                          int                 NOT NULL,
    [DiagnosticStatement]               nvarchar(1024)      NULL,
    [GradingPeriodDescriptorId]         int                 NOT NULL,
    [GradingPeriodBeginDate]            date                NOT NULL,
    [BeginDate]                         date                NULL,
    [UniqueSectionCode]                 nvarchar(255)       NULL,
    [SequenceOfCourse]                  int                 NULL,
    [SchoolYear]                        smallint            NULL,
    [TermDescriptorId]                  int                 NULL,
    [LocalCourseCode]                   nvarchar(60)        NULL,
    [ClassroomIdentificationCode]       nvarchar(20)        NULL,
    [ClassPeriodName]                   nvarchar(20)        NULL,
    [Id]                                uniqueidentifier    CONSTRAINT [StudentCompetencyObjective_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                  datetime            CONSTRAINT [StudentCompetencyObjective_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                        datetime            CONSTRAINT [StudentCompetencyObjective_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentCompetencyObjective] PRIMARY KEY CLUSTERED ([StudentUSI], [Objective], [ObjectiveGradeLevelDescriptorId], [ObjectiveEducationOrganizationId], [SchoolId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate])
)
go



IF OBJECT_ID('edfi.StudentCompetencyObjective') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentCompetencyObjective >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentCompetencyObjective >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'Objective'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'Objective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The designated title of the learning objective.', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'Objective'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ObjectiveGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade level for which the learning objective is targeted,', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ObjectiveEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ObjectiveEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ObjectiveEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'CompetencyLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'CompetencyLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The competency level assessed for the student for the referenced learning objective.', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'CompetencyLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ProgramEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ProgramEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ProgramEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'DiagnosticStatement'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'DiagnosticStatement'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A statement provided by the teacher that provides information in addition to the grade or assessment score.', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'DiagnosticStatement'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'GradingPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'GradingPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the grading period during the school year in which the grade is offered (e.g., 1st cycle, 1st semester)', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'GradingPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'GradingPeriodBeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'GradingPeriodBeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the first day of the GradingPeriod.', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'GradingPeriodBeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day and year of the student''s entry or assignment to the section.  If blank, default is the start date of the first grading period. NEDM: EntryDate', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the section, that is defined for a campus by the classroom, the subjects taught, and the instructors that are assigned.  NEDM: Unique Course Code', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a section is part of a sequence of parts for a course, the number if the sequence.  If the course has only onle part, the value of this section attribute should be 1.', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period or AB schedules).
=', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCompetencyObjective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents the competency assessed or evaluated for the student against a specific learning objective.', 'schema', 'edfi', 'table', 'StudentCompetencyObjective'
go

/* 
 * TABLE: [edfi].[StudentCTEProgramAssociation] 
 */

CREATE TABLE [edfi].[StudentCTEProgramAssociation](
    [StudentUSI]                      int             NOT NULL,
    [EducationOrganizationId]         int             NOT NULL,
    [ProgramTypeId]                   int             NOT NULL,
    [ProgramName]                     nvarchar(60)    NOT NULL,
    [ProgramEducationOrganizationId]  int             NOT NULL,
    [BeginDate]                       date            NOT NULL,
    CONSTRAINT [PK_StudentCTEProgramAssociation] PRIMARY KEY CLUSTERED ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
)
go



IF OBJECT_ID('edfi.StudentCTEProgramAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentCTEProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentCTEProgramAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The program associated with the student.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'ProgramEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'ProgramEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'ProgramEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the Student first received services.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association represents the career and technical education (CTE) program that a student participates in. The association is an extension of the StudentProgramAssociation particular for CTE programs.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociation'
go

/* 
 * TABLE: [edfi].[StudentCTEProgramAssociationCTEProgram] 
 */

CREATE TABLE [edfi].[StudentCTEProgramAssociationCTEProgram](
    [StudentUSI]                      int              NOT NULL,
    [ProgramTypeId]                   int              NOT NULL,
    [ProgramEducationOrganizationId]  int              NOT NULL,
    [BeginDate]                       date             NOT NULL,
    [CareerPathwayTypeId]             int              NOT NULL,
    [CIPCode]                         nvarchar(120)    NULL,
    [PrimaryCTEProgramIndicator]      bit              NULL,
    [CTEProgramCompletionIndicator]   bit              NULL,
    [ProgramName]                     nvarchar(60)     NOT NULL,
    [EducationOrganizationId]         int              NOT NULL,
    [CreateDate]                      datetime         CONSTRAINT [StudentCTEProgramAssociationCTEProgram_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentCTEProgramAssociationCTEProgram] PRIMARY KEY CLUSTERED ([StudentUSI], [ProgramTypeId], [ProgramEducationOrganizationId], [BeginDate], [CareerPathwayTypeId], [ProgramName], [EducationOrganizationId])
)
go



IF OBJECT_ID('edfi.StudentCTEProgramAssociationCTEProgram') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentCTEProgramAssociationCTEProgram >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentCTEProgramAssociationCTEProgram >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the student first received services.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'ProgramEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'ProgramEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'ProgramEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the student first received services.  NEDM: Beginning Date', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'CareerPathwayTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'CareerPathwayTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The career cluster representing the career path of the Vocational/Career Tech concentrator.  NEDM: Career Cluster', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'CareerPathwayTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'CIPCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'CIPCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Number and description of the CIP Code associated with the student''s CTE program.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'CIPCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'PrimaryCTEProgramIndicator'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'PrimaryCTEProgramIndicator'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A boolean indicator of whether this CTEProgram, is the student''s primary CTEProgram.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'PrimaryCTEProgramIndicator'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'CTEProgramCompletionIndicator'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'CTEProgramCompletionIndicator'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A boolean indicator of whether the Student has completed the CTEProgram.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'CTEProgramCompletionIndicator'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association represents the career and technical education (CTE) program that a student participates in. The association is an extension of the StudentProgramAssociation particular for CTE programs.', 'schema', 'edfi', 'table', 'StudentCTEProgramAssociationCTEProgram'
go

/* 
 * TABLE: [edfi].[StudentDisability] 
 */

CREATE TABLE [edfi].[StudentDisability](
    [StudentUSI]                           int             NOT NULL,
    [DisabilityDescriptorId]               int             NOT NULL,
    [DisabilityDiagnosis]                  nvarchar(80)    NULL,
    [OrderOfDisability]                    int             NULL,
    [DisabilityDeterminationSourceTypeId]  int             NULL,
    [CreateDate]                           datetime        CONSTRAINT [StudentDisability_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentDisability] PRIMARY KEY CLUSTERED ([StudentUSI], [DisabilityDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentDisability') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentDisability >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentDisability >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'DisabilityDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'DisabilityDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'DisabilityDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'DisabilityDiagnosis'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'DisabilityDiagnosis'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A description of the disability diagnosis.', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'DisabilityDiagnosis'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'OrderOfDisability'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'OrderOfDisability'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The order by severity of student''s disabilities: 1- Primary, 2 - Secondary, 3 - Tertiary, etc.', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'OrderOfDisability'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'DisabilityDeterminationSourceTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'DisabilityDeterminationSourceTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Disability Determination Source Type', 'schema', 'edfi', 'table', 'StudentDisability', 'column', 'DisabilityDeterminationSourceTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisability', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisability'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This type represents an impairment of body structure or function, a limitation in activities or a restriction in participation, as ordered by severity of impairment.', 'schema', 'edfi', 'table', 'StudentDisability'
go

/* 
 * TABLE: [edfi].[StudentDisciplineIncidentAssociation] 
 */

CREATE TABLE [edfi].[StudentDisciplineIncidentAssociation](
    [StudentUSI]                      int                 NOT NULL,
    [SchoolId]                        int                 NOT NULL,
    [IncidentIdentifier]              nvarchar(20)        NOT NULL,
    [StudentParticipationCodeTypeId]  int                 NOT NULL,
    [Id]                              uniqueidentifier    CONSTRAINT [StudentDisciplineIncidentAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                datetime            CONSTRAINT [StudentDisciplineIncidentAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                      datetime            CONSTRAINT [StudentDisciplineIncidentAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentDisciplineIncidentAssociation] PRIMARY KEY CLUSTERED ([StudentUSI], [SchoolId], [IncidentIdentifier])
)
go



IF OBJECT_ID('edfi.StudentDisciplineIncidentAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentDisciplineIncidentAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentDisciplineIncidentAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation', 'column', 'IncidentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation', 'column', 'IncidentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A locally assigned unique identifier (within the school or school district) to identify each specific incident or occurrence. The same identifier should be used to document the entire incident even if it included multiple offenses and multiple offenders.', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation', 'column', 'IncidentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation', 'column', 'StudentParticipationCodeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation', 'column', 'StudentParticipationCodeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The role or type of participation of a student in a discipline incident; for example:  Victim  Perpetrator  Witness  Reporter', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation', 'column', 'StudentParticipationCodeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association indicates those students who were victims, perpetrators, witnesses, and reporters for a discipline incident.', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociation'
go
/* 
 * TABLE: [edfi].[StudentDisciplineIncidentAssociationBehavior] 
 */

CREATE TABLE [edfi].[StudentDisciplineIncidentAssociationBehavior](
    [StudentUSI]                   int               NOT NULL,
    [SchoolId]                     int               NOT NULL,
    [IncidentIdentifier]           nvarchar(20)      NOT NULL,
    [BehaviorDescriptorId]         int               NOT NULL,
    [BehaviorDetailedDescription]  nvarchar(1024)    NULL,
    [CreateDate]                   datetime          CONSTRAINT [StudentDisciplineIncidentAssociationBehavior_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentDisciplineIncidentBehavior] PRIMARY KEY CLUSTERED ([StudentUSI], [SchoolId], [IncidentIdentifier], [BehaviorDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentDisciplineIncidentAssociationBehavior') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentDisciplineIncidentAssociationBehavior >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentDisciplineIncidentAssociationBehavior >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'IncidentIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'IncidentIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A locally assigned unique identifier (within the school or school district) to identify each specific incident or occurrence. The same identifier should be used to document the entire incident even if it included multiple offenses and multiple offenders.', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'IncidentIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'BehaviorDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'BehaviorDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'BehaviorDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'BehaviorDetailedDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'BehaviorDetailedDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Specifies a more granular level of detail of a behavior involved in the incident.', 'schema', 'edfi', 'table', 'StudentDisciplineIncidentAssociationBehavior', 'column', 'BehaviorDetailedDescription'
go

/* 
 * TABLE: [edfi].[StudentEducationOrganizationAssociation] 
 */

CREATE TABLE [edfi].[StudentEducationOrganizationAssociation](
    [StudentUSI]                  int                 NOT NULL,
    [EducationOrganizationId]     int                 NOT NULL,
    [ResponsibilityDescriptorId]  int                 NOT NULL,
    [Id]                          uniqueidentifier    CONSTRAINT [StudentEducationOrganizationAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]            datetime            CONSTRAINT [StudentEducationOrganizationAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                  datetime            CONSTRAINT [StudentEducationOrganizationAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentEducationOrganizationAssociation] PRIMARY KEY CLUSTERED ([StudentUSI], [EducationOrganizationId], [ResponsibilityDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentEducationOrganizationAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentEducationOrganizationAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentEducationOrganizationAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentEducationOrganizationAssociation', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentEducationOrganizationAssociation', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentEducationOrganizationAssociation', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentEducationOrganizationAssociation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentEducationOrganizationAssociation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentEducationOrganizationAssociation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentEducationOrganizationAssociation', 'column', 'ResponsibilityDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentEducationOrganizationAssociation', 'column', 'ResponsibilityDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentEducationOrganizationAssociation', 'column', 'ResponsibilityDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentEducationOrganizationAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentEducationOrganizationAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association indicates any relationship between a student and an education organization other than how the state views enrollment. Enrollment relationship semantics are covered by StudentSchoolAssociation.', 'schema', 'edfi', 'table', 'StudentEducationOrganizationAssociation'
go

/* 
 * TABLE: [edfi].[StudentElectronicMail] 
 */

CREATE TABLE [edfi].[StudentElectronicMail](
    [StudentUSI]                    int              NOT NULL,
    [ElectronicMailTypeId]          int              NOT NULL,
    [ElectronicMailAddress]         nvarchar(128)    NOT NULL,
    [PrimaryEmailAddressIndicator]  bit              NULL,
    [CreateDate]                    datetime         CONSTRAINT [StudentElectronicMail_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentElectronicMail] PRIMARY KEY CLUSTERED ([StudentUSI], [ElectronicMailTypeId])
)
go



IF OBJECT_ID('edfi.StudentElectronicMail') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentElectronicMail >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentElectronicMail >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentElectronicMail', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentElectronicMail', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentElectronicMail', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentElectronicMail', 'column', 'ElectronicMailTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentElectronicMail', 'column', 'ElectronicMailTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for ElectronicMail', 'schema', 'edfi', 'table', 'StudentElectronicMail', 'column', 'ElectronicMailTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentElectronicMail', 'column', 'ElectronicMailAddress'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentElectronicMail', 'column', 'ElectronicMailAddress'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The electronic mail (e-mail) address listed for an individual or organization.', 'schema', 'edfi', 'table', 'StudentElectronicMail', 'column', 'ElectronicMailAddress'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentElectronicMail', 'column', 'PrimaryEmailAddressIndicator'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentElectronicMail', 'column', 'PrimaryEmailAddressIndicator'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.', 'schema', 'edfi', 'table', 'StudentElectronicMail', 'column', 'PrimaryEmailAddressIndicator'
go

/* 
 * TABLE: [edfi].[StudentGradebookEntry] 
 */

CREATE TABLE [edfi].[StudentGradebookEntry](
    [StudentUSI]                   int                 NOT NULL,
    [ClassroomIdentificationCode]  nvarchar(20)        NOT NULL,
    [SchoolId]                     int                 NOT NULL,
    [ClassPeriodName]              nvarchar(20)        NOT NULL,
    [LocalCourseCode]              nvarchar(60)        NOT NULL,
    [SchoolYear]                   smallint            NOT NULL,
    [TermDescriptorId]             int                 NOT NULL,
    [UniqueSectionCode]            nvarchar(255)       NOT NULL,
    [SequenceOfCourse]             int                 NOT NULL,
    [BeginDate]                    date                NOT NULL,
    [GradebookEntryTitle]          nvarchar(60)        NOT NULL,
    [DateAssigned]                 date                NOT NULL,
    [DateFulfilled]                date                NULL,
    [LetterGradeEarned]            nvarchar(20)        NULL,
    [NumericGradeEarned]           decimal(9, 2)       NULL,
    [CompetencyLevelDescriptorId]  int                 NULL,
    [DiagnosticStatement]          nvarchar(1024)      NULL,
    [Id]                           uniqueidentifier    CONSTRAINT [StudentGradebookEntry_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]             datetime            CONSTRAINT [StudentGradebookEntry_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                   datetime            CONSTRAINT [StudentGradebookEntry_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentGradebookEntry] PRIMARY KEY CLUSTERED ([StudentUSI], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [BeginDate], [GradebookEntryTitle], [DateAssigned])
)
go



IF OBJECT_ID('edfi.StudentGradebookEntry') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentGradebookEntry >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentGradebookEntry >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the School that identifies the course offering provided for the instruction of students.', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors that are assigned.', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a Section is part of a sequence of parts for a course, the number of the sequence.', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day and year of the student''''s entry or assignment to the section.  If blank, default is the start date of the first grading period.  NEDM: EntryDate', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'GradebookEntryTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'GradebookEntryTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name or title of the activity to be recorded in the gradebook entry.', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'GradebookEntryTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'DateAssigned'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'DateAssigned'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the assignment, homework, or assessment was assigned or executed.', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'DateAssigned'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'DateFulfilled'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'DateFulfilled'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date an assignment was turned in or the date of an assessment.', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'DateFulfilled'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'LetterGradeEarned'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'LetterGradeEarned'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'LetterGradeEarned'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'NumericGradeEarned'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'NumericGradeEarned'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'NumericGradeEarned'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'CompetencyLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'CompetencyLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The competency level assessed for the student for the referenced learning objective.', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'CompetencyLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'DiagnosticStatement'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'DiagnosticStatement'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A statement provided by the teacher that provides information in addition to the grade or assessment score.', 'schema', 'edfi', 'table', 'StudentGradebookEntry', 'column', 'DiagnosticStatement'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentGradebookEntry'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity holds a student''s grade or competency level for a gradebook entry.', 'schema', 'edfi', 'table', 'StudentGradebookEntry'
go

/* 
 * TABLE: [edfi].[StudentIdentificationCode] 
 */

CREATE TABLE [edfi].[StudentIdentificationCode](
    [StudentUSI]                               int             NOT NULL,
    [AssigningOrganizationIdentificationCode]  nvarchar(60)    NOT NULL,
    [StudentIdentificationSystemDescriptorId]  int             NOT NULL,
    [IdentificationCode]                       nvarchar(60)    NOT NULL,
    [CreateDate]                               datetime        CONSTRAINT [StudentIdentificationCode_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentIdentificationCode] PRIMARY KEY CLUSTERED ([StudentUSI], [AssigningOrganizationIdentificationCode], [StudentIdentificationSystemDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentIdentificationCode') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentIdentificationCode >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentIdentificationCode >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationCode', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationCode', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentIdentificationCode', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The organization code or name assigning the StudentIdentificationCode.', 'schema', 'edfi', 'table', 'StudentIdentificationCode', 'column', 'AssigningOrganizationIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationCode', 'column', 'StudentIdentificationSystemDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationCode', 'column', 'StudentIdentificationSystemDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentIdentificationCode', 'column', 'StudentIdentificationSystemDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationCode', 'column', 'IdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationCode', 'column', 'IdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', 'schema', 'edfi', 'table', 'StudentIdentificationCode', 'column', 'IdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationCode', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to a student.', 'schema', 'edfi', 'table', 'StudentIdentificationCode'
go

/* 
 * TABLE: [edfi].[StudentIdentificationDocument] 
 */

CREATE TABLE [edfi].[StudentIdentificationDocument](
    [PersonalInformationVerificationTypeId]  int              NOT NULL,
    [IdentificationDocumentUseTypeId]        int              NOT NULL,
    [StudentUSI]                             int              NOT NULL,
    [DocumentTitle]                          nvarchar(60)     NULL,
    [DocumentExpirationDate]                 date             NULL,
    [IssuerDocumentIdentificationCode]       nvarchar(60)     NULL,
    [IssuerName]                             nvarchar(150)    NULL,
    [IssuerCountryDescriptorId]              int              NULL,
    [CreateDate]                             datetime         CONSTRAINT [StudentIdentificationDocument_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentIdentificationDocument] PRIMARY KEY CLUSTERED ([PersonalInformationVerificationTypeId], [IdentificationDocumentUseTypeId], [StudentUSI])
)
go



IF OBJECT_ID('edfi.StudentIdentificationDocument') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentIdentificationDocument >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentIdentificationDocument >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'PersonalInformationVerificationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'PersonalInformationVerificationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for PersonalInformationVerification', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'PersonalInformationVerificationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'IdentificationDocumentUseTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'IdentificationDocumentUseTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'IdentificationDocumentUseTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'DocumentTitle'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'DocumentTitle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The title of the document given by the issuer.', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'DocumentTitle'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'DocumentExpirationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'DocumentExpirationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The day when the document  expires, if null then never expires.', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'DocumentExpirationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'IssuerDocumentIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'IssuerDocumentIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The unique identifier on the issuer''s identification system.', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'IssuerDocumentIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'IssuerName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'IssuerName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Name of the entity or institution that issued the document.', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'IssuerName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'IssuerCountryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'IssuerCountryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', 'column', 'IssuerCountryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationDocument'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Represents the valid document that a person uses for identification.', 'schema', 'edfi', 'table', 'StudentIdentificationDocument'
go

/* 
 * TABLE: [edfi].[StudentIdentificationSystemDescriptor] 
 */

CREATE TABLE [edfi].[StudentIdentificationSystemDescriptor](
    [StudentIdentificationSystemDescriptorId]  int    NOT NULL,
    [StudentIdentificationSystemTypeId]        int    NULL,
    CONSTRAINT [PK_StudentIdentificationSystemDescriptor] PRIMARY KEY CLUSTERED ([StudentIdentificationSystemDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentIdentificationSystemDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentIdentificationSystemDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentIdentificationSystemDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemDescriptor', 'column', 'StudentIdentificationSystemDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemDescriptor', 'column', 'StudentIdentificationSystemDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentIdentificationSystemDescriptor', 'column', 'StudentIdentificationSystemDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemDescriptor', 'column', 'StudentIdentificationSystemTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemDescriptor', 'column', 'StudentIdentificationSystemTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for StudentIdentificationSystem', 'schema', 'edfi', 'table', 'StudentIdentificationSystemDescriptor', 'column', 'StudentIdentificationSystemTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the originating record system and code that is used for record-keeping purposes of the student.', 'schema', 'edfi', 'table', 'StudentIdentificationSystemDescriptor'
go

/* 
 * TABLE: [edfi].[StudentIdentificationSystemType] 
 */

CREATE TABLE [edfi].[StudentIdentificationSystemType](
    [StudentIdentificationSystemTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                          nvarchar(50)        NOT NULL,
    [Description]                        nvarchar(1024)      NOT NULL,
    [ShortDescription]                   nvarchar(450)       NOT NULL,
    [Id]                                 uniqueidentifier    CONSTRAINT [StudentIdentificationSystemType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                   datetime            CONSTRAINT [StudentIdentificationSystemType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                         datetime            CONSTRAINT [StudentIdentificationSystemType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentIdentificationSystemType] PRIMARY KEY CLUSTERED ([StudentIdentificationSystemTypeId])
)
go



IF OBJECT_ID('edfi.StudentIdentificationSystemType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentIdentificationSystemType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentIdentificationSystemType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType', 'column', 'StudentIdentificationSystemTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType', 'column', 'StudentIdentificationSystemTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for StudentIdentificationSystem', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType', 'column', 'StudentIdentificationSystemTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for StudentIdentificationSystem type.', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the student identification system type.', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to a student.', 'schema', 'edfi', 'table', 'StudentIdentificationSystemType'
go

/* 
 * TABLE: [edfi].[StudentIndicator] 
 */

CREATE TABLE [edfi].[StudentIndicator](
    [StudentUSI]      int             NOT NULL,
    [IndicatorName]   nvarchar(60)    NOT NULL,
    [Indicator]       nvarchar(35)    NOT NULL,
    [IndicatorGroup]  nvarchar(60)    NULL,
    [BeginDate]       datetime        NULL,
    [EndDate]         datetime        NULL,
    [DesignatedBy]    nvarchar(60)    NULL,
    [CreateDate]      datetime        CONSTRAINT [StudentIndicator_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentIndicator] PRIMARY KEY CLUSTERED ([StudentUSI], [IndicatorName])
)
go



IF OBJECT_ID('edfi.StudentIndicator') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentIndicator >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentIndicator >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'IndicatorName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'IndicatorName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name of the Indicator, indicator group, or metric computed for the student (e.g., at risk) to influence more effective education or direct specific interventions.', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'IndicatorName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'Indicator'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'Indicator'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator or metric computed for the student (e.g., at risk) to influence more effective education or direct specific interventions.', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'Indicator'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'IndicatorGroup'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'IndicatorGroup'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name for a group of indicators.', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'IndicatorGroup'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date when the indicator was assigned or computed.', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the indicator or metric was sunset or removed.', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'DesignatedBy'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'DesignatedBy'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The person, organization, or department that made a student designation.', 'schema', 'edfi', 'table', 'StudentIndicator', 'column', 'DesignatedBy'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentIndicator'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indicator or metric computed for the student (e.g., at risk) to influence more effective education or direct specific interventions.', 'schema', 'edfi', 'table', 'StudentIndicator'
go

/* 
 * TABLE: [edfi].[StudentInternationalAddress] 
 */

CREATE TABLE [edfi].[StudentInternationalAddress](
    [StudentUSI]           int              NOT NULL,
    [AddressTypeId]        int              NOT NULL,
    [AddressLine1]         nvarchar(150)    NOT NULL,
    [AddressLine2]         nvarchar(150)    NULL,
    [AddressLine3]         nvarchar(150)    NULL,
    [AddressLine4]         nvarchar(150)    NULL,
    [Latitude]             nvarchar(20)     NULL,
    [Longitude]            nvarchar(20)     NULL,
    [BeginDate]            date             NULL,
    [EndDate]              date             NULL,
    [CountryDescriptorId]  int              NOT NULL,
    [CreateDate]           datetime         CONSTRAINT [StudentInternationalAddress_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentInternationalAddress] PRIMARY KEY CLUSTERED ([StudentUSI], [AddressTypeId])
)
go



IF OBJECT_ID('edfi.StudentInternationalAddress') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentInternationalAddress >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentInternationalAddress >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Address', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressLine1'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressLine1'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The first line of the address.', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressLine1'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressLine2'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressLine2'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The second line of the address.', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressLine2'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressLine3'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressLine3'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The third line of the address.', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressLine3'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressLine4'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressLine4'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The fourth line of the address.', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'AddressLine4'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'Latitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'Latitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic latitude of the physical address.', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'Latitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'Longitude'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'Longitude'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The geographic longitude of the physical address.', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'Longitude'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The first date the address is valid. For physical addresses, the date the person moved to that address.', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'CountryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'CountryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentInternationalAddress', 'column', 'CountryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInternationalAddress'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The set of elements that describes an address, including the street address and country for international students.', 'schema', 'edfi', 'table', 'StudentInternationalAddress'
go

/* 
 * TABLE: [edfi].[StudentInterventionAssociation] 
 */

CREATE TABLE [edfi].[StudentInterventionAssociation](
    [StudentUSI]                      int                 NOT NULL,
    [InterventionIdentificationCode]  nvarchar(60)        NOT NULL,
    [EducationOrganizationId]         int                 NOT NULL,
    [CohortEducationOrganizationId]   int                 NULL,
    [CohortIdentifier]                nvarchar(20)        NULL,
    [DiagnosticStatement]             nvarchar(1024)      NULL,
    [Id]                              uniqueidentifier    CONSTRAINT [StudentInterventionAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                datetime            CONSTRAINT [StudentInterventionAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                      datetime            CONSTRAINT [StudentInterventionAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentInterventionAssociation] PRIMARY KEY CLUSTERED ([StudentUSI], [InterventionIdentificationCode], [EducationOrganizationId])
)
go



IF OBJECT_ID('edfi.StudentInterventionAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentInterventionAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentInterventionAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'InterventionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'InterventionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'InterventionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'CohortEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'CohortEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'CohortEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'CohortIdentifier'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'CohortIdentifier'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name or ID for the cohort.', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'CohortIdentifier'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'DiagnosticStatement'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'DiagnosticStatement'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A statement provided by the teacher that provides information in addition to the grade or assessment score.', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', 'column', 'DiagnosticStatement'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association indicates the students participating in an intervention.', 'schema', 'edfi', 'table', 'StudentInterventionAssociation'
go
/* 
 * TABLE: [edfi].[StudentInterventionAssociationInterventionEffectiveness] 
 */

CREATE TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness](
    [StudentUSI]                             int             NOT NULL,
    [InterventionIdentificationCode]         nvarchar(60)    NOT NULL,
    [EducationOrganizationId]                int             NOT NULL,
    [DiagnosisDescriptorId]                  int             NOT NULL,
    [PopulationServedTypeId]                 int             NOT NULL,
    [GradeLevelDescriptorId]                 int             NOT NULL,
    [ImprovementIndex]                       int             NULL,
    [InterventionEffectivenessRatingTypeId]  int             NOT NULL,
    [CreateDate]                             datetime        CONSTRAINT [StudentInterventionAssociationInterventionEffectiveness_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentInterventionAssociationInterventionEffectiveness] PRIMARY KEY CLUSTERED ([StudentUSI], [InterventionIdentificationCode], [EducationOrganizationId], [DiagnosisDescriptorId], [PopulationServedTypeId], [GradeLevelDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentInterventionAssociationInterventionEffectiveness') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentInterventionAssociationInterventionEffectiveness >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentInterventionAssociationInterventionEffectiveness >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'InterventionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'InterventionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'InterventionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'DiagnosisDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'DiagnosisDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'DiagnosisDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'PopulationServedTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'PopulationServedTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for PopulationServed', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'PopulationServedTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'GradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'GradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for GradeLevel', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'GradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'ImprovementIndex'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'ImprovementIndex'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Along a percentile distribution of students, the improvement index represents the change in an average student''s percentile rank that is considered to be due to the intervention.', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'ImprovementIndex'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'InterventionEffectivenessRatingTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'InterventionEffectivenessRatingTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentInterventionAssociationInterventionEffectiveness', 'column', 'InterventionEffectivenessRatingTypeId'
go

/* 
 * TABLE: [edfi].[StudentInterventionAttendanceEvent] 
 */

CREATE TABLE [edfi].[StudentInterventionAttendanceEvent](
    [StudentUSI]                           int                 NOT NULL,
    [InterventionIdentificationCode]       nvarchar(60)        NOT NULL,
    [EducationOrganizationId]              int                 NOT NULL,
    [EventDate]                            date                NOT NULL,
    [AttendanceEventReason]                nvarchar(40)        NULL,
    [EducationalEnvironmentTypeId]         int                 NULL,
    [AttendanceEventCategoryDescriptorId]  int                 NOT NULL,
    [Id]                                   uniqueidentifier    CONSTRAINT [StudentInterventionAttendanceEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                     datetime            CONSTRAINT [StudentInterventionAttendanceEvent_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                           datetime            CONSTRAINT [StudentInterventionAttendanceEvent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentInterventionAttendanceEvent] PRIMARY KEY CLUSTERED ([StudentUSI], [InterventionIdentificationCode], [EducationOrganizationId], [EventDate], [AttendanceEventCategoryDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentInterventionAttendanceEvent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentInterventionAttendanceEvent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentInterventionAttendanceEvent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'InterventionIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'InterventionIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to an intervention.', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'InterventionIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'EventDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'EventDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Date for this attendance event.', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'EventDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'AttendanceEventReason'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'AttendanceEventReason'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The reason for the absence or tardy.', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'AttendanceEventReason'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'EducationalEnvironmentTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'EducationalEnvironmentTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for EducationalEnvironment', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'EducationalEnvironmentTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'AttendanceEventCategoryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'AttendanceEventCategoryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AttendanceEventCategoryType', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', 'column', 'AttendanceEventCategoryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This event entity represents the recording of whether a student is in attendance for an intervention service.', 'schema', 'edfi', 'table', 'StudentInterventionAttendanceEvent'
go

/* 
 * TABLE: [edfi].[StudentLanguage] 
 */

CREATE TABLE [edfi].[StudentLanguage](
    [StudentUSI]            int         NOT NULL,
    [LanguageDescriptorId]  int         NOT NULL,
    [CreateDate]            datetime    CONSTRAINT [StudentLanguage_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentLanguages] PRIMARY KEY CLUSTERED ([StudentUSI], [LanguageDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentLanguage') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentLanguage >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentLanguage >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLanguage', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLanguage', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentLanguage', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLanguage', 'column', 'LanguageDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLanguage', 'column', 'LanguageDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentLanguage', 'column', 'LanguageDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLanguage', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLanguage'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Language(s) the individual uses to communicate.', 'schema', 'edfi', 'table', 'StudentLanguage'
go

/* 
 * TABLE: [edfi].[StudentLanguageUse] 
 */

CREATE TABLE [edfi].[StudentLanguageUse](
    [StudentUSI]            int         NOT NULL,
    [LanguageDescriptorId]  int         NOT NULL,
    [LanguageUseTypeId]     int         NOT NULL,
    [CreateDate]            datetime    CONSTRAINT [StudentLanguageUse_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentLanguageUse] PRIMARY KEY CLUSTERED ([StudentUSI], [LanguageDescriptorId], [LanguageUseTypeId])
)
go



IF OBJECT_ID('edfi.StudentLanguageUse') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentLanguageUse >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentLanguageUse >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLanguageUse', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLanguageUse', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentLanguageUse', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLanguageUse', 'column', 'LanguageDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLanguageUse', 'column', 'LanguageDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentLanguageUse', 'column', 'LanguageDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLanguageUse', 'column', 'LanguageUseTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLanguageUse', 'column', 'LanguageUseTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentLanguageUse', 'column', 'LanguageUseTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLanguageUse', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLanguageUse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).', 'schema', 'edfi', 'table', 'StudentLanguageUse'
go

/* 
 * TABLE: [edfi].[StudentLearningObjective] 
 */

CREATE TABLE [edfi].[StudentLearningObjective](
    [StudentUSI]                          int                 NOT NULL,
    [Objective]                           nvarchar(60)        NOT NULL,
    [AcademicSubjectDescriptorId]         int                 NOT NULL,
    [ObjectiveGradeLevelDescriptorId]     int                 NOT NULL,
    [GradingPeriodDescriptorId]           int                 NOT NULL,
    [GradingPeriodBeginDate]              date                NOT NULL,
    [SchoolId]                            int                 NOT NULL,
    [BeginDate]                           date                NULL,
    [StudentSectionAssociationBeginDate]  date                NULL,
    [CompetencyLevelDescriptorId]         int                 NOT NULL,
    [ClassPeriodName]                     nvarchar(20)        NULL,
    [ClassroomIdentificationCode]         nvarchar(20)        NULL,
    [ProgramEducationOrganizationId]      int                 NULL,
    [ProgramTypeId]                       int                 NULL,
    [ProgramName]                         nvarchar(60)        NULL,
    [EducationOrganizationId]             int                 NULL,
    [LocalCourseCode]                     nvarchar(60)        NULL,
    [TermDescriptorId]                    int                 NULL,
    [SchoolYear]                          smallint            NULL,
    [UniqueSectionCode]                   nvarchar(255)       NULL,
    [SequenceOfCourse]                    int                 NULL,
    [DiagnosticStatement]                 nvarchar(1024)      NULL,
    [Id]                                  uniqueidentifier    CONSTRAINT [StudentLearningObjective_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                    datetime            CONSTRAINT [StudentLearningObjective_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                          datetime            CONSTRAINT [StudentLearningObjective_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentLearningObjective] PRIMARY KEY CLUSTERED ([StudentUSI], [Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
)
go



IF OBJECT_ID('edfi.StudentLearningObjective') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentLearningObjective >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentLearningObjective >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'Objective'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'Objective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The designated title of the learning objective.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'Objective'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'AcademicSubjectDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'AcademicSubjectDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'AcademicSubjectDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade level for which the learning objective is targeted,', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ObjectiveGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'GradingPeriodDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'GradingPeriodDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'GradingPeriodDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'GradingPeriodBeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'GradingPeriodBeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the first day of the GradingPeriod.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'GradingPeriodBeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day and year of the student''s entry or assignment to the section.  If blank, default is the start date of the first grading period.NEDM: EntryDate', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'StudentSectionAssociationBeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'StudentSectionAssociationBeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the student''s entry or assignment to the Section.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'StudentSectionAssociationBeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'CompetencyLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'CompetencyLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The competency level assessed for the student for the referenced learning objective.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'CompetencyLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period or AB schedules).', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ProgramEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ProgramEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ProgramEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the School that identifies the course offering provided for the instruction of students.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors that are assigned.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a Section is part of a sequence of parts for a course, the number of the sequence.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'DiagnosticStatement'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'DiagnosticStatement'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A statement provided by the teacher that provides information in addition to the grade or assessment score.', 'schema', 'edfi', 'table', 'StudentLearningObjective', 'column', 'DiagnosticStatement'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningObjective'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This entity represents the competency assessed or evaluated for the student against a specific LearningObjective.', 'schema', 'edfi', 'table', 'StudentLearningObjective'
go

/* 
 * TABLE: [edfi].[StudentLearningStyle] 
 */

CREATE TABLE [edfi].[StudentLearningStyle](
    [StudentUSI]        int              NOT NULL,
    [VisualLearning]    decimal(5, 4)    NOT NULL,
    [AuditoryLearning]  decimal(5, 4)    NOT NULL,
    [TactileLearning]   decimal(5, 4)    NOT NULL,
    [CreateDate]        datetime         CONSTRAINT [StudentLearningStyle_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentLearningStyle] PRIMARY KEY CLUSTERED ([StudentUSI])
)
go



IF OBJECT_ID('edfi.StudentLearningStyle') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentLearningStyle >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentLearningStyle >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningStyle', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningStyle', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentLearningStyle', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningStyle', 'column', 'VisualLearning'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningStyle', 'column', 'VisualLearning'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The student''s relative preference expressed as a percent to visual learning.', 'schema', 'edfi', 'table', 'StudentLearningStyle', 'column', 'VisualLearning'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningStyle', 'column', 'AuditoryLearning'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningStyle', 'column', 'AuditoryLearning'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The student''s relative preference expressed as a percent to auditory learning.', 'schema', 'edfi', 'table', 'StudentLearningStyle', 'column', 'AuditoryLearning'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningStyle', 'column', 'TactileLearning'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningStyle', 'column', 'TactileLearning'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The student''s relative preference expressed as a percent to kinesthetic or tactile learning.', 'schema', 'edfi', 'table', 'StudentLearningStyle', 'column', 'TactileLearning'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentLearningStyle', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentLearningStyle'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The student''s relative preference to visual, auditory and tactile learning expressed as percentages.', 'schema', 'edfi', 'table', 'StudentLearningStyle'
go

/* 
 * TABLE: [edfi].[StudentMigrantEducationProgramAssociation] 
 */

CREATE TABLE [edfi].[StudentMigrantEducationProgramAssociation](
    [StudentUSI]                                int             NOT NULL,
    [EducationOrganizationId]                   int             NOT NULL,
    [ProgramTypeId]                             int             NOT NULL,
    [ProgramName]                               nvarchar(60)    NOT NULL,
    [ProgramEducationOrganizationId]            int             NOT NULL,
    [BeginDate]                                 date            NOT NULL,
    [PriorityForServices]                       bit             NOT NULL,
    [LastQualifyingMove]                        date            NOT NULL,
    [ContinuationOfServicesReasonDescriptorId]  int             NULL,
    [USInitialEntry]                            date            NULL,
    [USMostRecentEntry]                         date            NULL,
    [USInitialSchoolEntry]                      date            NULL,
    CONSTRAINT [PK_StudentMigrantEducationProgramAssociation] PRIMARY KEY CLUSTERED ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
)
go



IF OBJECT_ID('edfi.StudentMigrantEducationProgramAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentMigrantEducationProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentMigrantEducationProgramAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'ProgramEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'ProgramEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'ProgramEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the Student first received services.', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'PriorityForServices'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'PriorityForServices'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Report migratory children who are classified as having "priority for services" because they are failing, or most at risk of failing to meet the State''s challenging State academic content standards and challenging State student academic achievement standards, and their education has been interrupted during the regular school year.', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'PriorityForServices'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'LastQualifyingMove'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'LastQualifyingMove'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Date the last qualifying move occurred; used to compute MEP status.', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'LastQualifyingMove'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'ContinuationOfServicesReasonDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'ContinuationOfServicesReasonDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'ContinuationOfServicesReasonDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'USInitialEntry'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'USInitialEntry'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the Student first entered the U.S.', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'USInitialEntry'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'USMostRecentEntry'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'USMostRecentEntry'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year of the Student''s most recent entry into the U.S.', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'USMostRecentEntry'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'USInitialSchoolEntry'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'USInitialSchoolEntry'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the Student first entered a U.S. school.', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', 'column', 'USInitialSchoolEntry'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association represents the migrant education program(s) that a student participates in or receives services from. The association is an extension of the StudentProgramAssociation with added elements particular to migrant education programs.', 'schema', 'edfi', 'table', 'StudentMigrantEducationProgramAssociation'
go

/* 
 * TABLE: [edfi].[StudentOtherName] 
 */

CREATE TABLE [edfi].[StudentOtherName](
    [StudentUSI]            int             NOT NULL,
    [OtherNameTypeId]       int             NOT NULL,
    [PersonalTitlePrefix]   nvarchar(30)    NULL,
    [FirstName]             nvarchar(75)    NOT NULL,
    [MiddleName]            nvarchar(75)    NULL,
    [LastSurname]           nvarchar(75)    NOT NULL,
    [GenerationCodeSuffix]  nvarchar(10)    NULL,
    [CreateDate]            datetime        CONSTRAINT [StudentOtherName_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentOtherName] PRIMARY KEY CLUSTERED ([StudentUSI], [OtherNameTypeId])
)
go



IF OBJECT_ID('edfi.StudentOtherName') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentOtherName >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentOtherName >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'OtherNameTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'OtherNameTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for OtherName', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'OtherNameTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'PersonalTitlePrefix'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'PersonalTitlePrefix'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A prefix used to denote the title, degree, position, or seniority of the person.', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'PersonalTitlePrefix'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'FirstName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'FirstName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'FirstName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'MiddleName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'MiddleName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'MiddleName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'LastSurname'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'LastSurname'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The name borne in common by members of a family.', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'LastSurname'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'GenerationCodeSuffix'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'GenerationCodeSuffix'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', 'schema', 'edfi', 'table', 'StudentOtherName', 'column', 'GenerationCodeSuffix'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentOtherName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Other names (e.g., alias, nickname, previous legal name) associated with a person.', 'schema', 'edfi', 'table', 'StudentOtherName'
go
/* 
 * TABLE: [edfi].[StudentParentAssociation] 
 */

CREATE TABLE [edfi].[StudentParentAssociation](
    [StudentUSI]              int                 NOT NULL,
    [ParentUSI]               int                 NOT NULL,
    [RelationTypeId]          int                 NULL,
    [PrimaryContactStatus]    bit                 NULL,
    [LivesWith]               bit                 NULL,
    [EmergencyContactStatus]  bit                 NULL,
    [ContactPriority]         int                 NULL,
    [ContactRestrictions]     nvarchar(250)       NULL,
    [Id]                      uniqueidentifier    CONSTRAINT [StudentParentAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]        datetime            CONSTRAINT [StudentParentAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]              datetime            CONSTRAINT [StudentParentAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentParentAssociation] PRIMARY KEY CLUSTERED ([StudentUSI], [ParentUSI])
)
go

IF OBJECT_ID('edfi.StudentParentAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentParentAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentParentAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'ParentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'ParentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Parent Identity Column', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'ParentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'RelationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'RelationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The nature of an individual''''s relationship to a student; for example:  Father  Mother  Step Father  Step Mother  Foster Father  Foster Mother  Guardian  ...  NEDM: Relationship to Student', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'RelationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'PrimaryContactStatus'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'PrimaryContactStatus'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator of whether the person is a primary parental contact for the Student.', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'PrimaryContactStatus'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'LivesWith'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'LivesWith'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator of whether the Student lives with the associated parent.', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'LivesWith'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'EmergencyContactStatus'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'EmergencyContactStatus'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator of whether the person is a designated emergency contact for the Student.', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'EmergencyContactStatus'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'ContactPriority'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'ContactPriority'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The numeric order of the preferred sequence or priority of contact.', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'ContactPriority'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'ContactRestrictions'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'ContactRestrictions'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).', 'schema', 'edfi', 'table', 'StudentParentAssociation', 'column', 'ContactRestrictions'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentParentAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association relates students to their parents, guardians, or caretakers.', 'schema', 'edfi', 'table', 'StudentParentAssociation'
go
/* 
 * TABLE: [edfi].[StudentParticipationCodeType] 
 */

CREATE TABLE [edfi].[StudentParticipationCodeType](
    [StudentParticipationCodeTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                       nvarchar(50)        NOT NULL,
    [Description]                     nvarchar(1024)      NOT NULL,
    [ShortDescription]                nvarchar(450)       NOT NULL,
    [Id]                              uniqueidentifier    CONSTRAINT [StudentParticipationCodeType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                datetime            CONSTRAINT [StudentParticipationCodeType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                      datetime            CONSTRAINT [StudentParticipationCodeType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentParticipationCodeType] PRIMARY KEY CLUSTERED ([StudentParticipationCodeTypeId])
)
go



IF OBJECT_ID('edfi.StudentParticipationCodeType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentParticipationCodeType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentParticipationCodeType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentParticipationCodeType', 'column', 'StudentParticipationCodeTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentParticipationCodeType', 'column', 'StudentParticipationCodeTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for StudentParticipationCode', 'schema', 'edfi', 'table', 'StudentParticipationCodeType', 'column', 'StudentParticipationCodeTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentParticipationCodeType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentParticipationCodeType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for StudentParticipationCode type.', 'schema', 'edfi', 'table', 'StudentParticipationCodeType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentParticipationCodeType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentParticipationCodeType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'StudentParticipationCodeType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentParticipationCodeType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentParticipationCodeType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the student participation code type.', 'schema', 'edfi', 'table', 'StudentParticipationCodeType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentParticipationCodeType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentParticipationCodeType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The role or type of participation of a student in a discipline incident; for example: Victim, Perpetrator, Witness, Reporter.', 'schema', 'edfi', 'table', 'StudentParticipationCodeType'
go

/* 
 * TABLE: [edfi].[StudentProgramAssociation] 
 */

CREATE TABLE [edfi].[StudentProgramAssociation](
    [StudentUSI]                      int                 NOT NULL,
    [EducationOrganizationId]         int                 NOT NULL,
    [ProgramTypeId]                   int                 NOT NULL,
    [ProgramName]                     nvarchar(60)        NOT NULL,
    [ProgramEducationOrganizationId]  int                 NOT NULL,
    [BeginDate]                       date                NOT NULL,
    [EndDate]                         date                NULL,
    [ReasonExitedDescriptorId]        int                 NULL,
    [ServedOutsideOfRegularSession]   bit                 NULL,
    [Id]                              uniqueidentifier    CONSTRAINT [StudentProgramAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                datetime            CONSTRAINT [StudentProgramAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                      datetime            CONSTRAINT [StudentProgramAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentProgramAssociation] PRIMARY KEY CLUSTERED ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
)
go



IF OBJECT_ID('edfi.StudentProgramAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentProgramAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ProgramEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ProgramEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ProgramEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the Student first received services.', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the Student exited the Program or stopped receiving services.', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ReasonExitedDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ReasonExitedDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ReasonExitedDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ServedOutsideOfRegularSession'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ServedOutsideOfRegularSession'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates whether the Student received services during the summer session or between sessions.', 'schema', 'edfi', 'table', 'StudentProgramAssociation', 'column', 'ServedOutsideOfRegularSession'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association represents the Program(s) that a student participates in or is served by.', 'schema', 'edfi', 'table', 'StudentProgramAssociation'
go

/* 
 * TABLE: [edfi].[StudentProgramAssociationService] 
 */

CREATE TABLE [edfi].[StudentProgramAssociationService](
    [StudentUSI]                      int             NOT NULL,
    [EducationOrganizationId]         int             NOT NULL,
    [ProgramTypeId]                   int             NOT NULL,
    [ProgramName]                     nvarchar(60)    NOT NULL,
    [ProgramEducationOrganizationId]  int             NOT NULL,
    [BeginDate]                       date            NOT NULL,
    [ServiceDescriptorId]             int             NOT NULL,
    [PrimaryIndicator]                bit             NULL,
    [ServiceBeginDate]                date            NULL,
    [ServiceEndDate]                  date            NULL,
    [CreateDate]                      datetime        CONSTRAINT [StudentProgramAssociationService_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentProgramAssociationService] PRIMARY KEY CLUSTERED ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate], [ServiceDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentProgramAssociationService') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentProgramAssociationService >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentProgramAssociationService >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ProgramEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ProgramEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ProgramEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the student first received services.  NEDM: Beginning Date', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ServiceDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ServiceDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The ID of the Service Descriptor', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ServiceDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'PrimaryIndicator'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'PrimaryIndicator'
END
exec sys.sp_addextendedproperty 'MS_Description', 'True if service is a primary service.', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'PrimaryIndicator'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ServiceBeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ServiceBeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'First date the Student was in this option for the current school year.', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ServiceBeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ServiceEndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ServiceEndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Last date the Student was in this option for the current school year.', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', 'column', 'ServiceEndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAssociationService'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates the services being provided to the student by the program.', 'schema', 'edfi', 'table', 'StudentProgramAssociationService'
go

/* 
 * TABLE: [edfi].[StudentProgramAttendanceEvent] 
 */

CREATE TABLE [edfi].[StudentProgramAttendanceEvent](
    [StudentUSI]                           int                 NOT NULL,
    [ProgramEducationOrganizationId]       int                 NOT NULL,
    [ProgramTypeId]                        int                 NOT NULL,
    [EventDate]                            date                NOT NULL,
    [AttendanceEventReason]                nvarchar(40)        NULL,
    [AttendanceEventCategoryDescriptorId]  int                 NOT NULL,
    [EducationalEnvironmentTypeId]         int                 NULL,
    [ProgramName]                          nvarchar(60)        NOT NULL,
    [EducationOrganizationId]              int                 NOT NULL,
    [Id]                                   uniqueidentifier    CONSTRAINT [StudentProgramAttendanceEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                     datetime            CONSTRAINT [StudentProgramAttendanceEvent_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                           datetime            CONSTRAINT [StudentProgramAttendanceEvent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentProgramAttendanceEvent] PRIMARY KEY CLUSTERED ([StudentUSI], [ProgramEducationOrganizationId], [ProgramTypeId], [EventDate], [AttendanceEventCategoryDescriptorId], [ProgramName], [EducationOrganizationId])
)
go



IF OBJECT_ID('edfi.StudentProgramAttendanceEvent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentProgramAttendanceEvent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentProgramAttendanceEvent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'ProgramEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'ProgramEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'ProgramEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'EventDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'EventDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Date for this attendance event.', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'EventDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'AttendanceEventReason'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'AttendanceEventReason'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The reason for the absence or tardy.', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'AttendanceEventReason'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'AttendanceEventCategoryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'AttendanceEventCategoryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AttendanceEventCategoryType', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'AttendanceEventCategoryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'EducationalEnvironmentTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'EducationalEnvironmentTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for EducationalEnvironment', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'EducationalEnvironmentTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This event entity represents the recording of whether a student is in attendance to receive or participate in program services.', 'schema', 'edfi', 'table', 'StudentProgramAttendanceEvent'
go

/* 
 * TABLE: [edfi].[StudentProgramParticipation] 
 */

CREATE TABLE [edfi].[StudentProgramParticipation](
    [StudentUSI]     int             NOT NULL,
    [ProgramTypeId]  int             NOT NULL,
    [BeginDate]      datetime        NULL,
    [EndDate]        datetime        NULL,
    [DesignatedBy]   nvarchar(60)    NULL,
    [CreateDate]     datetime        CONSTRAINT [StudentProgramParticipation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentProgramParticipations] PRIMARY KEY CLUSTERED ([StudentUSI], [ProgramTypeId])
)
go



IF OBJECT_ID('edfi.StudentProgramParticipation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentProgramParticipation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentProgramParticipation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The program the student is associated with or receiving services from.', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the Student was associated with the Program or service.', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date the Program participation ended.', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'DesignatedBy'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'DesignatedBy'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The person, organization, or department that made a student designation.', 'schema', 'edfi', 'table', 'StudentProgramParticipation', 'column', 'DesignatedBy'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key programs the student is participating in or receives services from.', 'schema', 'edfi', 'table', 'StudentProgramParticipation'
go

/* 
 * TABLE: [edfi].[StudentProgramParticipationProgramCharacteristic] 
 */

CREATE TABLE [edfi].[StudentProgramParticipationProgramCharacteristic](
    [StudentUSI]                         int         NOT NULL,
    [ProgramTypeId]                      int         NOT NULL,
    [ProgramCharacteristicDescriptorId]  int         NOT NULL,
    [CreateDate]                         datetime    CONSTRAINT [StudentProgramParticipationProgramCharacteristic_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentProgramParticipationProgramCharacteristic] PRIMARY KEY CLUSTERED ([StudentUSI], [ProgramTypeId], [ProgramCharacteristicDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentProgramParticipationProgramCharacteristic') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentProgramParticipationProgramCharacteristic >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentProgramParticipationProgramCharacteristic >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipationProgramCharacteristic', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipationProgramCharacteristic', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentProgramParticipationProgramCharacteristic', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipationProgramCharacteristic', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipationProgramCharacteristic', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The program the student is associated with or receiving services from.', 'schema', 'edfi', 'table', 'StudentProgramParticipationProgramCharacteristic', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipationProgramCharacteristic', 'column', 'ProgramCharacteristicDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipationProgramCharacteristic', 'column', 'ProgramCharacteristicDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentProgramParticipationProgramCharacteristic', 'column', 'ProgramCharacteristicDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipationProgramCharacteristic', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentProgramParticipationProgramCharacteristic'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Reflects important characteristics of the Program that a Student participates in, such as categories or particular indications.', 'schema', 'edfi', 'table', 'StudentProgramParticipationProgramCharacteristic'
go

/* 
 * TABLE: [edfi].[StudentRace] 
 */

CREATE TABLE [edfi].[StudentRace](
    [StudentUSI]  int         NOT NULL,
    [RaceTypeId]  int         NOT NULL,
    [CreateDate]  datetime    CONSTRAINT [StudentRace_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentRace] PRIMARY KEY CLUSTERED ([StudentUSI], [RaceTypeId])
)
go



IF OBJECT_ID('edfi.StudentRace') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentRace >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentRace >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentRace', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentRace', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentRace', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentRace', 'column', 'RaceTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentRace', 'column', 'RaceTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Race', 'schema', 'edfi', 'table', 'StudentRace', 'column', 'RaceTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentRace', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentRace'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The general racial category which most clearly reflects the individual''s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.', 'schema', 'edfi', 'table', 'StudentRace'
go

/* 
 * TABLE: [edfi].[StudentSchoolAssociation] 
 */

CREATE TABLE [edfi].[StudentSchoolAssociation](
    [StudentUSI]                      int                 NOT NULL,
    [SchoolId]                        int                 NOT NULL,
    [SchoolYear]                      smallint            NULL,
    [EntryDate]                       date                NOT NULL,
    [EntryGradeLevelDescriptorId]     int                 NOT NULL,
    [EntryGradeLevelReasonTypeId]     int                 NULL,
    [EntryTypeDescriptorId]           int                 NULL,
    [RepeatGradeIndicator]            bit                 NULL,
    [SchoolChoiceTransfer]            bit                 NULL,
    [ExitWithdrawDate]                date                NULL,
    [ExitWithdrawTypeDescriptorId]    int                 NULL,
    [ResidencyStatusDescriptorId]     int                 NULL,
    [PrimarySchool]                   bit                 NULL,
    [EmployedWhileEnrolled]           bit                 NULL,
    [ClassOfSchoolYear]               smallint            NULL,
    [EducationOrganizationId]         int                 NULL,
    [GraduationPlanTypeDescriptorId]  int                 NULL,
    [GraduationSchoolYear]            smallint            NULL,
    [Id]                              uniqueidentifier    CONSTRAINT [StudentSchoolAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                datetime            CONSTRAINT [StudentSchoolAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                      datetime            CONSTRAINT [StudentSchoolAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentSchoolAssociation] PRIMARY KEY CLUSTERED ([StudentUSI], [SchoolId], [EntryDate])
)
go



IF OBJECT_ID('edfi.StudentSchoolAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentSchoolAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentSchoolAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifier for a school year.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EntryDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EntryDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which an individual enters and begins to receive instructional services in a school.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EntryDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EntryGradeLevelDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EntryGradeLevelDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EntryGradeLevelDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EntryGradeLevelReasonTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EntryGradeLevelReasonTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EntryGradeLevelReasonTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EntryTypeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EntryTypeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EntryTypeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'RepeatGradeIndicator'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'RepeatGradeIndicator'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'RepeatGradeIndicator'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'SchoolChoiceTransfer'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'SchoolChoiceTransfer'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'SchoolChoiceTransfer'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'ExitWithdrawDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'ExitWithdrawDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year of the first day after the date of an individual''s last attendance at a school (if known), the day on which an individual graduated, or the date on which it becomes known officially that an individual left school.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'ExitWithdrawDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'ExitWithdrawTypeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'ExitWithdrawTypeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'ExitWithdrawTypeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'ResidencyStatusDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'ResidencyStatusDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'ResidencyStatusDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'PrimarySchool'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'PrimarySchool'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates if a given enrollment record should be considered the primary record for a student. If omitted, the default is true.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'PrimarySchool'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EmployedWhileEnrolled'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EmployedWhileEnrolled'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EmployedWhileEnrolled'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'ClassOfSchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'ClassOfSchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Projected High School graduation year', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'ClassOfSchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'EducationOrganization Identity Column', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'GraduationPlanTypeDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'GraduationPlanTypeDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'GraduationPlanTypeDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'GraduationSchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'GraduationSchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', 'column', 'GraduationSchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association represents the School in which a student is enrolled. The semantics of enrollment may differ slightly by state. Non-enrollment relationships between a student and an education organization may be described using the StudentEducationOrganizationAssociation.', 'schema', 'edfi', 'table', 'StudentSchoolAssociation'
go

/* 
 * TABLE: [edfi].[StudentSchoolAssociationEducationPlan] 
 */

CREATE TABLE [edfi].[StudentSchoolAssociationEducationPlan](
    [StudentUSI]           int         NOT NULL,
    [SchoolId]             int         NOT NULL,
    [EntryDate]            date        NOT NULL,
    [EducationPlanTypeId]  int         NOT NULL,
    [CreateDate]           datetime    CONSTRAINT [StudentSchoolAssociationEducationPlan_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentSchoolAssociationEducationPlans] PRIMARY KEY CLUSTERED ([StudentUSI], [SchoolId], [EntryDate], [EducationPlanTypeId])
)
go



IF OBJECT_ID('edfi.StudentSchoolAssociationEducationPlan') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentSchoolAssociationEducationPlan >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentSchoolAssociationEducationPlan >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan', 'column', 'EntryDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan', 'column', 'EntryDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which an individual enters and begins to receive instructional services in a campus.  NEDM: School Entry Date  NEDM: LEA Entry Date', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan', 'column', 'EntryDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan', 'column', 'EducationPlanTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan', 'column', 'EducationPlanTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of education plan the student is following.', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan', 'column', 'EducationPlanTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates the type of Education Plan(s) the student is following, if appropriate; for example: Special Education IEP or Vocational/CTE, etc.', 'schema', 'edfi', 'table', 'StudentSchoolAssociationEducationPlan'
go

/* 
 * TABLE: [edfi].[StudentSchoolAttendanceEvent] 
 */

CREATE TABLE [edfi].[StudentSchoolAttendanceEvent](
    [StudentUSI]                           int                 NOT NULL,
    [SchoolId]                             int                 NOT NULL,
    [SchoolYear]                           smallint            NOT NULL,
    [EventDate]                            date                NOT NULL,
    [AttendanceEventCategoryDescriptorId]  int                 NOT NULL,
    [TermDescriptorId]                     int                 NOT NULL,
    [AttendanceEventReason]                nvarchar(40)        NULL,
    [EducationalEnvironmentTypeId]         int                 NULL,
    [Id]                                   uniqueidentifier    CONSTRAINT [StudentSchoolAttendanceEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                     datetime            CONSTRAINT [StudentSchoolAttendanceEvent_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                           datetime            CONSTRAINT [StudentSchoolAttendanceEvent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentSchoolAttendanceEvent] PRIMARY KEY CLUSTERED ([StudentUSI], [SchoolId], [SchoolYear], [EventDate], [AttendanceEventCategoryDescriptorId], [TermDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentSchoolAttendanceEvent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentSchoolAttendanceEvent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentSchoolAttendanceEvent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'EventDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'EventDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Date for this attendance event.', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'EventDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'AttendanceEventCategoryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'AttendanceEventCategoryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for AttendanceEventCategoryType', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'AttendanceEventCategoryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'AttendanceEventReason'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'AttendanceEventReason'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The reason for the absence or tardy.', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'AttendanceEventReason'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'EducationalEnvironmentTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'EducationalEnvironmentTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for EducationalEnvironment', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', 'column', 'EducationalEnvironmentTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This event entity represents the recording of whether a student is in attendance for a school day.', 'schema', 'edfi', 'table', 'StudentSchoolAttendanceEvent'
go

/* 
 * TABLE: [edfi].[StudentSectionAssociation] 
 */

CREATE TABLE [edfi].[StudentSectionAssociation](
    [StudentUSI]                       int                 NOT NULL,
    [SchoolId]                         int                 NOT NULL,
    [ClassPeriodName]                  nvarchar(20)        NOT NULL,
    [ClassroomIdentificationCode]      nvarchar(20)        NOT NULL,
    [LocalCourseCode]                  nvarchar(60)        NOT NULL,
    [UniqueSectionCode]                nvarchar(255)       NOT NULL,
    [SequenceOfCourse]                 int                 NOT NULL,
    [SchoolYear]                       smallint            NOT NULL,
    [TermDescriptorId]                 int                 NOT NULL,
    [BeginDate]                        date                NOT NULL,
    [EndDate]                          date                NULL,
    [HomeroomIndicator]                bit                 NULL,
    [RepeatIdentifierTypeId]           int                 NULL,
    [TeacherStudentDataLinkExclusion]  bit                 NULL,
    [Id]                               uniqueidentifier    CONSTRAINT [StudentSectionAssociation_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                 datetime            CONSTRAINT [StudentSectionAssociation_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                       datetime            CONSTRAINT [StudentSectionAssociation_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentSectionAssociation] PRIMARY KEY CLUSTERED ([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
)
go



IF OBJECT_ID('edfi.StudentSectionAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentSectionAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentSectionAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School Identity Column', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period or AB schedules).
=', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the section, that is defined for a campus by the classroom, the subjects taught, and the instructors that are assigned.  NEDM: Unique Course Code', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a section is part of a sequence of parts for a course, the number if the sequence.  If the course has only onle part, the value of this section attribute should be 1.', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the Student''s entry or assignment to the Section.', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'EndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'EndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Month, day, and year of the withdrawal or exit of the Student from the Section.', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'EndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'HomeroomIndicator'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'HomeroomIndicator'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates the Section is the student''s homeroom. Homeroom period may the convention for taking daily attendance.', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'HomeroomIndicator'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'RepeatIdentifierTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'RepeatIdentifierTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication as to whether a student has previously taken a given course.  NEDM: Repeat Identifier  Repeated, counted in grade point average  Repeated, not counted in grade point average  Not repeated  Other', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'RepeatIdentifierTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'TeacherStudentDataLinkExclusion'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'TeacherStudentDataLinkExclusion'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.', 'schema', 'edfi', 'table', 'StudentSectionAssociation', 'column', 'TeacherStudentDataLinkExclusion'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association indicates the course sections to which a student is assigned.', 'schema', 'edfi', 'table', 'StudentSectionAssociation'
go

/* 
 * TABLE: [edfi].[StudentSectionAttendanceEvent] 
 */

CREATE TABLE [edfi].[StudentSectionAttendanceEvent](
    [StudentUSI]                           int                 NOT NULL,
    [ClassroomIdentificationCode]          nvarchar(20)        NOT NULL,
    [SchoolId]                             int                 NOT NULL,
    [ClassPeriodName]                      nvarchar(20)        NOT NULL,
    [LocalCourseCode]                      nvarchar(60)        NOT NULL,
    [SchoolYear]                           smallint            NOT NULL,
    [TermDescriptorId]                     int                 NOT NULL,
    [UniqueSectionCode]                    nvarchar(255)       NOT NULL,
    [SequenceOfCourse]                     int                 NOT NULL,
    [EventDate]                            date                NOT NULL,
    [AttendanceEventCategoryDescriptorId]  int                 NOT NULL,
    [AttendanceEventReason]                nvarchar(40)        NULL,
    [EducationalEnvironmentTypeId]         int                 NULL,
    [Id]                                   uniqueidentifier    CONSTRAINT [StudentSectionAttendanceEvent_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                     datetime            CONSTRAINT [StudentSectionAttendanceEvent_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                           datetime            CONSTRAINT [StudentSectionAttendanceEvent_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentSectionAttendanceEvent] PRIMARY KEY CLUSTERED ([StudentUSI], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [EventDate], [AttendanceEventCategoryDescriptorId])
)
go



IF OBJECT_ID('edfi.StudentSectionAttendanceEvent') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentSectionAttendanceEvent >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentSectionAttendanceEvent >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'ClassroomIdentificationCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'ClassroomIdentificationCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'ClassroomIdentificationCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'SchoolId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'SchoolId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'School identity column', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'SchoolId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'ClassPeriodName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'ClassPeriodName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).   NEDM: Class Period', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'ClassPeriodName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'LocalCourseCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'LocalCourseCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The local code assigned by the LEA or Campus that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'LocalCourseCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'SchoolYear'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'SchoolYear'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The identifier for the school year.', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'SchoolYear'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'UniqueSectionCode'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'UniqueSectionCode'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier for the section, that is defined for a campus by the classroom, the subjects taught, and the instructors that are assigned.  NEDM: Unique Course Code', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'UniqueSectionCode'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'SequenceOfCourse'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'SequenceOfCourse'
END
exec sys.sp_addextendedproperty 'MS_Description', 'When a section is part of a sequence of parts for a course, the number if the sequence.  If the course has only onle part, the value of this section attribute should be 1.', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'SequenceOfCourse'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'EventDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'EventDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Date for this attendance event.', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'EventDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'AttendanceEventCategoryDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'AttendanceEventCategoryDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'AttendanceEventCategoryDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'AttendanceEventReason'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'AttendanceEventReason'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The reason for the absence or tardy.', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'AttendanceEventReason'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'EducationalEnvironmentTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'EducationalEnvironmentTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The setting in which a child receives education and related services.  This is only used in the AttendanceEvent if different from that in the related Section.', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', 'column', 'EducationalEnvironmentTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This event entity represents the recording of whether a student is in attendance for a section.', 'schema', 'edfi', 'table', 'StudentSectionAttendanceEvent'
go

/* 
 * TABLE: [edfi].[StudentSpecialEducationProgramAssociation] 
 */

CREATE TABLE [edfi].[StudentSpecialEducationProgramAssociation](
    [StudentUSI]                           int              NOT NULL,
    [EducationOrganizationId]              int              NOT NULL,
    [ProgramTypeId]                        int              NOT NULL,
    [ProgramName]                          nvarchar(60)     NOT NULL,
    [ProgramEducationOrganizationId]       int              NOT NULL,
    [BeginDate]                            date             NOT NULL,
    [IdeaEligibility]                      bit              NULL,
    [SpecialEducationSettingDescriptorId]  int              NULL,
    [SpecialEducationHoursPerWeek]         decimal(5, 2)    NULL,
    [SchoolHoursPerWeek]                   decimal(5, 2)    NULL,
    [MultiplyDisabled]                     bit              NULL,
    [MedicallyFragile]                     bit              NULL,
    [LastEvaluationDate]                   date             NULL,
    [IEPReviewDate]                        date             NULL,
    [IEPBeginDate]                         date             NULL,
    [IEPEndDate]                           date             NULL,
    CONSTRAINT [PK_StudentSpecialEducationProgramAssociation] PRIMARY KEY CLUSTERED ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
)
go



IF OBJECT_ID('edfi.StudentSpecialEducationProgramAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentSpecialEducationProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentSpecialEducationProgramAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'ProgramEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'ProgramEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'ProgramEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the Student first received services.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'IdeaEligibility'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'IdeaEligibility'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA).', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'IdeaEligibility'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'SpecialEducationSettingDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'SpecialEducationSettingDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'SpecialEducationSettingDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'SpecialEducationHoursPerWeek'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'SpecialEducationHoursPerWeek'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The number of hours per week for special education instruction and therapy.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'SpecialEducationHoursPerWeek'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'SchoolHoursPerWeek'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'SchoolHoursPerWeek'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicate the total number of hours of instructional time per week for the school that the student attends.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'SchoolHoursPerWeek'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'MultiplyDisabled'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'MultiplyDisabled'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates whether the Student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'MultiplyDisabled'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'MedicallyFragile'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'MedicallyFragile'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates whether the Student receiving special education and related services is: 1) in the age range of birth to 22 years, and 2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and 3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and 4) lives with ongoing threat to his or her continued well-being. Aligns with federal requirements.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'MedicallyFragile'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'LastEvaluationDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'LastEvaluationDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date of the last special education evaluation.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'LastEvaluationDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'IEPReviewDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'IEPReviewDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The date of the last IEP review.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'IEPReviewDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'IEPBeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'IEPBeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The effective date of the most recent IEP.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'IEPBeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'IEPEndDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'IEPEndDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The end date of the most recent IEP.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', 'column', 'IEPEndDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association represents the special education program(s) that a student participates in or receives services from. The association is an extension of the StudentProgramAssociation particular for special education programs.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociation'
go

/* 
 * TABLE: [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] 
 */

CREATE TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider](
    [StudentUSI]                      int             NOT NULL,
    [ProgramTypeId]                   int             NOT NULL,
    [ProgramEducationOrganizationId]  int             NOT NULL,
    [BeginDate]                       date            NOT NULL,
    [StaffUSI]                        int             NOT NULL,
    [PrimaryProvider]                 bit             NULL,
    [ProgramName]                     nvarchar(60)    NOT NULL,
    [EducationOrganizationId]         int             NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [StudentSpecialEducationProgramAssociationServiceProvider_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentSpecialEducationProgramAssociationServiceProvider] PRIMARY KEY CLUSTERED ([StudentUSI], [ProgramTypeId], [ProgramEducationOrganizationId], [BeginDate], [StaffUSI], [ProgramName], [EducationOrganizationId])
)
go



IF OBJECT_ID('edfi.StudentSpecialEducationProgramAssociationServiceProvider') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentSpecialEducationProgramAssociationServiceProvider >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentSpecialEducationProgramAssociationServiceProvider >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'ProgramEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'ProgramEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'ProgramEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the student first received services.  NEDM: Beginning Date', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'StaffUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'StaffUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Staff Identity Column', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'StaffUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'PrimaryProvider'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'PrimaryProvider'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Primary ServiceProvider.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'PrimaryProvider'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The staff providing Special Education services to the student.', 'schema', 'edfi', 'table', 'StudentSpecialEducationProgramAssociationServiceProvider'
go

/* 
 * TABLE: [edfi].[StudentTelephone] 
 */

CREATE TABLE [edfi].[StudentTelephone](
    [StudentUSI]                      int             NOT NULL,
    [TelephoneNumberTypeId]           int             NOT NULL,
    [OrderOfPriority]                 int             NULL,
    [TextMessageCapabilityIndicator]  bit             NULL,
    [TelephoneNumber]                 nvarchar(24)    NOT NULL,
    [CreateDate]                      datetime        CONSTRAINT [StudentTelephone_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentTelephone] PRIMARY KEY CLUSTERED ([StudentUSI], [TelephoneNumberTypeId])
)
go



IF OBJECT_ID('edfi.StudentTelephone') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentTelephone >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentTelephone >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'TelephoneNumberTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'TelephoneNumberTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for TelephoneNumber', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'TelephoneNumberTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'OrderOfPriority'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'OrderOfPriority'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'OrderOfPriority'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'TextMessageCapabilityIndicator'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'TextMessageCapabilityIndicator'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'TextMessageCapabilityIndicator'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'TelephoneNumber'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'TelephoneNumber'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The telephone number including the area code, and extension, if applicable.', 'schema', 'edfi', 'table', 'StudentTelephone', 'column', 'TelephoneNumber'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentTelephone', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentTelephone'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The 10-digit telephone number, including the area code, for the person.', 'schema', 'edfi', 'table', 'StudentTelephone'
go

/* 
 * TABLE: [edfi].[StudentTitleIPartAProgramAssociation] 
 */

CREATE TABLE [edfi].[StudentTitleIPartAProgramAssociation](
    [StudentUSI]                      int             NOT NULL,
    [EducationOrganizationId]         int             NOT NULL,
    [ProgramTypeId]                   int             NOT NULL,
    [ProgramName]                     nvarchar(60)    NOT NULL,
    [ProgramEducationOrganizationId]  int             NOT NULL,
    [BeginDate]                       date            NOT NULL,
    [TitleIPartAParticipantTypeId]    int             NOT NULL,
    CONSTRAINT [PK_StudentTitleIPartAProgramAssociation] PRIMARY KEY CLUSTERED ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
)
go



IF OBJECT_ID('edfi.StudentTitleIPartAProgramAssociation') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentTitleIPartAProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentTitleIPartAProgramAssociation >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'EducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'EducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'EducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'ProgramTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'ProgramTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'ProgramTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'ProgramName'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'ProgramName'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The formal name of the program of instruction, training, services or benefits available through federal, state, or local agencies.', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'ProgramName'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'ProgramEducationOrganizationId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'ProgramEducationOrganizationId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The education organization where the student is participating in or receiving the program services.', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'ProgramEducationOrganizationId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'BeginDate'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'BeginDate'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The month, day, and year on which the Student first received services.', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'BeginDate'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'TitleIPartAParticipantTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'TitleIPartAParticipantTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the type of Title I program, if any, in which the student is participating and served:  Public Targeted Assistance Program  Public Schoolwide Program  Private school student participating  Local Neglected Program  NEDM: Title I Participlant', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', 'column', 'TitleIPartAParticipantTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This association represents the Title I Part A program(s) that a student participates in or from which the Student receives services. The association is an extension of the StudentProgramAssociation particular for Title I Part A programs.', 'schema', 'edfi', 'table', 'StudentTitleIPartAProgramAssociation'
go

/* 
 * TABLE: [edfi].[StudentVisa] 
 */

CREATE TABLE [edfi].[StudentVisa](
    [StudentUSI]  int         NOT NULL,
    [VisaTypeId]  int         NOT NULL,
    [CreateDate]  datetime    CONSTRAINT [StudentVisa_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_StudentVisa] PRIMARY KEY CLUSTERED ([StudentUSI], [VisaTypeId])
)
go



IF OBJECT_ID('edfi.StudentVisa') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.StudentVisa >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.StudentVisa >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentVisa', 'column', 'StudentUSI'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentVisa', 'column', 'StudentUSI'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique number or alphanumeric code assigned to a student by a state education agency.', 'schema', 'edfi', 'table', 'StudentVisa', 'column', 'StudentUSI'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentVisa', 'column', 'VisaTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentVisa', 'column', 'VisaTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'StudentVisa', 'column', 'VisaTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'StudentVisa', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'StudentVisa'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Describe the types of Visa that a non-U.S. citizen student holds.', 'schema', 'edfi', 'table', 'StudentVisa'
go

/* 
 * TABLE: [edfi].[TeachingCredentialBasisType] 
 */

CREATE TABLE [edfi].[TeachingCredentialBasisType](
    [TeachingCredentialBasisTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                      nvarchar(50)        NOT NULL,
    [Description]                    nvarchar(1024)      NOT NULL,
    [ShortDescription]               nvarchar(450)       NOT NULL,
    [Id]                             uniqueidentifier    CONSTRAINT [TeachingCredentialBasisType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]               datetime            CONSTRAINT [TeachingCredentialBasisType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                     datetime            CONSTRAINT [TeachingCredentialBasisType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_TeachingCredentialBasisType] PRIMARY KEY CLUSTERED ([TeachingCredentialBasisTypeId])
)
go



IF OBJECT_ID('edfi.TeachingCredentialBasisType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.TeachingCredentialBasisType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.TeachingCredentialBasisType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType', 'column', 'TeachingCredentialBasisTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType', 'column', 'TeachingCredentialBasisTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for TeachingCredentialBasisType', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType', 'column', 'TeachingCredentialBasisTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for TeachingCredentialBasisType type.', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the teaching credential basis type.', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the pre-determined criteria for granting the teaching credential that an individual holds.', 'schema', 'edfi', 'table', 'TeachingCredentialBasisType'
go

/* 
 * TABLE: [edfi].[TeachingCredentialDescriptor] 
 */

CREATE TABLE [edfi].[TeachingCredentialDescriptor](
    [TeachingCredentialDescriptorId]  int    NOT NULL,
    [TeachingCredentialTypeId]        int    NULL,
    CONSTRAINT [PK_TeachingCredentialDescriptor] PRIMARY KEY CLUSTERED ([TeachingCredentialDescriptorId])
)
go



IF OBJECT_ID('edfi.TeachingCredentialDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.TeachingCredentialDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.TeachingCredentialDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialDescriptor', 'column', 'TeachingCredentialDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialDescriptor', 'column', 'TeachingCredentialDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'TeachingCredentialDescriptor', 'column', 'TeachingCredentialDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialDescriptor', 'column', 'TeachingCredentialTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialDescriptor', 'column', 'TeachingCredentialTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for TeachingCredential', 'schema', 'edfi', 'table', 'TeachingCredentialDescriptor', 'column', 'TeachingCredentialTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines an indication of the category of a legal document giving authorization to perform teaching assignment services.', 'schema', 'edfi', 'table', 'TeachingCredentialDescriptor'
go

/* 
 * TABLE: [edfi].[TeachingCredentialType] 
 */

CREATE TABLE [edfi].[TeachingCredentialType](
    [TeachingCredentialTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                 nvarchar(50)        NOT NULL,
    [Description]               nvarchar(1024)      NOT NULL,
    [ShortDescription]          nvarchar(450)       NOT NULL,
    [Id]                        uniqueidentifier    CONSTRAINT [TeachingCredentialType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]          datetime            CONSTRAINT [TeachingCredentialType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                datetime            CONSTRAINT [TeachingCredentialType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_TeachingCredentialType] PRIMARY KEY CLUSTERED ([TeachingCredentialTypeId])
)
go



IF OBJECT_ID('edfi.TeachingCredentialType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.TeachingCredentialType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.TeachingCredentialType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialType', 'column', 'TeachingCredentialTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialType', 'column', 'TeachingCredentialTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for TeachingCredential', 'schema', 'edfi', 'table', 'TeachingCredentialType', 'column', 'TeachingCredentialTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for TeachingCredential type.', 'schema', 'edfi', 'table', 'TeachingCredentialType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'TeachingCredentialType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the teaching credential type.', 'schema', 'edfi', 'table', 'TeachingCredentialType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TeachingCredentialType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the category of a legal document giving authorization to perform teaching assignment services.', 'schema', 'edfi', 'table', 'TeachingCredentialType'
go

/* 
 * TABLE: [edfi].[TelephoneNumberType] 
 */

CREATE TABLE [edfi].[TelephoneNumberType](
    [TelephoneNumberTypeId]  int                 IDENTITY(1,1),
    [CodeValue]              nvarchar(50)        NOT NULL,
    [Description]            nvarchar(1024)      NOT NULL,
    [ShortDescription]       nvarchar(450)       NOT NULL,
    [Id]                     uniqueidentifier    CONSTRAINT [TelephoneNumberType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]       datetime            CONSTRAINT [TelephoneNumberType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]             datetime            CONSTRAINT [TelephoneNumberType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_TelephoneNumberType] PRIMARY KEY CLUSTERED ([TelephoneNumberTypeId])
)
go



IF OBJECT_ID('edfi.TelephoneNumberType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.TelephoneNumberType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.TelephoneNumberType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TelephoneNumberType', 'column', 'TelephoneNumberTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TelephoneNumberType', 'column', 'TelephoneNumberTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for TelephoneNumber', 'schema', 'edfi', 'table', 'TelephoneNumberType', 'column', 'TelephoneNumberTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TelephoneNumberType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TelephoneNumberType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for TelephoneNumber type.', 'schema', 'edfi', 'table', 'TelephoneNumberType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TelephoneNumberType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TelephoneNumberType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'TelephoneNumberType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TelephoneNumberType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TelephoneNumberType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the telephone number type.', 'schema', 'edfi', 'table', 'TelephoneNumberType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TelephoneNumberType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TelephoneNumberType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The type of communication number listed for an individual.', 'schema', 'edfi', 'table', 'TelephoneNumberType'
go

/* 
 * TABLE: [edfi].[TermDescriptor] 
 */

CREATE TABLE [edfi].[TermDescriptor](
    [TermDescriptorId]  int    NOT NULL,
    [TermTypeId]        int    NULL,
    CONSTRAINT [PK_TermDescriptor] PRIMARY KEY CLUSTERED ([TermDescriptorId])
)
go



IF OBJECT_ID('edfi.TermDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.TermDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.TermDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TermDescriptor', 'column', 'TermDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TermDescriptor', 'column', 'TermDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'TermDescriptor', 'column', 'TermDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TermDescriptor', 'column', 'TermTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TermDescriptor', 'column', 'TermTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Term', 'schema', 'edfi', 'table', 'TermDescriptor', 'column', 'TermTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TermDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TermDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the term of a session during the school year (e.g., Fall Semester).', 'schema', 'edfi', 'table', 'TermDescriptor'
go

/* 
 * TABLE: [edfi].[TermType] 
 */

CREATE TABLE [edfi].[TermType](
    [TermTypeId]        int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [TermType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [TermType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [TermType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_TermType] PRIMARY KEY CLUSTERED ([TermTypeId])
)
go



IF OBJECT_ID('edfi.TermType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.TermType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.TermType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TermType', 'column', 'TermTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TermType', 'column', 'TermTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Term', 'schema', 'edfi', 'table', 'TermType', 'column', 'TermTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TermType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TermType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Term type.', 'schema', 'edfi', 'table', 'TermType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TermType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TermType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'TermType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TermType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TermType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the term type.', 'schema', 'edfi', 'table', 'TermType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TermType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TermType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Indicates the type of the session during the school year (e.g., Fall Semester).', 'schema', 'edfi', 'table', 'TermType'
go

/* 
 * TABLE: [edfi].[TitleIPartAParticipantType] 
 */

CREATE TABLE [edfi].[TitleIPartAParticipantType](
    [TitleIPartAParticipantTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                     nvarchar(50)        NOT NULL,
    [Description]                   nvarchar(1024)      NOT NULL,
    [ShortDescription]              nvarchar(450)       NOT NULL,
    [Id]                            uniqueidentifier    CONSTRAINT [TitleIPartAParticipantType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]              datetime            CONSTRAINT [TitleIPartAParticipantType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                    datetime            CONSTRAINT [TitleIPartAParticipantType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_TitleIPartAParticipantType] PRIMARY KEY CLUSTERED ([TitleIPartAParticipantTypeId])
)
go



IF OBJECT_ID('edfi.TitleIPartAParticipantType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.TitleIPartAParticipantType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.TitleIPartAParticipantType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType', 'column', 'TitleIPartAParticipantTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType', 'column', 'TitleIPartAParticipantTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for TitleIPartAParticipant', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType', 'column', 'TitleIPartAParticipantTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for TitleIPartAParticipant type.', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the Title I Part A participant type.', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indication of the type of Title I program, if any, in which the student is participating and served.', 'schema', 'edfi', 'table', 'TitleIPartAParticipantType'
go

/* 
 * TABLE: [edfi].[TitleIPartASchoolDesignationType] 
 */

CREATE TABLE [edfi].[TitleIPartASchoolDesignationType](
    [TitleIPartASchoolDesignationTypeId]  int                 IDENTITY(1,1),
    [CodeValue]                           nvarchar(50)        NOT NULL,
    [Description]                         nvarchar(1024)      NOT NULL,
    [ShortDescription]                    nvarchar(450)       NOT NULL,
    [Id]                                  uniqueidentifier    CONSTRAINT [TitleIPartASchoolDesignationType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]                    datetime            CONSTRAINT [TitleIPartASchoolDesignationType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]                          datetime            CONSTRAINT [TitleIPartASchoolDesignationType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_TitleIPartASchoolDesignationType] PRIMARY KEY CLUSTERED ([TitleIPartASchoolDesignationTypeId])
)
go



IF OBJECT_ID('edfi.TitleIPartASchoolDesignationType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.TitleIPartASchoolDesignationType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.TitleIPartASchoolDesignationType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType', 'column', 'TitleIPartASchoolDesignationTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType', 'column', 'TitleIPartASchoolDesignationTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for TitleIPartASchooldDesignation', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType', 'column', 'TitleIPartASchoolDesignationTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for TitleIPartASchooldDesignation type.', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the Title I Part A school designation type.', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Denotes the Title I Part A designation for the school.', 'schema', 'edfi', 'table', 'TitleIPartASchoolDesignationType'
go

/* 
 * TABLE: [edfi].[VisaType] 
 */

CREATE TABLE [edfi].[VisaType](
    [VisaTypeId]        int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [VisaType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [VisaType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [VisaType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_VisaType] PRIMARY KEY CLUSTERED ([VisaTypeId])
)
go



IF OBJECT_ID('edfi.VisaType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.VisaType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.VisaType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'VisaType', 'column', 'VisaTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'VisaType', 'column', 'VisaTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'VisaType', 'column', 'VisaTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'VisaType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'VisaType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A code or abbreviation that is used to refer to the descriptor.', 'schema', 'edfi', 'table', 'VisaType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'VisaType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'VisaType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'The description of the descriptor.', 'schema', 'edfi', 'table', 'VisaType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'VisaType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'VisaType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'VisaType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'VisaType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'VisaType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'An indicator of a non-U.S. citizen''s Visa type.', 'schema', 'edfi', 'table', 'VisaType'
go

/* 
 * TABLE: [edfi].[WeaponDescriptor] 
 */

CREATE TABLE [edfi].[WeaponDescriptor](
    [WeaponDescriptorId]  int    NOT NULL,
    [WeaponTypeId]        int    NULL,
    CONSTRAINT [PK_WeaponDescriptor] PRIMARY KEY CLUSTERED ([WeaponDescriptorId])
)
go



IF OBJECT_ID('edfi.WeaponDescriptor') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.WeaponDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.WeaponDescriptor >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'WeaponDescriptor', 'column', 'WeaponDescriptorId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'WeaponDescriptor', 'column', 'WeaponDescriptorId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', 'schema', 'edfi', 'table', 'WeaponDescriptor', 'column', 'WeaponDescriptorId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'WeaponDescriptor', 'column', 'WeaponTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'WeaponDescriptor', 'column', 'WeaponTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Weapons', 'schema', 'edfi', 'table', 'WeaponDescriptor', 'column', 'WeaponTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'WeaponDescriptor', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'WeaponDescriptor'
END
exec sys.sp_addextendedproperty 'MS_Description', 'This descriptor defines the types of weapon used during an incident.', 'schema', 'edfi', 'table', 'WeaponDescriptor'
go

/* 
 * TABLE: [edfi].[WeaponType] 
 */

CREATE TABLE [edfi].[WeaponType](
    [WeaponTypeId]      int                 IDENTITY(1,1),
    [CodeValue]         nvarchar(50)        NOT NULL,
    [Description]       nvarchar(1024)      NOT NULL,
    [ShortDescription]  nvarchar(450)       NOT NULL,
    [Id]                uniqueidentifier    CONSTRAINT [WeaponType_DF_Id] DEFAULT (newid()) NOT NULL,
    [LastModifiedDate]  datetime            CONSTRAINT [WeaponType_DF_LastModifiedDate] DEFAULT (getdate()) NOT NULL,
    [CreateDate]        datetime            CONSTRAINT [WeaponType_DF_CreateDate] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [PK_WeaponsType] PRIMARY KEY CLUSTERED ([WeaponTypeId])
)
go



IF OBJECT_ID('edfi.WeaponType') IS NOT NULL
    PRINT '<<< CREATED TABLE edfi.WeaponType >>>'
ELSE
    PRINT '<<< FAILED CREATING TABLE edfi.WeaponType >>>'
go

if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'WeaponType', 'column', 'WeaponTypeId'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'WeaponType', 'column', 'WeaponTypeId'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Key for Weapons', 'schema', 'edfi', 'table', 'WeaponType', 'column', 'WeaponTypeId'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'WeaponType', 'column', 'CodeValue'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'WeaponType', 'column', 'CodeValue'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Code for Weapons type.', 'schema', 'edfi', 'table', 'WeaponType', 'column', 'CodeValue'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'WeaponType', 'column', 'Description'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'WeaponType', 'column', 'Description'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Description for Weapons type.', 'schema', 'edfi', 'table', 'WeaponType', 'column', 'Description'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'WeaponType', 'column', 'ShortDescription'))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'WeaponType', 'column', 'ShortDescription'
END
exec sys.sp_addextendedproperty 'MS_Description', 'A shortened description for the descriptor.', 'schema', 'edfi', 'table', 'WeaponType', 'column', 'ShortDescription'
go
if exists (select * from ::fn_listextendedproperty('MS_Description', 'schema', 'edfi', 'table', 'WeaponType', default, default))
BEGIN
    exec sys.sp_dropextendedproperty 'MS_Description', 'schema', 'edfi', 'table', 'WeaponType'
END
exec sys.sp_addextendedproperty 'MS_Description', 'Identifies the type of weapon used during an incident.', 'schema', 'edfi', 'table', 'WeaponType'
go

/* 
 * INDEX: [FK_AcademicSubjectDescriptor_AcademicSubjectType_AcademicSubjectTypeId] 
 */

CREATE INDEX [FK_AcademicSubjectDescriptor_AcademicSubjectType_AcademicSubjectTypeId] ON [edfi].[AcademicSubjectDescriptor]([AcademicSubjectTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AcademicSubjectDescriptor') AND name='FK_AcademicSubjectDescriptor_AcademicSubjectType_AcademicSubjectTypeId')
    PRINT '<<< CREATED INDEX edfi.AcademicSubjectDescriptor.FK_AcademicSubjectDescriptor_AcademicSubjectType_AcademicSubjectTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AcademicSubjectDescriptor.FK_AcademicSubjectDescriptor_AcademicSubjectType_AcademicSubjectTypeId >>>'
go

/* 
 * INDEX: [FK_AcademicSubjectDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_AcademicSubjectDescriptor_Descriptor_DescriptorId] ON [edfi].[AcademicSubjectDescriptor]([AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AcademicSubjectDescriptor') AND name='FK_AcademicSubjectDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.AcademicSubjectDescriptor.FK_AcademicSubjectDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AcademicSubjectDescriptor.FK_AcademicSubjectDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_AcademicWeek_CalendarDate_BeginDate] 
 */

CREATE INDEX [FK_AcademicWeek_CalendarDate_BeginDate] ON [edfi].[AcademicWeek]([SchoolId], [BeginDate])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AcademicWeek') AND name='FK_AcademicWeek_CalendarDate_BeginDate')
    PRINT '<<< CREATED INDEX edfi.AcademicWeek.FK_AcademicWeek_CalendarDate_BeginDate >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AcademicWeek.FK_AcademicWeek_CalendarDate_BeginDate >>>'
go

/* 
 * INDEX: [FK_AcademicWeek_CalendarDate_EndDate] 
 */

CREATE INDEX [FK_AcademicWeek_CalendarDate_EndDate] ON [edfi].[AcademicWeek]([EndDate])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AcademicWeek') AND name='FK_AcademicWeek_CalendarDate_EndDate')
    PRINT '<<< CREATED INDEX edfi.AcademicWeek.FK_AcademicWeek_CalendarDate_EndDate >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AcademicWeek.FK_AcademicWeek_CalendarDate_EndDate >>>'
go

/* 
 * INDEX: [FK_AcademicWeek_School_SchoolId] 
 */

CREATE INDEX [FK_AcademicWeek_School_SchoolId] ON [edfi].[AcademicWeek]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AcademicWeek') AND name='FK_AcademicWeek_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.AcademicWeek.FK_AcademicWeek_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AcademicWeek.FK_AcademicWeek_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_AccommodationDescriptor_AccommodationType_AccommodationTypeId] 
 */

CREATE INDEX [FK_AccommodationDescriptor_AccommodationType_AccommodationTypeId] ON [edfi].[AccommodationDescriptor]([AccommodationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AccommodationDescriptor') AND name='FK_AccommodationDescriptor_AccommodationType_AccommodationTypeId')
    PRINT '<<< CREATED INDEX edfi.AccommodationDescriptor.FK_AccommodationDescriptor_AccommodationType_AccommodationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AccommodationDescriptor.FK_AccommodationDescriptor_AccommodationType_AccommodationTypeId >>>'
go

/* 
 * INDEX: [FK_AccommodationDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_AccommodationDescriptor_Descriptor_DescriptorId] ON [edfi].[AccommodationDescriptor]([AccommodationDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AccommodationDescriptor') AND name='FK_AccommodationDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.AccommodationDescriptor.FK_AccommodationDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AccommodationDescriptor.FK_AccommodationDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_Account_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_Account_EducationOrganization_EducationOrganizationId] ON [edfi].[Account]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Account') AND name='FK_Account_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.Account.FK_Account_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Account.FK_Account_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_AccountabilityRating_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_AccountabilityRating_EducationOrganization_EducationOrganizationId] ON [edfi].[AccountabilityRating]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AccountabilityRating') AND name='FK_AccountabilityRating_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.AccountabilityRating.FK_AccountabilityRating_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AccountabilityRating.FK_AccountabilityRating_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_AccountabilityRating_SchoolYearType_SchoolYear] 
 */

CREATE INDEX [FK_AccountabilityRating_SchoolYearType_SchoolYear] ON [edfi].[AccountabilityRating]([SchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AccountabilityRating') AND name='FK_AccountabilityRating_SchoolYearType_SchoolYear')
    PRINT '<<< CREATED INDEX edfi.AccountabilityRating.FK_AccountabilityRating_SchoolYearType_SchoolYear >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AccountabilityRating.FK_AccountabilityRating_SchoolYearType_SchoolYear >>>'
go

/* 
 * INDEX: [FK_AccountCode_Account_EducationOrganizationId] 
 */

CREATE INDEX [FK_AccountCode_Account_EducationOrganizationId] ON [edfi].[AccountCode]([EducationOrganizationId], [FiscalYear], [AccountNumber])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AccountCode') AND name='FK_AccountCode_Account_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.AccountCode.FK_AccountCode_Account_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AccountCode.FK_AccountCode_Account_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_AccountCode_AccountCodeDescriptor_AccountCodeDescriptorId] 
 */

CREATE INDEX [FK_AccountCode_AccountCodeDescriptor_AccountCodeDescriptorId] ON [edfi].[AccountCode]([AccountCodeDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AccountCode') AND name='FK_AccountCode_AccountCodeDescriptor_AccountCodeDescriptorId')
    PRINT '<<< CREATED INDEX edfi.AccountCode.FK_AccountCode_AccountCodeDescriptor_AccountCodeDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AccountCode.FK_AccountCode_AccountCodeDescriptor_AccountCodeDescriptorId >>>'
go

/* 
 * INDEX: [FK_AccountCodeDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_AccountCodeDescriptor_Descriptor_DescriptorId] ON [edfi].[AccountCodeDescriptor]([AccountCodeDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AccountCodeDescriptor') AND name='FK_AccountCodeDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.AccountCodeDescriptor.FK_AccountCodeDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AccountCodeDescriptor.FK_AccountCodeDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_AchievementCategoryDescriptor_AchievementCategoryType_AchievementCategoryTypeId] 
 */

CREATE INDEX [FK_AchievementCategoryDescriptor_AchievementCategoryType_AchievementCategoryTypeId] ON [edfi].[AchievementCategoryDescriptor]([AchievementCategoryTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AchievementCategoryDescriptor') AND name='FK_AchievementCategoryDescriptor_AchievementCategoryType_AchievementCategoryTypeId')
    PRINT '<<< CREATED INDEX edfi.AchievementCategoryDescriptor.FK_AchievementCategoryDescriptor_AchievementCategoryType_AchievementCategoryTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AchievementCategoryDescriptor.FK_AchievementCategoryDescriptor_AchievementCategoryType_AchievementCategoryTypeId >>>'
go

/* 
 * INDEX: [FK_AchievementCategoryDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_AchievementCategoryDescriptor_Descriptor_DescriptorId] ON [edfi].[AchievementCategoryDescriptor]([AchievementCategoryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AchievementCategoryDescriptor') AND name='FK_AchievementCategoryDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.AchievementCategoryDescriptor.FK_AchievementCategoryDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AchievementCategoryDescriptor.FK_AchievementCategoryDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_Actual_Account_EducationOrganizationId] 
 */

CREATE INDEX [FK_Actual_Account_EducationOrganizationId] ON [edfi].[Actual]([AccountNumber], [EducationOrganizationId], [FiscalYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Actual') AND name='FK_Actual_Account_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.Actual.FK_Actual_Account_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Actual.FK_Actual_Account_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_AdministrativeFundingControlDescriptor_AdministrativeFundingControlType_AdministrativeFundingControlTypeId] 
 */

CREATE INDEX [FK_AdministrativeFundingControlDescriptor_AdministrativeFundingControlType_AdministrativeFundingControlTypeId] ON [edfi].[AdministrativeFundingControlDescriptor]([AdministrativeFundingControlTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AdministrativeFundingControlDescriptor') AND name='FK_AdministrativeFundingControlDescriptor_AdministrativeFundingControlType_AdministrativeFundingControlTypeId')
    PRINT '<<< CREATED INDEX edfi.AdministrativeFundingControlDescriptor.FK_AdministrativeFundingControlDescriptor_AdministrativeFundingControlType_AdministrativeFundingControlTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AdministrativeFundingControlDescriptor.FK_AdministrativeFundingControlDescriptor_AdministrativeFundingControlType_AdministrativeFundingControlTypeId >>>'
go

/* 
 * INDEX: [FK_AdministrativeFundingControlDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_AdministrativeFundingControlDescriptor_Descriptor_DescriptorId] ON [edfi].[AdministrativeFundingControlDescriptor]([AdministrativeFundingControlDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AdministrativeFundingControlDescriptor') AND name='FK_AdministrativeFundingControlDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.AdministrativeFundingControlDescriptor.FK_AdministrativeFundingControlDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AdministrativeFundingControlDescriptor.FK_AdministrativeFundingControlDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_Assessment_AcademicSubjectDescriptorId] 
 */

CREATE INDEX [FK_Assessment_AcademicSubjectDescriptorId] ON [edfi].[Assessment]([AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Assessment') AND name='FK_Assessment_AcademicSubjectDescriptorId')
    PRINT '<<< CREATED INDEX edfi.Assessment.FK_Assessment_AcademicSubjectDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Assessment.FK_Assessment_AcademicSubjectDescriptorId >>>'
go

/* 
 * INDEX: [FK_Assessment_AssessedGradeLevelDescriptorId] 
 */

CREATE INDEX [FK_Assessment_AssessedGradeLevelDescriptorId] ON [edfi].[Assessment]([AssessedGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Assessment') AND name='FK_Assessment_AssessedGradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.Assessment.FK_Assessment_AssessedGradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Assessment.FK_Assessment_AssessedGradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_Assessment_AssessmentCategoryDescriptor_AssessmentCategoryDescriptorId] 
 */

CREATE INDEX [FK_Assessment_AssessmentCategoryDescriptor_AssessmentCategoryDescriptorId] ON [edfi].[Assessment]([AssessmentCategoryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Assessment') AND name='FK_Assessment_AssessmentCategoryDescriptor_AssessmentCategoryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.Assessment.FK_Assessment_AssessmentCategoryDescriptor_AssessmentCategoryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Assessment.FK_Assessment_AssessmentCategoryDescriptor_AssessmentCategoryDescriptorId >>>'
go

/* 
 * INDEX: [FK_Assessment_AssessmentFamily_AssessmentFamilyTitle] 
 */

CREATE INDEX [FK_Assessment_AssessmentFamily_AssessmentFamilyTitle] ON [edfi].[Assessment]([AssessmentFamilyTitle])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Assessment') AND name='FK_Assessment_AssessmentFamily_AssessmentFamilyTitle')
    PRINT '<<< CREATED INDEX edfi.Assessment.FK_Assessment_AssessmentFamily_AssessmentFamilyTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Assessment.FK_Assessment_AssessmentFamily_AssessmentFamilyTitle >>>'
go

/* 
 * INDEX: [FK_Assessment_AssessmentPeriodDescriptor_AssessmentPeriodDescriptorId] 
 */

CREATE NONCLUSTERED INDEX [FK_Assessment_AssessmentPeriodDescriptor_AssessmentPeriodDescriptorId]
    ON [edfi].[Assessment]([AssessmentPeriodDescriptorId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Assessment') AND name='FK_Assessment_AssessmentPeriodDescriptor_AssessmentPeriodDescriptorId')
    PRINT '<<< CREATED INDEX edfi.Assessment.FK_Assessment_AssessmentPeriodDescriptor_AssessmentPeriodDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Assessment.FK_Assessment_AssessmentPeriodDescriptor_AssessmentPeriodDescriptorId >>>'
go

/* 
 * INDEX: [FK_Assessment_LowestAssessedGradeLevelDescriptorId] 
 */

CREATE INDEX [FK_Assessment_LowestAssessedGradeLevelDescriptorId] ON [edfi].[Assessment]([LowestAssessedGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Assessment') AND name='FK_Assessment_LowestAssessedGradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.Assessment.FK_Assessment_LowestAssessedGradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Assessment.FK_Assessment_LowestAssessedGradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_AssessmentCategoryDescriptor_AssessmentCategoryType_AssessmentCategoryTypeId] 
 */

CREATE INDEX [FK_AssessmentCategoryDescriptor_AssessmentCategoryType_AssessmentCategoryTypeId] ON [edfi].[AssessmentCategoryDescriptor]([AssessmentCategoryTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentCategoryDescriptor') AND name='FK_AssessmentCategoryDescriptor_AssessmentCategoryType_AssessmentCategoryTypeId')
    PRINT '<<< CREATED INDEX edfi.AssessmentCategoryDescriptor.FK_AssessmentCategoryDescriptor_AssessmentCategoryType_AssessmentCategoryTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentCategoryDescriptor.FK_AssessmentCategoryDescriptor_AssessmentCategoryType_AssessmentCategoryTypeId >>>'
go

/* 
 * INDEX: [FK_AssessmentCategoryDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_AssessmentCategoryDescriptor_Descriptor_DescriptorId] ON [edfi].[AssessmentCategoryDescriptor]([AssessmentCategoryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentCategoryDescriptor') AND name='FK_AssessmentCategoryDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.AssessmentCategoryDescriptor.FK_AssessmentCategoryDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentCategoryDescriptor.FK_AssessmentCategoryDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_AssessmentContentStandard_Assessment_AssessmentTitle] 
 */

CREATE INDEX [FK_AssessmentContentStandard_Assessment_AssessmentTitle] ON [edfi].[AssessmentContentStandard]([AcademicSubjectDescriptorId], [AssessmentVersion], [AssessmentTitle], [AssessedGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentContentStandard') AND name='FK_AssessmentContentStandard_Assessment_AssessmentTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentContentStandard.FK_AssessmentContentStandard_Assessment_AssessmentTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentContentStandard.FK_AssessmentContentStandard_Assessment_AssessmentTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentContentStandard_EducationOrganization_MandatingEducationOrganizationId] 
 */

CREATE INDEX [FK_AssessmentContentStandard_EducationOrganization_MandatingEducationOrganizationId] ON [edfi].[AssessmentContentStandard]([MandatingEducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentContentStandard') AND name='FK_AssessmentContentStandard_EducationOrganization_MandatingEducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.AssessmentContentStandard.FK_AssessmentContentStandard_EducationOrganization_MandatingEducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentContentStandard.FK_AssessmentContentStandard_EducationOrganization_MandatingEducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_AssessmentContentStandard_PublicationStatusType_PublicationStatusTypeId] 
 */

CREATE INDEX [FK_AssessmentContentStandard_PublicationStatusType_PublicationStatusTypeId] ON [edfi].[AssessmentContentStandard]([PublicationStatusTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentContentStandard') AND name='FK_AssessmentContentStandard_PublicationStatusType_PublicationStatusTypeId')
    PRINT '<<< CREATED INDEX edfi.AssessmentContentStandard.FK_AssessmentContentStandard_PublicationStatusType_PublicationStatusTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentContentStandard.FK_AssessmentContentStandard_PublicationStatusType_PublicationStatusTypeId >>>'
go

/* 
 * INDEX: [FK_AssessmentContentStandardAuthor_AssessmentContentStandard_AssessmentTitle] 
 */

CREATE INDEX [FK_AssessmentContentStandardAuthor_AssessmentContentStandard_AssessmentTitle] ON [edfi].[AssessmentContentStandardAuthor]([AcademicSubjectDescriptorId], [AssessmentTitle], [AssessedGradeLevelDescriptorId], [AssessmentVersion])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentContentStandardAuthor') AND name='FK_AssessmentContentStandardAuthor_AssessmentContentStandard_AssessmentTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentContentStandardAuthor.FK_AssessmentContentStandardAuthor_AssessmentContentStandard_AssessmentTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentContentStandardAuthor.FK_AssessmentContentStandardAuthor_AssessmentContentStandard_AssessmentTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentFamily_AcademicSubjectDescriptorId] 
 */

CREATE INDEX [FK_AssessmentFamily_AcademicSubjectDescriptorId] ON [edfi].[AssessmentFamily]([AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamily') AND name='FK_AssessmentFamily_AcademicSubjectDescriptorId')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamily.FK_AssessmentFamily_AcademicSubjectDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamily.FK_AssessmentFamily_AcademicSubjectDescriptorId >>>'
go

/* 
 * INDEX: [FK_AssessmentFamily_AssessedGradeLevelDescriptorId] 
 */

CREATE INDEX [FK_AssessmentFamily_AssessedGradeLevelDescriptorId] ON [edfi].[AssessmentFamily]([AssessedGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamily') AND name='FK_AssessmentFamily_AssessedGradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamily.FK_AssessmentFamily_AssessedGradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamily.FK_AssessmentFamily_AssessedGradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_AssessmentFamily_AssessmentCategoryDescriptor_AssessmentCategoryDescriptorId] 
 */

CREATE INDEX [FK_AssessmentFamily_AssessmentCategoryDescriptor_AssessmentCategoryDescriptorId] ON [edfi].[AssessmentFamily]([AssessmentCategoryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamily') AND name='FK_AssessmentFamily_AssessmentCategoryDescriptor_AssessmentCategoryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamily.FK_AssessmentFamily_AssessmentCategoryDescriptor_AssessmentCategoryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamily.FK_AssessmentFamily_AssessmentCategoryDescriptor_AssessmentCategoryDescriptorId >>>'
go

/* 
 * INDEX: [FK_AssessmentFamily_AssessmentFamily_ParentAssessmentFamilyTitle] 
 */

CREATE INDEX [FK_AssessmentFamily_AssessmentFamily_ParentAssessmentFamilyTitle] ON [edfi].[AssessmentFamily]([ParentAssessmentFamilyTitle])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamily') AND name='FK_AssessmentFamily_AssessmentFamily_ParentAssessmentFamilyTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamily.FK_AssessmentFamily_AssessmentFamily_ParentAssessmentFamilyTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamily.FK_AssessmentFamily_AssessmentFamily_ParentAssessmentFamilyTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentFamily_LowestAssessedGradeLevelDescriptorId] 
 */

CREATE INDEX [FK_AssessmentFamily_LowestAssessedGradeLevelDescriptorId] ON [edfi].[AssessmentFamily]([LowestAssessedGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamily') AND name='FK_AssessmentFamily_LowestAssessedGradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamily.FK_AssessmentFamily_LowestAssessedGradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamily.FK_AssessmentFamily_LowestAssessedGradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_AssessmentFamilyAssessmentPeriod_AssessmentFamily_AssessmentFamilyTitle] 
 */

CREATE INDEX [FK_AssessmentFamilyAssessmentPeriod_AssessmentFamily_AssessmentFamilyTitle] ON [edfi].[AssessmentFamilyAssessmentPeriod]([AssessmentFamilyTitle])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamilyAssessmentPeriod') AND name='FK_AssessmentFamilyAssessmentPeriod_AssessmentFamily_AssessmentFamilyTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamilyAssessmentPeriod.FK_AssessmentFamilyAssessmentPeriod_AssessmentFamily_AssessmentFamilyTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamilyAssessmentPeriod.FK_AssessmentFamilyAssessmentPeriod_AssessmentFamily_AssessmentFamilyTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentFamilyAssessmentPeriod_AssessmentPeriodDescriptor_AssessmentPeriodDescriptorId] 
 */

CREATE INDEX [FK_AssessmentFamilyAssessmentPeriod_AssessmentPeriodDescriptor_AssessmentPeriodDescriptorId] ON [edfi].[AssessmentFamilyAssessmentPeriod]([AssessmentPeriodDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamilyAssessmentPeriod') AND name='FK_AssessmentFamilyAssessmentPeriod_AssessmentPeriodDescriptor_AssessmentPeriodDescriptorId')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamilyAssessmentPeriod.FK_AssessmentFamilyAssessmentPeriod_AssessmentPeriodDescriptor_AssessmentPeriodDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamilyAssessmentPeriod.FK_AssessmentFamilyAssessmentPeriod_AssessmentPeriodDescriptor_AssessmentPeriodDescriptorId >>>'
go

/* 
 * INDEX: [FK_AssessmentFamilyAssessmentPeriod_AssessmentFamilyContentStandard_AssessmentFamilyTitle] 
 */

CREATE INDEX [FK_AssessmentFamilyAssessmentPeriod_AssessmentFamilyContentStandard_AssessmentFamilyTitle] ON [edfi].[AssessmentFamilyAssessmentPeriod]([AssessmentFamilyTitle])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamilyAssessmentPeriod') AND name='FK_AssessmentFamilyAssessmentPeriod_AssessmentFamilyContentStandard_AssessmentFamilyTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamilyAssessmentPeriod.FK_AssessmentFamilyAssessmentPeriod_AssessmentFamilyContentStandard_AssessmentFamilyTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamilyAssessmentPeriod.FK_AssessmentFamilyAssessmentPeriod_AssessmentFamilyContentStandard_AssessmentFamilyTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentFamilyContentStandard_AssessmentFamily_AssessmentFamilyTitle] 
 */

CREATE INDEX [FK_AssessmentFamilyContentStandard_AssessmentFamily_AssessmentFamilyTitle] ON [edfi].[AssessmentFamilyContentStandard]([AssessmentFamilyTitle])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamilyContentStandard') AND name='FK_AssessmentFamilyContentStandard_AssessmentFamily_AssessmentFamilyTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamilyContentStandard.FK_AssessmentFamilyContentStandard_AssessmentFamily_AssessmentFamilyTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamilyContentStandard.FK_AssessmentFamilyContentStandard_AssessmentFamily_AssessmentFamilyTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentFamilyContentStandard_EducationOrganization_MandatingEducationOrganizationId] 
 */

CREATE INDEX [FK_AssessmentFamilyContentStandard_EducationOrganization_MandatingEducationOrganizationId] ON [edfi].[AssessmentFamilyContentStandard]([MandatingEducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamilyContentStandard') AND name='FK_AssessmentFamilyContentStandard_EducationOrganization_MandatingEducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamilyContentStandard.FK_AssessmentFamilyContentStandard_EducationOrganization_MandatingEducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamilyContentStandard.FK_AssessmentFamilyContentStandard_EducationOrganization_MandatingEducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_AssessmentFamilyContentStandard_PublicationStatusType_PublicationStatusTypeId] 
 */

CREATE INDEX [FK_AssessmentFamilyContentStandard_PublicationStatusType_PublicationStatusTypeId] ON [edfi].[AssessmentFamilyContentStandard]([PublicationStatusTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamilyContentStandard') AND name='FK_AssessmentFamilyContentStandard_PublicationStatusType_PublicationStatusTypeId')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamilyContentStandard.FK_AssessmentFamilyContentStandard_PublicationStatusType_PublicationStatusTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamilyContentStandard.FK_AssessmentFamilyContentStandard_PublicationStatusType_PublicationStatusTypeId >>>'
go

/* 
 * INDEX: [FK_AssessmentFamilyContentStandardAuthor_AssessmentFamilyContentStandard_AssessmentFamilyTitle] 
 */

CREATE INDEX [FK_AssessmentFamilyContentStandardAuthor_AssessmentFamilyContentStandard_AssessmentFamilyTitle] ON [edfi].[AssessmentFamilyContentStandardAuthor]([AssessmentFamilyTitle])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamilyContentStandardAuthor') AND name='FK_AssessmentFamilyContentStandardAuthor_AssessmentFamilyContentStandard_AssessmentFamilyTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamilyContentStandardAuthor.FK_AssessmentFamilyContentStandardAuthor_AssessmentFamilyContentStandard_AssessmentFamilyTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamilyContentStandardAuthor.FK_AssessmentFamilyContentStandardAuthor_AssessmentFamilyContentStandard_AssessmentFamilyTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentFamilyIdentificationCode_AssessmentFamily_AssessmentFamilyTitle] 
 */

CREATE INDEX [FK_AssessmentFamilyIdentificationCode_AssessmentFamily_AssessmentFamilyTitle] ON [edfi].[AssessmentFamilyIdentificationCode]([AssessmentFamilyTitle])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamilyIdentificationCode') AND name='FK_AssessmentFamilyIdentificationCode_AssessmentFamily_AssessmentFamilyTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamilyIdentificationCode.FK_AssessmentFamilyIdentificationCode_AssessmentFamily_AssessmentFamilyTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamilyIdentificationCode.FK_AssessmentFamilyIdentificationCode_AssessmentFamily_AssessmentFamilyTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentFamilyIdentificationCode_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemDescriptorId] 
 */

CREATE INDEX [FK_AssessmentFamilyIdentificationCode_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemDescriptorId] ON [edfi].[AssessmentFamilyIdentificationCode]([AssessmentIdentificationSystemDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamilyIdentificationCode') AND name='FK_AssessmentFamilyIdentificationCode_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemDescriptorId')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamilyIdentificationCode.FK_AssessmentFamilyIdentificationCode_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamilyIdentificationCode.FK_AssessmentFamilyIdentificationCode_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemDescriptorId >>>'
go

/* 
 * INDEX: [FK_AssessmentFamiliyLanguages_AssessmentFamily_AssessmentFamilyTitle] 
 */

CREATE INDEX [FK_AssessmentFamiliyLanguages_AssessmentFamily_AssessmentFamilyTitle] ON [edfi].[AssessmentFamilyLanguage]([AssessmentFamilyTitle])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamilyLanguage') AND name='FK_AssessmentFamiliyLanguages_AssessmentFamily_AssessmentFamilyTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamilyLanguage.FK_AssessmentFamiliyLanguages_AssessmentFamily_AssessmentFamilyTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamilyLanguage.FK_AssessmentFamiliyLanguages_AssessmentFamily_AssessmentFamilyTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentFamilyLanguages_LanguageDescriptor_LanguageDescriptorId] 
 */

CREATE INDEX [FK_AssessmentFamilyLanguages_LanguageDescriptor_LanguageDescriptorId] ON [edfi].[AssessmentFamilyLanguage]([LanguageDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentFamilyLanguage') AND name='FK_AssessmentFamilyLanguages_LanguageDescriptor_LanguageDescriptorId')
    PRINT '<<< CREATED INDEX edfi.AssessmentFamilyLanguage.FK_AssessmentFamilyLanguages_LanguageDescriptor_LanguageDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentFamilyLanguage.FK_AssessmentFamilyLanguages_LanguageDescriptor_LanguageDescriptorId >>>'
go

/* 
 * INDEX: [FK_AssessmentIdentificationCode_Assessment_AssessmentTitle] 
 */

CREATE INDEX [FK_AssessmentIdentificationCode_Assessment_AssessmentTitle] ON [edfi].[AssessmentIdentificationCode]([AcademicSubjectDescriptorId], [Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentIdentificationCode') AND name='FK_AssessmentIdentificationCode_Assessment_AssessmentTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentIdentificationCode.FK_AssessmentIdentificationCode_Assessment_AssessmentTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentIdentificationCode.FK_AssessmentIdentificationCode_Assessment_AssessmentTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentIdentificationCode_AssessmentIdentificationDescriptor_AssessmentIdentificationDescriptorId] 
 */

CREATE INDEX [FK_AssessmentIdentificationCode_AssessmentIdentificationDescriptor_AssessmentIdentificationDescriptorId] ON [edfi].[AssessmentIdentificationCode]([AssessmentIdentificationSystemDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentIdentificationCode') AND name='FK_AssessmentIdentificationCode_AssessmentIdentificationDescriptor_AssessmentIdentificationDescriptorId')
    PRINT '<<< CREATED INDEX edfi.AssessmentIdentificationCode.FK_AssessmentIdentificationCode_AssessmentIdentificationDescriptor_AssessmentIdentificationDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentIdentificationCode.FK_AssessmentIdentificationCode_AssessmentIdentificationDescriptor_AssessmentIdentificationDescriptorId >>>'
go

/* 
 * INDEX: [FK_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemType_AssessmentIdentificationSystemTypeId] 
 */

CREATE INDEX [FK_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemType_AssessmentIdentificationSystemTypeId] ON [edfi].[AssessmentIdentificationSystemDescriptor]([AssessmentIdentificationSystemTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentIdentificationSystemDescriptor') AND name='FK_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemType_AssessmentIdentificationSystemTypeId')
    PRINT '<<< CREATED INDEX edfi.AssessmentIdentificationSystemDescriptor.FK_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemType_AssessmentIdentificationSystemTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentIdentificationSystemDescriptor.FK_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemType_AssessmentIdentificationSystemTypeId >>>'
go

/* 
 * INDEX: [FK_AssessmentIdentificationSystemDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_AssessmentIdentificationSystemDescriptor_Descriptor_DescriptorId] ON [edfi].[AssessmentIdentificationSystemDescriptor]([AssessmentIdentificationSystemDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentIdentificationSystemDescriptor') AND name='FK_AssessmentIdentificationSystemDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.AssessmentIdentificationSystemDescriptor.FK_AssessmentIdentificationSystemDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentIdentificationSystemDescriptor.FK_AssessmentIdentificationSystemDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_AssessmentItem_Assessment_AssessmentTitle] 
 */

CREATE INDEX [FK_AssessmentItem_Assessment_AssessmentTitle] ON [edfi].[AssessmentItem]([AcademicSubjectDescriptorId], [Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentItem') AND name='FK_AssessmentItem_Assessment_AssessmentTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentItem.FK_AssessmentItem_Assessment_AssessmentTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentItem.FK_AssessmentItem_Assessment_AssessmentTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentItem_AssessmentItemCategoryType_AssessmentItemCategoryTypeId] 
 */

CREATE INDEX [FK_AssessmentItem_AssessmentItemCategoryType_AssessmentItemCategoryTypeId] ON [edfi].[AssessmentItem]([AssessmentItemCategoryTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentItem') AND name='FK_AssessmentItem_AssessmentItemCategoryType_AssessmentItemCategoryTypeId')
    PRINT '<<< CREATED INDEX edfi.AssessmentItem.FK_AssessmentItem_AssessmentItemCategoryType_AssessmentItemCategoryTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentItem.FK_AssessmentItem_AssessmentItemCategoryType_AssessmentItemCategoryTypeId >>>'
go

/* 
 * INDEX: [FK_AssessmentItemLearningStandard_AssessmentItem] 
 */

CREATE INDEX [FK_AssessmentItemLearningStandard_AssessmentItem] ON [edfi].[AssessmentItemLearningStandard]([AssessedGradeLevelDescriptorId], [IdentificationCode], [AcademicSubjectDescriptorId], [Version], [AssessmentTitle])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentItemLearningStandard') AND name='FK_AssessmentItemLearningStandard_AssessmentItem')
    PRINT '<<< CREATED INDEX edfi.AssessmentItemLearningStandard.FK_AssessmentItemLearningStandard_AssessmentItem >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentItemLearningStandard.FK_AssessmentItemLearningStandard_AssessmentItem >>>'
go

/* 
 * INDEX: [FK_AssessmentItemLearningStandard_LearningStandard_LearningStandardId] 
 */

CREATE INDEX [FK_AssessmentItemLearningStandard_LearningStandard_LearningStandardId] ON [edfi].[AssessmentItemLearningStandard]([LearningStandardId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentItemLearningStandard') AND name='FK_AssessmentItemLearningStandard_LearningStandard_LearningStandardId')
    PRINT '<<< CREATED INDEX edfi.AssessmentItemLearningStandard.FK_AssessmentItemLearningStandard_LearningStandard_LearningStandardId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentItemLearningStandard.FK_AssessmentItemLearningStandard_LearningStandard_LearningStandardId >>>'
go

/* 
 * INDEX: [FK_AssessmentLanguages_Assessment_AssessmentTitle] 
 */

CREATE INDEX [FK_AssessmentLanguages_Assessment_AssessmentTitle] ON [edfi].[AssessmentLanguage]([Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentLanguage') AND name='FK_AssessmentLanguages_Assessment_AssessmentTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentLanguage.FK_AssessmentLanguages_Assessment_AssessmentTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentLanguage.FK_AssessmentLanguages_Assessment_AssessmentTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentLanguages_LanguageDescriptor_LanguageDescriptorId] 
 */

CREATE INDEX [FK_AssessmentLanguages_LanguageDescriptor_LanguageDescriptorId] ON [edfi].[AssessmentLanguage]([LanguageDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentLanguage') AND name='FK_AssessmentLanguages_LanguageDescriptor_LanguageDescriptorId')
    PRINT '<<< CREATED INDEX edfi.AssessmentLanguage.FK_AssessmentLanguages_LanguageDescriptor_LanguageDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentLanguage.FK_AssessmentLanguages_LanguageDescriptor_LanguageDescriptorId >>>'
go

/* 
 * INDEX: [FK_AssessmentPerformanceLevel_Assessment_AssessmentTitle] 
 */

CREATE INDEX [FK_AssessmentPerformanceLevel_Assessment_AssessmentTitle] ON [edfi].[AssessmentPerformanceLevel]([AcademicSubjectDescriptorId], [Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentPerformanceLevel') AND name='FK_AssessmentPerformanceLevel_Assessment_AssessmentTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_Assessment_AssessmentTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_Assessment_AssessmentTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentPerformanceLevel_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] 
 */

CREATE INDEX [FK_AssessmentPerformanceLevel_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] ON [edfi].[AssessmentPerformanceLevel]([AssessmentReportingMethodTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentPerformanceLevel') AND name='FK_AssessmentPerformanceLevel_AssessmentReportingMethodType_AssessmentReportingMethodTypeId')
    PRINT '<<< CREATED INDEX edfi.AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_AssessmentReportingMethodType_AssessmentReportingMethodTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_AssessmentReportingMethodType_AssessmentReportingMethodTypeId >>>'
go

/* 
 * INDEX: [FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId] 
 */

CREATE INDEX [FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId] ON [edfi].[AssessmentPerformanceLevel]([PerformanceLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentPerformanceLevel') AND name='FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_AssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId] 
 */

CREATE INDEX [FK_AssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId] ON [edfi].[AssessmentPerformanceLevel]([ResultDatatypeTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentPerformanceLevel') AND name='FK_AssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId')
    PRINT '<<< CREATED INDEX edfi.AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentPerformanceLevel.FK_AssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId >>>'
go

/* 
 * INDEX: [FK_AssessmentPeriodDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_AssessmentPeriodDescriptor_Descriptor_DescriptorId] ON [edfi].[AssessmentPeriodDescriptor]([AssessmentPeriodDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentPeriodDescriptor') AND name='FK_AssessmentPeriodDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.AssessmentPeriodDescriptor.FK_AssessmentPeriodDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentPeriodDescriptor.FK_AssessmentPeriodDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_AssessmentProgram_Assessment_AssessmentTitle] 
 */

CREATE INDEX [FK_AssessmentProgram_Assessment_AssessmentTitle] ON [edfi].[AssessmentProgram]([AcademicSubjectDescriptorId], [Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentProgram') AND name='FK_AssessmentProgram_Assessment_AssessmentTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentProgram.FK_AssessmentProgram_Assessment_AssessmentTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentProgram.FK_AssessmentProgram_Assessment_AssessmentTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentProgram_Program_ProgramTypeId] 
 */

CREATE INDEX [FK_AssessmentProgram_Program_ProgramTypeId] ON [edfi].[AssessmentProgram]([ProgramTypeId], [EducationOrganizationId], [ProgramName])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentProgram') AND name='FK_AssessmentProgram_Program_ProgramTypeId')
    PRINT '<<< CREATED INDEX edfi.AssessmentProgram.FK_AssessmentProgram_Program_ProgramTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentProgram.FK_AssessmentProgram_Program_ProgramTypeId >>>'
go

/* 
 * INDEX: [FK_AssessmentScore_Assessment_AssessmentTitle] 
 */

CREATE INDEX [FK_AssessmentScore_Assessment_AssessmentTitle] ON [edfi].[AssessmentScore]([AcademicSubjectDescriptorId], [Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentScore') AND name='FK_AssessmentScore_Assessment_AssessmentTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentScore.FK_AssessmentScore_Assessment_AssessmentTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentScore.FK_AssessmentScore_Assessment_AssessmentTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentScore_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] 
 */

CREATE INDEX [FK_AssessmentScore_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] ON [edfi].[AssessmentScore]([AssessmentReportingMethodTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentScore') AND name='FK_AssessmentScore_AssessmentReportingMethodType_AssessmentReportingMethodTypeId')
    PRINT '<<< CREATED INDEX edfi.AssessmentScore.FK_AssessmentScore_AssessmentReportingMethodType_AssessmentReportingMethodTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentScore.FK_AssessmentScore_AssessmentReportingMethodType_AssessmentReportingMethodTypeId >>>'
go

/* 
 * INDEX: [FK_AssessmentScore_ResultDatatypeType_ResultDatatypeTypeId] 
 */

CREATE INDEX [FK_AssessmentScore_ResultDatatypeType_ResultDatatypeTypeId] ON [edfi].[AssessmentScore]([ResultDatatypeTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentScore') AND name='FK_AssessmentScore_ResultDatatypeType_ResultDatatypeTypeId')
    PRINT '<<< CREATED INDEX edfi.AssessmentScore.FK_AssessmentScore_ResultDatatypeType_ResultDatatypeTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentScore.FK_AssessmentScore_ResultDatatypeType_ResultDatatypeTypeId >>>'
go

/* 
 * INDEX: [FK_AssessmentSection_Assessment_AssessmentTitle] 
 */

CREATE INDEX [FK_AssessmentSection_Assessment_AssessmentTitle] ON [edfi].[AssessmentSection]([AcademicSubjectDescriptorId], [Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentSection') AND name='FK_AssessmentSection_Assessment_AssessmentTitle')
    PRINT '<<< CREATED INDEX edfi.AssessmentSection.FK_AssessmentSection_Assessment_AssessmentTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentSection.FK_AssessmentSection_Assessment_AssessmentTitle >>>'
go

/* 
 * INDEX: [FK_AssessmentSection_Section_SchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_AssessmentSection_Section_SchoolId]
    ON [edfi].[AssessmentSection]([ClassPeriodName] ASC, [UniqueSectionCode] ASC, [ClassroomIdentificationCode] ASC, [SequenceOfCourse] ASC, [SchoolId] ASC, [LocalCourseCode] ASC, [TermDescriptorId] ASC, [SchoolYear] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AssessmentSection') AND name='FK_AssessmentSection_Section_SchoolId')
    PRINT '<<< CREATED INDEX edfi.AssessmentSection.FK_AssessmentSection_Section_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AssessmentSection.FK_AssessmentSection_Section_SchoolId >>>'
go

/* 
 * INDEX: [FK_AttendanceEventCategoryDescriptor_AttendanceEventCategoryType_AttendanceEventCategoryTypeId] 
 */

CREATE INDEX [FK_AttendanceEventCategoryDescriptor_AttendanceEventCategoryType_AttendanceEventCategoryTypeId] ON [edfi].[AttendanceEventCategoryDescriptor]([AttendanceEventCategoryTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AttendanceEventCategoryDescriptor') AND name='FK_AttendanceEventCategoryDescriptor_AttendanceEventCategoryType_AttendanceEventCategoryTypeId')
    PRINT '<<< CREATED INDEX edfi.AttendanceEventCategoryDescriptor.FK_AttendanceEventCategoryDescriptor_AttendanceEventCategoryType_AttendanceEventCategoryTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AttendanceEventCategoryDescriptor.FK_AttendanceEventCategoryDescriptor_AttendanceEventCategoryType_AttendanceEventCategoryTypeId >>>'
go

/* 
 * INDEX: [FK_AttendanceEventCategoryDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_AttendanceEventCategoryDescriptor_Descriptor_DescriptorId] ON [edfi].[AttendanceEventCategoryDescriptor]([AttendanceEventCategoryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.AttendanceEventCategoryDescriptor') AND name='FK_AttendanceEventCategoryDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.AttendanceEventCategoryDescriptor.FK_AttendanceEventCategoryDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.AttendanceEventCategoryDescriptor.FK_AttendanceEventCategoryDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_BehaviorDescriptor_BehaviorType_BehaviorTypeId] 
 */

CREATE INDEX [FK_BehaviorDescriptor_BehaviorType_BehaviorTypeId] ON [edfi].[BehaviorDescriptor]([BehaviorTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.BehaviorDescriptor') AND name='FK_BehaviorDescriptor_BehaviorType_BehaviorTypeId')
    PRINT '<<< CREATED INDEX edfi.BehaviorDescriptor.FK_BehaviorDescriptor_BehaviorType_BehaviorTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.BehaviorDescriptor.FK_BehaviorDescriptor_BehaviorType_BehaviorTypeId >>>'
go

/* 
 * INDEX: [FK_BehaviorDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_BehaviorDescriptor_Descriptor_DescriptorId] ON [edfi].[BehaviorDescriptor]([BehaviorDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.BehaviorDescriptor') AND name='FK_BehaviorDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.BehaviorDescriptor.FK_BehaviorDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.BehaviorDescriptor.FK_BehaviorDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_BellSchedule_CalendarDate_Date] 
 */

CREATE INDEX [FK_BellSchedule_CalendarDate_Date] ON [edfi].[BellSchedule]([Date])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.BellSchedule') AND name='FK_BellSchedule_CalendarDate_Date')
    PRINT '<<< CREATED INDEX edfi.BellSchedule.FK_BellSchedule_CalendarDate_Date >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.BellSchedule.FK_BellSchedule_CalendarDate_Date >>>'
go

/* 
 * INDEX: [FK_BellSchedule_GradeLevelDescriptorId] 
 */

CREATE INDEX [FK_BellSchedule_GradeLevelDescriptorId] ON [edfi].[BellSchedule]([GradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.BellSchedule') AND name='FK_BellSchedule_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.BellSchedule.FK_BellSchedule_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.BellSchedule.FK_BellSchedule_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_BellSchedule_School_SchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_BellSchedule_School_SchoolId] ON [edfi].[BellSchedule]([SchoolId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.BellSchedule') AND name='FK_BellSchedule_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.BellSchedule.FK_BellSchedule_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.BellSchedule.FK_BellSchedule_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_BellScheduleMeetingTime_BellSchedule] 
 */

CREATE INDEX [FK_BellScheduleMeetingTime_BellSchedule] ON [edfi].[BellScheduleMeetingTime]([Date], [GradeLevelDescriptorId], [BellScheduleName])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.BellScheduleMeetingTime') AND name='FK_BellScheduleMeetingTime_BellSchedule')
    PRINT '<<< CREATED INDEX edfi.BellScheduleMeetingTime.FK_BellScheduleMeetingTime_BellSchedule >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.BellScheduleMeetingTime.FK_BellScheduleMeetingTime_BellSchedule >>>'
go

/* 
 * INDEX: [FK_BellScheduleMeetingTime_ClassPeriod] 
 */

CREATE INDEX [FK_BellScheduleMeetingTime_ClassPeriod] ON [edfi].[BellScheduleMeetingTime]([SchoolId], [ClassPeriodName])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.BellScheduleMeetingTime') AND name='FK_BellScheduleMeetingTime_ClassPeriod')
    PRINT '<<< CREATED INDEX edfi.BellScheduleMeetingTime.FK_BellScheduleMeetingTime_ClassPeriod >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.BellScheduleMeetingTime.FK_BellScheduleMeetingTime_ClassPeriod >>>'
go

/* 
 * INDEX: [FK_Budget_Account_EducationOrganizationId] 
 */

CREATE INDEX [FK_Budget_Account_EducationOrganizationId] ON [edfi].[Budget]([EducationOrganizationId], [FiscalYear], [AccountNumber])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Budget') AND name='FK_Budget_Account_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.Budget.FK_Budget_Account_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Budget.FK_Budget_Account_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_CalendarDate_School_SchoolId] 
 */

CREATE INDEX [FK_CalendarDate_School_SchoolId] ON [edfi].[CalendarDate]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CalendarDate') AND name='FK_CalendarDate_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.CalendarDate.FK_CalendarDate_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CalendarDate.FK_CalendarDate_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_CalendarDateCalendarEvent_CalendarDate] 
 */

CREATE INDEX [FK_CalendarDateCalendarEvent_CalendarDate] ON [edfi].[CalendarDateCalendarEvent]([SchoolId], [Date])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CalendarDateCalendarEvent') AND name='FK_CalendarDateCalendarEvent_CalendarDate')
    PRINT '<<< CREATED INDEX edfi.CalendarDateCalendarEvent.FK_CalendarDateCalendarEvent_CalendarDate >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CalendarDateCalendarEvent.FK_CalendarDateCalendarEvent_CalendarDate >>>'
go

/* 
 * INDEX: [FK_CalendarDateCalendarEvent_CalendarEventDescriptor_CalendarEventDescriptorId] 
 */

CREATE INDEX [FK_CalendarDateCalendarEvent_CalendarEventDescriptor_CalendarEventDescriptorId] ON [edfi].[CalendarDateCalendarEvent]([CalendarEventDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CalendarDateCalendarEvent') AND name='FK_CalendarDateCalendarEvent_CalendarEventDescriptor_CalendarEventDescriptorId')
    PRINT '<<< CREATED INDEX edfi.CalendarDateCalendarEvent.FK_CalendarDateCalendarEvent_CalendarEventDescriptor_CalendarEventDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CalendarDateCalendarEvent.FK_CalendarDateCalendarEvent_CalendarEventDescriptor_CalendarEventDescriptorId >>>'
go

/* 
 * INDEX: [FK_CalendarEventDescriptor_CalendarEventType_CalendarEventTypeId] 
 */

CREATE INDEX [FK_CalendarEventDescriptor_CalendarEventType_CalendarEventTypeId] ON [edfi].[CalendarEventDescriptor]([CalendarEventTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CalendarEventDescriptor') AND name='FK_CalendarEventDescriptor_CalendarEventType_CalendarEventTypeId')
    PRINT '<<< CREATED INDEX edfi.CalendarEventDescriptor.FK_CalendarEventDescriptor_CalendarEventType_CalendarEventTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CalendarEventDescriptor.FK_CalendarEventDescriptor_CalendarEventType_CalendarEventTypeId >>>'
go

/* 
 * INDEX: [FK_CalendarEventDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_CalendarEventDescriptor_Descriptor_DescriptorId] ON [edfi].[CalendarEventDescriptor]([CalendarEventDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CalendarEventDescriptor') AND name='FK_CalendarEventDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.CalendarEventDescriptor.FK_CalendarEventDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CalendarEventDescriptor.FK_CalendarEventDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_ClassPeriod_School_SchoolId] 
 */

CREATE INDEX [FK_ClassPeriod_School_SchoolId] ON [edfi].[ClassPeriod]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ClassPeriod') AND name='FK_ClassPeriod_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.ClassPeriod.FK_ClassPeriod_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ClassPeriod.FK_ClassPeriod_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_ClassroomPositionDescriptor_ClassroomPositionType_ClassroomPositionTypeId] 
 */

CREATE INDEX [FK_ClassroomPositionDescriptor_ClassroomPositionType_ClassroomPositionTypeId] ON [edfi].[ClassroomPositionDescriptor]([ClassroomPositionTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ClassroomPositionDescriptor') AND name='FK_ClassroomPositionDescriptor_ClassroomPositionType_ClassroomPositionTypeId')
    PRINT '<<< CREATED INDEX edfi.ClassroomPositionDescriptor.FK_ClassroomPositionDescriptor_ClassroomPositionType_ClassroomPositionTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ClassroomPositionDescriptor.FK_ClassroomPositionDescriptor_ClassroomPositionType_ClassroomPositionTypeId >>>'
go

/* 
 * INDEX: [FK_ClassroomPositionDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_ClassroomPositionDescriptor_Descriptor_DescriptorId] ON [edfi].[ClassroomPositionDescriptor]([ClassroomPositionDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ClassroomPositionDescriptor') AND name='FK_ClassroomPositionDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.ClassroomPositionDescriptor.FK_ClassroomPositionDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ClassroomPositionDescriptor.FK_ClassroomPositionDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_Cohort_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_Cohort_EducationOrganization_EducationOrganizationId] ON [edfi].[Cohort]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Cohort') AND name='FK_Cohort_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.Cohort.FK_Cohort_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Cohort.FK_Cohort_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_Cohort_AcademicSubjectDescriptorId] 
 */

CREATE INDEX [FK_Cohort_AcademicSubjectDescriptorId] ON [edfi].[Cohort]([AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Cohort') AND name='FK_Cohort_AcademicSubjectDescriptorId')
    PRINT '<<< CREATED INDEX edfi.Cohort.FK_Cohort_AcademicSubjectDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Cohort.FK_Cohort_AcademicSubjectDescriptorId >>>'
go

/* 
 * INDEX: [FK_Cohort_CohortScopeType_CohortScopeTypeId] 
 */

CREATE INDEX [FK_Cohort_CohortScopeType_CohortScopeTypeId] ON [edfi].[Cohort]([CohortScopeTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Cohort') AND name='FK_Cohort_CohortScopeType_CohortScopeTypeId')
    PRINT '<<< CREATED INDEX edfi.Cohort.FK_Cohort_CohortScopeType_CohortScopeTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Cohort.FK_Cohort_CohortScopeType_CohortScopeTypeId >>>'
go

/* 
 * INDEX: [FK_Cohort_CohortType_CohortTypeId] 
 */

CREATE INDEX [FK_Cohort_CohortType_CohortTypeId] ON [edfi].[Cohort]([CohortTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Cohort') AND name='FK_Cohort_CohortType_CohortTypeId')
    PRINT '<<< CREATED INDEX edfi.Cohort.FK_Cohort_CohortType_CohortTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Cohort.FK_Cohort_CohortType_CohortTypeId >>>'
go

/* 
 * INDEX: [FK_CohortProgram_Cohort_EducationOrganizationId] 
 */

CREATE INDEX [FK_CohortProgram_Cohort_EducationOrganizationId] ON [edfi].[CohortProgram]([CohortIdentifier], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CohortProgram') AND name='FK_CohortProgram_Cohort_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.CohortProgram.FK_CohortProgram_Cohort_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CohortProgram.FK_CohortProgram_Cohort_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_CohortProgram_Program_EducationOrganizationId] 
 */

CREATE INDEX [FK_CohortProgram_Program_EducationOrganizationId] ON [edfi].[CohortProgram]([ProgramName], [ProgramTypeId], [ProgramEducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CohortProgram') AND name='FK_CohortProgram_Program_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.CohortProgram.FK_CohortProgram_Program_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CohortProgram.FK_CohortProgram_Program_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_CompetencyLevelDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_CompetencyLevelDescriptor_Descriptor_DescriptorId] ON [edfi].[CompetencyLevelDescriptor]([CompetencyLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CompetencyLevelDescriptor') AND name='FK_CompetencyLevelDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.CompetencyLevelDescriptor.FK_CompetencyLevelDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CompetencyLevelDescriptor.FK_CompetencyLevelDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_CompetencyLevelDescriptor_PerformanceBaseType_PerformanceBaseConversionTypeId] 
 */

CREATE INDEX [FK_CompetencyLevelDescriptor_PerformanceBaseType_PerformanceBaseConversionTypeId] ON [edfi].[CompetencyLevelDescriptor]([PerformanceBaseConversionTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CompetencyLevelDescriptor') AND name='FK_CompetencyLevelDescriptor_PerformanceBaseType_PerformanceBaseConversionTypeId')
    PRINT '<<< CREATED INDEX edfi.CompetencyLevelDescriptor.FK_CompetencyLevelDescriptor_PerformanceBaseType_PerformanceBaseConversionTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CompetencyLevelDescriptor.FK_CompetencyLevelDescriptor_PerformanceBaseType_PerformanceBaseConversionTypeId >>>'
go

/* 
 * INDEX: [FK_CompetencyObjective_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_CompetencyObjective_EducationOrganization_EducationOrganizationId] ON [edfi].[CompetencyObjective]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CompetencyObjective') AND name='FK_CompetencyObjective_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.CompetencyObjective.FK_CompetencyObjective_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CompetencyObjective.FK_CompetencyObjective_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_CompetencyObjective_ObjectiveGradeLevelDescriptorId] 
 */

CREATE INDEX [FK_CompetencyObjective_ObjectiveGradeLevelDescriptorId] ON [edfi].[CompetencyObjective]([ObjectiveGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CompetencyObjective') AND name='FK_CompetencyObjective_ObjectiveGradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.CompetencyObjective.FK_CompetencyObjective_ObjectiveGradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CompetencyObjective.FK_CompetencyObjective_ObjectiveGradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_ContinuationOfServicesReasonDescriptor_ContinuationOfServicesReasonType_ContinuationOfServicesReasonTypeId] 
 */

CREATE INDEX [FK_ContinuationOfServicesReasonDescriptor_ContinuationOfServicesReasonType_ContinuationOfServicesReasonTypeId] ON [edfi].[ContinuationOfServicesReasonDescriptor]([ContinuationOfServicesReasonTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ContinuationOfServicesReasonDescriptor') AND name='FK_ContinuationOfServicesReasonDescriptor_ContinuationOfServicesReasonType_ContinuationOfServicesReasonTypeId')
    PRINT '<<< CREATED INDEX edfi.ContinuationOfServicesReasonDescriptor.FK_ContinuationOfServicesReasonDescriptor_ContinuationOfServicesReasonType_ContinuationOfServicesReasonTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ContinuationOfServicesReasonDescriptor.FK_ContinuationOfServicesReasonDescriptor_ContinuationOfServicesReasonType_ContinuationOfServicesReasonTypeId >>>'
go

/* 
 * INDEX: [FK_ContinuationOfServicesReasonDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_ContinuationOfServicesReasonDescriptor_Descriptor_DescriptorId] ON [edfi].[ContinuationOfServicesReasonDescriptor]([ContinuationOfServicesReasonDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ContinuationOfServicesReasonDescriptor') AND name='FK_ContinuationOfServicesReasonDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.ContinuationOfServicesReasonDescriptor.FK_ContinuationOfServicesReasonDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ContinuationOfServicesReasonDescriptor.FK_ContinuationOfServicesReasonDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_ContractedStaff_Account_EducationOrganizationId] 
 */

CREATE INDEX [FK_ContractedStaff_Account_EducationOrganizationId] ON [edfi].[ContractedStaff]([AccountNumber], [EducationOrganizationId], [FiscalYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ContractedStaff') AND name='FK_ContractedStaff_Account_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.ContractedStaff.FK_ContractedStaff_Account_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ContractedStaff.FK_ContractedStaff_Account_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_ContractedStaff_Staff_StaffUSI] 
 */

CREATE INDEX [FK_ContractedStaff_Staff_StaffUSI] ON [edfi].[ContractedStaff]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ContractedStaff') AND name='FK_ContractedStaff_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.ContractedStaff.FK_ContractedStaff_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ContractedStaff.FK_ContractedStaff_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_CountryDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_CountryDescriptor_Descriptor_DescriptorId] ON [edfi].[CountryDescriptor]([CountryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CountryDescriptor') AND name='FK_CountryDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.CountryDescriptor.FK_CountryDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CountryDescriptor.FK_CountryDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_Course_AcademicSubjectDescriptorId] 
 */

CREATE INDEX [FK_Course_AcademicSubjectDescriptorId] ON [edfi].[Course]([AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Course') AND name='FK_Course_AcademicSubjectDescriptorId')
    PRINT '<<< CREATED INDEX edfi.Course.FK_Course_AcademicSubjectDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Course.FK_Course_AcademicSubjectDescriptorId >>>'
go

/* 
 * INDEX: [FK_Course_CareerPathwayType_CareerPathwayTypeId] 
 */

CREATE INDEX [FK_Course_CareerPathwayType_CareerPathwayTypeId] ON [edfi].[Course]([CareerPathwayTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Course') AND name='FK_Course_CareerPathwayType_CareerPathwayTypeId')
    PRINT '<<< CREATED INDEX edfi.Course.FK_Course_CareerPathwayType_CareerPathwayTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Course.FK_Course_CareerPathwayType_CareerPathwayTypeId >>>'
go

/* 
 * INDEX: [FK_Course_CourseDefinedByType_CourseDefinedByTypeId] 
 */

CREATE INDEX [FK_Course_CourseDefinedByType_CourseDefinedByTypeId] ON [edfi].[Course]([CourseDefinedByTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Course') AND name='FK_Course_CourseDefinedByType_CourseDefinedByTypeId')
    PRINT '<<< CREATED INDEX edfi.Course.FK_Course_CourseDefinedByType_CourseDefinedByTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Course.FK_Course_CourseDefinedByType_CourseDefinedByTypeId >>>'
go

/* 
 * INDEX: [FK_Course_CourseGPAApplicabilityType_CourseGPAApplicabilityTypeId] 
 */

CREATE INDEX [FK_Course_CourseGPAApplicabilityType_CourseGPAApplicabilityTypeId] ON [edfi].[Course]([CourseGPAApplicabilityTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Course') AND name='FK_Course_CourseGPAApplicabilityType_CourseGPAApplicabilityTypeId')
    PRINT '<<< CREATED INDEX edfi.Course.FK_Course_CourseGPAApplicabilityType_CourseGPAApplicabilityTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Course.FK_Course_CourseGPAApplicabilityType_CourseGPAApplicabilityTypeId >>>'
go

/* 
 * INDEX: [FK_Course_CreditType_MaximumAvailableCreditTypeId] 
 */

CREATE INDEX [FK_Course_CreditType_MaximumAvailableCreditTypeId] ON [edfi].[Course]([MaximumAvailableCreditTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Course') AND name='FK_Course_CreditType_MaximumAvailableCreditTypeId')
    PRINT '<<< CREATED INDEX edfi.Course.FK_Course_CreditType_MaximumAvailableCreditTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Course.FK_Course_CreditType_MaximumAvailableCreditTypeId >>>'
go

/* 
 * INDEX: [FK_Course_CreditType_MinimumAvailableCreditTypeId] 
 */

CREATE INDEX [FK_Course_CreditType_MinimumAvailableCreditTypeId] ON [edfi].[Course]([MinimumAvailableCreditTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Course') AND name='FK_Course_CreditType_MinimumAvailableCreditTypeId')
    PRINT '<<< CREATED INDEX edfi.Course.FK_Course_CreditType_MinimumAvailableCreditTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Course.FK_Course_CreditType_MinimumAvailableCreditTypeId >>>'
go

/* 
 * INDEX: [FK_Course_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_Course_EducationOrganization_EducationOrganizationId] ON [edfi].[Course]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Course') AND name='FK_Course_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.Course.FK_Course_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Course.FK_Course_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_CourseCompetencyLevel_CompetencyLevelDescriptor_CompetencyLevelDescriptorId] 
 */

CREATE INDEX [FK_CourseCompetencyLevel_CompetencyLevelDescriptor_CompetencyLevelDescriptorId] ON [edfi].[CourseCompetencyLevel]([CompetencyLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseCompetencyLevel') AND name='FK_CourseCompetencyLevel_CompetencyLevelDescriptor_CompetencyLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.CourseCompetencyLevel.FK_CourseCompetencyLevel_CompetencyLevelDescriptor_CompetencyLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseCompetencyLevel.FK_CourseCompetencyLevel_CompetencyLevelDescriptor_CompetencyLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_CourseCompetencyLevel_Course_EducationOrganizationId] 
 */

CREATE INDEX [FK_CourseCompetencyLevel_Course_EducationOrganizationId] ON [edfi].[CourseCompetencyLevel]([CourseCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseCompetencyLevel') AND name='FK_CourseCompetencyLevel_Course_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.CourseCompetencyLevel.FK_CourseCompetencyLevel_Course_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseCompetencyLevel.FK_CourseCompetencyLevel_Course_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_CourseIdentificationCode_Course_EducationOrganizationId] 
 */

CREATE INDEX [FK_CourseIdentificationCode_Course_EducationOrganizationId] ON [edfi].[CourseIdentificationCode]([EducationOrganizationId], [CourseCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseIdentificationCode') AND name='FK_CourseIdentificationCode_Course_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.CourseIdentificationCode.FK_CourseIdentificationCode_Course_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseIdentificationCode.FK_CourseIdentificationCode_Course_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor] 
 */

CREATE INDEX [FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor] ON [edfi].[CourseIdentificationCode]([CourseIdentificationSystemDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseIdentificationCode') AND name='FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor')
    PRINT '<<< CREATED INDEX edfi.CourseIdentificationCode.FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseIdentificationCode.FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor >>>'
go

/* 
 * INDEX: [FK_CourseIdentificationDescriptor_Descriptor] 
 */

CREATE INDEX [FK_CourseIdentificationDescriptor_Descriptor] ON [edfi].[CourseIdentificationSystemDescriptor]([CourseIdentificationSystemDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseIdentificationSystemDescriptor') AND name='FK_CourseIdentificationDescriptor_Descriptor')
    PRINT '<<< CREATED INDEX edfi.CourseIdentificationSystemDescriptor.FK_CourseIdentificationDescriptor_Descriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseIdentificationSystemDescriptor.FK_CourseIdentificationDescriptor_Descriptor >>>'
go

/* 
 * INDEX: [FK_CourseIdentificationSystemDescriptor_CourseIdentificationSystemType] 
 */

CREATE INDEX [FK_CourseIdentificationSystemDescriptor_CourseIdentificationSystemType] ON [edfi].[CourseIdentificationSystemDescriptor]([CourseIdentificationSystemTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseIdentificationSystemDescriptor') AND name='FK_CourseIdentificationSystemDescriptor_CourseIdentificationSystemType')
    PRINT '<<< CREATED INDEX edfi.CourseIdentificationSystemDescriptor.FK_CourseIdentificationSystemDescriptor_CourseIdentificationSystemType >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseIdentificationSystemDescriptor.FK_CourseIdentificationSystemDescriptor_CourseIdentificationSystemType >>>'
go

/* 
 * INDEX: [FK_CourseLearningObjective_Course_EducationOrganizationId] 
 */

CREATE INDEX [FK_CourseLearningObjective_Course_EducationOrganizationId] ON [edfi].[CourseLearningObjective]([CourseCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseLearningObjective') AND name='FK_CourseLearningObjective_Course_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.CourseLearningObjective.FK_CourseLearningObjective_Course_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseLearningObjective.FK_CourseLearningObjective_Course_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_CourseLearningObjective_LearningObjective_Objective] 
 */

CREATE INDEX [FK_CourseLearningObjective_LearningObjective_Objective] ON [edfi].[CourseLearningObjective]([ObjectiveGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Objective])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseLearningObjective') AND name='FK_CourseLearningObjective_LearningObjective_Objective')
    PRINT '<<< CREATED INDEX edfi.CourseLearningObjective.FK_CourseLearningObjective_LearningObjective_Objective >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseLearningObjective.FK_CourseLearningObjective_LearningObjective_Objective >>>'
go

/* 
 * INDEX: [FK_CourseLearningStandard_Course_EducationOrganizationId] 
 */

CREATE INDEX [FK_CourseLearningStandard_Course_EducationOrganizationId] ON [edfi].[CourseLearningStandard]([CourseCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseLearningStandard') AND name='FK_CourseLearningStandard_Course_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.CourseLearningStandard.FK_CourseLearningStandard_Course_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseLearningStandard.FK_CourseLearningStandard_Course_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_CourseLearningStandard_LearningStandard_LearningStandardId] 
 */

CREATE INDEX [FK_CourseLearningStandard_LearningStandard_LearningStandardId] ON [edfi].[CourseLearningStandard]([LearningStandardId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseLearningStandard') AND name='FK_CourseLearningStandard_LearningStandard_LearningStandardId')
    PRINT '<<< CREATED INDEX edfi.CourseLearningStandard.FK_CourseLearningStandard_LearningStandard_LearningStandardId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseLearningStandard.FK_CourseLearningStandard_LearningStandard_LearningStandardId >>>'
go

/* 
 * INDEX: [FK_CourseLevelCharacteristics_Course_EducationOrganizationId] 
 */

CREATE INDEX [FK_CourseLevelCharacteristics_Course_EducationOrganizationId] ON [edfi].[CourseLevelCharacteristic]([CourseCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseLevelCharacteristic') AND name='FK_CourseLevelCharacteristics_Course_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.CourseLevelCharacteristic.FK_CourseLevelCharacteristics_Course_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseLevelCharacteristic.FK_CourseLevelCharacteristics_Course_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_CourseLevelCharacteristics_CourseLevelCharacteristicsType_CourseLevelCharacteristicsTypeId] 
 */

CREATE INDEX [FK_CourseLevelCharacteristics_CourseLevelCharacteristicsType_CourseLevelCharacteristicsTypeId] ON [edfi].[CourseLevelCharacteristic]([CourseLevelCharacteristicTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseLevelCharacteristic') AND name='FK_CourseLevelCharacteristics_CourseLevelCharacteristicsType_CourseLevelCharacteristicsTypeId')
    PRINT '<<< CREATED INDEX edfi.CourseLevelCharacteristic.FK_CourseLevelCharacteristics_CourseLevelCharacteristicsType_CourseLevelCharacteristicsTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseLevelCharacteristic.FK_CourseLevelCharacteristics_CourseLevelCharacteristicsType_CourseLevelCharacteristicsTypeId >>>'
go

/* 
 * INDEX: [FK_CourseGradeLevel_Course_EducationOrganizationId] 
 */

CREATE INDEX [FK_CourseGradeLevel_Course_EducationOrganizationId] ON [edfi].[CourseOfferedGradeLevel]([CourseCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseOfferedGradeLevel') AND name='FK_CourseGradeLevel_Course_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.CourseOfferedGradeLevel.FK_CourseGradeLevel_Course_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseOfferedGradeLevel.FK_CourseGradeLevel_Course_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_CourseGradeLevel_GradeLevelDescriptorId] 
 */

CREATE INDEX [FK_CourseGradeLevel_GradeLevelDescriptorId] ON [edfi].[CourseOfferedGradeLevel]([GradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseOfferedGradeLevel') AND name='FK_CourseGradeLevel_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.CourseOfferedGradeLevel.FK_CourseGradeLevel_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseOfferedGradeLevel.FK_CourseGradeLevel_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_CourseOffering_Course_SchoolId] 
 */

CREATE INDEX [FK_CourseOffering_Course_SchoolId] ON [edfi].[CourseOffering]([EducationOrganizationId], [CourseCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseOffering') AND name='FK_CourseOffering_Course_SchoolId')
    PRINT '<<< CREATED INDEX edfi.CourseOffering.FK_CourseOffering_Course_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseOffering.FK_CourseOffering_Course_SchoolId >>>'
go

/* 
 * INDEX: [FK_CourseOffering_School_SchoolId] 
 */

CREATE INDEX [FK_CourseOffering_School_SchoolId] ON [edfi].[CourseOffering]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseOffering') AND name='FK_CourseOffering_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.CourseOffering.FK_CourseOffering_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseOffering.FK_CourseOffering_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_CourseOffering_Session_SchoolId] 
 */

CREATE INDEX [FK_CourseOffering_Session_SchoolId] ON [edfi].[CourseOffering]([TermDescriptorId], [SchoolId], [SchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseOffering') AND name='FK_CourseOffering_Session_SchoolId')
    PRINT '<<< CREATED INDEX edfi.CourseOffering.FK_CourseOffering_Session_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseOffering.FK_CourseOffering_Session_SchoolId >>>'
go

/* 
 * INDEX: [FK_CourseOfferingCurriculumUsed_CourseOffering_LocalCourseCode] 
 */

CREATE INDEX [FK_CourseOfferingCurriculumUsed_CourseOffering_LocalCourseCode] ON [edfi].[CourseOfferingCurriculumUsed]([LocalCourseCode], [SchoolId], [TermDescriptorId], [SchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseOfferingCurriculumUsed') AND name='FK_CourseOfferingCurriculumUsed_CourseOffering_LocalCourseCode')
    PRINT '<<< CREATED INDEX edfi.CourseOfferingCurriculumUsed.FK_CourseOfferingCurriculumUsed_CourseOffering_LocalCourseCode >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseOfferingCurriculumUsed.FK_CourseOfferingCurriculumUsed_CourseOffering_LocalCourseCode >>>'
go

/* 
 * INDEX: [FK_CourseOfferingCurriculumUsed_CurriculumUsedType_CurriculumUsedTypeId] 
 */

CREATE INDEX [FK_CourseOfferingCurriculumUsed_CurriculumUsedType_CurriculumUsedTypeId] ON [edfi].[CourseOfferingCurriculumUsed]([CurriculumUsedTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseOfferingCurriculumUsed') AND name='FK_CourseOfferingCurriculumUsed_CurriculumUsedType_CurriculumUsedTypeId')
    PRINT '<<< CREATED INDEX edfi.CourseOfferingCurriculumUsed.FK_CourseOfferingCurriculumUsed_CurriculumUsedType_CurriculumUsedTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseOfferingCurriculumUsed.FK_CourseOfferingCurriculumUsed_CurriculumUsedType_CurriculumUsedTypeId >>>'
go

/* 
 * INDEX: [FK_CourseOfferingCurriculumUsed_TermDescriptor_TermDescriptorId] 
 */

CREATE INDEX [FK_CourseOfferingCurriculumUsed_TermDescriptor_TermDescriptorId] ON [edfi].[CourseOfferingCurriculumUsed]([TermDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseOfferingCurriculumUsed') AND name='FK_CourseOfferingCurriculumUsed_TermDescriptor_TermDescriptorId')
    PRINT '<<< CREATED INDEX edfi.CourseOfferingCurriculumUsed.FK_CourseOfferingCurriculumUsed_TermDescriptor_TermDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseOfferingCurriculumUsed.FK_CourseOfferingCurriculumUsed_TermDescriptor_TermDescriptorId >>>'
go

/* 
 * INDEX: [FK_CourseTranscript_CourseAttemptResultType_CourseAttemptResultTypeId] 
 */

CREATE INDEX [FK_CourseTranscript_CourseAttemptResultType_CourseAttemptResultTypeId] ON [edfi].[CourseTranscript]([CourseAttemptResultTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseTranscript') AND name='FK_CourseTranscript_CourseAttemptResultType_CourseAttemptResultTypeId')
    PRINT '<<< CREATED INDEX edfi.CourseTranscript.FK_CourseTranscript_CourseAttemptResultType_CourseAttemptResultTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseTranscript.FK_CourseTranscript_CourseAttemptResultType_CourseAttemptResultTypeId >>>'
go

/* 
 * INDEX: [FK_CourseTranscript_CourseEducationOrganizationId_Course_EducationOrganizationId] 
 */

CREATE NONCLUSTERED INDEX [FK_CourseTranscript_CourseEducationOrganizationId_Course_EducationOrganizationId]
    ON [edfi].[CourseTranscript]([CourseCode] ASC, [CourseEducationOrganizationId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseTranscript') AND name='FK_CourseTranscript_CourseEducationOrganizationId_Course_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.CourseTranscript.FK_CourseTranscript_CourseEducationOrganizationId_Course_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseTranscript.FK_CourseTranscript_CourseEducationOrganizationId_Course_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_CourseTranscript_CourseRepeatCodeType_CourseRepeatCodeTypeId] 
 */

CREATE INDEX [FK_CourseTranscript_CourseRepeatCodeType_CourseRepeatCodeTypeId] ON [edfi].[CourseTranscript]([CourseRepeatCodeTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseTranscript') AND name='FK_CourseTranscript_CourseRepeatCodeType_CourseRepeatCodeTypeId')
    PRINT '<<< CREATED INDEX edfi.CourseTranscript.FK_CourseTranscript_CourseRepeatCodeType_CourseRepeatCodeTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseTranscript.FK_CourseTranscript_CourseRepeatCodeType_CourseRepeatCodeTypeId >>>'
go

/* 
 * INDEX: [FK_CourseTranscript_CreditType_AttemptedCreditTypeId] 
 */

CREATE INDEX [FK_CourseTranscript_CreditType_AttemptedCreditTypeId] ON [edfi].[CourseTranscript]([AttemptedCreditTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseTranscript') AND name='FK_CourseTranscript_CreditType_AttemptedCreditTypeId')
    PRINT '<<< CREATED INDEX edfi.CourseTranscript.FK_CourseTranscript_CreditType_AttemptedCreditTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseTranscript.FK_CourseTranscript_CreditType_AttemptedCreditTypeId >>>'
go

/* 
 * INDEX: [FK_CourseTranscript_CreditType_EarnedCreditTypeId] 
 */

CREATE INDEX [FK_CourseTranscript_CreditType_EarnedCreditTypeId] ON [edfi].[CourseTranscript]([EarnedCreditTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseTranscript') AND name='FK_CourseTranscript_CreditType_EarnedCreditTypeId')
    PRINT '<<< CREATED INDEX edfi.CourseTranscript.FK_CourseTranscript_CreditType_EarnedCreditTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseTranscript.FK_CourseTranscript_CreditType_EarnedCreditTypeId >>>'
go

/* 
 * INDEX: [FK_CourseTranscript_GradeLevelDescriptorId] 
 */

CREATE INDEX [FK_CourseTranscript_GradeLevelDescriptorId] ON [edfi].[CourseTranscript]([WhenTakenGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseTranscript') AND name='FK_CourseTranscript_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.CourseTranscript.FK_CourseTranscript_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseTranscript.FK_CourseTranscript_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_CourseTranscript_MethodCreditEarnedType_MethodCreditEarnedTypeId] 
 */

CREATE INDEX [FK_CourseTranscript_MethodCreditEarnedType_MethodCreditEarnedTypeId] ON [edfi].[CourseTranscript]([MethodCreditEarnedTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseTranscript') AND name='FK_CourseTranscript_MethodCreditEarnedType_MethodCreditEarnedTypeId')
    PRINT '<<< CREATED INDEX edfi.CourseTranscript.FK_CourseTranscript_MethodCreditEarnedType_MethodCreditEarnedTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseTranscript.FK_CourseTranscript_MethodCreditEarnedType_MethodCreditEarnedTypeId >>>'
go

/* 
 * INDEX: [FK_CourseTranscript_School_SchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_CourseTranscript_School_SchoolId] ON [edfi].[CourseTranscript]([SchoolId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseTranscript') AND name='FK_CourseTranscript_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.CourseTranscript.FK_CourseTranscript_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseTranscript.FK_CourseTranscript_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_CourseTranscript_StudentAcademicRecord_StudentUSI] 
 */

CREATE INDEX [FK_CourseTranscript_StudentAcademicRecord_StudentUSI] ON [edfi].[CourseTranscript]([EducationOrganizationId], [StudentUSI], [SchoolYear], [TermDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseTranscript') AND name='FK_CourseTranscript_StudentAcademicRecord_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.CourseTranscript.FK_CourseTranscript_StudentAcademicRecord_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseTranscript.FK_CourseTranscript_StudentAcademicRecord_StudentUSI >>>'
go

/* 
 * INDEX: [FK_CourseTranscript_TermDescriptor_TermDescriptorId] 
 */

CREATE INDEX [FK_CourseTranscript_TermDescriptor_TermDescriptorId] ON [edfi].[CourseTranscript]([TermDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseTranscript') AND name='FK_CourseTranscript_TermDescriptor_TermDescriptorId')
    PRINT '<<< CREATED INDEX edfi.CourseTranscript.FK_CourseTranscript_TermDescriptor_TermDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseTranscript.FK_CourseTranscript_TermDescriptor_TermDescriptorId >>>'
go

/* 
 * INDEX: [FK_CourseTranscriptAdditionalCredit_AdditionalCreditType_AdditionalCreditTypeId] 
 */

CREATE INDEX [FK_CourseTranscriptAdditionalCredit_AdditionalCreditType_AdditionalCreditTypeId] ON [edfi].[CourseTranscriptEarnedAdditionalCredits]([AdditionalCreditTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseTranscriptEarnedAdditionalCredits') AND name='FK_CourseTranscriptAdditionalCredit_AdditionalCreditType_AdditionalCreditTypeId')
    PRINT '<<< CREATED INDEX edfi.CourseTranscriptEarnedAdditionalCredits.FK_CourseTranscriptAdditionalCredit_AdditionalCreditType_AdditionalCreditTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseTranscriptEarnedAdditionalCredits.FK_CourseTranscriptAdditionalCredit_AdditionalCreditType_AdditionalCreditTypeId >>>'
go

/* 
 * INDEX: [FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript] 
 */

CREATE NONCLUSTERED INDEX [FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript]
    ON [edfi].[CourseTranscriptEarnedAdditionalCredits]([SchoolYear] ASC, [EducationOrganizationId] ASC, [CourseAttemptResultTypeId] ASC, [StudentUSI] ASC, [TermDescriptorId] ASC, [CourseEducationOrganizationId] ASC, [CourseCode] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CourseTranscriptEarnedAdditionalCredits') AND name='FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript')
    PRINT '<<< CREATED INDEX edfi.CourseTranscriptEarnedAdditionalCredits.FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CourseTranscriptEarnedAdditionalCredits.FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript >>>'
go

/* 
 * INDEX: [FK_CredentialFieldDescriptor_AcademicSubjectDescriptor_AcademicSubjectDescriptorId] 
 */

CREATE INDEX [FK_CredentialFieldDescriptor_AcademicSubjectDescriptor_AcademicSubjectDescriptorId] ON [edfi].[CredentialFieldDescriptor]([AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CredentialFieldDescriptor') AND name='FK_CredentialFieldDescriptor_AcademicSubjectDescriptor_AcademicSubjectDescriptorId')
    PRINT '<<< CREATED INDEX edfi.CredentialFieldDescriptor.FK_CredentialFieldDescriptor_AcademicSubjectDescriptor_AcademicSubjectDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CredentialFieldDescriptor.FK_CredentialFieldDescriptor_AcademicSubjectDescriptor_AcademicSubjectDescriptorId >>>'
go

/* 
 * INDEX: [FK_CredentialFieldDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_CredentialFieldDescriptor_Descriptor_DescriptorId] ON [edfi].[CredentialFieldDescriptor]([CredentialFieldDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.CredentialFieldDescriptor') AND name='FK_CredentialFieldDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.CredentialFieldDescriptor.FK_CredentialFieldDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.CredentialFieldDescriptor.FK_CredentialFieldDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_DiagnosisDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_DiagnosisDescriptor_Descriptor_DescriptorId] ON [edfi].[DiagnosisDescriptor]([DiagnosisDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DiagnosisDescriptor') AND name='FK_DiagnosisDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.DiagnosisDescriptor.FK_DiagnosisDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DiagnosisDescriptor.FK_DiagnosisDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_DiagnosisDescriptor_DiagnosisType_DiagnosisTypeId] 
 */

CREATE INDEX [FK_DiagnosisDescriptor_DiagnosisType_DiagnosisTypeId] ON [edfi].[DiagnosisDescriptor]([DiagnosisTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DiagnosisDescriptor') AND name='FK_DiagnosisDescriptor_DiagnosisType_DiagnosisTypeId')
    PRINT '<<< CREATED INDEX edfi.DiagnosisDescriptor.FK_DiagnosisDescriptor_DiagnosisType_DiagnosisTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DiagnosisDescriptor.FK_DiagnosisDescriptor_DiagnosisType_DiagnosisTypeId >>>'
go

/* 
 * INDEX: [FK_DisabilityDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_DisabilityDescriptor_Descriptor_DescriptorId] ON [edfi].[DisabilityDescriptor]([DisabilityDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisabilityDescriptor') AND name='FK_DisabilityDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.DisabilityDescriptor.FK_DisabilityDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisabilityDescriptor.FK_DisabilityDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_DisabilityDescriptor_DisabilityCategoryType_DisabilityCategoryId] 
 */

CREATE INDEX [FK_DisabilityDescriptor_DisabilityCategoryType_DisabilityCategoryId] ON [edfi].[DisabilityDescriptor]([DisabilityCategoryTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisabilityDescriptor') AND name='FK_DisabilityDescriptor_DisabilityCategoryType_DisabilityCategoryId')
    PRINT '<<< CREATED INDEX edfi.DisabilityDescriptor.FK_DisabilityDescriptor_DisabilityCategoryType_DisabilityCategoryId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisabilityDescriptor.FK_DisabilityDescriptor_DisabilityCategoryType_DisabilityCategoryId >>>'
go

/* 
 * INDEX: [FK_DisabilityDescriptor_DisabilityType_DisabilityTypeId] 
 */

CREATE INDEX [FK_DisabilityDescriptor_DisabilityType_DisabilityTypeId] ON [edfi].[DisabilityDescriptor]([DisabilityTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisabilityDescriptor') AND name='FK_DisabilityDescriptor_DisabilityType_DisabilityTypeId')
    PRINT '<<< CREATED INDEX edfi.DisabilityDescriptor.FK_DisabilityDescriptor_DisabilityType_DisabilityTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisabilityDescriptor.FK_DisabilityDescriptor_DisabilityType_DisabilityTypeId >>>'
go

/* 
 * INDEX: [FK_DisciplineAction_DisciplineActionLengthDifferenceReasonType_DisciplineActionLengthDifferenceReasonTypeId] 
 */

CREATE INDEX [FK_DisciplineAction_DisciplineActionLengthDifferenceReasonType_DisciplineActionLengthDifferenceReasonTypeId] ON [edfi].[DisciplineAction]([DisciplineActionLengthDifferenceReasonTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineAction') AND name='FK_DisciplineAction_DisciplineActionLengthDifferenceReasonType_DisciplineActionLengthDifferenceReasonTypeId')
    PRINT '<<< CREATED INDEX edfi.DisciplineAction.FK_DisciplineAction_DisciplineActionLengthDifferenceReasonType_DisciplineActionLengthDifferenceReasonTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineAction.FK_DisciplineAction_DisciplineActionLengthDifferenceReasonType_DisciplineActionLengthDifferenceReasonTypeId >>>'
go

/* 
 * INDEX: [FK_DisciplineAction_School_AssignmentSchoolId] 
 */

CREATE INDEX [FK_DisciplineAction_School_AssignmentSchoolId] ON [edfi].[DisciplineAction]([AssignmentSchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineAction') AND name='FK_DisciplineAction_School_AssignmentSchoolId')
    PRINT '<<< CREATED INDEX edfi.DisciplineAction.FK_DisciplineAction_School_AssignmentSchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineAction.FK_DisciplineAction_School_AssignmentSchoolId >>>'
go

/* 
 * INDEX: [FK_DisciplineAction_School_ResponsibilitySchoolId] 
 */

CREATE INDEX [FK_DisciplineAction_School_ResponsibilitySchoolId] ON [edfi].[DisciplineAction]([ResponsibilitySchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineAction') AND name='FK_DisciplineAction_School_ResponsibilitySchoolId')
    PRINT '<<< CREATED INDEX edfi.DisciplineAction.FK_DisciplineAction_School_ResponsibilitySchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineAction.FK_DisciplineAction_School_ResponsibilitySchoolId >>>'
go

/* 
 * INDEX: [FK_DisciplineAction_Student_StudentUSI] 
 */

CREATE INDEX [FK_DisciplineAction_Student_StudentUSI] ON [edfi].[DisciplineAction]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineAction') AND name='FK_DisciplineAction_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.DisciplineAction.FK_DisciplineAction_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineAction.FK_DisciplineAction_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_DisciplineActionDiscipline_DisciplineAction_StudentUSI] 
 */

CREATE INDEX [FK_DisciplineActionDiscipline_DisciplineAction_StudentUSI] ON [edfi].[DisciplineActionDiscipline]([StudentUSI], [DisciplineDate], [DisciplineActionIdentifier])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineActionDiscipline') AND name='FK_DisciplineActionDiscipline_DisciplineAction_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.DisciplineActionDiscipline.FK_DisciplineActionDiscipline_DisciplineAction_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineActionDiscipline.FK_DisciplineActionDiscipline_DisciplineAction_StudentUSI >>>'
go

/* 
 * INDEX: [FK_DisciplineActionDiscipline_DisciplineDescriptor_DisciplineDescriptorId] 
 */

CREATE INDEX [FK_DisciplineActionDiscipline_DisciplineDescriptor_DisciplineDescriptorId] ON [edfi].[DisciplineActionDiscipline]([DisciplineDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineActionDiscipline') AND name='FK_DisciplineActionDiscipline_DisciplineDescriptor_DisciplineDescriptorId')
    PRINT '<<< CREATED INDEX edfi.DisciplineActionDiscipline.FK_DisciplineActionDiscipline_DisciplineDescriptor_DisciplineDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineActionDiscipline.FK_DisciplineActionDiscipline_DisciplineDescriptor_DisciplineDescriptorId >>>'
go

/* 
 * INDEX: [FK_DisciplineActionDisciplineIncident_DisciplineAction_StudentUSI] 
 */

CREATE INDEX [FK_DisciplineActionDisciplineIncident_DisciplineAction_StudentUSI] ON [edfi].[DisciplineActionDisciplineIncident]([DisciplineDate], [DisciplineActionIdentifier], [StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineActionDisciplineIncident') AND name='FK_DisciplineActionDisciplineIncident_DisciplineAction_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.DisciplineActionDisciplineIncident.FK_DisciplineActionDisciplineIncident_DisciplineAction_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineActionDisciplineIncident.FK_DisciplineActionDisciplineIncident_DisciplineAction_StudentUSI >>>'
go

/* 
 * INDEX: [FK_DisciplineActionDisciplineIncident_DisciplineIncident_SchoolId] 
 */

CREATE INDEX [FK_DisciplineActionDisciplineIncident_DisciplineIncident_SchoolId] ON [edfi].[DisciplineActionDisciplineIncident]([IncidentIdentifier], [SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineActionDisciplineIncident') AND name='FK_DisciplineActionDisciplineIncident_DisciplineIncident_SchoolId')
    PRINT '<<< CREATED INDEX edfi.DisciplineActionDisciplineIncident.FK_DisciplineActionDisciplineIncident_DisciplineIncident_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineActionDisciplineIncident.FK_DisciplineActionDisciplineIncident_DisciplineIncident_SchoolId >>>'
go

/* 
 * INDEX: [FK_DisciplineActionStaff_DisciplineAction_StudentUSI] 
 */

CREATE INDEX [FK_DisciplineActionStaff_DisciplineAction_StudentUSI] ON [edfi].[DisciplineActionStaff]([DisciplineActionIdentifier], [StudentUSI], [DisciplineDate])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineActionStaff') AND name='FK_DisciplineActionStaff_DisciplineAction_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.DisciplineActionStaff.FK_DisciplineActionStaff_DisciplineAction_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineActionStaff.FK_DisciplineActionStaff_DisciplineAction_StudentUSI >>>'
go

/* 
 * INDEX: [FK_DisciplineActionStaff_Staff_StaffUSI] 
 */

CREATE INDEX [FK_DisciplineActionStaff_Staff_StaffUSI] ON [edfi].[DisciplineActionStaff]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineActionStaff') AND name='FK_DisciplineActionStaff_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.DisciplineActionStaff.FK_DisciplineActionStaff_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineActionStaff.FK_DisciplineActionStaff_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_DisciplineDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_DisciplineDescriptor_Descriptor_DescriptorId] ON [edfi].[DisciplineDescriptor]([DisciplineDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineDescriptor') AND name='FK_DisciplineDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.DisciplineDescriptor.FK_DisciplineDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineDescriptor.FK_DisciplineDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_DisciplineDescriptor_DisciplineType_DisciplineTypeId] 
 */

CREATE INDEX [FK_DisciplineDescriptor_DisciplineType_DisciplineTypeId] ON [edfi].[DisciplineDescriptor]([DisciplineTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineDescriptor') AND name='FK_DisciplineDescriptor_DisciplineType_DisciplineTypeId')
    PRINT '<<< CREATED INDEX edfi.DisciplineDescriptor.FK_DisciplineDescriptor_DisciplineType_DisciplineTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineDescriptor.FK_DisciplineDescriptor_DisciplineType_DisciplineTypeId >>>'
go

/* 
 * INDEX: [FK_DisciplineIncident_IncidentLocationType_IncidentLocationTypeId] 
 */

CREATE INDEX [FK_DisciplineIncident_IncidentLocationType_IncidentLocationTypeId] ON [edfi].[DisciplineIncident]([IncidentLocationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineIncident') AND name='FK_DisciplineIncident_IncidentLocationType_IncidentLocationTypeId')
    PRINT '<<< CREATED INDEX edfi.DisciplineIncident.FK_DisciplineIncident_IncidentLocationType_IncidentLocationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineIncident.FK_DisciplineIncident_IncidentLocationType_IncidentLocationTypeId >>>'
go

/* 
 * INDEX: [FK_DisciplineIncident_ReporterDescriptionDescriptorId] 
 */

CREATE INDEX [FK_DisciplineIncident_ReporterDescriptionDescriptorId] ON [edfi].[DisciplineIncident]([ReporterDescriptionDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineIncident') AND name='FK_DisciplineIncident_ReporterDescriptionDescriptorId')
    PRINT '<<< CREATED INDEX edfi.DisciplineIncident.FK_DisciplineIncident_ReporterDescriptionDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineIncident.FK_DisciplineIncident_ReporterDescriptionDescriptorId >>>'
go

/* 
 * INDEX: [FK_DisciplineIncident_School_SchoolId] 
 */

CREATE INDEX [FK_DisciplineIncident_School_SchoolId] ON [edfi].[DisciplineIncident]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineIncident') AND name='FK_DisciplineIncident_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.DisciplineIncident.FK_DisciplineIncident_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineIncident.FK_DisciplineIncident_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_DisciplineIncident_Staff_StaffUSI] 
 */

CREATE INDEX [FK_DisciplineIncident_Staff_StaffUSI] ON [edfi].[DisciplineIncident]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineIncident') AND name='FK_DisciplineIncident_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.DisciplineIncident.FK_DisciplineIncident_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineIncident.FK_DisciplineIncident_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_DisciplineIncidentBehavior_BehaviorDescriptor_BehaviorDescriptorId] 
 */

CREATE INDEX [FK_DisciplineIncidentBehavior_BehaviorDescriptor_BehaviorDescriptorId] ON [edfi].[DisciplineIncidentBehavior]([BehaviorDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineIncidentBehavior') AND name='FK_DisciplineIncidentBehavior_BehaviorDescriptor_BehaviorDescriptorId')
    PRINT '<<< CREATED INDEX edfi.DisciplineIncidentBehavior.FK_DisciplineIncidentBehavior_BehaviorDescriptor_BehaviorDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineIncidentBehavior.FK_DisciplineIncidentBehavior_BehaviorDescriptor_BehaviorDescriptorId >>>'
go

/* 
 * INDEX: [FK_DisciplineIncidentBehavior_DisciplineIncident_SchoolId] 
 */

CREATE INDEX [FK_DisciplineIncidentBehavior_DisciplineIncident_SchoolId] ON [edfi].[DisciplineIncidentBehavior]([IncidentIdentifier], [SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineIncidentBehavior') AND name='FK_DisciplineIncidentBehavior_DisciplineIncident_SchoolId')
    PRINT '<<< CREATED INDEX edfi.DisciplineIncidentBehavior.FK_DisciplineIncidentBehavior_DisciplineIncident_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineIncidentBehavior.FK_DisciplineIncidentBehavior_DisciplineIncident_SchoolId >>>'
go

/* 
 * INDEX: [FK_DisciplineIncidentWeapons_DisciplineIncident_SchoolId] 
 */

CREATE INDEX [FK_DisciplineIncidentWeapons_DisciplineIncident_SchoolId] ON [edfi].[DisciplineIncidentWeapon]([IncidentIdentifier], [SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineIncidentWeapon') AND name='FK_DisciplineIncidentWeapons_DisciplineIncident_SchoolId')
    PRINT '<<< CREATED INDEX edfi.DisciplineIncidentWeapon.FK_DisciplineIncidentWeapons_DisciplineIncident_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineIncidentWeapon.FK_DisciplineIncidentWeapons_DisciplineIncident_SchoolId >>>'
go

/* 
 * INDEX: [FK_DisciplineIncidentWeapons_WeaponDescriptor_WeaponDescriptorId] 
 */

CREATE INDEX [FK_DisciplineIncidentWeapons_WeaponDescriptor_WeaponDescriptorId] ON [edfi].[DisciplineIncidentWeapon]([WeaponDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.DisciplineIncidentWeapon') AND name='FK_DisciplineIncidentWeapons_WeaponDescriptor_WeaponDescriptorId')
    PRINT '<<< CREATED INDEX edfi.DisciplineIncidentWeapon.FK_DisciplineIncidentWeapons_WeaponDescriptor_WeaponDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.DisciplineIncidentWeapon.FK_DisciplineIncidentWeapons_WeaponDescriptor_WeaponDescriptorId >>>'
go

/* 
 * INDEX: [FK_EducationContent_ContentClassType_ContentClassTypeId] 
 */

CREATE INDEX [FK_EducationContent_ContentClassType_ContentClassTypeId] ON [edfi].[EducationContent]([ContentClassTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContent') AND name='FK_EducationContent_ContentClassType_ContentClassTypeId')
    PRINT '<<< CREATED INDEX edfi.EducationContent.FK_EducationContent_ContentClassType_ContentClassTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContent.FK_EducationContent_ContentClassType_ContentClassTypeId >>>'
go

/* 
 * INDEX: [FK_EducationContent_CostRateType_CostRateTypeId] 
 */

CREATE INDEX [FK_EducationContent_CostRateType_CostRateTypeId] ON [edfi].[EducationContent]([CostRateTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContent') AND name='FK_EducationContent_CostRateType_CostRateTypeId')
    PRINT '<<< CREATED INDEX edfi.EducationContent.FK_EducationContent_CostRateType_CostRateTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContent.FK_EducationContent_CostRateType_CostRateTypeId >>>'
go

/* 
 * INDEX: [FK_EducationContent_InteractivityStyleType_InteractivityStyleTypeId] 
 */

CREATE INDEX [FK_EducationContent_InteractivityStyleType_InteractivityStyleTypeId] ON [edfi].[EducationContent]([InteractivityStyleTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContent') AND name='FK_EducationContent_InteractivityStyleType_InteractivityStyleTypeId')
    PRINT '<<< CREATED INDEX edfi.EducationContent.FK_EducationContent_InteractivityStyleType_InteractivityStyleTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContent.FK_EducationContent_InteractivityStyleType_InteractivityStyleTypeId >>>'
go

/* 
 * INDEX: [FK_EducationContent_LearningStandard_LearningStandardId] 
 */

CREATE INDEX [FK_EducationContent_LearningStandard_LearningStandardId] ON [edfi].[EducationContent]([LearningStandardId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContent') AND name='FK_EducationContent_LearningStandard_LearningStandardId')
    PRINT '<<< CREATED INDEX edfi.EducationContent.FK_EducationContent_LearningStandard_LearningStandardId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContent.FK_EducationContent_LearningStandard_LearningStandardId >>>'
go

/* 
 * INDEX: [FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptorId] 
 */

CREATE INDEX [FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptorId] ON [edfi].[EducationContentAppropriateGradeLevel]([GradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContentAppropriateGradeLevel') AND name='FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.EducationContentAppropriateGradeLevel.FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContentAppropriateGradeLevel.FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_EducationContentAppropriateGradeLevel_EducationContent_ContentIdentifier] 
 */

CREATE INDEX [FK_EducationContentAppropriateGradeLevel_EducationContent_ContentIdentifier] ON [edfi].[EducationContentAppropriateGradeLevel]([ContentIdentifier])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContentAppropriateGradeLevel') AND name='FK_EducationContentAppropriateGradeLevel_EducationContent_ContentIdentifier')
    PRINT '<<< CREATED INDEX edfi.EducationContentAppropriateGradeLevel.FK_EducationContentAppropriateGradeLevel_EducationContent_ContentIdentifier >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContentAppropriateGradeLevel.FK_EducationContentAppropriateGradeLevel_EducationContent_ContentIdentifier >>>'
go

/* 
 * INDEX: [FK_EducationContentAppropriateSex_EducationContent_ContentIdentifier] 
 */

CREATE INDEX [FK_EducationContentAppropriateSex_EducationContent_ContentIdentifier] ON [edfi].[EducationContentAppropriateSex]([ContentIdentifier])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContentAppropriateSex') AND name='FK_EducationContentAppropriateSex_EducationContent_ContentIdentifier')
    PRINT '<<< CREATED INDEX edfi.EducationContentAppropriateSex.FK_EducationContentAppropriateSex_EducationContent_ContentIdentifier >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContentAppropriateSex.FK_EducationContentAppropriateSex_EducationContent_ContentIdentifier >>>'
go

/* 
 * INDEX: [FK_EducationContentAppropriateSex_SexType_SexTypeId] 
 */

CREATE INDEX [FK_EducationContentAppropriateSex_SexType_SexTypeId] ON [edfi].[EducationContentAppropriateSex]([SexTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContentAppropriateSex') AND name='FK_EducationContentAppropriateSex_SexType_SexTypeId')
    PRINT '<<< CREATED INDEX edfi.EducationContentAppropriateSex.FK_EducationContentAppropriateSex_SexType_SexTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContentAppropriateSex.FK_EducationContentAppropriateSex_SexType_SexTypeId >>>'
go

/* 
 * INDEX: [FK_EducationContentAuthor_EducationContent_ContentIdentifier] 
 */

CREATE INDEX [FK_EducationContentAuthor_EducationContent_ContentIdentifier] ON [edfi].[EducationContentAuthor]([ContentIdentifier])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContentAuthor') AND name='FK_EducationContentAuthor_EducationContent_ContentIdentifier')
    PRINT '<<< CREATED INDEX edfi.EducationContentAuthor.FK_EducationContentAuthor_EducationContent_ContentIdentifier >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContentAuthor.FK_EducationContentAuthor_EducationContent_ContentIdentifier >>>'
go

/* 
 * INDEX: [FK_EducationContentDerivativeSourceEducationContent_EducationContent_ContentIdentifier] 
 */

CREATE INDEX [FK_EducationContentDerivativeSourceEducationContent_EducationContent_ContentIdentifier] ON [edfi].[EducationContentDerivativeSourceEducationContent]([ContentIdentifier])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContentDerivativeSourceEducationContent') AND name='FK_EducationContentDerivativeSourceEducationContent_EducationContent_ContentIdentifier')
    PRINT '<<< CREATED INDEX edfi.EducationContentDerivativeSourceEducationContent.FK_EducationContentDerivativeSourceEducationContent_EducationContent_ContentIdentifier >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContentDerivativeSourceEducationContent.FK_EducationContentDerivativeSourceEducationContent_EducationContent_ContentIdentifier >>>'
go

/* 
 * INDEX: [FK_EducationContentDerivativeSourceEducationContent_EducationContent_DerivativeSourceContentIdentifier] 
 */

CREATE INDEX [FK_EducationContentDerivativeSourceEducationContent_EducationContent_DerivativeSourceContentIdentifier] ON [edfi].[EducationContentDerivativeSourceEducationContent]([DerivativeSourceContentIdentifier])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContentDerivativeSourceEducationContent') AND name='FK_EducationContentDerivativeSourceEducationContent_EducationContent_DerivativeSourceContentIdentifier')
    PRINT '<<< CREATED INDEX edfi.EducationContentDerivativeSourceEducationContent.FK_EducationContentDerivativeSourceEducationContent_EducationContent_DerivativeSourceContentIdentifier >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContentDerivativeSourceEducationContent.FK_EducationContentDerivativeSourceEducationContent_EducationContent_DerivativeSourceContentIdentifier >>>'
go

/* 
 * INDEX: [FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent_ContentIdentifier] 
 */

CREATE INDEX [FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent_ContentIdentifier] ON [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI]([ContentIdentifier])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContentDerivativeSourceLearningResourceMetadataURI') AND name='FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent_ContentIdentifier')
    PRINT '<<< CREATED INDEX edfi.EducationContentDerivativeSourceLearningResourceMetadataURI.FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent_ContentIdentifier >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContentDerivativeSourceLearningResourceMetadataURI.FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent_ContentIdentifier >>>'
go

/* 
 * INDEX: [FK_EducationContentDerivativeSourceURI_EducationContent_ContentIdentifier] 
 */

CREATE INDEX [FK_EducationContentDerivativeSourceURI_EducationContent_ContentIdentifier] ON [edfi].[EducationContentDerivativeSourceURI]([ContentIdentifier])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContentDerivativeSourceURI') AND name='FK_EducationContentDerivativeSourceURI_EducationContent_ContentIdentifier')
    PRINT '<<< CREATED INDEX edfi.EducationContentDerivativeSourceURI.FK_EducationContentDerivativeSourceURI_EducationContent_ContentIdentifier >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContentDerivativeSourceURI.FK_EducationContentDerivativeSourceURI_EducationContent_ContentIdentifier >>>'
go

/* 
 * INDEX: [FK_EducationContentLanguage_EducationContent_ContentIdentifier] 
 */

CREATE INDEX [FK_EducationContentLanguage_EducationContent_ContentIdentifier] ON [edfi].[EducationContentLanguage]([ContentIdentifier])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContentLanguage') AND name='FK_EducationContentLanguage_EducationContent_ContentIdentifier')
    PRINT '<<< CREATED INDEX edfi.EducationContentLanguage.FK_EducationContentLanguage_EducationContent_ContentIdentifier >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContentLanguage.FK_EducationContentLanguage_EducationContent_ContentIdentifier >>>'
go

/* 
 * INDEX: [FK_EducationContentLanguage_LanguageDescriptor_LanguageDescriptorId] 
 */

CREATE INDEX [FK_EducationContentLanguage_LanguageDescriptor_LanguageDescriptorId] ON [edfi].[EducationContentLanguage]([LanguageDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationContentLanguage') AND name='FK_EducationContentLanguage_LanguageDescriptor_LanguageDescriptorId')
    PRINT '<<< CREATED INDEX edfi.EducationContentLanguage.FK_EducationContentLanguage_LanguageDescriptor_LanguageDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationContentLanguage.FK_EducationContentLanguage_LanguageDescriptor_LanguageDescriptorId >>>'
go

/* 
 * INDEX: [FK_EducationOrganization_OperationalStatusType_OperationalStatusTypeId] 
 */

CREATE INDEX [FK_EducationOrganization_OperationalStatusType_OperationalStatusTypeId] ON [edfi].[EducationOrganization]([OperationalStatusTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganization') AND name='FK_EducationOrganization_OperationalStatusType_OperationalStatusTypeId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganization.FK_EducationOrganization_OperationalStatusType_OperationalStatusTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganization.FK_EducationOrganization_OperationalStatusType_OperationalStatusTypeId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationAddress_AddressType_AddressTypeId] 
 */

CREATE INDEX [FK_EducationOrganizationAddress_AddressType_AddressTypeId] ON [edfi].[EducationOrganizationAddress]([AddressTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationAddress') AND name='FK_EducationOrganizationAddress_AddressType_AddressTypeId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationAddress.FK_EducationOrganizationAddress_AddressType_AddressTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationAddress.FK_EducationOrganizationAddress_AddressType_AddressTypeId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationAddress_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_EducationOrganizationAddress_EducationOrganization_EducationOrganizationId] ON [edfi].[EducationOrganizationAddress]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationAddress') AND name='FK_EducationOrganizationAddress_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationAddress.FK_EducationOrganizationAddress_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationAddress.FK_EducationOrganizationAddress_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationAddress_StateAbbreviationType_StateAbbreviationTypeId] 
 */

CREATE INDEX [FK_EducationOrganizationAddress_StateAbbreviationType_StateAbbreviationTypeId] ON [edfi].[EducationOrganizationAddress]([StateAbbreviationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationAddress') AND name='FK_EducationOrganizationAddress_StateAbbreviationType_StateAbbreviationTypeId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationAddress.FK_EducationOrganizationAddress_StateAbbreviationType_StateAbbreviationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationAddress.FK_EducationOrganizationAddress_StateAbbreviationType_StateAbbreviationTypeId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationCategory_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_EducationOrganizationCategory_EducationOrganization_EducationOrganizationId] ON [edfi].[EducationOrganizationCategory]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationCategory') AND name='FK_EducationOrganizationCategory_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationCategory.FK_EducationOrganizationCategory_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationCategory.FK_EducationOrganizationCategory_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationCategory_EducationOrganizationCategoryType_EducationOrganizationCategoryTypeId] 
 */

CREATE INDEX [FK_EducationOrganizationCategory_EducationOrganizationCategoryType_EducationOrganizationCategoryTypeId] ON [edfi].[EducationOrganizationCategory]([EducationOrganizationCategoryTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationCategory') AND name='FK_EducationOrganizationCategory_EducationOrganizationCategoryType_EducationOrganizationCategoryTypeId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationCategory.FK_EducationOrganizationCategory_EducationOrganizationCategoryType_EducationOrganizationCategoryTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationCategory.FK_EducationOrganizationCategory_EducationOrganizationCategoryType_EducationOrganizationCategoryTypeId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationIdentificationCode_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_EducationOrganizationIdentificationCode_EducationOrganization_EducationOrganizationId] ON [edfi].[EducationOrganizationIdentificationCode]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationIdentificationCode') AND name='FK_EducationOrganizationIdentificationCode_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationIdentificationCode.FK_EducationOrganizationIdentificationCode_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationIdentificationCode.FK_EducationOrganizationIdentificationCode_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptorId] 
 */

CREATE INDEX [FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptorId] ON [edfi].[EducationOrganizationIdentificationCode]([EducationOrganizationIdentificationSystemDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationIdentificationCode') AND name='FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptorId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationIdentificationCode.FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationIdentificationCode.FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptorId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationIdentificationDescriptor_Descriptor] 
 */

CREATE INDEX [FK_EducationOrganizationIdentificationDescriptor_Descriptor] ON [edfi].[EducationOrganizationIdentificationSystemDescriptor]([EducationOrganizationIdentificationSystemDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationIdentificationSystemDescriptor') AND name='FK_EducationOrganizationIdentificationDescriptor_Descriptor')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationIdentificationSystemDescriptor.FK_EducationOrganizationIdentificationDescriptor_Descriptor >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationIdentificationSystemDescriptor.FK_EducationOrganizationIdentificationDescriptor_Descriptor >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationIdentificationSystemDescriptor_EducationOrganizationIdentificationSystemType] 
 */

CREATE INDEX [FK_EducationOrganizationIdentificationSystemDescriptor_EducationOrganizationIdentificationSystemType] ON [edfi].[EducationOrganizationIdentificationSystemDescriptor]([EducationOrganizationIdentificationSystemTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationIdentificationSystemDescriptor') AND name='FK_EducationOrganizationIdentificationSystemDescriptor_EducationOrganizationIdentificationSystemType')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationIdentificationSystemDescriptor.FK_EducationOrganizationIdentificationSystemDescriptor_EducationOrganizationIdentificationSystemType >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationIdentificationSystemDescriptor.FK_EducationOrganizationIdentificationSystemDescriptor_EducationOrganizationIdentificationSystemType >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationInstitutionTelephone_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_EducationOrganizationInstitutionTelephone_EducationOrganization_EducationOrganizationId] ON [edfi].[EducationOrganizationInstitutionTelephone]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationInstitutionTelephone') AND name='FK_EducationOrganizationInstitutionTelephone_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationInstitutionTelephone.FK_EducationOrganizationInstitutionTelephone_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationInstitutionTelephone.FK_EducationOrganizationInstitutionTelephone_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberType_InstitutionTelephoneNumberTypeId] 
 */

CREATE INDEX [FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberType_InstitutionTelephoneNumberTypeId] ON [edfi].[EducationOrganizationInstitutionTelephone]([InstitutionTelephoneNumberTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationInstitutionTelephone') AND name='FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberType_InstitutionTelephoneNumberTypeId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationInstitutionTelephone.FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberType_InstitutionTelephoneNumberTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationInstitutionTelephone.FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberType_InstitutionTelephoneNumberTypeId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationInternationalAddress_AddressType_AddressTypeId] 
 */

CREATE INDEX [FK_EducationOrganizationInternationalAddress_AddressType_AddressTypeId] ON [edfi].[EducationOrganizationInternationalAddress]([AddressTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationInternationalAddress') AND name='FK_EducationOrganizationInternationalAddress_AddressType_AddressTypeId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationInternationalAddress.FK_EducationOrganizationInternationalAddress_AddressType_AddressTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationInternationalAddress.FK_EducationOrganizationInternationalAddress_AddressType_AddressTypeId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
 */

CREATE INDEX [FK_EducationOrganizationInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId] ON [edfi].[EducationOrganizationInternationalAddress]([CountryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationInternationalAddress') AND name='FK_EducationOrganizationInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationInternationalAddress.FK_EducationOrganizationInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationInternationalAddress.FK_EducationOrganizationInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationInternationalAddress_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_EducationOrganizationInternationalAddress_EducationOrganization_EducationOrganizationId] ON [edfi].[EducationOrganizationInternationalAddress]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationInternationalAddress') AND name='FK_EducationOrganizationInternationalAddress_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationInternationalAddress.FK_EducationOrganizationInternationalAddress_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationInternationalAddress.FK_EducationOrganizationInternationalAddress_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization_EducationOrganizationId] ON [edfi].[EducationOrganizationInterventionPrescriptionAssociation]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationInterventionPrescriptionAssociation') AND name='FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationInterventionPrescriptionAssociation.FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationInterventionPrescriptionAssociation.FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription] 
 */

CREATE INDEX [FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription] ON [edfi].[EducationOrganizationInterventionPrescriptionAssociation]([InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationInterventionPrescriptionAssociation') AND name='FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationInterventionPrescriptionAssociation.FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationInterventionPrescriptionAssociation.FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationNetwork_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_EducationOrganizationNetwork_EducationOrganization_EducationOrganizationId] ON [edfi].[EducationOrganizationNetwork]([EducationOrganizationNetworkId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationNetwork') AND name='FK_EducationOrganizationNetwork_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationNetwork.FK_EducationOrganizationNetwork_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationNetwork.FK_EducationOrganizationNetwork_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationNetwork_NetworkPurposeType_NetworkPurposeTypeId] 
 */

CREATE INDEX [FK_EducationOrganizationNetwork_NetworkPurposeType_NetworkPurposeTypeId] ON [edfi].[EducationOrganizationNetwork]([NetworkPurposeTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationNetwork') AND name='FK_EducationOrganizationNetwork_NetworkPurposeType_NetworkPurposeTypeId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationNetwork.FK_EducationOrganizationNetwork_NetworkPurposeType_NetworkPurposeTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationNetwork.FK_EducationOrganizationNetwork_NetworkPurposeType_NetworkPurposeTypeId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationNetworkAssociation_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_EducationOrganizationNetworkAssociation_EducationOrganization_EducationOrganizationId] ON [edfi].[EducationOrganizationNetworkAssociation]([MemberEducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationNetworkAssociation') AND name='FK_EducationOrganizationNetworkAssociation_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationNetworkAssociation.FK_EducationOrganizationNetworkAssociation_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationNetworkAssociation.FK_EducationOrganizationNetworkAssociation_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork_EducationOrganizationNetworkId] 
 */

CREATE INDEX [FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork_EducationOrganizationNetworkId] ON [edfi].[EducationOrganizationNetworkAssociation]([EducationOrganizationNetworkId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationNetworkAssociation') AND name='FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork_EducationOrganizationNetworkId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationNetworkAssociation.FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork_EducationOrganizationNetworkId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationNetworkAssociation.FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork_EducationOrganizationNetworkId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationPeerAssociation_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_EducationOrganizationPeerAssociation_EducationOrganization_EducationOrganizationId] ON [edfi].[EducationOrganizationPeerAssociation]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationPeerAssociation') AND name='FK_EducationOrganizationPeerAssociation_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationPeerAssociation.FK_EducationOrganizationPeerAssociation_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationPeerAssociation.FK_EducationOrganizationPeerAssociation_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_EducationOrganizationPeerAssociation_EducationOrganization_PeerEducationOrganizationId] 
 */

CREATE INDEX [FK_EducationOrganizationPeerAssociation_EducationOrganization_PeerEducationOrganizationId] ON [edfi].[EducationOrganizationPeerAssociation]([PeerEducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationOrganizationPeerAssociation') AND name='FK_EducationOrganizationPeerAssociation_EducationOrganization_PeerEducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.EducationOrganizationPeerAssociation.FK_EducationOrganizationPeerAssociation_EducationOrganization_PeerEducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationOrganizationPeerAssociation.FK_EducationOrganizationPeerAssociation_EducationOrganization_PeerEducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_EducationServiceCenter_EducationOrganization_EducationServiceCenterId] 
 */

CREATE INDEX [FK_EducationServiceCenter_EducationOrganization_EducationServiceCenterId] ON [edfi].[EducationServiceCenter]([EducationServiceCenterId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationServiceCenter') AND name='FK_EducationServiceCenter_EducationOrganization_EducationServiceCenterId')
    PRINT '<<< CREATED INDEX edfi.EducationServiceCenter.FK_EducationServiceCenter_EducationOrganization_EducationServiceCenterId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationServiceCenter.FK_EducationServiceCenter_EducationOrganization_EducationServiceCenterId >>>'
go

/* 
 * INDEX: [FK_EducationServiceCenter_StateEducationAgency_StateEducationAgencyId] 
 */

CREATE INDEX [FK_EducationServiceCenter_StateEducationAgency_StateEducationAgencyId] ON [edfi].[EducationServiceCenter]([StateEducationAgencyId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EducationServiceCenter') AND name='FK_EducationServiceCenter_StateEducationAgency_StateEducationAgencyId')
    PRINT '<<< CREATED INDEX edfi.EducationServiceCenter.FK_EducationServiceCenter_StateEducationAgency_StateEducationAgencyId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EducationServiceCenter.FK_EducationServiceCenter_StateEducationAgency_StateEducationAgencyId >>>'
go

/* 
 * INDEX: [FK_EmploymentStatusDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_EmploymentStatusDescriptor_Descriptor_DescriptorId] ON [edfi].[EmploymentStatusDescriptor]([EmploymentStatusDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EmploymentStatusDescriptor') AND name='FK_EmploymentStatusDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.EmploymentStatusDescriptor.FK_EmploymentStatusDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EmploymentStatusDescriptor.FK_EmploymentStatusDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_EmploymentStatusDescriptor_EmploymentStatusType_EmploymentStatusTypeId] 
 */

CREATE INDEX [FK_EmploymentStatusDescriptor_EmploymentStatusType_EmploymentStatusTypeId] ON [edfi].[EmploymentStatusDescriptor]([EmploymentStatusTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EmploymentStatusDescriptor') AND name='FK_EmploymentStatusDescriptor_EmploymentStatusType_EmploymentStatusTypeId')
    PRINT '<<< CREATED INDEX edfi.EmploymentStatusDescriptor.FK_EmploymentStatusDescriptor_EmploymentStatusType_EmploymentStatusTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EmploymentStatusDescriptor.FK_EmploymentStatusDescriptor_EmploymentStatusType_EmploymentStatusTypeId >>>'
go

/* 
 * INDEX: [FK_EntryTypeDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_EntryTypeDescriptor_Descriptor_DescriptorId] ON [edfi].[EntryTypeDescriptor]([EntryTypeDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EntryTypeDescriptor') AND name='FK_EntryTypeDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.EntryTypeDescriptor.FK_EntryTypeDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EntryTypeDescriptor.FK_EntryTypeDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_EntryTypeDescriptor_EntryType_EntryTypeId] 
 */

CREATE INDEX [FK_EntryTypeDescriptor_EntryType_EntryTypeId] ON [edfi].[EntryTypeDescriptor]([EntryTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.EntryTypeDescriptor') AND name='FK_EntryTypeDescriptor_EntryType_EntryTypeId')
    PRINT '<<< CREATED INDEX edfi.EntryTypeDescriptor.FK_EntryTypeDescriptor_EntryType_EntryTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.EntryTypeDescriptor.FK_EntryTypeDescriptor_EntryType_EntryTypeId >>>'
go

/* 
 * INDEX: [FK_ExitWithdrawTypeDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_ExitWithdrawTypeDescriptor_Descriptor_DescriptorId] ON [edfi].[ExitWithdrawTypeDescriptor]([ExitWithdrawTypeDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ExitWithdrawTypeDescriptor') AND name='FK_ExitWithdrawTypeDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.ExitWithdrawTypeDescriptor.FK_ExitWithdrawTypeDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ExitWithdrawTypeDescriptor.FK_ExitWithdrawTypeDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_ExitWithdrawTypeDescriptor_ExitWithdrawType_ExitWithdrawTypeId] 
 */

CREATE INDEX [FK_ExitWithdrawTypeDescriptor_ExitWithdrawType_ExitWithdrawTypeId] ON [edfi].[ExitWithdrawTypeDescriptor]([ExitWithdrawTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ExitWithdrawTypeDescriptor') AND name='FK_ExitWithdrawTypeDescriptor_ExitWithdrawType_ExitWithdrawTypeId')
    PRINT '<<< CREATED INDEX edfi.ExitWithdrawTypeDescriptor.FK_ExitWithdrawTypeDescriptor_ExitWithdrawType_ExitWithdrawTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ExitWithdrawTypeDescriptor.FK_ExitWithdrawTypeDescriptor_ExitWithdrawType_ExitWithdrawTypeId >>>'
go

/* 
 * INDEX: [FK_FeederSchoolAssociation_FeederSchoolId_School_SchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_FeederSchoolAssociation_FeederSchoolId_School_SchoolId]
    ON [edfi].[FeederSchoolAssociation]([FeederSchoolId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.FeederSchoolAssociation') AND name='FK_FeederSchoolAssociation_FeederSchoolId_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.FeederSchoolAssociation.FK_FeederSchoolAssociation_FeederSchoolId_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.FeederSchoolAssociation.FK_FeederSchoolAssociation_FeederSchoolId_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_FeederSchoolAssociation_School_SchoolId] 
 */

CREATE INDEX [FK_FeederSchoolAssociation_School_SchoolId] ON [edfi].[FeederSchoolAssociation]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.FeederSchoolAssociation') AND name='FK_FeederSchoolAssociation_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.FeederSchoolAssociation.FK_FeederSchoolAssociation_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.FeederSchoolAssociation.FK_FeederSchoolAssociation_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_Grade_GradeType_GradeTypeId] 
 */

CREATE INDEX [FK_Grade_GradeType_GradeTypeId] ON [edfi].[Grade]([GradeTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Grade') AND name='FK_Grade_GradeType_GradeTypeId')
    PRINT '<<< CREATED INDEX edfi.Grade.FK_Grade_GradeType_GradeTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Grade.FK_Grade_GradeType_GradeTypeId >>>'
go

/* 
 * INDEX: [FK_Grade_GradingPeriod_BeginDate] 
 */

CREATE NONCLUSTERED INDEX [FK_Grade_GradingPeriod_BeginDate]
    ON [edfi].[Grade]([GradingPeriodBeginDate] ASC, [GradingPeriodDescriptorId] ASC, [SchoolId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Grade') AND name='FK_Grade_GradingPeriod_BeginDate')
    PRINT '<<< CREATED INDEX edfi.Grade.FK_Grade_GradingPeriod_BeginDate >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Grade.FK_Grade_GradingPeriod_BeginDate >>>'
go

/* 
 * INDEX: [FK_Grade_PerformanceBaseType_PerformanceBaseConversionTypeId] 
 */

CREATE INDEX [FK_Grade_PerformanceBaseType_PerformanceBaseConversionTypeId] ON [edfi].[Grade]([PerformanceBaseConversionTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Grade') AND name='FK_Grade_PerformanceBaseType_PerformanceBaseConversionTypeId')
    PRINT '<<< CREATED INDEX edfi.Grade.FK_Grade_PerformanceBaseType_PerformanceBaseConversionTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Grade.FK_Grade_PerformanceBaseType_PerformanceBaseConversionTypeId >>>'
go

/* 
 * INDEX: [FK_Grade_StudentSectionAssociation] 
 */

CREATE INDEX [FK_Grade_StudentSectionAssociation] ON [edfi].[Grade]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Grade') AND name='FK_Grade_StudentSectionAssociation')
    PRINT '<<< CREATED INDEX edfi.Grade.FK_Grade_StudentSectionAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Grade.FK_Grade_StudentSectionAssociation >>>'
go

/* 
 * INDEX: [FK_GradebookEntry_GradebookEntryType_GradebookEntryTypeId] 
 */

CREATE INDEX [FK_GradebookEntry_GradebookEntryType_GradebookEntryTypeId] ON [edfi].[GradebookEntry]([GradebookEntryTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GradebookEntry') AND name='FK_GradebookEntry_GradebookEntryType_GradebookEntryTypeId')
    PRINT '<<< CREATED INDEX edfi.GradebookEntry.FK_GradebookEntry_GradebookEntryType_GradebookEntryTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GradebookEntry.FK_GradebookEntry_GradebookEntryType_GradebookEntryTypeId >>>'
go

/* 
 * INDEX: [FK_GradebookEntry_GradingPeriod] 
 */

CREATE INDEX [FK_GradebookEntry_GradingPeriod] ON [edfi].[GradebookEntry]([GradingPeriodDescriptorId], [SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GradebookEntry') AND name='FK_GradebookEntry_GradingPeriod')
    PRINT '<<< CREATED INDEX edfi.GradebookEntry.FK_GradebookEntry_GradingPeriod >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GradebookEntry.FK_GradebookEntry_GradingPeriod >>>'
go

/* 
 * INDEX: [FK_GradebookEntry_Section_SchoolId] 
 */

CREATE INDEX [FK_GradebookEntry_Section_SchoolId] ON [edfi].[GradebookEntry]([ClassPeriodName], [SchoolId], [ClassroomIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GradebookEntry') AND name='FK_GradebookEntry_Section_SchoolId')
    PRINT '<<< CREATED INDEX edfi.GradebookEntry.FK_GradebookEntry_Section_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GradebookEntry.FK_GradebookEntry_Section_SchoolId >>>'
go

/* 
 * INDEX: [FK_GradebookEntryLearningOjective_GradebookEntry_SectionSchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_GradebookEntryLearningOjective_GradebookEntry_SectionSchoolId]
    ON [edfi].[GradebookEntryLearningObjective]([DateAssigned] ASC, [SchoolId] ASC, [GradebookEntryTitle] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [SchoolYear] ASC, [LocalCourseCode] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC, [TermDescriptorId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GradebookEntryLearningObjective') AND name='FK_GradebookEntryLearningOjective_GradebookEntry_SectionSchoolId')
    PRINT '<<< CREATED INDEX edfi.GradebookEntryLearningObjective.FK_GradebookEntryLearningOjective_GradebookEntry_SectionSchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GradebookEntryLearningObjective.FK_GradebookEntryLearningOjective_GradebookEntry_SectionSchoolId >>>'
go

/* 
 * INDEX: [FK_GradebookEntryLearningObjective_LearningObjective_Objective] 
 */

CREATE INDEX [FK_GradebookEntryLearningObjective_LearningObjective_Objective] ON [edfi].[GradebookEntryLearningObjective]([AcademicSubjectDescriptorId], [Objective], [ObjectiveGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GradebookEntryLearningObjective') AND name='FK_GradebookEntryLearningObjective_LearningObjective_Objective')
    PRINT '<<< CREATED INDEX edfi.GradebookEntryLearningObjective.FK_GradebookEntryLearningObjective_LearningObjective_Objective >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GradebookEntryLearningObjective.FK_GradebookEntryLearningObjective_LearningObjective_Objective >>>'
go

/* 
 * INDEX: [FK_GradebookEntryLearningStandard_GradebookEntry_SchoolId] 
 */

CREATE INDEX [FK_GradebookEntryLearningStandard_GradebookEntry_SchoolId] ON [edfi].[GradebookEntryLearningStandard]([SchoolId], [ClassroomIdentificationCode], [DateAssigned], [ClassPeriodName], [GradebookEntryTitle])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GradebookEntryLearningStandard') AND name='FK_GradebookEntryLearningStandard_GradebookEntry_SchoolId')
    PRINT '<<< CREATED INDEX edfi.GradebookEntryLearningStandard.FK_GradebookEntryLearningStandard_GradebookEntry_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GradebookEntryLearningStandard.FK_GradebookEntryLearningStandard_GradebookEntry_SchoolId >>>'
go

/* 
 * INDEX: [FK_GradebookEntryLearningStandard_GradebookEntry_SectionSchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_GradebookEntryLearningStandard_GradebookEntry_SectionSchoolId]
    ON [edfi].[GradebookEntryLearningStandard]([SchoolId] ASC, [GradebookEntryTitle] ASC, [ClassroomIdentificationCode] ASC, [ClassPeriodName] ASC, [DateAssigned] ASC, [SchoolYear] ASC, [LocalCourseCode] ASC, [TermDescriptorId] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GradebookEntryLearningStandard') AND name='FK_GradebookEntryLearningStandard_GradebookEntry_SectionSchoolId')
    PRINT '<<< CREATED INDEX edfi.GradebookEntryLearningStandard.FK_GradebookEntryLearningStandard_GradebookEntry_SectionSchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GradebookEntryLearningStandard.FK_GradebookEntryLearningStandard_GradebookEntry_SectionSchoolId >>>'
go

/* 
 * INDEX: [FK_GradebookEntryLearningStandard_LearningStandard_LearningStandardId] 
 */

CREATE INDEX [FK_GradebookEntryLearningStandard_LearningStandard_LearningStandardId] ON [edfi].[GradebookEntryLearningStandard]([LearningStandardId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GradebookEntryLearningStandard') AND name='FK_GradebookEntryLearningStandard_LearningStandard_LearningStandardId')
    PRINT '<<< CREATED INDEX edfi.GradebookEntryLearningStandard.FK_GradebookEntryLearningStandard_LearningStandard_LearningStandardId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GradebookEntryLearningStandard.FK_GradebookEntryLearningStandard_LearningStandard_LearningStandardId >>>'
go

/* 
 * INDEX: [FK_GradeLevelDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_GradeLevelDescriptor_Descriptor_DescriptorId] ON [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GradeLevelDescriptor') AND name='FK_GradeLevelDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.GradeLevelDescriptor.FK_GradeLevelDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GradeLevelDescriptor.FK_GradeLevelDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_GradeLevelDescriptor_GradeLevelType_GradeLevelTypeId] 
 */

CREATE INDEX [FK_GradeLevelDescriptor_GradeLevelType_GradeLevelTypeId] ON [edfi].[GradeLevelDescriptor]([GradeLevelTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GradeLevelDescriptor') AND name='FK_GradeLevelDescriptor_GradeLevelType_GradeLevelTypeId')
    PRINT '<<< CREATED INDEX edfi.GradeLevelDescriptor.FK_GradeLevelDescriptor_GradeLevelType_GradeLevelTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GradeLevelDescriptor.FK_GradeLevelDescriptor_GradeLevelType_GradeLevelTypeId >>>'
go

/* 
 * INDEX: [FK_GradingPeriod_School_SchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_GradingPeriod_School_SchoolId] ON [edfi].[GradingPeriod]([SchoolId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GradingPeriod') AND name='FK_GradingPeriod_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.GradingPeriod.FK_GradingPeriod_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GradingPeriod.FK_GradingPeriod_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_GradingPeriod_GradingPeriodDescriptorId] 
 */

CREATE INDEX [FK_GradingPeriod_GradingPeriodDescriptorId] ON [edfi].[GradingPeriod]([GradingPeriodDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GradingPeriod') AND name='FK_GradingPeriod_GradingPeriodDescriptorId')
    PRINT '<<< CREATED INDEX edfi.GradingPeriod.FK_GradingPeriod_GradingPeriodDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GradingPeriod.FK_GradingPeriod_GradingPeriodDescriptorId >>>'
go

/* 
 * INDEX: [FK_GradingPeriodDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_GradingPeriodDescriptor_Descriptor_DescriptorId] ON [edfi].[GradingPeriodDescriptor]([GradingPeriodDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GradingPeriodDescriptor') AND name='FK_GradingPeriodDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.GradingPeriodDescriptor.FK_GradingPeriodDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GradingPeriodDescriptor.FK_GradingPeriodDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_GradingPeriodDescriptor_GradingPeriodType_GradingPeriodTypeId] 
 */

CREATE INDEX [FK_GradingPeriodDescriptor_GradingPeriodType_GradingPeriodTypeId] ON [edfi].[GradingPeriodDescriptor]([GradingPeriodTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GradingPeriodDescriptor') AND name='FK_GradingPeriodDescriptor_GradingPeriodType_GradingPeriodTypeId')
    PRINT '<<< CREATED INDEX edfi.GradingPeriodDescriptor.FK_GradingPeriodDescriptor_GradingPeriodType_GradingPeriodTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GradingPeriodDescriptor.FK_GradingPeriodDescriptor_GradingPeriodType_GradingPeriodTypeId >>>'
go

/* 
 * INDEX: [FK_GraduationPlan_CreditType_TotalCreditsRequiredCreditTypeId] 
 */

CREATE INDEX [FK_GraduationPlan_CreditType_TotalCreditsRequiredCreditTypeId] ON [edfi].[GraduationPlan]([TotalRequiredCreditTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlan') AND name='FK_GraduationPlan_CreditType_TotalCreditsRequiredCreditTypeId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlan.FK_GraduationPlan_CreditType_TotalCreditsRequiredCreditTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlan.FK_GraduationPlan_CreditType_TotalCreditsRequiredCreditTypeId >>>'
go

/* 
 * INDEX: [FK_GraduationPlan_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_GraduationPlan_EducationOrganization_EducationOrganizationId] ON [edfi].[GraduationPlan]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlan') AND name='FK_GraduationPlan_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlan.FK_GraduationPlan_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlan.FK_GraduationPlan_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_GraduationPlan_GraduationPlanTypeDescriptor_GraduationPlanTypeDescriptorId] 
 */

CREATE INDEX [FK_GraduationPlan_GraduationPlanTypeDescriptor_GraduationPlanTypeDescriptorId] ON [edfi].[GraduationPlan]([GraduationPlanTypeDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlan') AND name='FK_GraduationPlan_GraduationPlanTypeDescriptor_GraduationPlanTypeDescriptorId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlan.FK_GraduationPlan_GraduationPlanTypeDescriptor_GraduationPlanTypeDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlan.FK_GraduationPlan_GraduationPlanTypeDescriptor_GraduationPlanTypeDescriptorId >>>'
go

/* 
 * INDEX: [FK_GraduationPlan_SchoolYearType_GraduationSchoolYear] 
 */

CREATE INDEX [FK_GraduationPlan_SchoolYearType_GraduationSchoolYear] ON [edfi].[GraduationPlan]([GraduationSchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlan') AND name='FK_GraduationPlan_SchoolYearType_GraduationSchoolYear')
    PRINT '<<< CREATED INDEX edfi.GraduationPlan.FK_GraduationPlan_SchoolYearType_GraduationSchoolYear >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlan.FK_GraduationPlan_SchoolYearType_GraduationSchoolYear >>>'
go

/* 
 * INDEX: [FK_GraduationPlanCreditsByCourse_CreditType_CreditTypeId] 
 */

CREATE INDEX [FK_GraduationPlanCreditsByCourse_CreditType_CreditTypeId] ON [edfi].[GraduationPlanCreditsByCourse]([CreditTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanCreditsByCourse') AND name='FK_GraduationPlanCreditsByCourse_CreditType_CreditTypeId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanCreditsByCourse.FK_GraduationPlanCreditsByCourse_CreditType_CreditTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanCreditsByCourse.FK_GraduationPlanCreditsByCourse_CreditType_CreditTypeId >>>'
go

/* 
 * INDEX: [FK_GraduationPlanCreditsByCourse_GradeLevelDescriptorId] 
 */

CREATE INDEX [FK_GraduationPlanCreditsByCourse_GradeLevelDescriptorId] ON [edfi].[GraduationPlanCreditsByCourse]([WhenTakenGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanCreditsByCourse') AND name='FK_GraduationPlanCreditsByCourse_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanCreditsByCourse.FK_GraduationPlanCreditsByCourse_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanCreditsByCourse.FK_GraduationPlanCreditsByCourse_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_GraduationPlanCreditsByCourse_GraduationPlan_EducationOrganizationId] 
 */

CREATE INDEX [FK_GraduationPlanCreditsByCourse_GraduationPlan_EducationOrganizationId] ON [edfi].[GraduationPlanCreditsByCourse]([EducationOrganizationId], [GraduationSchoolYear], [GraduationPlanTypeDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanCreditsByCourse') AND name='FK_GraduationPlanCreditsByCourse_GraduationPlan_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanCreditsByCourse.FK_GraduationPlanCreditsByCourse_GraduationPlan_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanCreditsByCourse.FK_GraduationPlanCreditsByCourse_GraduationPlan_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_GraduationPlanCreditsByCourseCourse_Course] 
 */

CREATE INDEX [FK_GraduationPlanCreditsByCourseCourse_Course] ON [edfi].[GraduationPlanCreditsByCourseCourse]([CourseCode], [CourseEducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanCreditsByCourseCourse') AND name='FK_GraduationPlanCreditsByCourseCourse_Course')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanCreditsByCourseCourse.FK_GraduationPlanCreditsByCourseCourse_Course >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanCreditsByCourseCourse.FK_GraduationPlanCreditsByCourseCourse_Course >>>'
go

/* 
 * INDEX: [FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse] 
 */

CREATE INDEX [FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse] ON [edfi].[GraduationPlanCreditsByCourseCourse]([EducationOrganizationId], [GraduationSchoolYear], [GraduationPlanTypeDescriptorId], [CourseSetName])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanCreditsByCourseCourse') AND name='FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanCreditsByCourseCourse.FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanCreditsByCourseCourse.FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse >>>'
go

/* 
 * INDEX: [FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptorId] 
 */

CREATE INDEX [FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptorId] ON [edfi].[GraduationPlanCreditsBySubject]([AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanCreditsBySubject') AND name='FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptorId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanCreditsBySubject.FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanCreditsBySubject.FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptorId >>>'
go

/* 
 * INDEX: [FK_GraduationPlanCreditsBySubject_CreditType_CreditTypeId] 
 */

CREATE INDEX [FK_GraduationPlanCreditsBySubject_CreditType_CreditTypeId] ON [edfi].[GraduationPlanCreditsBySubject]([CreditTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanCreditsBySubject') AND name='FK_GraduationPlanCreditsBySubject_CreditType_CreditTypeId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanCreditsBySubject.FK_GraduationPlanCreditsBySubject_CreditType_CreditTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanCreditsBySubject.FK_GraduationPlanCreditsBySubject_CreditType_CreditTypeId >>>'
go

/* 
 * INDEX: [FK_GraduationPlanCreditsBySubject_GraduationPlan_EducationOrganizationId] 
 */

CREATE INDEX [FK_GraduationPlanCreditsBySubject_GraduationPlan_EducationOrganizationId] ON [edfi].[GraduationPlanCreditsBySubject]([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanCreditsBySubject') AND name='FK_GraduationPlanCreditsBySubject_GraduationPlan_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanCreditsBySubject.FK_GraduationPlanCreditsBySubject_GraduationPlan_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanCreditsBySubject.FK_GraduationPlanCreditsBySubject_GraduationPlan_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_GraduationPlanRequiredAssessment_Assessment_AssessmentTitle] 
 */

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessment_Assessment_AssessmentTitle]
    ON [edfi].[GraduationPlanRequiredAssessment]([AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [AssessmentTitle] ASC, [Version] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanRequiredAssessment') AND name='FK_GraduationPlanRequiredAssessment_Assessment_AssessmentTitle')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessment_Assessment_AssessmentTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessment_Assessment_AssessmentTitle >>>'
go

/* 
 * INDEX: [FK_GraduationPlanRequiredAssessment_GraduationPlan_EducationOrganizationId] 
 */

CREATE INDEX [FK_GraduationPlanRequiredAssessment_GraduationPlan_EducationOrganizationId] ON [edfi].[GraduationPlanRequiredAssessment]([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanRequiredAssessment') AND name='FK_GraduationPlanRequiredAssessment_GraduationPlan_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessment_GraduationPlan_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessment_GraduationPlan_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_GraduationPlanRequiredAssessment_AssessmentTitle] 
 */

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_GraduationPlanRequiredAssessment_AssessmentTitle]
    ON [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel]([Version] ASC, [AcademicSubjectDescriptorId] ASC, [GraduationSchoolYear] ASC, [EducationOrganizationId] ASC, [AssessedGradeLevelDescriptorId] ASC, [AssessmentTitle] ASC, [GraduationPlanTypeDescriptorId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanRequiredAssessmentAssessmentPerformanceLevel') AND name='FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_GraduationPlanRequiredAssessment_AssessmentTitle')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_GraduationPlanRequiredAssessment_AssessmentTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_GraduationPlanRequiredAssessment_AssessmentTitle >>>'
go

/* 
 * INDEX: [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId] 
 */

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId]
    ON [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel]([PerformanceLevelDescriptorId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanRequiredAssessmentAssessmentPerformanceLevel') AND name='FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId] 
 */

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId]
    ON [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel]([ResultDatatypeTypeId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanRequiredAssessmentAssessmentPerformanceLevel') AND name='FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId >>>'
go

/* 
 * INDEX: [FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] 
 */

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodType_AssessmentReportingMethodTypeId]
    ON [edfi].[GraduationPlanRequiredAssessmentScore]([AssessmentReportingMethodTypeId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanRequiredAssessmentScore') AND name='FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodType_AssessmentReportingMethodTypeId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodType_AssessmentReportingMethodTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodType_AssessmentReportingMethodTypeId >>>'
go

/* 
 * INDEX: [FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment_AssessmentTitle] 
 */

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment_AssessmentTitle]
    ON [edfi].[GraduationPlanRequiredAssessmentScore]([EducationOrganizationId] ASC, [AssessedGradeLevelDescriptorId] ASC, [AssessmentTitle] ASC, [GraduationPlanTypeDescriptorId] ASC, [Version] ASC, [AcademicSubjectDescriptorId] ASC, [GraduationSchoolYear] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanRequiredAssessmentScore') AND name='FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment_AssessmentTitle')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment_AssessmentTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment_AssessmentTitle >>>'
go

/* 
 * INDEX: [FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeType_ResultDatatypeTypeId] 
 */

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeType_ResultDatatypeTypeId]
    ON [edfi].[GraduationPlanRequiredAssessmentScore]([ResultDatatypeTypeId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanRequiredAssessmentScore') AND name='FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeType_ResultDatatypeTypeId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeType_ResultDatatypeTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanRequiredAssessment.FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeType_ResultDatatypeTypeId >>>'
go

/* 
 * INDEX: [FK_GraduationPlanTypeDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_GraduationPlanTypeDescriptor_Descriptor_DescriptorId] ON [edfi].[GraduationPlanTypeDescriptor]([GraduationPlanTypeDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanTypeDescriptor') AND name='FK_GraduationPlanTypeDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanTypeDescriptor.FK_GraduationPlanTypeDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanTypeDescriptor.FK_GraduationPlanTypeDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_GraduationPlanTypeDescriptor_GraduationPlanType_GraduationPlanTypeId] 
 */

CREATE INDEX [FK_GraduationPlanTypeDescriptor_GraduationPlanType_GraduationPlanTypeId] ON [edfi].[GraduationPlanTypeDescriptor]([GraduationPlanTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.GraduationPlanTypeDescriptor') AND name='FK_GraduationPlanTypeDescriptor_GraduationPlanType_GraduationPlanTypeId')
    PRINT '<<< CREATED INDEX edfi.GraduationPlanTypeDescriptor.FK_GraduationPlanTypeDescriptor_GraduationPlanType_GraduationPlanTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.GraduationPlanTypeDescriptor.FK_GraduationPlanTypeDescriptor_GraduationPlanType_GraduationPlanTypeId >>>'
go

/* 
 * INDEX: [FK_Intervention_DeliveryMethodType_DeliveryMethodTypeId] 
 */

CREATE INDEX [FK_Intervention_DeliveryMethodType_DeliveryMethodTypeId] ON [edfi].[Intervention]([DeliveryMethodTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Intervention') AND name='FK_Intervention_DeliveryMethodType_DeliveryMethodTypeId')
    PRINT '<<< CREATED INDEX edfi.Intervention.FK_Intervention_DeliveryMethodType_DeliveryMethodTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Intervention.FK_Intervention_DeliveryMethodType_DeliveryMethodTypeId >>>'
go

/* 
 * INDEX: [FK_Intervention_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_Intervention_EducationOrganization_EducationOrganizationId] ON [edfi].[Intervention]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Intervention') AND name='FK_Intervention_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.Intervention.FK_Intervention_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Intervention.FK_Intervention_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_Intervention_InterventionClassType_InterventionClassTypeId] 
 */

CREATE INDEX [FK_Intervention_InterventionClassType_InterventionClassTypeId] ON [edfi].[Intervention]([InterventionClassTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Intervention') AND name='FK_Intervention_InterventionClassType_InterventionClassTypeId')
    PRINT '<<< CREATED INDEX edfi.Intervention.FK_Intervention_InterventionClassType_InterventionClassTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Intervention.FK_Intervention_InterventionClassType_InterventionClassTypeId >>>'
go

/* 
 * INDEX: [FK_InterventionAppropriateGradeLevel_GradeLevelDescriptorId] 
 */

CREATE INDEX [FK_InterventionAppropriateGradeLevel_GradeLevelDescriptorId] ON [edfi].[InterventionAppropriateGradeLevel]([GradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionAppropriateGradeLevel') AND name='FK_InterventionAppropriateGradeLevel_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.InterventionAppropriateGradeLevel.FK_InterventionAppropriateGradeLevel_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionAppropriateGradeLevel.FK_InterventionAppropriateGradeLevel_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_InterventionAppropriateGradeLevel_Intervention] 
 */

CREATE INDEX [FK_InterventionAppropriateGradeLevel_Intervention] ON [edfi].[InterventionAppropriateGradeLevel]([EducationOrganizationId], [InterventionIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionAppropriateGradeLevel') AND name='FK_InterventionAppropriateGradeLevel_Intervention')
    PRINT '<<< CREATED INDEX edfi.InterventionAppropriateGradeLevel.FK_InterventionAppropriateGradeLevel_Intervention >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionAppropriateGradeLevel.FK_InterventionAppropriateGradeLevel_Intervention >>>'
go

/* 
 * INDEX: [FK_InterventionAppropriateSex_Intervention] 
 */

CREATE INDEX [FK_InterventionAppropriateSex_Intervention] ON [edfi].[InterventionAppropriateSex]([EducationOrganizationId], [InterventionIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionAppropriateSex') AND name='FK_InterventionAppropriateSex_Intervention')
    PRINT '<<< CREATED INDEX edfi.InterventionAppropriateSex.FK_InterventionAppropriateSex_Intervention >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionAppropriateSex.FK_InterventionAppropriateSex_Intervention >>>'
go

/* 
 * INDEX: [FK_InterventionAppropriateSex_SexType_SexTypeId] 
 */

CREATE INDEX [FK_InterventionAppropriateSex_SexType_SexTypeId] ON [edfi].[InterventionAppropriateSex]([SexTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionAppropriateSex') AND name='FK_InterventionAppropriateSex_SexType_SexTypeId')
    PRINT '<<< CREATED INDEX edfi.InterventionAppropriateSex.FK_InterventionAppropriateSex_SexType_SexTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionAppropriateSex.FK_InterventionAppropriateSex_SexType_SexTypeId >>>'
go

/* 
 * INDEX: [FK_InterventionDiagnosis_Intervention] 
 */

CREATE INDEX [FK_InterventionDiagnosis_Intervention] ON [edfi].[InterventionDiagnosis]([EducationOrganizationId], [InterventionIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionDiagnosis') AND name='FK_InterventionDiagnosis_Intervention')
    PRINT '<<< CREATED INDEX edfi.InterventionDiagnosis.FK_InterventionDiagnosis_Intervention >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionDiagnosis.FK_InterventionDiagnosis_Intervention >>>'
go

/* 
 * INDEX: [FK_InterventionDiagnosis_DiagnosisDescriptor_DiagnosisDescriptorId] 
 */

CREATE INDEX [FK_InterventionDiagnosis_DiagnosisDescriptor_DiagnosisDescriptorId] ON [edfi].[InterventionDiagnosis]([DiagnosisDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionDiagnosis') AND name='FK_InterventionDiagnosis_DiagnosisDescriptor_DiagnosisDescriptorId')
    PRINT '<<< CREATED INDEX edfi.InterventionDiagnosis.FK_InterventionDiagnosis_DiagnosisDescriptor_DiagnosisDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionDiagnosis.FK_InterventionDiagnosis_DiagnosisDescriptor_DiagnosisDescriptorId >>>'
go

/* 
 * INDEX: [FK_InterventionEducationContent_EducationContent_ContentIdentifier] 
 */

CREATE INDEX [FK_InterventionEducationContent_EducationContent_ContentIdentifier] ON [edfi].[InterventionEducationContent]([ContentIdentifier])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionEducationContent') AND name='FK_InterventionEducationContent_EducationContent_ContentIdentifier')
    PRINT '<<< CREATED INDEX edfi.InterventionEducationContent.FK_InterventionEducationContent_EducationContent_ContentIdentifier >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionEducationContent.FK_InterventionEducationContent_EducationContent_ContentIdentifier >>>'
go

/* 
 * INDEX: [FK_InterventionEducationContent_Intervention] 
 */

CREATE INDEX [FK_InterventionEducationContent_Intervention] ON [edfi].[InterventionEducationContent]([EducationOrganizationId], [InterventionIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionEducationContent') AND name='FK_InterventionEducationContent_Intervention')
    PRINT '<<< CREATED INDEX edfi.InterventionEducationContent.FK_InterventionEducationContent_Intervention >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionEducationContent.FK_InterventionEducationContent_Intervention >>>'
go

/* 
 * INDEX: [FK_InterventionInterventionPrescription_Intervention] 
 */

CREATE INDEX [FK_InterventionInterventionPrescription_Intervention] ON [edfi].[InterventionInterventionPrescription]([EducationOrganizationId], [InterventionIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionInterventionPrescription') AND name='FK_InterventionInterventionPrescription_Intervention')
    PRINT '<<< CREATED INDEX edfi.InterventionInterventionPrescription.FK_InterventionInterventionPrescription_Intervention >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionInterventionPrescription.FK_InterventionInterventionPrescription_Intervention >>>'
go

/* 
 * INDEX: [FK_InterventionInterventionPrescription_InterventionPrescription] 
 */

CREATE INDEX [FK_InterventionInterventionPrescription_InterventionPrescription] ON [edfi].[InterventionInterventionPrescription]([InterventionPrescriptionEducationOrganizationId], [InterventionPrescriptionIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionInterventionPrescription') AND name='FK_InterventionInterventionPrescription_InterventionPrescription')
    PRINT '<<< CREATED INDEX edfi.InterventionInterventionPrescription.FK_InterventionInterventionPrescription_InterventionPrescription >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionInterventionPrescription.FK_InterventionInterventionPrescription_InterventionPrescription >>>'
go

/* 
 * INDEX: [FK_InterventionLearningResourceMetadataURI_Intervention] 
 */

CREATE INDEX [FK_InterventionLearningResourceMetadataURI_Intervention] ON [edfi].[InterventionLearningResourceMetadataURI]([InterventionIdentificationCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionLearningResourceMetadataURI') AND name='FK_InterventionLearningResourceMetadataURI_Intervention')
    PRINT '<<< CREATED INDEX edfi.InterventionLearningResourceMetadataURI.FK_InterventionLearningResourceMetadataURI_Intervention >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionLearningResourceMetadataURI.FK_InterventionLearningResourceMetadataURI_Intervention >>>'
go

/* 
 * INDEX: [FK_InterventionMeetingTime_ClassPeriod_ClassPeriodName] 
 */

CREATE INDEX [FK_InterventionMeetingTime_ClassPeriod_ClassPeriodName] ON [edfi].[InterventionMeetingTime]([ClassPeriodName], [SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionMeetingTime') AND name='FK_InterventionMeetingTime_ClassPeriod_ClassPeriodName')
    PRINT '<<< CREATED INDEX edfi.InterventionMeetingTime.FK_InterventionMeetingTime_ClassPeriod_ClassPeriodName >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionMeetingTime.FK_InterventionMeetingTime_ClassPeriod_ClassPeriodName >>>'
go

/* 
 * INDEX: [FK_InterventionMeetingTime_Intervention] 
 */

CREATE INDEX [FK_InterventionMeetingTime_Intervention] ON [edfi].[InterventionMeetingTime]([InterventionIdentificationCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionMeetingTime') AND name='FK_InterventionMeetingTime_Intervention')
    PRINT '<<< CREATED INDEX edfi.InterventionMeetingTime.FK_InterventionMeetingTime_Intervention >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionMeetingTime.FK_InterventionMeetingTime_Intervention >>>'
go

/* 
 * INDEX: [FK_InterventionPopulationServed_Intervention] 
 */

CREATE INDEX [FK_InterventionPopulationServed_Intervention] ON [edfi].[InterventionPopulationServed]([InterventionIdentificationCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPopulationServed') AND name='FK_InterventionPopulationServed_Intervention')
    PRINT '<<< CREATED INDEX edfi.InterventionPopulationServed.FK_InterventionPopulationServed_Intervention >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPopulationServed.FK_InterventionPopulationServed_Intervention >>>'
go

/* 
 * INDEX: [FK_InterventionPopulationServed_PopulationServedType_PopulationServedTypeId] 
 */

CREATE INDEX [FK_InterventionPopulationServed_PopulationServedType_PopulationServedTypeId] ON [edfi].[InterventionPopulationServed]([PopulationServedTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPopulationServed') AND name='FK_InterventionPopulationServed_PopulationServedType_PopulationServedTypeId')
    PRINT '<<< CREATED INDEX edfi.InterventionPopulationServed.FK_InterventionPopulationServed_PopulationServedType_PopulationServedTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPopulationServed.FK_InterventionPopulationServed_PopulationServedType_PopulationServedTypeId >>>'
go

/* 
 * INDEX: [FK_InterventionPrescription_DeliveryMethodType_DeliveryMethodTypeId] 
 */

CREATE INDEX [FK_InterventionPrescription_DeliveryMethodType_DeliveryMethodTypeId] ON [edfi].[InterventionPrescription]([DeliveryMethodTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescription') AND name='FK_InterventionPrescription_DeliveryMethodType_DeliveryMethodTypeId')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescription.FK_InterventionPrescription_DeliveryMethodType_DeliveryMethodTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescription.FK_InterventionPrescription_DeliveryMethodType_DeliveryMethodTypeId >>>'
go

/* 
 * INDEX: [FK_InterventionPrescription_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_InterventionPrescription_EducationOrganization_EducationOrganizationId] ON [edfi].[InterventionPrescription]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescription') AND name='FK_InterventionPrescription_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescription.FK_InterventionPrescription_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescription.FK_InterventionPrescription_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_InterventionPrescription_InterventionClassType_InterventionClassTypeId] 
 */

CREATE INDEX [FK_InterventionPrescription_InterventionClassType_InterventionClassTypeId] ON [edfi].[InterventionPrescription]([InterventionClassTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescription') AND name='FK_InterventionPrescription_InterventionClassType_InterventionClassTypeId')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescription.FK_InterventionPrescription_InterventionClassType_InterventionClassTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescription.FK_InterventionPrescription_InterventionClassType_InterventionClassTypeId >>>'
go

/* 
 * INDEX: [FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptorId] 
 */

CREATE INDEX [FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptorId] ON [edfi].[InterventionPrescriptionAppropriateGradeLevel]([GradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescriptionAppropriateGradeLevel') AND name='FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescriptionAppropriateGradeLevel.FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescriptionAppropriateGradeLevel.FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription] 
 */

CREATE INDEX [FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription] ON [edfi].[InterventionPrescriptionAppropriateGradeLevel]([EducationOrganizationId], [InterventionPrescriptionIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescriptionAppropriateGradeLevel') AND name='FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescriptionAppropriateGradeLevel.FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescriptionAppropriateGradeLevel.FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription >>>'
go

/* 
 * INDEX: [FK_InterventionPrescriptionAppropriateSex_InterventionPrescription] 
 */

CREATE INDEX [FK_InterventionPrescriptionAppropriateSex_InterventionPrescription] ON [edfi].[InterventionPrescriptionAppropriateSex]([EducationOrganizationId], [InterventionPrescriptionIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescriptionAppropriateSex') AND name='FK_InterventionPrescriptionAppropriateSex_InterventionPrescription')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescriptionAppropriateSex.FK_InterventionPrescriptionAppropriateSex_InterventionPrescription >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescriptionAppropriateSex.FK_InterventionPrescriptionAppropriateSex_InterventionPrescription >>>'
go

/* 
 * INDEX: [FK_InterventionPrescriptionAppropriateSex_SexType_SexTypeId] 
 */

CREATE INDEX [FK_InterventionPrescriptionAppropriateSex_SexType_SexTypeId] ON [edfi].[InterventionPrescriptionAppropriateSex]([SexTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescriptionAppropriateSex') AND name='FK_InterventionPrescriptionAppropriateSex_SexType_SexTypeId')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescriptionAppropriateSex.FK_InterventionPrescriptionAppropriateSex_SexType_SexTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescriptionAppropriateSex.FK_InterventionPrescriptionAppropriateSex_SexType_SexTypeId >>>'
go

/* 
 * INDEX: [FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor_DiagnosisDescriptorId] 
 */

CREATE INDEX [FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor_DiagnosisDescriptorId] ON [edfi].[InterventionPrescriptionDiagnosis]([DiagnosisDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescriptionDiagnosis') AND name='FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor_DiagnosisDescriptorId')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescriptionDiagnosis.FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor_DiagnosisDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescriptionDiagnosis.FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor_DiagnosisDescriptorId >>>'
go

/* 
 * INDEX: [FK_InterventionPrescriptionDiagnosis_InterventionPrescription] 
 */

CREATE INDEX [FK_InterventionPrescriptionDiagnosis_InterventionPrescription] ON [edfi].[InterventionPrescriptionDiagnosis]([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescriptionDiagnosis') AND name='FK_InterventionPrescriptionDiagnosis_InterventionPrescription')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescriptionDiagnosis.FK_InterventionPrescriptionDiagnosis_InterventionPrescription >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescriptionDiagnosis.FK_InterventionPrescriptionDiagnosis_InterventionPrescription >>>'
go

/* 
 * INDEX: [FK_InterventionPrescriptionEducationContent_EducationContent_ContentIdentifier] 
 */

CREATE INDEX [FK_InterventionPrescriptionEducationContent_EducationContent_ContentIdentifier] ON [edfi].[InterventionPrescriptionEducationContent]([ContentIdentifier])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescriptionEducationContent') AND name='FK_InterventionPrescriptionEducationContent_EducationContent_ContentIdentifier')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescriptionEducationContent.FK_InterventionPrescriptionEducationContent_EducationContent_ContentIdentifier >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescriptionEducationContent.FK_InterventionPrescriptionEducationContent_EducationContent_ContentIdentifier >>>'
go

/* 
 * INDEX: [FK_InterventionPrescriptionEducationContent_InterventionPrescription] 
 */

CREATE INDEX [FK_InterventionPrescriptionEducationContent_InterventionPrescription] ON [edfi].[InterventionPrescriptionEducationContent]([EducationOrganizationId], [InterventionPrescriptionIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescriptionEducationContent') AND name='FK_InterventionPrescriptionEducationContent_InterventionPrescription')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescriptionEducationContent.FK_InterventionPrescriptionEducationContent_InterventionPrescription >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescriptionEducationContent.FK_InterventionPrescriptionEducationContent_InterventionPrescription >>>'
go

/* 
 * INDEX: [FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription] 
 */

CREATE INDEX [FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription] ON [edfi].[InterventionPrescriptionLearningResourceMetadataURI]([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescriptionLearningResourceMetadataURI') AND name='FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescriptionLearningResourceMetadataURI.FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescriptionLearningResourceMetadataURI.FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription >>>'
go

/* 
 * INDEX: [FK_InterventionPrescriptionPopulationServed_InterventionPrescription] 
 */

CREATE INDEX [FK_InterventionPrescriptionPopulationServed_InterventionPrescription] ON [edfi].[InterventionPrescriptionPopulationServed]([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescriptionPopulationServed') AND name='FK_InterventionPrescriptionPopulationServed_InterventionPrescription')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescriptionPopulationServed.FK_InterventionPrescriptionPopulationServed_InterventionPrescription >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescriptionPopulationServed.FK_InterventionPrescriptionPopulationServed_InterventionPrescription >>>'
go

/* 
 * INDEX: [FK_InterventionPrescriptionPopulationServed_PopulationServedType_PopulationServedTypeId] 
 */

CREATE INDEX [FK_InterventionPrescriptionPopulationServed_PopulationServedType_PopulationServedTypeId] ON [edfi].[InterventionPrescriptionPopulationServed]([PopulationServedTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescriptionPopulationServed') AND name='FK_InterventionPrescriptionPopulationServed_PopulationServedType_PopulationServedTypeId')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescriptionPopulationServed.FK_InterventionPrescriptionPopulationServed_PopulationServedType_PopulationServedTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescriptionPopulationServed.FK_InterventionPrescriptionPopulationServed_PopulationServedType_PopulationServedTypeId >>>'
go

/* 
 * INDEX: [FK_InterventionPrescriptionURI_InterventionPrescription] 
 */

CREATE INDEX [FK_InterventionPrescriptionURI_InterventionPrescription] ON [edfi].[InterventionPrescriptionURI]([EducationOrganizationId], [InterventionPrescriptionIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionPrescriptionURI') AND name='FK_InterventionPrescriptionURI_InterventionPrescription')
    PRINT '<<< CREATED INDEX edfi.InterventionPrescriptionURI.FK_InterventionPrescriptionURI_InterventionPrescription >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionPrescriptionURI.FK_InterventionPrescriptionURI_InterventionPrescription >>>'
go

/* 
 * INDEX: [FK_InterventionStaff_Intervention] 
 */

CREATE INDEX [FK_InterventionStaff_Intervention] ON [edfi].[InterventionStaff]([InterventionIdentificationCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStaff') AND name='FK_InterventionStaff_Intervention')
    PRINT '<<< CREATED INDEX edfi.InterventionStaff.FK_InterventionStaff_Intervention >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStaff.FK_InterventionStaff_Intervention >>>'
go

/* 
 * INDEX: [FK_InterventionStaff_Staff_StaffUSI] 
 */

CREATE INDEX [FK_InterventionStaff_Staff_StaffUSI] ON [edfi].[InterventionStaff]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStaff') AND name='FK_InterventionStaff_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.InterventionStaff.FK_InterventionStaff_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStaff.FK_InterventionStaff_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_InterventionStudy_DeliveryMethodType_DeliveryMethodTypeId] 
 */

CREATE INDEX [FK_InterventionStudy_DeliveryMethodType_DeliveryMethodTypeId] ON [edfi].[InterventionStudy]([DeliveryMethodTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudy') AND name='FK_InterventionStudy_DeliveryMethodType_DeliveryMethodTypeId')
    PRINT '<<< CREATED INDEX edfi.InterventionStudy.FK_InterventionStudy_DeliveryMethodType_DeliveryMethodTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudy.FK_InterventionStudy_DeliveryMethodType_DeliveryMethodTypeId >>>'
go

/* 
 * INDEX: [FK_InterventionStudy_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_InterventionStudy_EducationOrganization_EducationOrganizationId] ON [edfi].[InterventionStudy]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudy') AND name='FK_InterventionStudy_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.InterventionStudy.FK_InterventionStudy_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudy.FK_InterventionStudy_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_InterventionStudy_InterventionClassType_InterventionClassTypeId] 
 */

CREATE INDEX [FK_InterventionStudy_InterventionClassType_InterventionClassTypeId] ON [edfi].[InterventionStudy]([InterventionClassTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudy') AND name='FK_InterventionStudy_InterventionClassType_InterventionClassTypeId')
    PRINT '<<< CREATED INDEX edfi.InterventionStudy.FK_InterventionStudy_InterventionClassType_InterventionClassTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudy.FK_InterventionStudy_InterventionClassType_InterventionClassTypeId >>>'
go

/* 
 * INDEX: [FK_InterventionStudy_InterventionPrescription] 
 */

CREATE INDEX [FK_InterventionStudy_InterventionPrescription] ON [edfi].[InterventionStudy]([InterventionPrescriptionIdentificationCode], [InterventionPrescriptionEducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudy') AND name='FK_InterventionStudy_InterventionPrescription')
    PRINT '<<< CREATED INDEX edfi.InterventionStudy.FK_InterventionStudy_InterventionPrescription >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudy.FK_InterventionStudy_InterventionPrescription >>>'
go

/* 
 * INDEX: [FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptorId] 
 */

CREATE INDEX [FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptorId] ON [edfi].[InterventionStudyAppropriateGradeLevel]([GradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyAppropriateGradeLevel') AND name='FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyAppropriateGradeLevel.FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyAppropriateGradeLevel.FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_InterventionStudyAppropriateGradeLevel_InterventionStudy] 
 */

CREATE INDEX [FK_InterventionStudyAppropriateGradeLevel_InterventionStudy] ON [edfi].[InterventionStudyAppropriateGradeLevel]([InterventionStudyIdentificationCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyAppropriateGradeLevel') AND name='FK_InterventionStudyAppropriateGradeLevel_InterventionStudy')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyAppropriateGradeLevel.FK_InterventionStudyAppropriateGradeLevel_InterventionStudy >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyAppropriateGradeLevel.FK_InterventionStudyAppropriateGradeLevel_InterventionStudy >>>'
go

/* 
 * INDEX: [FK_InterventionStudyAppropriateSex_InterventionStudy] 
 */

CREATE INDEX [FK_InterventionStudyAppropriateSex_InterventionStudy] ON [edfi].[InterventionStudyAppropriateSex]([EducationOrganizationId], [InterventionStudyIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyAppropriateSex') AND name='FK_InterventionStudyAppropriateSex_InterventionStudy')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyAppropriateSex.FK_InterventionStudyAppropriateSex_InterventionStudy >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyAppropriateSex.FK_InterventionStudyAppropriateSex_InterventionStudy >>>'
go

/* 
 * INDEX: [FK_InterventionStudyAppropriateSex_SexType_SexTypeId] 
 */

CREATE INDEX [FK_InterventionStudyAppropriateSex_SexType_SexTypeId] ON [edfi].[InterventionStudyAppropriateSex]([SexTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyAppropriateSex') AND name='FK_InterventionStudyAppropriateSex_SexType_SexTypeId')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyAppropriateSex.FK_InterventionStudyAppropriateSex_SexType_SexTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyAppropriateSex.FK_InterventionStudyAppropriateSex_SexType_SexTypeId >>>'
go

/* 
 * INDEX: [FK_InterventionStudyEducationContent_EducationContent_ContentIdentifier] 
 */

CREATE INDEX [FK_InterventionStudyEducationContent_EducationContent_ContentIdentifier] ON [edfi].[InterventionStudyEducationContent]([ContentIdentifier])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyEducationContent') AND name='FK_InterventionStudyEducationContent_EducationContent_ContentIdentifier')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyEducationContent.FK_InterventionStudyEducationContent_EducationContent_ContentIdentifier >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyEducationContent.FK_InterventionStudyEducationContent_EducationContent_ContentIdentifier >>>'
go

/* 
 * INDEX: [FK_InterventionStudyEducationContent_InterventionStudy] 
 */

CREATE INDEX [FK_InterventionStudyEducationContent_InterventionStudy] ON [edfi].[InterventionStudyEducationContent]([EducationOrganizationId], [InterventionStudyIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyEducationContent') AND name='FK_InterventionStudyEducationContent_InterventionStudy')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyEducationContent.FK_InterventionStudyEducationContent_InterventionStudy >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyEducationContent.FK_InterventionStudyEducationContent_InterventionStudy >>>'
go

/* 
 * INDEX: [FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor_DiagnosisDescriptorId] 
 */

CREATE INDEX [FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor_DiagnosisDescriptorId] ON [edfi].[InterventionStudyInterventionEffectiveness]([DiagnosisDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyInterventionEffectiveness') AND name='FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor_DiagnosisDescriptorId')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor_DiagnosisDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor_DiagnosisDescriptorId >>>'
go

/* 
 * INDEX: [FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptorId] 
 */

CREATE INDEX [FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptorId] ON [edfi].[InterventionStudyInterventionEffectiveness]([GradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyInterventionEffectiveness') AND name='FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingType_InterventionEffectivenessRatingTypeId] 
 */

CREATE INDEX [FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingType_InterventionEffectivenessRatingTypeId] ON [edfi].[InterventionStudyInterventionEffectiveness]([InterventionEffectivenessRatingTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyInterventionEffectiveness') AND name='FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingType_InterventionEffectivenessRatingTypeId')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingType_InterventionEffectivenessRatingTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingType_InterventionEffectivenessRatingTypeId >>>'
go

/* 
 * INDEX: [FK_InterventionStudyInterventionEffectiveness_InterventionStudy] 
 */

CREATE INDEX [FK_InterventionStudyInterventionEffectiveness_InterventionStudy] ON [edfi].[InterventionStudyInterventionEffectiveness]([InterventionStudyIdentificationCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyInterventionEffectiveness') AND name='FK_InterventionStudyInterventionEffectiveness_InterventionStudy')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_InterventionStudy >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_InterventionStudy >>>'
go

/* 
 * INDEX: [FK_InterventionStudyInterventionEffectiveness_PopulationServedType_PopulationServedTypeId] 
 */

CREATE INDEX [FK_InterventionStudyInterventionEffectiveness_PopulationServedType_PopulationServedTypeId] ON [edfi].[InterventionStudyInterventionEffectiveness]([PopulationServedTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyInterventionEffectiveness') AND name='FK_InterventionStudyInterventionEffectiveness_PopulationServedType_PopulationServedTypeId')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_PopulationServedType_PopulationServedTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyInterventionEffectiveness.FK_InterventionStudyInterventionEffectiveness_PopulationServedType_PopulationServedTypeId >>>'
go

/* 
 * INDEX: [FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy] 
 */

CREATE INDEX [FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy] ON [edfi].[InterventionStudyLearningResourceMetadataURI]([EducationOrganizationId], [InterventionStudyIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyLearningResourceMetadataURI') AND name='FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyLearningResourceMetadataURI.FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyLearningResourceMetadataURI.FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy >>>'
go

/* 
 * INDEX: [FK_InterventionStudyPopulationServed_InterventionStudy] 
 */

CREATE INDEX [FK_InterventionStudyPopulationServed_InterventionStudy] ON [edfi].[InterventionStudyPopulationServed]([InterventionStudyIdentificationCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyPopulationServed') AND name='FK_InterventionStudyPopulationServed_InterventionStudy')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyPopulationServed.FK_InterventionStudyPopulationServed_InterventionStudy >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyPopulationServed.FK_InterventionStudyPopulationServed_InterventionStudy >>>'
go

/* 
 * INDEX: [FK_InterventionStudyPopulationServed_PopulationServedType_PopulationServedTypeId] 
 */

CREATE INDEX [FK_InterventionStudyPopulationServed_PopulationServedType_PopulationServedTypeId] ON [edfi].[InterventionStudyPopulationServed]([PopulationServedTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyPopulationServed') AND name='FK_InterventionStudyPopulationServed_PopulationServedType_PopulationServedTypeId')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyPopulationServed.FK_InterventionStudyPopulationServed_PopulationServedType_PopulationServedTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyPopulationServed.FK_InterventionStudyPopulationServed_PopulationServedType_PopulationServedTypeId >>>'
go

/* 
 * INDEX: [FK_InterventionStudyStateAbbreviation_InterventionStudy] 
 */

CREATE INDEX [FK_InterventionStudyStateAbbreviation_InterventionStudy] ON [edfi].[InterventionStudyStateAbbreviation]([EducationOrganizationId], [InterventionStudyIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyStateAbbreviation') AND name='FK_InterventionStudyStateAbbreviation_InterventionStudy')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyStateAbbreviation.FK_InterventionStudyStateAbbreviation_InterventionStudy >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyStateAbbreviation.FK_InterventionStudyStateAbbreviation_InterventionStudy >>>'
go

/* 
 * INDEX: [FK_InterventionStudyStateAbbreviation_StateAbbreviationType_StateAbbreviationTypeId] 
 */

CREATE INDEX [FK_InterventionStudyStateAbbreviation_StateAbbreviationType_StateAbbreviationTypeId] ON [edfi].[InterventionStudyStateAbbreviation]([StateAbbreviationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyStateAbbreviation') AND name='FK_InterventionStudyStateAbbreviation_StateAbbreviationType_StateAbbreviationTypeId')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyStateAbbreviation.FK_InterventionStudyStateAbbreviation_StateAbbreviationType_StateAbbreviationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyStateAbbreviation.FK_InterventionStudyStateAbbreviation_StateAbbreviationType_StateAbbreviationTypeId >>>'
go

/* 
 * INDEX: [FK_InterventionStudyURI_InterventionStudy] 
 */

CREATE INDEX [FK_InterventionStudyURI_InterventionStudy] ON [edfi].[InterventionStudyURI]([InterventionStudyIdentificationCode], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionStudyURI') AND name='FK_InterventionStudyURI_InterventionStudy')
    PRINT '<<< CREATED INDEX edfi.InterventionStudyURI.FK_InterventionStudyURI_InterventionStudy >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionStudyURI.FK_InterventionStudyURI_InterventionStudy >>>'
go

/* 
 * INDEX: [FK_InterventionURI_Intervention] 
 */

CREATE INDEX [FK_InterventionURI_Intervention] ON [edfi].[InterventionURI]([EducationOrganizationId], [InterventionIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.InterventionURI') AND name='FK_InterventionURI_Intervention')
    PRINT '<<< CREATED INDEX edfi.InterventionURI.FK_InterventionURI_Intervention >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.InterventionURI.FK_InterventionURI_Intervention >>>'
go

/* 
 * INDEX: [FK_LanguageDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_LanguageDescriptor_Descriptor_DescriptorId] ON [edfi].[LanguageDescriptor]([LanguageDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LanguageDescriptor') AND name='FK_LanguageDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.LanguageDescriptor.FK_LanguageDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LanguageDescriptor.FK_LanguageDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_LanguageDescriptor_LanguagesType_LanguageTypeId] 
 */

CREATE INDEX [FK_LanguageDescriptor_LanguagesType_LanguageTypeId] ON [edfi].[LanguageDescriptor]([LanguageTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LanguageDescriptor') AND name='FK_LanguageDescriptor_LanguagesType_LanguageTypeId')
    PRINT '<<< CREATED INDEX edfi.LanguageDescriptor.FK_LanguageDescriptor_LanguagesType_LanguageTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LanguageDescriptor.FK_LanguageDescriptor_LanguagesType_LanguageTypeId >>>'
go

/* 
 * INDEX: [FK_LearningObjective_AcademicSubjectDescriptorId] 
 */

CREATE INDEX [FK_LearningObjective_AcademicSubjectDescriptorId] ON [edfi].[LearningObjective]([AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningObjective') AND name='FK_LearningObjective_AcademicSubjectDescriptorId')
    PRINT '<<< CREATED INDEX edfi.LearningObjective.FK_LearningObjective_AcademicSubjectDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningObjective.FK_LearningObjective_AcademicSubjectDescriptorId >>>'
go

/* 
 * INDEX: [FK_LearningObjective_LearningObjective_ParentObjective] 
 */

CREATE INDEX [FK_LearningObjective_LearningObjective_ParentObjective] ON [edfi].[LearningObjective]([ParentObjective], [ParentObjectiveGradeLevelDescriptorId], [ParentAcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningObjective') AND name='FK_LearningObjective_LearningObjective_ParentObjective')
    PRINT '<<< CREATED INDEX edfi.LearningObjective.FK_LearningObjective_LearningObjective_ParentObjective >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningObjective.FK_LearningObjective_LearningObjective_ParentObjective >>>'
go

/* 
 * INDEX: [FK_LearningObjective_ObjectiveGradeLevelDescriptorId] 
 */

CREATE INDEX [FK_LearningObjective_ObjectiveGradeLevelDescriptorId] ON [edfi].[LearningObjective]([ObjectiveGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningObjective') AND name='FK_LearningObjective_ObjectiveGradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.LearningObjective.FK_LearningObjective_ObjectiveGradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningObjective.FK_LearningObjective_ObjectiveGradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_LearningObjectiveContentStandard_EducationOrganization_MandatingEducationOrganizationId] 
 */

CREATE INDEX [FK_LearningObjectiveContentStandard_EducationOrganization_MandatingEducationOrganizationId] ON [edfi].[LearningObjectiveContentStandard]([MandatingEducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningObjectiveContentStandard') AND name='FK_LearningObjectiveContentStandard_EducationOrganization_MandatingEducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.LearningObjectiveContentStandard.FK_LearningObjectiveContentStandard_EducationOrganization_MandatingEducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningObjectiveContentStandard.FK_LearningObjectiveContentStandard_EducationOrganization_MandatingEducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_LearningObjectiveContentStandard_LearningObjective_Objective] 
 */

CREATE INDEX [FK_LearningObjectiveContentStandard_LearningObjective_Objective] ON [edfi].[LearningObjectiveContentStandard]([ObjectiveGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Objective])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningObjectiveContentStandard') AND name='FK_LearningObjectiveContentStandard_LearningObjective_Objective')
    PRINT '<<< CREATED INDEX edfi.LearningObjectiveContentStandard.FK_LearningObjectiveContentStandard_LearningObjective_Objective >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningObjectiveContentStandard.FK_LearningObjectiveContentStandard_LearningObjective_Objective >>>'
go

/* 
 * INDEX: [FK_LearningObjectiveContentStandard_PublicationStatusType_PublicationStatusTypeId] 
 */

CREATE INDEX [FK_LearningObjectiveContentStandard_PublicationStatusType_PublicationStatusTypeId] ON [edfi].[LearningObjectiveContentStandard]([PublicationStatusTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningObjectiveContentStandard') AND name='FK_LearningObjectiveContentStandard_PublicationStatusType_PublicationStatusTypeId')
    PRINT '<<< CREATED INDEX edfi.LearningObjectiveContentStandard.FK_LearningObjectiveContentStandard_PublicationStatusType_PublicationStatusTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningObjectiveContentStandard.FK_LearningObjectiveContentStandard_PublicationStatusType_PublicationStatusTypeId >>>'
go

/* 
 * INDEX: [FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard_Objective] 
 */

CREATE INDEX [FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard_Objective] ON [edfi].[LearningObjectiveContentStandardAuthor]([Objective], [ObjectiveGradeLevelDescriptorId], [AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningObjectiveContentStandardAuthor') AND name='FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard_Objective')
    PRINT '<<< CREATED INDEX edfi.LearningObjectiveContentStandardAuthor.FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard_Objective >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningObjectiveContentStandardAuthor.FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard_Objective >>>'
go

/* 
 * INDEX: [FK_LearningObjectiveLearningStandard_LearningObjective] 
 */

CREATE INDEX [FK_LearningObjectiveLearningStandard_LearningObjective] ON [edfi].[LearningObjectiveLearningStandard]([Objective], [ObjectiveGradeLevelDescriptorId], [AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningObjectiveLearningStandard') AND name='FK_LearningObjectiveLearningStandard_LearningObjective')
    PRINT '<<< CREATED INDEX edfi.LearningObjectiveLearningStandard.FK_LearningObjectiveLearningStandard_LearningObjective >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningObjectiveLearningStandard.FK_LearningObjectiveLearningStandard_LearningObjective >>>'
go

/* 
 * INDEX: [FK_LearningObjectiveLearningStandard_LearningStandard] 
 */

CREATE INDEX [FK_LearningObjectiveLearningStandard_LearningStandard] ON [edfi].[LearningObjectiveLearningStandard]([LearningStandardId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningObjectiveLearningStandard') AND name='FK_LearningObjectiveLearningStandard_LearningStandard')
    PRINT '<<< CREATED INDEX edfi.LearningObjectiveLearningStandard.FK_LearningObjectiveLearningStandard_LearningStandard >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningObjectiveLearningStandard.FK_LearningObjectiveLearningStandard_LearningStandard >>>'
go

/* 
 * INDEX: [FK_LearningStandard_AcademicSubjectDescriptorId] 
 */

CREATE INDEX [FK_LearningStandard_AcademicSubjectDescriptorId] ON [edfi].[LearningStandard]([AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningStandard') AND name='FK_LearningStandard_AcademicSubjectDescriptorId')
    PRINT '<<< CREATED INDEX edfi.LearningStandard.FK_LearningStandard_AcademicSubjectDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningStandard.FK_LearningStandard_AcademicSubjectDescriptorId >>>'
go

/* 
 * INDEX: [FK_LearningStandard_LearningStandard_ParentLearningStandardId] 
 */

CREATE INDEX [FK_LearningStandard_LearningStandard_ParentLearningStandardId] ON [edfi].[LearningStandard]([ParentLearningStandardId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningStandard') AND name='FK_LearningStandard_LearningStandard_ParentLearningStandardId')
    PRINT '<<< CREATED INDEX edfi.LearningStandard.FK_LearningStandard_LearningStandard_ParentLearningStandardId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningStandard.FK_LearningStandard_LearningStandard_ParentLearningStandardId >>>'
go

/* 
 * INDEX: [FK_LearningStandardContentStandard_EducationOrganization_MandatingEducationOrganizationReference] 
 */

CREATE INDEX [FK_LearningStandardContentStandard_EducationOrganization_MandatingEducationOrganizationReference] ON [edfi].[LearningStandardContentStandard]([MandatingEducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningStandardContentStandard') AND name='FK_LearningStandardContentStandard_EducationOrganization_MandatingEducationOrganizationReference')
    PRINT '<<< CREATED INDEX edfi.LearningStandardContentStandard.FK_LearningStandardContentStandard_EducationOrganization_MandatingEducationOrganizationReference >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningStandardContentStandard.FK_LearningStandardContentStandard_EducationOrganization_MandatingEducationOrganizationReference >>>'
go

/* 
 * INDEX: [FK_LearningStandardContentStandard_LearningStandard_LearningStandardId] 
 */

CREATE INDEX [FK_LearningStandardContentStandard_LearningStandard_LearningStandardId] ON [edfi].[LearningStandardContentStandard]([LearningStandardId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningStandardContentStandard') AND name='FK_LearningStandardContentStandard_LearningStandard_LearningStandardId')
    PRINT '<<< CREATED INDEX edfi.LearningStandardContentStandard.FK_LearningStandardContentStandard_LearningStandard_LearningStandardId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningStandardContentStandard.FK_LearningStandardContentStandard_LearningStandard_LearningStandardId >>>'
go

/* 
 * INDEX: [FK_LearningStandardContentStandard_PublicationStatusType_PublicationStatusTypeId] 
 */

CREATE INDEX [FK_LearningStandardContentStandard_PublicationStatusType_PublicationStatusTypeId] ON [edfi].[LearningStandardContentStandard]([PublicationStatusTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningStandardContentStandard') AND name='FK_LearningStandardContentStandard_PublicationStatusType_PublicationStatusTypeId')
    PRINT '<<< CREATED INDEX edfi.LearningStandardContentStandard.FK_LearningStandardContentStandard_PublicationStatusType_PublicationStatusTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningStandardContentStandard.FK_LearningStandardContentStandard_PublicationStatusType_PublicationStatusTypeId >>>'
go

/* 
 * INDEX: [FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard_LearningStandardId] 
 */

CREATE INDEX [FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard_LearningStandardId] ON [edfi].[LearningStandardContentStandardAuthor]([LearningStandardId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningStandardContentStandardAuthor') AND name='FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard_LearningStandardId')
    PRINT '<<< CREATED INDEX edfi.LearningStandardContentStandardAuthor.FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard_LearningStandardId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningStandardContentStandardAuthor.FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard_LearningStandardId >>>'
go

/* 
 * INDEX: [FK_LearningStandardIdentificationCode_LearningStandard_LearningStandardId] 
 */

CREATE INDEX [FK_LearningStandardIdentificationCode_LearningStandard_LearningStandardId] ON [edfi].[LearningStandardIdentificationCode]([LearningStandardId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningStandardIdentificationCode') AND name='FK_LearningStandardIdentificationCode_LearningStandard_LearningStandardId')
    PRINT '<<< CREATED INDEX edfi.LearningStandardIdentificationCode.FK_LearningStandardIdentificationCode_LearningStandard_LearningStandardId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningStandardIdentificationCode.FK_LearningStandardIdentificationCode_LearningStandard_LearningStandardId >>>'
go

/* 
 * INDEX: [FK_LearningStandardGradeLevel_GradeLevelDescriptor_GradeLevelDescriptorId] 
 */

CREATE NONCLUSTERED INDEX [FK_LearningStandardGradeLevel_GradeLevelDescriptor_GradeLevelDescriptorId]
    ON [edfi].[LearningStandardGradeLevel]([GradeLevelDescriptorId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningStandardGradeLevel') AND name='FK_LearningStandardGradeLevel_GradeLevelDescriptor_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.LearningStandardGradeLevel.FK_LearningStandardGradeLevel_GradeLevelDescriptor_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningStandardGradeLevel.FK_LearningStandardGradeLevel_GradeLevelDescriptor_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_LearningStandardGradeLevel_LearningStandard_LearningStandardId] 
 */

CREATE NONCLUSTERED INDEX [FK_LearningStandardGradeLevel_LearningStandard_LearningStandardId]
    ON [edfi].[LearningStandardGradeLevel]([LearningStandardId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningStandardGradeLevel') AND name='FK_LearningStandardGradeLevel_LearningStandard_LearningStandardId')
    PRINT '<<< CREATED INDEX edfi.LearningStandardGradeLevel.FK_LearningStandardGradeLevel_LearningStandard_LearningStandardId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningStandardGradeLevel.FK_LearningStandardGradeLevel_LearningStandard_LearningStandardId >>>'
go

/* 
 * INDEX: [FK_LearningStandardPrerequisiteLearningStandard_LearningStandard] 
 */

CREATE INDEX [FK_LearningStandardPrerequisiteLearningStandard_LearningStandard] ON [edfi].[LearningStandardPrerequisiteLearningStandard]([LearningStandardId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningStandardPrerequisiteLearningStandard') AND name='FK_LearningStandardPrerequisiteLearningStandard_LearningStandard')
    PRINT '<<< CREATED INDEX edfi.LearningStandardPrerequisiteLearningStandard.FK_LearningStandardPrerequisiteLearningStandard_LearningStandard >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningStandardPrerequisiteLearningStandard.FK_LearningStandardPrerequisiteLearningStandard_LearningStandard >>>'
go

/* 
 * INDEX: [FK_LearningStandardPrerequisiteLearningStandard_LearningStandard_Prerequisite] 
 */

CREATE INDEX [FK_LearningStandardPrerequisiteLearningStandard_LearningStandard_Prerequisite] ON [edfi].[LearningStandardPrerequisiteLearningStandard]([PrerequisiteLearningStandardId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LearningStandardPrerequisiteLearningStandard') AND name='FK_LearningStandardPrerequisiteLearningStandard_LearningStandard_Prerequisite')
    PRINT '<<< CREATED INDEX edfi.LearningStandardPrerequisiteLearningStandard.FK_LearningStandardPrerequisiteLearningStandard_LearningStandard_Prerequisite >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LearningStandardPrerequisiteLearningStandard.FK_LearningStandardPrerequisiteLearningStandard_LearningStandard_Prerequisite >>>'
go

/* 
 * INDEX: [FK_LeaveEvent_LeaveEventCategoryType_LeaveEventCategoryTypeId] 
 */

CREATE INDEX [FK_LeaveEvent_LeaveEventCategoryType_LeaveEventCategoryTypeId] ON [edfi].[LeaveEvent]([LeaveEventCategoryTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LeaveEvent') AND name='FK_LeaveEvent_LeaveEventCategoryType_LeaveEventCategoryTypeId')
    PRINT '<<< CREATED INDEX edfi.LeaveEvent.FK_LeaveEvent_LeaveEventCategoryType_LeaveEventCategoryTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LeaveEvent.FK_LeaveEvent_LeaveEventCategoryType_LeaveEventCategoryTypeId >>>'
go

/* 
 * INDEX: [FK_LeaveEvent_Staff_StaffUSI] 
 */

CREATE INDEX [FK_LeaveEvent_Staff_StaffUSI] ON [edfi].[LeaveEvent]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LeaveEvent') AND name='FK_LeaveEvent_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.LeaveEvent.FK_LeaveEvent_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LeaveEvent.FK_LeaveEvent_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_LevelDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_LevelDescriptor_Descriptor_DescriptorId] ON [edfi].[LevelDescriptor]([LevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LevelDescriptor') AND name='FK_LevelDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.LevelDescriptor.FK_LevelDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LevelDescriptor.FK_LevelDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_LevelDescriptorGradeLevel_GradeLevelDescriptorId] 
 */

CREATE INDEX [FK_LevelDescriptorGradeLevel_GradeLevelDescriptorId] ON [edfi].[LevelDescriptorGradeLevel]([GradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LevelDescriptorGradeLevel') AND name='FK_LevelDescriptorGradeLevel_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.LevelDescriptorGradeLevel.FK_LevelDescriptorGradeLevel_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LevelDescriptorGradeLevel.FK_LevelDescriptorGradeLevel_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_LevelDescriptorGradeLevel_LevelDescriptor_LevelDescriptorId] 
 */

CREATE INDEX [FK_LevelDescriptorGradeLevel_LevelDescriptor_LevelDescriptorId] ON [edfi].[LevelDescriptorGradeLevel]([LevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LevelDescriptorGradeLevel') AND name='FK_LevelDescriptorGradeLevel_LevelDescriptor_LevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.LevelDescriptorGradeLevel.FK_LevelDescriptorGradeLevel_LevelDescriptor_LevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LevelDescriptorGradeLevel.FK_LevelDescriptorGradeLevel_LevelDescriptor_LevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_LevelOfEducationDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_LevelOfEducationDescriptor_Descriptor_DescriptorId] ON [edfi].[LevelOfEducationDescriptor]([LevelOfEducationDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LevelOfEducationDescriptor') AND name='FK_LevelOfEducationDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.LevelOfEducationDescriptor.FK_LevelOfEducationDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LevelOfEducationDescriptor.FK_LevelOfEducationDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_LevelOfEducationDescriptor_LevelOfEducationType_LevelOfEducationTypeId] 
 */

CREATE INDEX [FK_LevelOfEducationDescriptor_LevelOfEducationType_LevelOfEducationTypeId] ON [edfi].[LevelOfEducationDescriptor]([LevelOfEducationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LevelOfEducationDescriptor') AND name='FK_LevelOfEducationDescriptor_LevelOfEducationType_LevelOfEducationTypeId')
    PRINT '<<< CREATED INDEX edfi.LevelOfEducationDescriptor.FK_LevelOfEducationDescriptor_LevelOfEducationType_LevelOfEducationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LevelOfEducationDescriptor.FK_LevelOfEducationDescriptor_LevelOfEducationType_LevelOfEducationTypeId >>>'
go

/* 
 * INDEX: [FK_LimitedEnglishProficiencyDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_LimitedEnglishProficiencyDescriptor_Descriptor_DescriptorId] ON [edfi].[LimitedEnglishProficiencyDescriptor]([LimitedEnglishProficiencyDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LimitedEnglishProficiencyDescriptor') AND name='FK_LimitedEnglishProficiencyDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.LimitedEnglishProficiencyDescriptor.FK_LimitedEnglishProficiencyDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LimitedEnglishProficiencyDescriptor.FK_LimitedEnglishProficiencyDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_LimitedEnglishProficiencyDescriptor_LimitedEnglishProficiencyType_LimitedEnglishProficiencyTypeId] 
 */

CREATE INDEX [FK_LimitedEnglishProficiencyDescriptor_LimitedEnglishProficiencyType_LimitedEnglishProficiencyTypeId] ON [edfi].[LimitedEnglishProficiencyDescriptor]([LimitedEnglishProficiencyTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LimitedEnglishProficiencyDescriptor') AND name='FK_LimitedEnglishProficiencyDescriptor_LimitedEnglishProficiencyType_LimitedEnglishProficiencyTypeId')
    PRINT '<<< CREATED INDEX edfi.LimitedEnglishProficiencyDescriptor.FK_LimitedEnglishProficiencyDescriptor_LimitedEnglishProficiencyType_LimitedEnglishProficiencyTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LimitedEnglishProficiencyDescriptor.FK_LimitedEnglishProficiencyDescriptor_LimitedEnglishProficiencyType_LimitedEnglishProficiencyTypeId >>>'
go

/* 
 * INDEX: [FK_LocalEducationAgency_CharterStatusType_CharterStatusTypeId] 
 */

CREATE INDEX [FK_LocalEducationAgency_CharterStatusType_CharterStatusTypeId] ON [edfi].[LocalEducationAgency]([CharterStatusTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LocalEducationAgency') AND name='FK_LocalEducationAgency_CharterStatusType_CharterStatusTypeId')
    PRINT '<<< CREATED INDEX edfi.LocalEducationAgency.FK_LocalEducationAgency_CharterStatusType_CharterStatusTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LocalEducationAgency.FK_LocalEducationAgency_CharterStatusType_CharterStatusTypeId >>>'
go

/* 
 * INDEX: [FK_LocalEducationAgency_EducationOrganization_LocalEducationAgencyId] 
 */

CREATE INDEX [FK_LocalEducationAgency_EducationOrganization_LocalEducationAgencyId] ON [edfi].[LocalEducationAgency]([LocalEducationAgencyId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LocalEducationAgency') AND name='FK_LocalEducationAgency_EducationOrganization_LocalEducationAgencyId')
    PRINT '<<< CREATED INDEX edfi.LocalEducationAgency.FK_LocalEducationAgency_EducationOrganization_LocalEducationAgencyId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LocalEducationAgency.FK_LocalEducationAgency_EducationOrganization_LocalEducationAgencyId >>>'
go

/* 
 * INDEX: [FK_LocalEducationAgency_EducationServiceCenter_EducationServiceCenterId] 
 */

CREATE INDEX [FK_LocalEducationAgency_EducationServiceCenter_EducationServiceCenterId] ON [edfi].[LocalEducationAgency]([EducationServiceCenterId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LocalEducationAgency') AND name='FK_LocalEducationAgency_EducationServiceCenter_EducationServiceCenterId')
    PRINT '<<< CREATED INDEX edfi.LocalEducationAgency.FK_LocalEducationAgency_EducationServiceCenter_EducationServiceCenterId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LocalEducationAgency.FK_LocalEducationAgency_EducationServiceCenter_EducationServiceCenterId >>>'
go

/* 
 * INDEX: [FK_LocalEducationAgency_LocalEducationAgency_LocalEducationAgencyId] 
 */

CREATE INDEX [FK_LocalEducationAgency_LocalEducationAgency_LocalEducationAgencyId] ON [edfi].[LocalEducationAgency]([ParentLocalEducationAgencyId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LocalEducationAgency') AND name='FK_LocalEducationAgency_LocalEducationAgency_LocalEducationAgencyId')
    PRINT '<<< CREATED INDEX edfi.LocalEducationAgency.FK_LocalEducationAgency_LocalEducationAgency_LocalEducationAgencyId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LocalEducationAgency.FK_LocalEducationAgency_LocalEducationAgency_LocalEducationAgencyId >>>'
go

/* 
 * INDEX: [FK_LocalEducationAgency_LocalEducationAgencyCategoryType_LocalEducationAgencyCategoryTypeId] 
 */

CREATE INDEX [FK_LocalEducationAgency_LocalEducationAgencyCategoryType_LocalEducationAgencyCategoryTypeId] ON [edfi].[LocalEducationAgency]([LocalEducationAgencyCategoryTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LocalEducationAgency') AND name='FK_LocalEducationAgency_LocalEducationAgencyCategoryType_LocalEducationAgencyCategoryTypeId')
    PRINT '<<< CREATED INDEX edfi.LocalEducationAgency.FK_LocalEducationAgency_LocalEducationAgencyCategoryType_LocalEducationAgencyCategoryTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LocalEducationAgency.FK_LocalEducationAgency_LocalEducationAgencyCategoryType_LocalEducationAgencyCategoryTypeId >>>'
go

/* 
 * INDEX: [FK_LocalEducationAgency_StateEducationAgency_StateEducationAgencyId] 
 */

CREATE INDEX [FK_LocalEducationAgency_StateEducationAgency_StateEducationAgencyId] ON [edfi].[LocalEducationAgency]([StateEducationAgencyId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LocalEducationAgency') AND name='FK_LocalEducationAgency_StateEducationAgency_StateEducationAgencyId')
    PRINT '<<< CREATED INDEX edfi.LocalEducationAgency.FK_LocalEducationAgency_StateEducationAgency_StateEducationAgencyId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LocalEducationAgency.FK_LocalEducationAgency_StateEducationAgency_StateEducationAgencyId >>>'
go

/* 
 * INDEX: [FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusType_GunFreeSchoolsActReportingStatusTypeId] 
 */

CREATE INDEX [FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusType_GunFreeSchoolsActReportingStatusTypeId] ON [edfi].[LocalEducationAgencyAccountability]([GunFreeSchoolsActReportingStatusTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LocalEducationAgencyAccountability') AND name='FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusType_GunFreeSchoolsActReportingStatusTypeId')
    PRINT '<<< CREATED INDEX edfi.LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusType_GunFreeSchoolsActReportingStatusTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusType_GunFreeSchoolsActReportingStatusTypeId >>>'
go

/* 
 * INDEX: [FK_LocalEducationAgencyAccountability_LocalEducationAgency_LocalEducationAgencyId] 
 */

CREATE INDEX [FK_LocalEducationAgencyAccountability_LocalEducationAgency_LocalEducationAgencyId] ON [edfi].[LocalEducationAgencyAccountability]([LocalEducationAgencyId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LocalEducationAgencyAccountability') AND name='FK_LocalEducationAgencyAccountability_LocalEducationAgency_LocalEducationAgencyId')
    PRINT '<<< CREATED INDEX edfi.LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_LocalEducationAgency_LocalEducationAgencyId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_LocalEducationAgency_LocalEducationAgencyId >>>'
go

/* 
 * INDEX: [FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusType_SchoolChoiceImplementationStatusTypeId] 
 */

CREATE INDEX [FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusType_SchoolChoiceImplementationStatusTypeId] ON [edfi].[LocalEducationAgencyAccountability]([SchoolChoiceImplementStatusTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LocalEducationAgencyAccountability') AND name='FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusType_SchoolChoiceImplementationStatusTypeId')
    PRINT '<<< CREATED INDEX edfi.LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusType_SchoolChoiceImplementationStatusTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusType_SchoolChoiceImplementationStatusTypeId >>>'
go

/* 
 * INDEX: [FK_LocalEducationAgencyAccountability_SchoolYearType_SchoolYear] 
 */

CREATE INDEX [FK_LocalEducationAgencyAccountability_SchoolYearType_SchoolYear] ON [edfi].[LocalEducationAgencyAccountability]([SchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LocalEducationAgencyAccountability') AND name='FK_LocalEducationAgencyAccountability_SchoolYearType_SchoolYear')
    PRINT '<<< CREATED INDEX edfi.LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_SchoolYearType_SchoolYear >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LocalEducationAgencyAccountability.FK_LocalEducationAgencyAccountability_SchoolYearType_SchoolYear >>>'
go

/* 
 * INDEX: [FK_LocalEducationAgencyFederalFunds_LocalEducationAgency_LocalEducationAgencyId] 
 */

CREATE INDEX [FK_LocalEducationAgencyFederalFunds_LocalEducationAgency_LocalEducationAgencyId] ON [edfi].[LocalEducationAgencyFederalFunds]([LocalEducationAgencyId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.LocalEducationAgencyFederalFunds') AND name='FK_LocalEducationAgencyFederalFunds_LocalEducationAgency_LocalEducationAgencyId')
    PRINT '<<< CREATED INDEX edfi.LocalEducationAgencyFederalFunds.FK_LocalEducationAgencyFederalFunds_LocalEducationAgency_LocalEducationAgencyId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.LocalEducationAgencyFederalFunds.FK_LocalEducationAgencyFederalFunds_LocalEducationAgency_LocalEducationAgencyId >>>'
go

/* 
 * INDEX: [FK_Location_School_SchoolId] 
 */

CREATE INDEX [FK_Location_School_SchoolId] ON [edfi].[Location]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Location') AND name='FK_Location_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.Location.FK_Location_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Location.FK_Location_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_ObjectiveAssessment_Assessment_AssessmentTitle] 
 */

CREATE INDEX [FK_ObjectiveAssessment_Assessment_AssessmentTitle] ON [edfi].[ObjectiveAssessment]([AcademicSubjectDescriptorId], [Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ObjectiveAssessment') AND name='FK_ObjectiveAssessment_Assessment_AssessmentTitle')
    PRINT '<<< CREATED INDEX edfi.ObjectiveAssessment.FK_ObjectiveAssessment_Assessment_AssessmentTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ObjectiveAssessment.FK_ObjectiveAssessment_Assessment_AssessmentTitle >>>'
go

/* 
 * INDEX: [FK_ObjectiveAssessment_ObjectiveAssessment] 
 */

CREATE INDEX [FK_ObjectiveAssessment_ObjectiveAssessment] ON [edfi].[ObjectiveAssessment]([AssessedGradeLevelDescriptorId], [ParentIdentificationCode], [AcademicSubjectDescriptorId], [Version], [AssessmentTitle])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ObjectiveAssessment') AND name='FK_ObjectiveAssessment_ObjectiveAssessment')
    PRINT '<<< CREATED INDEX edfi.ObjectiveAssessment.FK_ObjectiveAssessment_ObjectiveAssessment >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ObjectiveAssessment.FK_ObjectiveAssessment_ObjectiveAssessment >>>'
go

/* 
 * INDEX: [FK_ObjectiveAssessmentAssessmentItem_AssessmentItem] 
 */

CREATE INDEX [FK_ObjectiveAssessmentAssessmentItem_AssessmentItem] ON [edfi].[ObjectiveAssessmentAssessmentItem]([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AssessmentItemIdentificationCode], [AcademicSubjectDescriptorId], [Version])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ObjectiveAssessmentAssessmentItem') AND name='FK_ObjectiveAssessmentAssessmentItem_AssessmentItem')
    PRINT '<<< CREATED INDEX edfi.ObjectiveAssessmentAssessmentItem.FK_ObjectiveAssessmentAssessmentItem_AssessmentItem >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ObjectiveAssessmentAssessmentItem.FK_ObjectiveAssessmentAssessmentItem_AssessmentItem >>>'
go

/* 
 * INDEX: [FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment] 
 */

CREATE INDEX [FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment] ON [edfi].[ObjectiveAssessmentAssessmentItem]([Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId], [IdentificationCode], [AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ObjectiveAssessmentAssessmentItem') AND name='FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment')
    PRINT '<<< CREATED INDEX edfi.ObjectiveAssessmentAssessmentItem.FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ObjectiveAssessmentAssessmentItem.FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment >>>'
go

/* 
 * INDEX: [FK_ObjectiveAssessmentLearningObjective_LearningObjective_Objective] 
 */

CREATE INDEX [FK_ObjectiveAssessmentLearningObjective_LearningObjective_Objective] ON [edfi].[ObjectiveAssessmentLearningObjective]([Objective], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ObjectiveAssessmentLearningObjective') AND name='FK_ObjectiveAssessmentLearningObjective_LearningObjective_Objective')
    PRINT '<<< CREATED INDEX edfi.ObjectiveAssessmentLearningObjective.FK_ObjectiveAssessmentLearningObjective_LearningObjective_Objective >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ObjectiveAssessmentLearningObjective.FK_ObjectiveAssessmentLearningObjective_LearningObjective_Objective >>>'
go

/* 
 * INDEX: [FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment] 
 */

CREATE INDEX [FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment] ON [edfi].[ObjectiveAssessmentLearningObjective]([Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId], [IdentificationCode], [AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ObjectiveAssessmentLearningObjective') AND name='FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment')
    PRINT '<<< CREATED INDEX edfi.ObjectiveAssessmentLearningObjective.FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ObjectiveAssessmentLearningObjective.FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment >>>'
go

/* 
 * INDEX: [FK_ObjectiveAssessmentLearningStandard_LearningStandard_LearningStandardId] 
 */

CREATE INDEX [FK_ObjectiveAssessmentLearningStandard_LearningStandard_LearningStandardId] ON [edfi].[ObjectiveAssessmentLearningStandard]([LearningStandardId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ObjectiveAssessmentLearningStandard') AND name='FK_ObjectiveAssessmentLearningStandard_LearningStandard_LearningStandardId')
    PRINT '<<< CREATED INDEX edfi.ObjectiveAssessmentLearningStandard.FK_ObjectiveAssessmentLearningStandard_LearningStandard_LearningStandardId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ObjectiveAssessmentLearningStandard.FK_ObjectiveAssessmentLearningStandard_LearningStandard_LearningStandardId >>>'
go

/* 
 * INDEX: [FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment] 
 */

CREATE INDEX [FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment] ON [edfi].[ObjectiveAssessmentLearningStandard]([Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId], [IdentificationCode], [AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ObjectiveAssessmentLearningStandard') AND name='FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment')
    PRINT '<<< CREATED INDEX edfi.ObjectiveAssessmentLearningStandard.FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ObjectiveAssessmentLearningStandard.FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment >>>'
go

/* 
 * INDEX: [FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] 
 */

CREATE INDEX [FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] ON [edfi].[ObjectiveAssessmentPerformanceLevel]([AssessmentReportingMethodTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ObjectiveAssessmentPerformanceLevel') AND name='FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType_AssessmentReportingMethodTypeId')
    PRINT '<<< CREATED INDEX edfi.ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType_AssessmentReportingMethodTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType_AssessmentReportingMethodTypeId >>>'
go

/* 
 * INDEX: [FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment] 
 */

CREATE INDEX [FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment] ON [edfi].[ObjectiveAssessmentPerformanceLevel]([AcademicSubjectDescriptorId], [Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId], [IdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ObjectiveAssessmentPerformanceLevel') AND name='FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment')
    PRINT '<<< CREATED INDEX edfi.ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment >>>'
go

/* 
 * INDEX: [FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId] 
 */

CREATE INDEX [FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId] ON [edfi].[ObjectiveAssessmentPerformanceLevel]([PerformanceLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ObjectiveAssessmentPerformanceLevel') AND name='FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId] 
 */

CREATE INDEX [FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId] ON [edfi].[ObjectiveAssessmentPerformanceLevel]([ResultDatatypeTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ObjectiveAssessmentPerformanceLevel') AND name='FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId')
    PRINT '<<< CREATED INDEX edfi.ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ObjectiveAssessmentPerformanceLevel.FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId >>>'
go

/* 
 * INDEX: [FK_OpenStaffPosition_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_OpenStaffPosition_EducationOrganization_EducationOrganizationId] ON [edfi].[OpenStaffPosition]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.OpenStaffPosition') AND name='FK_OpenStaffPosition_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.OpenStaffPosition.FK_OpenStaffPosition_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.OpenStaffPosition.FK_OpenStaffPosition_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_OpenStaffPosition_EmploymentStatusDescriptor_EmploymentStatusDescriptorId] 
 */

CREATE INDEX [FK_OpenStaffPosition_EmploymentStatusDescriptor_EmploymentStatusDescriptorId] ON [edfi].[OpenStaffPosition]([EmploymentStatusDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.OpenStaffPosition') AND name='FK_OpenStaffPosition_EmploymentStatusDescriptor_EmploymentStatusDescriptorId')
    PRINT '<<< CREATED INDEX edfi.OpenStaffPosition.FK_OpenStaffPosition_EmploymentStatusDescriptor_EmploymentStatusDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.OpenStaffPosition.FK_OpenStaffPosition_EmploymentStatusDescriptor_EmploymentStatusDescriptorId >>>'
go

/* 
 * INDEX: [FK_OpenStaffPosition_PostingResultType_PostingResultTypeId] 
 */

CREATE INDEX [FK_OpenStaffPosition_PostingResultType_PostingResultTypeId] ON [edfi].[OpenStaffPosition]([PostingResultTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.OpenStaffPosition') AND name='FK_OpenStaffPosition_PostingResultType_PostingResultTypeId')
    PRINT '<<< CREATED INDEX edfi.OpenStaffPosition.FK_OpenStaffPosition_PostingResultType_PostingResultTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.OpenStaffPosition.FK_OpenStaffPosition_PostingResultType_PostingResultTypeId >>>'
go

/* 
 * INDEX: [FK_OpenStaffPosition_ProgramAssignmentDescriptor_ProgramAssignmentDescriptorId] 
 */

CREATE INDEX [FK_OpenStaffPosition_ProgramAssignmentDescriptor_ProgramAssignmentDescriptorId] ON [edfi].[OpenStaffPosition]([ProgramAssignmentDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.OpenStaffPosition') AND name='FK_OpenStaffPosition_ProgramAssignmentDescriptor_ProgramAssignmentDescriptorId')
    PRINT '<<< CREATED INDEX edfi.OpenStaffPosition.FK_OpenStaffPosition_ProgramAssignmentDescriptor_ProgramAssignmentDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.OpenStaffPosition.FK_OpenStaffPosition_ProgramAssignmentDescriptor_ProgramAssignmentDescriptorId >>>'
go

/* 
 * INDEX: [FK_OpenStaffPosition_StaffClassificationDescriptorId] 
 */

CREATE INDEX [FK_OpenStaffPosition_StaffClassificationDescriptorId] ON [edfi].[OpenStaffPosition]([StaffClassificationDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.OpenStaffPosition') AND name='FK_OpenStaffPosition_StaffClassificationDescriptorId')
    PRINT '<<< CREATED INDEX edfi.OpenStaffPosition.FK_OpenStaffPosition_StaffClassificationDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.OpenStaffPosition.FK_OpenStaffPosition_StaffClassificationDescriptorId >>>'
go

/* 
 * INDEX: [FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptorId] 
 */

CREATE INDEX [FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptorId] ON [edfi].[OpenStaffPositionAcademicSubject]([AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.OpenStaffPositionAcademicSubject') AND name='FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptorId')
    PRINT '<<< CREATED INDEX edfi.OpenStaffPositionAcademicSubject.FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.OpenStaffPositionAcademicSubject.FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptorId >>>'
go

/* 
 * INDEX: [FK_OpenStaffPositionAcademicSubjects_OpenStaffPosition_EducationOrganizationId] 
 */

CREATE INDEX [FK_OpenStaffPositionAcademicSubjects_OpenStaffPosition_EducationOrganizationId] ON [edfi].[OpenStaffPositionAcademicSubject]([EducationOrganizationId], [StaffClassificationDescriptorId], [DatePosted], [EmploymentStatusDescriptorId], [RequisitionNumber])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.OpenStaffPositionAcademicSubject') AND name='FK_OpenStaffPositionAcademicSubjects_OpenStaffPosition_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.OpenStaffPositionAcademicSubject.FK_OpenStaffPositionAcademicSubjects_OpenStaffPosition_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.OpenStaffPositionAcademicSubject.FK_OpenStaffPositionAcademicSubjects_OpenStaffPosition_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptorId] 
 */

CREATE INDEX [FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptorId] ON [edfi].[OpenStaffPositionInstructionalGradeLevel]([GradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.OpenStaffPositionInstructionalGradeLevel') AND name='FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.OpenStaffPositionInstructionalGradeLevel.FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.OpenStaffPositionInstructionalGradeLevel.FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_OpenStaffPositionInstructionalGradeLevels_OpenStaffPosition_EducationOrganizationId] 
 */

CREATE INDEX [FK_OpenStaffPositionInstructionalGradeLevels_OpenStaffPosition_EducationOrganizationId] ON [edfi].[OpenStaffPositionInstructionalGradeLevel]([StaffClassificationDescriptorId], [DatePosted], [EmploymentStatusDescriptorId], [RequisitionNumber], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.OpenStaffPositionInstructionalGradeLevel') AND name='FK_OpenStaffPositionInstructionalGradeLevels_OpenStaffPosition_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.OpenStaffPositionInstructionalGradeLevel.FK_OpenStaffPositionInstructionalGradeLevels_OpenStaffPosition_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.OpenStaffPositionInstructionalGradeLevel.FK_OpenStaffPositionInstructionalGradeLevels_OpenStaffPosition_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_Parent_SexType_SexTypeId] 
 */

CREATE INDEX [FK_Parent_SexType_SexTypeId] ON [edfi].[Parent]([SexTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Parent') AND name='FK_Parent_SexType_SexTypeId')
    PRINT '<<< CREATED INDEX edfi.Parent.FK_Parent_SexType_SexTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Parent.FK_Parent_SexType_SexTypeId >>>'
go

/* 
 * INDEX: [IX_Parent_ParentUniqueId] 
 */

CREATE UNIQUE NONCLUSTERED INDEX [IX_Parent_ParentUniqueId] ON [edfi].[Parent]([ParentUniqueId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Parent') AND name='IX_Parent_ParentUniqueId')
    PRINT '<<< CREATED INDEX edfi.Parent.IX_Parent_ParentUniqueId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Parent.IX_Parent_ParentUniqueId >>>'
go

/* 
 * INDEX: [FK_ParentAddress_AddressType_AddressTypeId] 
 */

CREATE INDEX [FK_ParentAddress_AddressType_AddressTypeId] ON [edfi].[ParentAddress]([AddressTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentAddress') AND name='FK_ParentAddress_AddressType_AddressTypeId')
    PRINT '<<< CREATED INDEX edfi.ParentAddress.FK_ParentAddress_AddressType_AddressTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentAddress.FK_ParentAddress_AddressType_AddressTypeId >>>'
go

/* 
 * INDEX: [FK_ParentAddress_Parent_ParentUSI] 
 */

CREATE INDEX [FK_ParentAddress_Parent_ParentUSI] ON [edfi].[ParentAddress]([ParentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentAddress') AND name='FK_ParentAddress_Parent_ParentUSI')
    PRINT '<<< CREATED INDEX edfi.ParentAddress.FK_ParentAddress_Parent_ParentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentAddress.FK_ParentAddress_Parent_ParentUSI >>>'
go

/* 
 * INDEX: [FK_ParentAddress_StateAbbreviationType_StateAbbreviationTypeId] 
 */

CREATE INDEX [FK_ParentAddress_StateAbbreviationType_StateAbbreviationTypeId] ON [edfi].[ParentAddress]([StateAbbreviationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentAddress') AND name='FK_ParentAddress_StateAbbreviationType_StateAbbreviationTypeId')
    PRINT '<<< CREATED INDEX edfi.ParentAddress.FK_ParentAddress_StateAbbreviationType_StateAbbreviationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentAddress.FK_ParentAddress_StateAbbreviationType_StateAbbreviationTypeId >>>'
go

/* 
 * INDEX: [FK_ParentElectronicMail_ElectronicMailType_ElectronicMailTypeId] 
 */

CREATE INDEX [FK_ParentElectronicMail_ElectronicMailType_ElectronicMailTypeId] ON [edfi].[ParentElectronicMail]([ElectronicMailTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentElectronicMail') AND name='FK_ParentElectronicMail_ElectronicMailType_ElectronicMailTypeId')
    PRINT '<<< CREATED INDEX edfi.ParentElectronicMail.FK_ParentElectronicMail_ElectronicMailType_ElectronicMailTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentElectronicMail.FK_ParentElectronicMail_ElectronicMailType_ElectronicMailTypeId >>>'
go

/* 
 * INDEX: [FK_ParentElectronicMail_Parent_ParentUSI] 
 */

CREATE INDEX [FK_ParentElectronicMail_Parent_ParentUSI] ON [edfi].[ParentElectronicMail]([ParentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentElectronicMail') AND name='FK_ParentElectronicMail_Parent_ParentUSI')
    PRINT '<<< CREATED INDEX edfi.ParentElectronicMail.FK_ParentElectronicMail_Parent_ParentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentElectronicMail.FK_ParentElectronicMail_Parent_ParentUSI >>>'
go

/* 
 * INDEX: [FK_ParentIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId] 
 */

CREATE INDEX [FK_ParentIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId] ON [edfi].[ParentIdentificationDocument]([IdentificationDocumentUseTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentIdentificationDocument') AND name='FK_ParentIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId')
    PRINT '<<< CREATED INDEX edfi.ParentIdentificationDocument.FK_ParentIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentIdentificationDocument.FK_ParentIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId >>>'
go

/* 
 * INDEX: [FK_ParentIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
 */

CREATE INDEX [FK_ParentIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId] ON [edfi].[ParentIdentificationDocument]([IssuerCountryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentIdentificationDocument') AND name='FK_ParentIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.ParentIdentificationDocument.FK_ParentIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentIdentificationDocument.FK_ParentIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
go

/* 
 * INDEX: [FK_ParentIdentificationDocument_Parent_ParentUSI] 
 */

CREATE INDEX [FK_ParentIdentificationDocument_Parent_ParentUSI] ON [edfi].[ParentIdentificationDocument]([ParentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentIdentificationDocument') AND name='FK_ParentIdentificationDocument_Parent_ParentUSI')
    PRINT '<<< CREATED INDEX edfi.ParentIdentificationDocument.FK_ParentIdentificationDocument_Parent_ParentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentIdentificationDocument.FK_ParentIdentificationDocument_Parent_ParentUSI >>>'
go

/* 
 * INDEX: [FK_ParentIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId] 
 */

CREATE INDEX [FK_ParentIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId] ON [edfi].[ParentIdentificationDocument]([PersonalInformationVerificationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentIdentificationDocument') AND name='FK_ParentIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId')
    PRINT '<<< CREATED INDEX edfi.ParentIdentificationDocument.FK_ParentIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentIdentificationDocument.FK_ParentIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId >>>'
go

/* 
 * INDEX: [FK_ParentInternationalAddress_AddressType_AddressTypeId] 
 */

CREATE INDEX [FK_ParentInternationalAddress_AddressType_AddressTypeId] ON [edfi].[ParentInternationalAddress]([AddressTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentInternationalAddress') AND name='FK_ParentInternationalAddress_AddressType_AddressTypeId')
    PRINT '<<< CREATED INDEX edfi.ParentInternationalAddress.FK_ParentInternationalAddress_AddressType_AddressTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentInternationalAddress.FK_ParentInternationalAddress_AddressType_AddressTypeId >>>'
go

/* 
 * INDEX: [FK_ParentInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
 */

CREATE INDEX [FK_ParentInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId] ON [edfi].[ParentInternationalAddress]([CountryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentInternationalAddress') AND name='FK_ParentInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.ParentInternationalAddress.FK_ParentInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentInternationalAddress.FK_ParentInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
go

/* 
 * INDEX: [FK_ParentInternationalAddress_Parent_ParentUSI] 
 */

CREATE INDEX [FK_ParentInternationalAddress_Parent_ParentUSI] ON [edfi].[ParentInternationalAddress]([ParentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentInternationalAddress') AND name='FK_ParentInternationalAddress_Parent_ParentUSI')
    PRINT '<<< CREATED INDEX edfi.ParentInternationalAddress.FK_ParentInternationalAddress_Parent_ParentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentInternationalAddress.FK_ParentInternationalAddress_Parent_ParentUSI >>>'
go

/* 
 * INDEX: [FK_ParentOtherName_OtherNameType_OtherNameTypeId] 
 */

CREATE INDEX [FK_ParentOtherName_OtherNameType_OtherNameTypeId] ON [edfi].[ParentOtherName]([OtherNameTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentOtherName') AND name='FK_ParentOtherName_OtherNameType_OtherNameTypeId')
    PRINT '<<< CREATED INDEX edfi.ParentOtherName.FK_ParentOtherName_OtherNameType_OtherNameTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentOtherName.FK_ParentOtherName_OtherNameType_OtherNameTypeId >>>'
go

/* 
 * INDEX: [FK_ParentOtherName_Parent_ParentUSI] 
 */

CREATE INDEX [FK_ParentOtherName_Parent_ParentUSI] ON [edfi].[ParentOtherName]([ParentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentOtherName') AND name='FK_ParentOtherName_Parent_ParentUSI')
    PRINT '<<< CREATED INDEX edfi.ParentOtherName.FK_ParentOtherName_Parent_ParentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentOtherName.FK_ParentOtherName_Parent_ParentUSI >>>'
go

/* 
 * INDEX: [FK_ParentTelephone_Parent_ParentUSI] 
 */

CREATE INDEX [FK_ParentTelephone_Parent_ParentUSI] ON [edfi].[ParentTelephone]([ParentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentTelephone') AND name='FK_ParentTelephone_Parent_ParentUSI')
    PRINT '<<< CREATED INDEX edfi.ParentTelephone.FK_ParentTelephone_Parent_ParentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentTelephone.FK_ParentTelephone_Parent_ParentUSI >>>'
go

/* 
 * INDEX: [FK_ParentTelephone_TelephoneNumberType_TelephoneNumberTypeId] 
 */

CREATE INDEX [FK_ParentTelephone_TelephoneNumberType_TelephoneNumberTypeId] ON [edfi].[ParentTelephone]([TelephoneNumberTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ParentTelephone') AND name='FK_ParentTelephone_TelephoneNumberType_TelephoneNumberTypeId')
    PRINT '<<< CREATED INDEX edfi.ParentTelephone.FK_ParentTelephone_TelephoneNumberType_TelephoneNumberTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ParentTelephone.FK_ParentTelephone_TelephoneNumberType_TelephoneNumberTypeId >>>'
go

/* 
 * INDEX: [FK_Payroll_Account_EducationOrganizationId] 
 */

CREATE INDEX [FK_Payroll_Account_EducationOrganizationId] ON [edfi].[Payroll]([EducationOrganizationId], [FiscalYear], [AccountNumber])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Payroll') AND name='FK_Payroll_Account_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.Payroll.FK_Payroll_Account_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Payroll.FK_Payroll_Account_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_Payroll_Staff_StaffUSI] 
 */

CREATE INDEX [FK_Payroll_Staff_StaffUSI] ON [edfi].[Payroll]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Payroll') AND name='FK_Payroll_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.Payroll.FK_Payroll_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Payroll.FK_Payroll_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_PerformanceLevelDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_PerformanceLevelDescriptor_Descriptor_DescriptorId] ON [edfi].[PerformanceLevelDescriptor]([PerformanceLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.PerformanceLevelDescriptor') AND name='FK_PerformanceLevelDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.PerformanceLevelDescriptor.FK_PerformanceLevelDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.PerformanceLevelDescriptor.FK_PerformanceLevelDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_PerformanceLevelDescriptor_PerformanceBaseType_PerformanceBaseConversionTypeId] 
 */

CREATE INDEX [FK_PerformanceLevelDescriptor_PerformanceBaseType_PerformanceBaseConversionTypeId] ON [edfi].[PerformanceLevelDescriptor]([PerformanceBaseConversionTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.PerformanceLevelDescriptor') AND name='FK_PerformanceLevelDescriptor_PerformanceBaseType_PerformanceBaseConversionTypeId')
    PRINT '<<< CREATED INDEX edfi.PerformanceLevelDescriptor.FK_PerformanceLevelDescriptor_PerformanceBaseType_PerformanceBaseConversionTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.PerformanceLevelDescriptor.FK_PerformanceLevelDescriptor_PerformanceBaseType_PerformanceBaseConversionTypeId >>>'
go

/* 
 * INDEX: [FK_PostSecondaryEvent_PostSecondaryEventCategoryType_PostSecondaryEventCategoryTypeId] 
 */

CREATE INDEX [FK_PostSecondaryEvent_PostSecondaryEventCategoryType_PostSecondaryEventCategoryTypeId] ON [edfi].[PostSecondaryEvent]([PostSecondaryEventCategoryTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.PostSecondaryEvent') AND name='FK_PostSecondaryEvent_PostSecondaryEventCategoryType_PostSecondaryEventCategoryTypeId')
    PRINT '<<< CREATED INDEX edfi.PostSecondaryEvent.FK_PostSecondaryEvent_PostSecondaryEventCategoryType_PostSecondaryEventCategoryTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.PostSecondaryEvent.FK_PostSecondaryEvent_PostSecondaryEventCategoryType_PostSecondaryEventCategoryTypeId >>>'
go

/* 
 * INDEX: [FK_PostSecondaryEvent_Student_StudentUSI] 
 */

CREATE INDEX [FK_PostSecondaryEvent_Student_StudentUSI] ON [edfi].[PostSecondaryEvent]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.PostSecondaryEvent') AND name='FK_PostSecondaryEvent_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.PostSecondaryEvent.FK_PostSecondaryEvent_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.PostSecondaryEvent.FK_PostSecondaryEvent_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_PostSecondaryEventPostSecondaryInstitution_AdministrativeFundingControlDescriptorId] 
 */

CREATE INDEX [FK_PostSecondaryEventPostSecondaryInstitution_AdministrativeFundingControlDescriptorId] ON [edfi].[PostSecondaryEventPostSecondaryInstitution]([AdministrativeFundingControlDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.PostSecondaryEventPostSecondaryInstitution') AND name='FK_PostSecondaryEventPostSecondaryInstitution_AdministrativeFundingControlDescriptorId')
    PRINT '<<< CREATED INDEX edfi.PostSecondaryEventPostSecondaryInstitution.FK_PostSecondaryEventPostSecondaryInstitution_AdministrativeFundingControlDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.PostSecondaryEventPostSecondaryInstitution.FK_PostSecondaryEventPostSecondaryInstitution_AdministrativeFundingControlDescriptorId >>>'
go

/* 
 * INDEX: [FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryEvent] 
 */

CREATE INDEX [FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryEvent] ON [edfi].[PostSecondaryEventPostSecondaryInstitution]([PostSecondaryEventCategoryTypeId], [StudentUSI], [EventDate])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.PostSecondaryEventPostSecondaryInstitution') AND name='FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryEvent')
    PRINT '<<< CREATED INDEX edfi.PostSecondaryEventPostSecondaryInstitution.FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryEvent >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.PostSecondaryEventPostSecondaryInstitution.FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryEvent >>>'
go

/* 
 * INDEX: [FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryInstitutionLevelType_PostSecondaryInstitutionLevelTypeId] 
 */

CREATE INDEX [FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryInstitutionLevelType_PostSecondaryInstitutionLevelTypeId] ON [edfi].[PostSecondaryEventPostSecondaryInstitution]([PostSecondaryInstitutionLevelTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.PostSecondaryEventPostSecondaryInstitution') AND name='FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryInstitutionLevelType_PostSecondaryInstitutionLevelTypeId')
    PRINT '<<< CREATED INDEX edfi.PostSecondaryEventPostSecondaryInstitution.FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryInstitutionLevelType_PostSecondaryInstitutionLevelTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.PostSecondaryEventPostSecondaryInstitution.FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryInstitutionLevelType_PostSecondaryInstitutionLevelTypeId >>>'
go

/* 
 * INDEX: [FK_PostSecondaryEventIdentificationCode_EducationOrganizationIdentificationSystemDescriptorId] 
 */

CREATE INDEX [FK_PostSecondaryEventIdentificationCode_EducationOrganizationIdentificationSystemDescriptorId] ON [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode]([EducationOrganizationIdentificationSystemDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.PostSecondaryEventPostSecondaryInstitutionIdentificationCode') AND name='FK_PostSecondaryEventIdentificationCode_EducationOrganizationIdentificationSystemDescriptorId')
    PRINT '<<< CREATED INDEX edfi.PostSecondaryEventPostSecondaryInstitutionIdentificationCode.FK_PostSecondaryEventIdentificationCode_EducationOrganizationIdentificationSystemDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.PostSecondaryEventPostSecondaryInstitutionIdentificationCode.FK_PostSecondaryEventIdentificationCode_EducationOrganizationIdentificationSystemDescriptorId >>>'
go

/* 
 * INDEX: [FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PostSecondaryEventPostSecondaryInstitution] 
 */

CREATE INDEX [FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PostSecondaryEventPostSecondaryInstitution] ON [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode]([EventDate], [PostSecondaryEventCategoryTypeId], [StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.PostSecondaryEventPostSecondaryInstitutionIdentificationCode') AND name='FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PostSecondaryEventPostSecondaryInstitution')
    PRINT '<<< CREATED INDEX edfi.PostSecondaryEventPostSecondaryInstitutionIdentificationCode.FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PostSecondaryEventPostSecondaryInstitution >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.PostSecondaryEventPostSecondaryInstitutionIdentificationCode.FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PostSecondaryEventPostSecondaryInstitution >>>'
go

/* 
 * INDEX: [FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionType_MediumOfInstructionTypeId] 
 */

CREATE INDEX [FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionType_MediumOfInstructionTypeId] ON [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction]([MediumOfInstructionTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction') AND name='FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionType_MediumOfInstructionTypeId')
    PRINT '<<< CREATED INDEX edfi.PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction.FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionType_MediumOfInstructionTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction.FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionType_MediumOfInstructionTypeId >>>'
go

/* 
 * INDEX: [FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PostSecondaryEventPostSecondaryInstitution] 
 */

CREATE INDEX [FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PostSecondaryEventPostSecondaryInstitution] ON [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction]([StudentUSI], [EventDate], [PostSecondaryEventCategoryTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction') AND name='FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PostSecondaryEventPostSecondaryInstitution')
    PRINT '<<< CREATED INDEX edfi.PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction.FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PostSecondaryEventPostSecondaryInstitution >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction.FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PostSecondaryEventPostSecondaryInstitution >>>'
go

/* 
 * INDEX: [FK_Program_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_Program_EducationOrganization_EducationOrganizationId] ON [edfi].[Program]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Program') AND name='FK_Program_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.Program.FK_Program_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Program.FK_Program_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_Program_ProgramSponsorType_ProgramSponsorTypeId] 
 */

CREATE INDEX [FK_Program_ProgramSponsorType_ProgramSponsorTypeId] ON [edfi].[Program]([ProgramSponsorTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Program') AND name='FK_Program_ProgramSponsorType_ProgramSponsorTypeId')
    PRINT '<<< CREATED INDEX edfi.Program.FK_Program_ProgramSponsorType_ProgramSponsorTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Program.FK_Program_ProgramSponsorType_ProgramSponsorTypeId >>>'
go

/* 
 * INDEX: [FK_Program_ProgramType_ProgramTypeId] 
 */

CREATE INDEX [FK_Program_ProgramType_ProgramTypeId] ON [edfi].[Program]([ProgramTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Program') AND name='FK_Program_ProgramType_ProgramTypeId')
    PRINT '<<< CREATED INDEX edfi.Program.FK_Program_ProgramType_ProgramTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Program.FK_Program_ProgramType_ProgramTypeId >>>'
go

/* 
 * INDEX: [FK_ProgramAssignmentDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_ProgramAssignmentDescriptor_Descriptor_DescriptorId] ON [edfi].[ProgramAssignmentDescriptor]([ProgramAssignmentDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ProgramAssignmentDescriptor') AND name='FK_ProgramAssignmentDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.ProgramAssignmentDescriptor.FK_ProgramAssignmentDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ProgramAssignmentDescriptor.FK_ProgramAssignmentDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_ProgramAssignmentDescriptor_ProgramAssignmentType_ProgramAssignmentTypeId] 
 */

CREATE INDEX [FK_ProgramAssignmentDescriptor_ProgramAssignmentType_ProgramAssignmentTypeId] ON [edfi].[ProgramAssignmentDescriptor]([ProgramAssignmentTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ProgramAssignmentDescriptor') AND name='FK_ProgramAssignmentDescriptor_ProgramAssignmentType_ProgramAssignmentTypeId')
    PRINT '<<< CREATED INDEX edfi.ProgramAssignmentDescriptor.FK_ProgramAssignmentDescriptor_ProgramAssignmentType_ProgramAssignmentTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ProgramAssignmentDescriptor.FK_ProgramAssignmentDescriptor_ProgramAssignmentType_ProgramAssignmentTypeId >>>'
go

/* 
 * INDEX: [FK_ProgramCharacteristic_Program_EducationOrganizationId] 
 */

CREATE INDEX [FK_ProgramCharacteristic_Program_EducationOrganizationId] ON [edfi].[ProgramCharacteristic]([EducationOrganizationId], [ProgramName], [ProgramTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ProgramCharacteristic') AND name='FK_ProgramCharacteristic_Program_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.ProgramCharacteristic.FK_ProgramCharacteristic_Program_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ProgramCharacteristic.FK_ProgramCharacteristic_Program_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_ProgramCharacteristic_ProgramCharacteristicDescriptor_ProgramCharacteristicDescriptorId] 
 */

CREATE INDEX [FK_ProgramCharacteristic_ProgramCharacteristicDescriptor_ProgramCharacteristicDescriptorId] ON [edfi].[ProgramCharacteristic]([ProgramCharacteristicDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ProgramCharacteristic') AND name='FK_ProgramCharacteristic_ProgramCharacteristicDescriptor_ProgramCharacteristicDescriptorId')
    PRINT '<<< CREATED INDEX edfi.ProgramCharacteristic.FK_ProgramCharacteristic_ProgramCharacteristicDescriptor_ProgramCharacteristicDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ProgramCharacteristic.FK_ProgramCharacteristic_ProgramCharacteristicDescriptor_ProgramCharacteristicDescriptorId >>>'
go

/* 
 * INDEX: [FK_ProgramCharacteristicDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_ProgramCharacteristicDescriptor_Descriptor_DescriptorId] ON [edfi].[ProgramCharacteristicDescriptor]([ProgramCharacteristicDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ProgramCharacteristicDescriptor') AND name='FK_ProgramCharacteristicDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.ProgramCharacteristicDescriptor.FK_ProgramCharacteristicDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ProgramCharacteristicDescriptor.FK_ProgramCharacteristicDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_ProgramCharacteristicDescriptor_ProgramCharacteristicType_ProgramCharacteristicTypeId] 
 */

CREATE INDEX [FK_ProgramCharacteristicDescriptor_ProgramCharacteristicType_ProgramCharacteristicTypeId] ON [edfi].[ProgramCharacteristicDescriptor]([ProgramCharacteristicTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ProgramCharacteristicDescriptor') AND name='FK_ProgramCharacteristicDescriptor_ProgramCharacteristicType_ProgramCharacteristicTypeId')
    PRINT '<<< CREATED INDEX edfi.ProgramCharacteristicDescriptor.FK_ProgramCharacteristicDescriptor_ProgramCharacteristicType_ProgramCharacteristicTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ProgramCharacteristicDescriptor.FK_ProgramCharacteristicDescriptor_ProgramCharacteristicType_ProgramCharacteristicTypeId >>>'
go

/* 
 * INDEX: [FK_ProgramLearningStandard_LearningObjective_Objective] 
 */

CREATE INDEX [FK_ProgramLearningStandard_LearningObjective_Objective] ON [edfi].[ProgramLearningObjective]([ObjectiveGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Objective])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ProgramLearningObjective') AND name='FK_ProgramLearningStandard_LearningObjective_Objective')
    PRINT '<<< CREATED INDEX edfi.ProgramLearningObjective.FK_ProgramLearningStandard_LearningObjective_Objective >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ProgramLearningObjective.FK_ProgramLearningStandard_LearningObjective_Objective >>>'
go

/* 
 * INDEX: [FK_ProgramLearningStandard_Program_ProgramTypeId] 
 */

CREATE INDEX [FK_ProgramLearningStandard_Program_ProgramTypeId] ON [edfi].[ProgramLearningObjective]([EducationOrganizationId], [ProgramName], [ProgramTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ProgramLearningObjective') AND name='FK_ProgramLearningStandard_Program_ProgramTypeId')
    PRINT '<<< CREATED INDEX edfi.ProgramLearningObjective.FK_ProgramLearningStandard_Program_ProgramTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ProgramLearningObjective.FK_ProgramLearningStandard_Program_ProgramTypeId >>>'
go

/* 
 * INDEX: [FK_ProgramLearningObjective_LearningStandard_LearningStandardId] 
 */

CREATE INDEX [FK_ProgramLearningObjective_LearningStandard_LearningStandardId] ON [edfi].[ProgramLearningStandard]([LearningStandardId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ProgramLearningStandard') AND name='FK_ProgramLearningObjective_LearningStandard_LearningStandardId')
    PRINT '<<< CREATED INDEX edfi.ProgramLearningStandard.FK_ProgramLearningObjective_LearningStandard_LearningStandardId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ProgramLearningStandard.FK_ProgramLearningObjective_LearningStandard_LearningStandardId >>>'
go

/* 
 * INDEX: [FK_ProgramLearningObjective_Program_ProgramTypeId] 
 */

CREATE INDEX [FK_ProgramLearningObjective_Program_ProgramTypeId] ON [edfi].[ProgramLearningStandard]([ProgramTypeId], [EducationOrganizationId], [ProgramName])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ProgramLearningStandard') AND name='FK_ProgramLearningObjective_Program_ProgramTypeId')
    PRINT '<<< CREATED INDEX edfi.ProgramLearningStandard.FK_ProgramLearningObjective_Program_ProgramTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ProgramLearningStandard.FK_ProgramLearningObjective_Program_ProgramTypeId >>>'
go

/* 
 * INDEX: [FK_ProgramService_Program_ProgramTypeId] 
 */

CREATE INDEX [FK_ProgramService_Program_ProgramTypeId] ON [edfi].[ProgramService]([ProgramTypeId], [EducationOrganizationId], [ProgramName])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ProgramService') AND name='FK_ProgramService_Program_ProgramTypeId')
    PRINT '<<< CREATED INDEX edfi.ProgramService.FK_ProgramService_Program_ProgramTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ProgramService.FK_ProgramService_Program_ProgramTypeId >>>'
go

/* 
 * INDEX: [FK_ProgramService_ServiceDescriptor_ServiceDescriptorId] 
 */

CREATE INDEX [FK_ProgramService_ServiceDescriptor_ServiceDescriptorId] ON [edfi].[ProgramService]([ServiceDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ProgramService') AND name='FK_ProgramService_ServiceDescriptor_ServiceDescriptorId')
    PRINT '<<< CREATED INDEX edfi.ProgramService.FK_ProgramService_ServiceDescriptor_ServiceDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ProgramService.FK_ProgramService_ServiceDescriptor_ServiceDescriptorId >>>'
go

/* 
 * INDEX: [FK_ReasonExitedDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_ReasonExitedDescriptor_Descriptor_DescriptorId] ON [edfi].[ReasonExitedDescriptor]([ReasonExitedDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReasonExitedDescriptor') AND name='FK_ReasonExitedDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.ReasonExitedDescriptor.FK_ReasonExitedDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReasonExitedDescriptor.FK_ReasonExitedDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_ReasonExitedDescriptor_ReasonExitedType_ReasonExitedTypeId] 
 */

CREATE INDEX [FK_ReasonExitedDescriptor_ReasonExitedType_ReasonExitedTypeId] ON [edfi].[ReasonExitedDescriptor]([ReasonExitedTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReasonExitedDescriptor') AND name='FK_ReasonExitedDescriptor_ReasonExitedType_ReasonExitedTypeId')
    PRINT '<<< CREATED INDEX edfi.ReasonExitedDescriptor.FK_ReasonExitedDescriptor_ReasonExitedType_ReasonExitedTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReasonExitedDescriptor.FK_ReasonExitedDescriptor_ReasonExitedType_ReasonExitedTypeId >>>'
go

/* 
 * INDEX: [FK_ReportCard_EducationOrganization_EducationOrganizationId] 
 */

CREATE NONCLUSTERED INDEX [FK_ReportCard_EducationOrganization_EducationOrganizationId]
    ON [edfi].[ReportCard]([EducationOrganizationId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReportCard') AND name='FK_ReportCard_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.ReportCard.FK_ReportCard_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReportCard.FK_ReportCard_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_ReportCard_GradingPeriod_SchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_ReportCard_GradingPeriod_SchoolId]
    ON [edfi].[ReportCard]([GradingPeriodBeginDate] ASC, [GradingPeriodDescriptorId] ASC, [SchoolId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReportCard') AND name='FK_ReportCard_GradingPeriod_SchoolId')
    PRINT '<<< CREATED INDEX edfi.ReportCard.FK_ReportCard_GradingPeriod_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReportCard.FK_ReportCard_GradingPeriod_SchoolId >>>'
go

/* 
 * INDEX: [FK_ReportCard_Student_StudentUSI] 
 */

CREATE INDEX [FK_ReportCard_Student_StudentUSI] ON [edfi].[ReportCard]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReportCard') AND name='FK_ReportCard_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.ReportCard.FK_ReportCard_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReportCard.FK_ReportCard_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_ReportCard_GradingPeriod_EducationOrganizationId] 
 */

CREATE INDEX [FK_ReportCard_GradingPeriod_EducationOrganizationId] ON [edfi].[ReportCard]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReportCard') AND name='FK_ReportCard_GradingPeriod_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.ReportCard.FK_ReportCard_GradingPeriod_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReportCard.FK_ReportCard_GradingPeriod_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_ReportCardGrade_Grade] 
 */

CREATE NONCLUSTERED INDEX [FK_ReportCardGrade_Grade]
    ON [edfi].[ReportCardGrade]([GradeTypeId] ASC, [GradingPeriodBeginDate] ASC, [GradingPeriodDescriptorId] ASC, [ClassroomIdentificationCode] ASC, [TermDescriptorId] ASC, [SchoolId] ASC, [SequenceOfCourse] ASC, [LocalCourseCode] ASC, [BeginDate] ASC, [ClassPeriodName] ASC, [SchoolYear] ASC, [StudentUSI] ASC, [UniqueSectionCode] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReportCardGrade') AND name='FK_ReportCardGrade_Grade')
    PRINT '<<< CREATED INDEX edfi.ReportCardGrade.FK_ReportCardGrade_Grade >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReportCardGrade.FK_ReportCardGrade_Grade >>>'
go

/* 
 * INDEX: [FK_ReportCardGrade_ReportCard_SchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_ReportCardGrade_ReportCard_SchoolId]
    ON [edfi].[ReportCardGrade]([EducationOrganizationId] ASC, [StudentUSI] ASC, [GradingPeriodBeginDate] ASC, [SchoolId] ASC, [GradingPeriodDescriptorId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReportCardGrade') AND name='FK_ReportCardGrade_ReportCard_SchoolId')
    PRINT '<<< CREATED INDEX edfi.ReportCardGrade.FK_ReportCardGrade_ReportCard_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReportCardGrade.FK_ReportCardGrade_ReportCard_SchoolId >>>'
go

/* 
 * INDEX: [FK_ReportCardStudentCompetencyObjective_ReportCard] 
 */

CREATE INDEX [FK_ReportCardStudentCompetencyObjective_ReportCard] ON [edfi].[ReportCardStudentCompetencyObjective]([ObjectiveEducationOrganizationId], [StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReportCardStudentCompetencyObjective') AND name='FK_ReportCardStudentCompetencyObjective_ReportCard')
    PRINT '<<< CREATED INDEX edfi.ReportCardStudentCompetencyObjective.FK_ReportCardStudentCompetencyObjective_ReportCard >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReportCardStudentCompetencyObjective.FK_ReportCardStudentCompetencyObjective_ReportCard >>>'
go

/* 
 * INDEX: [FK_ReportCardStudentCompetencyObjective_ReportCard_StudentUSI] 
 */

CREATE NONCLUSTERED INDEX [FK_ReportCardStudentCompetencyObjective_ReportCard_StudentUSI]
    ON [edfi].[ReportCardStudentCompetencyObjective]([StudentUSI] ASC, [ReportCardEducationOrganizationId] ASC, [SchoolId] ASC, [GradingPeriodDescriptorId] ASC, [GradingPeriodBeginDate] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReportCardStudentCompetencyObjective') AND name='FK_ReportCardStudentCompetencyObjective_ReportCard_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.ReportCardStudentCompetencyObjective.FK_ReportCardStudentCompetencyObjective_ReportCard_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReportCardStudentCompetencyObjective.FK_ReportCardStudentCompetencyObjective_ReportCard_StudentUSI >>>'
go


/* 
 * INDEX: [FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective_StudentUSI] 
 */

CREATE INDEX [FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective_StudentUSI] ON [edfi].[ReportCardStudentCompetencyObjective]([ObjectiveEducationOrganizationId], [StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReportCardStudentCompetencyObjective') AND name='FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.ReportCardStudentCompetencyObjective.FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReportCardStudentCompetencyObjective.FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective_StudentUSI >>>'
go

/* 
 * INDEX: [FK_ReportCardStudentLearningObjective_ReportCard] 
 */

CREATE INDEX [FK_ReportCardStudentLearningObjective_ReportCard] ON [edfi].[ReportCardStudentLearningObjective]([ReportCardEducationOrganizationId], [GradingPeriodDescriptorId], [StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReportCardStudentLearningObjective') AND name='FK_ReportCardStudentLearningObjective_ReportCard')
    PRINT '<<< CREATED INDEX edfi.ReportCardStudentLearningObjective.FK_ReportCardStudentLearningObjective_ReportCard >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReportCardStudentLearningObjective.FK_ReportCardStudentLearningObjective_ReportCard >>>'
go

/* 
 * INDEX: [FK_ReportCardStudentLearningObjective_StudentLearningObjective_StudentUSI] 
 */

CREATE INDEX [FK_ReportCardStudentLearningObjective_StudentLearningObjective_StudentUSI] ON [edfi].[ReportCardStudentLearningObjective]([StudentUSI], [GradingPeriodDescriptorId], [ReportCardEducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReportCardStudentLearningObjective') AND name='FK_ReportCardStudentLearningObjective_StudentLearningObjective_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.ReportCardStudentLearningObjective.FK_ReportCardStudentLearningObjective_StudentLearningObjective_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReportCardStudentLearningObjective.FK_ReportCardStudentLearningObjective_StudentLearningObjective_StudentUSI >>>'
go

/* 
 * INDEX: [FK_ReporterDescriptionDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_ReporterDescriptionDescriptor_Descriptor_DescriptorId] ON [edfi].[ReporterDescriptionDescriptor]([ReporterDescriptionDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReporterDescriptionDescriptor') AND name='FK_ReporterDescriptionDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.ReporterDescriptionDescriptor.FK_ReporterDescriptionDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReporterDescriptionDescriptor.FK_ReporterDescriptionDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_ReporterDescriptionDescriptor_ReporterDescriptionType_ReporterDescriptionTypeId] 
 */

CREATE INDEX [FK_ReporterDescriptionDescriptor_ReporterDescriptionType_ReporterDescriptionTypeId] ON [edfi].[ReporterDescriptionDescriptor]([ReporterDescriptionTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ReporterDescriptionDescriptor') AND name='FK_ReporterDescriptionDescriptor_ReporterDescriptionType_ReporterDescriptionTypeId')
    PRINT '<<< CREATED INDEX edfi.ReporterDescriptionDescriptor.FK_ReporterDescriptionDescriptor_ReporterDescriptionType_ReporterDescriptionTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ReporterDescriptionDescriptor.FK_ReporterDescriptionDescriptor_ReporterDescriptionType_ReporterDescriptionTypeId >>>'
go

/* 
 * INDEX: [FK_ResidencyStatusDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_ResidencyStatusDescriptor_Descriptor_DescriptorId] ON [edfi].[ResidencyStatusDescriptor]([ResidencyStatusDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ResidencyStatusDescriptor') AND name='FK_ResidencyStatusDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.ResidencyStatusDescriptor.FK_ResidencyStatusDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ResidencyStatusDescriptor.FK_ResidencyStatusDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_ResidencyStatusDescriptor_ResidencyStatusType_ResidencyStatusTypeId] 
 */

CREATE INDEX [FK_ResidencyStatusDescriptor_ResidencyStatusType_ResidencyStatusTypeId] ON [edfi].[ResidencyStatusDescriptor]([ResidencyStatusTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ResidencyStatusDescriptor') AND name='FK_ResidencyStatusDescriptor_ResidencyStatusType_ResidencyStatusTypeId')
    PRINT '<<< CREATED INDEX edfi.ResidencyStatusDescriptor.FK_ResidencyStatusDescriptor_ResidencyStatusType_ResidencyStatusTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ResidencyStatusDescriptor.FK_ResidencyStatusDescriptor_ResidencyStatusType_ResidencyStatusTypeId >>>'
go

/* 
 * INDEX: [FK_ResponsibilityDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_ResponsibilityDescriptor_Descriptor_DescriptorId] ON [edfi].[ResponsibilityDescriptor]([ResponsibilityDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ResponsibilityDescriptor') AND name='FK_ResponsibilityDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.ResponsibilityDescriptor.FK_ResponsibilityDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ResponsibilityDescriptor.FK_ResponsibilityDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_ResponsibilityDescriptor_ResponsibilityType_ResponsibilityTypeId] 
 */

CREATE INDEX [FK_ResponsibilityDescriptor_ResponsibilityType_ResponsibilityTypeId] ON [edfi].[ResponsibilityDescriptor]([ResponsibilityTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ResponsibilityDescriptor') AND name='FK_ResponsibilityDescriptor_ResponsibilityType_ResponsibilityTypeId')
    PRINT '<<< CREATED INDEX edfi.ResponsibilityDescriptor.FK_ResponsibilityDescriptor_ResponsibilityType_ResponsibilityTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ResponsibilityDescriptor.FK_ResponsibilityDescriptor_ResponsibilityType_ResponsibilityTypeId >>>'
go

/* 
 * INDEX: [FK_RestraintEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] 
 */

CREATE INDEX [FK_RestraintEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] ON [edfi].[RestraintEvent]([EducationalEnvironmentTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.RestraintEvent') AND name='FK_RestraintEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId')
    PRINT '<<< CREATED INDEX edfi.RestraintEvent.FK_RestraintEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.RestraintEvent.FK_RestraintEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId >>>'
go

/* 
 * INDEX: [FK_RestraintEvent_School_SchoolId] 
 */

CREATE INDEX [FK_RestraintEvent_School_SchoolId] ON [edfi].[RestraintEvent]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.RestraintEvent') AND name='FK_RestraintEvent_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.RestraintEvent.FK_RestraintEvent_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.RestraintEvent.FK_RestraintEvent_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_RestraintEvent_Student_StudentUSI] 
 */

CREATE INDEX [FK_RestraintEvent_Student_StudentUSI] ON [edfi].[RestraintEvent]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.RestraintEvent') AND name='FK_RestraintEvent_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.RestraintEvent.FK_RestraintEvent_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.RestraintEvent.FK_RestraintEvent_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_RestraintEventProgram_Program] 
 */

CREATE INDEX [FK_RestraintEventProgram_Program] ON [edfi].[RestraintEventProgram]([ProgramTypeId], [EducationOrganizationId], [ProgramName])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.RestraintEventProgram') AND name='FK_RestraintEventProgram_Program')
    PRINT '<<< CREATED INDEX edfi.RestraintEventProgram.FK_RestraintEventProgram_Program >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.RestraintEventProgram.FK_RestraintEventProgram_Program >>>'
go

/* 
 * INDEX: [FK_RestraintEventProgram_RestraintEvent_StudentUSI] 
 */

CREATE INDEX [FK_RestraintEventProgram_RestraintEvent_StudentUSI] ON [edfi].[RestraintEventProgram]([RestraintEventIdentifier], [SchoolId], [EventDate], [StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.RestraintEventProgram') AND name='FK_RestraintEventProgram_RestraintEvent_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.RestraintEventProgram.FK_RestraintEventProgram_RestraintEvent_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.RestraintEventProgram.FK_RestraintEventProgram_RestraintEvent_StudentUSI >>>'
go

/* 
 * INDEX: [FK_RestraintEventReason_RestraintEvent_StudentUSI] 
 */

CREATE INDEX [FK_RestraintEventReason_RestraintEvent_StudentUSI] ON [edfi].[RestraintEventReason]([StudentUSI], [RestraintEventIdentifier], [SchoolId], [EventDate])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.RestraintEventReason') AND name='FK_RestraintEventReason_RestraintEvent_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.RestraintEventReason.FK_RestraintEventReason_RestraintEvent_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.RestraintEventReason.FK_RestraintEventReason_RestraintEvent_StudentUSI >>>'
go

/* 
 * INDEX: [FK_RestraintEventReason_RestraintEventReasonType_RestraintEventReasonTypeId] 
 */

CREATE INDEX [FK_RestraintEventReason_RestraintEventReasonType_RestraintEventReasonTypeId] ON [edfi].[RestraintEventReason]([RestraintEventReasonTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.RestraintEventReason') AND name='FK_RestraintEventReason_RestraintEventReasonType_RestraintEventReasonTypeId')
    PRINT '<<< CREATED INDEX edfi.RestraintEventReason.FK_RestraintEventReason_RestraintEventReasonType_RestraintEventReasonTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.RestraintEventReason.FK_RestraintEventReason_RestraintEventReasonType_RestraintEventReasonTypeId >>>'
go

/* 
 * INDEX: [FK_School_AdministrativeFundingControlDescriptor_AdministrativeFundingControlDescriptorId] 
 */

CREATE INDEX [FK_School_AdministrativeFundingControlDescriptor_AdministrativeFundingControlDescriptorId] ON [edfi].[School]([AdministrativeFundingControlDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.School') AND name='FK_School_AdministrativeFundingControlDescriptor_AdministrativeFundingControlDescriptorId')
    PRINT '<<< CREATED INDEX edfi.School.FK_School_AdministrativeFundingControlDescriptor_AdministrativeFundingControlDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.School.FK_School_AdministrativeFundingControlDescriptor_AdministrativeFundingControlDescriptorId >>>'
go

/* 
 * INDEX: [FK_School_CharterApprovalAgencyType_CharterApprovalAgencyTypeId] 
 */

CREATE INDEX [FK_School_CharterApprovalAgencyType_CharterApprovalAgencyTypeId] ON [edfi].[School]([CharterApprovalAgencyTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.School') AND name='FK_School_CharterApprovalAgencyType_CharterApprovalAgencyTypeId')
    PRINT '<<< CREATED INDEX edfi.School.FK_School_CharterApprovalAgencyType_CharterApprovalAgencyTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.School.FK_School_CharterApprovalAgencyType_CharterApprovalAgencyTypeId >>>'
go

/* 
 * INDEX: [FK_School_CharterStatusType_CharterStatusTypeId] 
 */

CREATE INDEX [FK_School_CharterStatusType_CharterStatusTypeId] ON [edfi].[School]([CharterStatusTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.School') AND name='FK_School_CharterStatusType_CharterStatusTypeId')
    PRINT '<<< CREATED INDEX edfi.School.FK_School_CharterStatusType_CharterStatusTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.School.FK_School_CharterStatusType_CharterStatusTypeId >>>'
go

/* 
 * INDEX: [FK_School_EducationOrganization_SchoolId] 
 */

CREATE INDEX [FK_School_EducationOrganization_SchoolId] ON [edfi].[School]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.School') AND name='FK_School_EducationOrganization_SchoolId')
    PRINT '<<< CREATED INDEX edfi.School.FK_School_EducationOrganization_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.School.FK_School_EducationOrganization_SchoolId >>>'
go

/* 
 * INDEX: [FK_School_InternetAccessType_InternetAccessTypeId] 
 */

CREATE INDEX [FK_School_InternetAccessType_InternetAccessTypeId] ON [edfi].[School]([InternetAccessTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.School') AND name='FK_School_InternetAccessType_InternetAccessTypeId')
    PRINT '<<< CREATED INDEX edfi.School.FK_School_InternetAccessType_InternetAccessTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.School.FK_School_InternetAccessType_InternetAccessTypeId >>>'
go

/* 
 * INDEX: [FK_School_LocalEducationAgency_LocalEducationAgencyId] 
 */

CREATE INDEX [FK_School_LocalEducationAgency_LocalEducationAgencyId] ON [edfi].[School]([LocalEducationAgencyId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.School') AND name='FK_School_LocalEducationAgency_LocalEducationAgencyId')
    PRINT '<<< CREATED INDEX edfi.School.FK_School_LocalEducationAgency_LocalEducationAgencyId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.School.FK_School_LocalEducationAgency_LocalEducationAgencyId >>>'
go

/* 
 * INDEX: [FK_School_MagnetSpecialProgramEmphasisSchoolType_MagnetSpecialProgramEmphasisSchoolTypeId] 
 */

CREATE INDEX [FK_School_MagnetSpecialProgramEmphasisSchoolType_MagnetSpecialProgramEmphasisSchoolTypeId] ON [edfi].[School]([MagnetSpecialProgramEmphasisSchoolTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.School') AND name='FK_School_MagnetSpecialProgramEmphasisSchoolType_MagnetSpecialProgramEmphasisSchoolTypeId')
    PRINT '<<< CREATED INDEX edfi.School.FK_School_MagnetSpecialProgramEmphasisSchoolType_MagnetSpecialProgramEmphasisSchoolTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.School.FK_School_MagnetSpecialProgramEmphasisSchoolType_MagnetSpecialProgramEmphasisSchoolTypeId >>>'
go

/* 
 * INDEX: [FK_School_SchoolType_SchoolTypeId] 
 */

CREATE INDEX [FK_School_SchoolType_SchoolTypeId] ON [edfi].[School]([SchoolTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.School') AND name='FK_School_SchoolType_SchoolTypeId')
    PRINT '<<< CREATED INDEX edfi.School.FK_School_SchoolType_SchoolTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.School.FK_School_SchoolType_SchoolTypeId >>>'
go

/* 
 * INDEX: [FK_School_SchoolYearType_SchoolYear] 
 */

CREATE INDEX [FK_School_SchoolYearType_SchoolYear] ON [edfi].[School]([CharterApprovalSchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.School') AND name='FK_School_SchoolYearType_SchoolYear')
    PRINT '<<< CREATED INDEX edfi.School.FK_School_SchoolYearType_SchoolYear >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.School.FK_School_SchoolYearType_SchoolYear >>>'
go

/* 
 * INDEX: [FK_School_TitleIPartASchoolDesignationType_TitleIPartASchoolDesignationTypeId] 
 */

CREATE INDEX [FK_School_TitleIPartASchoolDesignationType_TitleIPartASchoolDesignationTypeId] ON [edfi].[School]([TitleIPartASchoolDesignationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.School') AND name='FK_School_TitleIPartASchoolDesignationType_TitleIPartASchoolDesignationTypeId')
    PRINT '<<< CREATED INDEX edfi.School.FK_School_TitleIPartASchoolDesignationType_TitleIPartASchoolDesignationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.School.FK_School_TitleIPartASchoolDesignationType_TitleIPartASchoolDesignationTypeId >>>'
go

/* 
 * INDEX: [FK_SchoolCategory_School_SchoolId] 
 */

CREATE INDEX [FK_SchoolCategory_School_SchoolId] ON [edfi].[SchoolCategory]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SchoolCategory') AND name='FK_SchoolCategory_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.SchoolCategory.FK_SchoolCategory_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SchoolCategory.FK_SchoolCategory_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_SchoolCategory_SchoolCategoryType_SchoolCategoryTypeId] 
 */

CREATE INDEX [FK_SchoolCategory_SchoolCategoryType_SchoolCategoryTypeId] ON [edfi].[SchoolCategory]([SchoolCategoryTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SchoolCategory') AND name='FK_SchoolCategory_SchoolCategoryType_SchoolCategoryTypeId')
    PRINT '<<< CREATED INDEX edfi.SchoolCategory.FK_SchoolCategory_SchoolCategoryType_SchoolCategoryTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SchoolCategory.FK_SchoolCategory_SchoolCategoryType_SchoolCategoryTypeId >>>'
go

/* 
 * INDEX: [FK_SchoolFoodServicesEligibilityDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_SchoolFoodServicesEligibilityDescriptor_Descriptor_DescriptorId] ON [edfi].[SchoolFoodServicesEligibilityDescriptor]([SchoolFoodServicesEligibilityDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SchoolFoodServicesEligibilityDescriptor') AND name='FK_SchoolFoodServicesEligibilityDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.SchoolFoodServicesEligibilityDescriptor.FK_SchoolFoodServicesEligibilityDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SchoolFoodServicesEligibilityDescriptor.FK_SchoolFoodServicesEligibilityDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityType_SchoolFoodServicesEligibilityTypeId] 
 */

CREATE INDEX [FK_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityType_SchoolFoodServicesEligibilityTypeId] ON [edfi].[SchoolFoodServicesEligibilityDescriptor]([SchoolFoodServicesEligibilityTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SchoolFoodServicesEligibilityDescriptor') AND name='FK_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityType_SchoolFoodServicesEligibilityTypeId')
    PRINT '<<< CREATED INDEX edfi.SchoolFoodServicesEligibilityDescriptor.FK_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityType_SchoolFoodServicesEligibilityTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SchoolFoodServicesEligibilityDescriptor.FK_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityType_SchoolFoodServicesEligibilityTypeId >>>'
go

/* 
 * INDEX: [FK_SchoolGradeLevel_GradeLevelDescriptorId] 
 */

CREATE INDEX [FK_SchoolGradeLevel_GradeLevelDescriptorId] ON [edfi].[SchoolGradeLevel]([GradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SchoolGradeLevel') AND name='FK_SchoolGradeLevel_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.SchoolGradeLevel.FK_SchoolGradeLevel_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SchoolGradeLevel.FK_SchoolGradeLevel_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_SchoolGradeLevel_School_SchoolId] 
 */

CREATE INDEX [FK_SchoolGradeLevel_School_SchoolId] ON [edfi].[SchoolGradeLevel]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SchoolGradeLevel') AND name='FK_SchoolGradeLevel_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.SchoolGradeLevel.FK_SchoolGradeLevel_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SchoolGradeLevel.FK_SchoolGradeLevel_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_Section_ClassPeriod_SchoolId] 
 */

CREATE INDEX [FK_Section_ClassPeriod_SchoolId] ON [edfi].[Section]([ClassPeriodName], [SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Section') AND name='FK_Section_ClassPeriod_SchoolId')
    PRINT '<<< CREATED INDEX edfi.Section.FK_Section_ClassPeriod_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Section.FK_Section_ClassPeriod_SchoolId >>>'
go

/* 
 * INDEX: [FK_Section_CreditType_AvailableCreditTypeId] 
 */

CREATE INDEX [FK_Section_CreditType_AvailableCreditTypeId] ON [edfi].[Section]([AvailableCreditTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Section') AND name='FK_Section_CreditType_AvailableCreditTypeId')
    PRINT '<<< CREATED INDEX edfi.Section.FK_Section_CreditType_AvailableCreditTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Section.FK_Section_CreditType_AvailableCreditTypeId >>>'
go

/* 
 * INDEX: [FK_Section_EducationalEnvironmentType_EducationalEnvironmentTypeId] 
 */

CREATE INDEX [FK_Section_EducationalEnvironmentType_EducationalEnvironmentTypeId] ON [edfi].[Section]([EducationalEnvironmentTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Section') AND name='FK_Section_EducationalEnvironmentType_EducationalEnvironmentTypeId')
    PRINT '<<< CREATED INDEX edfi.Section.FK_Section_EducationalEnvironmentType_EducationalEnvironmentTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Section.FK_Section_EducationalEnvironmentType_EducationalEnvironmentTypeId >>>'
go

/* 
 * INDEX: [FK_Section_LanguageDescriptor_InstructionLanguageDescriptorId] 
 */

CREATE INDEX [FK_Section_LanguageDescriptor_InstructionLanguageDescriptorId] ON [edfi].[Section]([InstructionLanguageDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Section') AND name='FK_Section_LanguageDescriptor_InstructionLanguageDescriptorId')
    PRINT '<<< CREATED INDEX edfi.Section.FK_Section_LanguageDescriptor_InstructionLanguageDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Section.FK_Section_LanguageDescriptor_InstructionLanguageDescriptorId >>>'
go

/* 
 * INDEX: [FK_Section_Location_SchoolId] 
 */

CREATE INDEX [FK_Section_Location_SchoolId] ON [edfi].[Section]([SchoolId], [ClassroomIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Section') AND name='FK_Section_Location_SchoolId')
    PRINT '<<< CREATED INDEX edfi.Section.FK_Section_Location_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Section.FK_Section_Location_SchoolId >>>'
go

/* 
 * INDEX: [FK_Section_MediumOfInstructionType_MediumOfInstructionTypeId] 
 */

CREATE INDEX [FK_Section_MediumOfInstructionType_MediumOfInstructionTypeId] ON [edfi].[Section]([MediumOfInstructionTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Section') AND name='FK_Section_MediumOfInstructionType_MediumOfInstructionTypeId')
    PRINT '<<< CREATED INDEX edfi.Section.FK_Section_MediumOfInstructionType_MediumOfInstructionTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Section.FK_Section_MediumOfInstructionType_MediumOfInstructionTypeId >>>'
go

/* 
 * INDEX: [FK_Section_PopulationServedType_PopulationServedTypeId] 
 */

CREATE INDEX [FK_Section_PopulationServedType_PopulationServedTypeId] ON [edfi].[Section]([PopulationServedTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Section') AND name='FK_Section_PopulationServedType_PopulationServedTypeId')
    PRINT '<<< CREATED INDEX edfi.Section.FK_Section_PopulationServedType_PopulationServedTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Section.FK_Section_PopulationServedType_PopulationServedTypeId >>>'
go

/* 
 * INDEX: [FK_Section_CourseOffering_SchoolId] 
 */

CREATE INDEX [FK_Section_CourseOffering_SchoolId] ON [edfi].[Section]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Section') AND name='FK_Section_CourseOffering_SchoolId')
    PRINT '<<< CREATED INDEX edfi.Section.FK_Section_CourseOffering_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Section.FK_Section_CourseOffering_SchoolId >>>'
go




/* 
 * INDEX: [FK_SectionAttendanceTakenEvent_CalendarDate_SchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_SectionAttendanceTakenEvent_CalendarDate_SchoolId] ON [edfi].[SectionAttendanceTakenEvent]([Date] ASC, [SchoolId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SectionAttendanceTakenEvent') AND name='FK_SectionAttendanceTakenEvent_CalendarDate_SchoolId')
    PRINT '<<< CREATED INDEX edfi.SectionAttendanceTakenEvent.FK_SectionAttendanceTakenEvent_CalendarDate_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SectionAttendanceTakenEvent.FK_SectionAttendanceTakenEvent_CalendarDate_SchoolId >>>'
go

/* 
 * INDEX: [FK_SectionAttendanceTakeEvent_Section_SchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_SectionAttendanceTakeEvent_Section_SchoolId]
    ON [edfi].[SectionAttendanceTakenEvent]([ClassPeriodName] ASC, [UniqueSectionCode] ASC, [ClassroomIdentificationCode] ASC, [SequenceOfCourse] ASC, [SchoolId] ASC, [LocalCourseCode] ASC, [TermDescriptorId] ASC, [SchoolYear] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SectionAttendanceTakenEvent') AND name='FK_SectionAttendanceTakeEvent_Section_SchoolId')
    PRINT '<<< CREATED INDEX edfi.SectionAttendanceTakenEvent.FK_SectionAttendanceTakeEvent_Section_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SectionAttendanceTakenEvent.FK_SectionAttendanceTakeEvent_Section_SchoolId >>>'
go

/* 
 * INDEX: [FK_SectionAttendanceTakenEvent_Staff] 
 */

CREATE INDEX [FK_SectionAttendanceTakenEvent_Staff] ON [edfi].[SectionAttendanceTakenEvent]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SectionAttendanceTakenEvent') AND name='FK_SectionAttendanceTakenEvent_Staff')
    PRINT '<<< CREATED INDEX edfi.SectionAttendanceTakenEvent.FK_SectionAttendanceTakenEvent_Staff >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SectionAttendanceTakenEvent.FK_SectionAttendanceTakenEvent_Staff >>>'
go

/* 
 * INDEX: [FK_SectionCharacteristic_Section_SchoolId] 
 */

CREATE INDEX [FK_SectionCharacteristic_Section_SchoolId] ON [edfi].[SectionCharacteristic]([SchoolId], [ClassroomIdentificationCode], [ClassPeriodName])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SectionCharacteristic') AND name='FK_SectionCharacteristic_Section_SchoolId')
    PRINT '<<< CREATED INDEX edfi.SectionCharacteristic.FK_SectionCharacteristic_Section_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SectionCharacteristic.FK_SectionCharacteristic_Section_SchoolId >>>'
go

/* 
 * INDEX: [FK_SectionCharacteristic_SectionCharacteristicsDescriptor_SectionCharacteristicsDescriptorId] 
 */

CREATE INDEX [FK_SectionCharacteristic_SectionCharacteristicsDescriptor_SectionCharacteristicsDescriptorId] ON [edfi].[SectionCharacteristic]([SectionCharacteristicDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SectionCharacteristic') AND name='FK_SectionCharacteristic_SectionCharacteristicsDescriptor_SectionCharacteristicsDescriptorId')
    PRINT '<<< CREATED INDEX edfi.SectionCharacteristic.FK_SectionCharacteristic_SectionCharacteristicsDescriptor_SectionCharacteristicsDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SectionCharacteristic.FK_SectionCharacteristic_SectionCharacteristicsDescriptor_SectionCharacteristicsDescriptorId >>>'
go

/* 
 * INDEX: [FK_SectionCharacteristicDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_SectionCharacteristicDescriptor_Descriptor_DescriptorId] ON [edfi].[SectionCharacteristicDescriptor]([SectionCharacteristicDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SectionCharacteristicDescriptor') AND name='FK_SectionCharacteristicDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.SectionCharacteristicDescriptor.FK_SectionCharacteristicDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SectionCharacteristicDescriptor.FK_SectionCharacteristicDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_SectionCharacteristicDescriptor_SectionCharacteristicType_SectionCharacteristicTypeId] 
 */

CREATE INDEX [FK_SectionCharacteristicDescriptor_SectionCharacteristicType_SectionCharacteristicTypeId] ON [edfi].[SectionCharacteristicDescriptor]([SectionCharacteristicTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SectionCharacteristicDescriptor') AND name='FK_SectionCharacteristicDescriptor_SectionCharacteristicType_SectionCharacteristicTypeId')
    PRINT '<<< CREATED INDEX edfi.SectionCharacteristicDescriptor.FK_SectionCharacteristicDescriptor_SectionCharacteristicType_SectionCharacteristicTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SectionCharacteristicDescriptor.FK_SectionCharacteristicDescriptor_SectionCharacteristicType_SectionCharacteristicTypeId >>>'
go

/* 
 * INDEX: [FK_SectionProgram_Program] 
 */

CREATE INDEX [FK_SectionProgram_Program] ON [edfi].[SectionProgram]([EducationOrganizationId], [ProgramName], [ProgramTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SectionProgram') AND name='FK_SectionProgram_Program')
    PRINT '<<< CREATED INDEX edfi.SectionProgram.FK_SectionProgram_Program >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SectionProgram.FK_SectionProgram_Program >>>'
go

/* 
 * INDEX: [FK_SectionProgram_Section_SchoolId] 
 */

CREATE INDEX [FK_SectionProgram_Section_SchoolId] ON [edfi].[SectionProgram]([ClassroomIdentificationCode], [ClassPeriodName], [SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SectionProgram') AND name='FK_SectionProgram_Section_SchoolId')
    PRINT '<<< CREATED INDEX edfi.SectionProgram.FK_SectionProgram_Section_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SectionProgram.FK_SectionProgram_Section_SchoolId >>>'
go

/* 
 * INDEX: [FK_SeparationReasonDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_SeparationReasonDescriptor_Descriptor_DescriptorId] ON [edfi].[SeparationReasonDescriptor]([SeparationReasonDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SeparationReasonDescriptor') AND name='FK_SeparationReasonDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.SeparationReasonDescriptor.FK_SeparationReasonDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SeparationReasonDescriptor.FK_SeparationReasonDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_SeparationReasonDescriptor_SeparationReasonType_SeparationReasonTypeId] 
 */

CREATE INDEX [FK_SeparationReasonDescriptor_SeparationReasonType_SeparationReasonTypeId] ON [edfi].[SeparationReasonDescriptor]([SeparationReasonTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SeparationReasonDescriptor') AND name='FK_SeparationReasonDescriptor_SeparationReasonType_SeparationReasonTypeId')
    PRINT '<<< CREATED INDEX edfi.SeparationReasonDescriptor.FK_SeparationReasonDescriptor_SeparationReasonType_SeparationReasonTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SeparationReasonDescriptor.FK_SeparationReasonDescriptor_SeparationReasonType_SeparationReasonTypeId >>>'
go

/* 
 * INDEX: [FK_ServiceDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_ServiceDescriptor_Descriptor_DescriptorId] ON [edfi].[ServiceDescriptor]([ServiceDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.ServiceDescriptor') AND name='FK_ServiceDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.ServiceDescriptor.FK_ServiceDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.ServiceDescriptor.FK_ServiceDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_Session_School_SchoolId] 
 */

CREATE INDEX [FK_Session_School_SchoolId] ON [edfi].[Session]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Session') AND name='FK_Session_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.Session.FK_Session_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Session.FK_Session_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_Session_SchoolYearType_SchoolYear] 
 */

CREATE INDEX [FK_Session_SchoolYearType_SchoolYear] ON [edfi].[Session]([SchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Session') AND name='FK_Session_SchoolYearType_SchoolYear')
    PRINT '<<< CREATED INDEX edfi.Session.FK_Session_SchoolYearType_SchoolYear >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Session.FK_Session_SchoolYearType_SchoolYear >>>'
go

/* 
 * INDEX: [FK_Session_TermDescriptor_TermDescriptorId] 
 */

CREATE INDEX [FK_Session_TermDescriptor_TermDescriptorId] ON [edfi].[Session]([TermDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Session') AND name='FK_Session_TermDescriptor_TermDescriptorId')
    PRINT '<<< CREATED INDEX edfi.Session.FK_Session_TermDescriptor_TermDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Session.FK_Session_TermDescriptor_TermDescriptorId >>>'
go

/* 
 * INDEX: [FK_AcademicWeek_Session_SchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_AcademicWeek_Session_SchoolId] ON [edfi].[SessionAcademicWeek]([WeekIdentifier] ASC, [SchoolId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SessionAcademicWeek') AND name='FK_AcademicWeek_Session_SchoolId')
    PRINT '<<< CREATED INDEX edfi.SessionAcademicWeek.FK_AcademicWeek_Session_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SessionAcademicWeek.FK_AcademicWeek_Session_SchoolId >>>'
go

/* 
 * INDEX: [FK_SessionAcademicWeek_Session_SchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_SessionAcademicWeek_Session_SchoolId] ON [edfi].[SessionAcademicWeek]([TermDescriptorId] ASC, [SchoolId] ASC, [SchoolYear] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SessionAcademicWeek') AND name='FK_SessionAcademicWeek_Session_SchoolId')
    PRINT '<<< CREATED INDEX edfi.SessionAcademicWeek.FK_SessionAcademicWeek_Session_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SessionAcademicWeek.FK_SessionAcademicWeek_Session_SchoolId >>>'
go

/* 
 * INDEX: [FK_SessionGradingPeriod_GradingPeriod_SchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_SessionGradingPeriod_GradingPeriod_SchoolId]
    ON [edfi].[SessionGradingPeriod]([BeginDate] ASC, [GradingPeriodDescriptorId] ASC, [SchoolId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SessionGradingPeriod') AND name='FK_SessionGradingPeriod_GradingPeriod_SchoolId')
    PRINT '<<< CREATED INDEX edfi.SessionGradingPeriod.FK_SessionGradingPeriod_GradingPeriod_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SessionGradingPeriod.FK_SessionGradingPeriod_GradingPeriod_SchoolId >>>'
go

/* 
 * INDEX: [FK_SessionGradingPeriod_Session_SchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_SessionGradingPeriod_Session_SchoolId]
    ON [edfi].[SessionGradingPeriod]([SchoolYear] ASC, [TermDescriptorId] ASC, [SchoolId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SessionGradingPeriod') AND name='FK_SessionGradingPeriod_Session_SchoolId')
    PRINT '<<< CREATED INDEX edfi.SessionGradingPeriod.FK_SessionGradingPeriod_Session_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SessionGradingPeriod.FK_SessionGradingPeriod_Session_SchoolId >>>'
go

/* 
 * INDEX: [FK_SpecialEducationSettingDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_SpecialEducationSettingDescriptor_Descriptor_DescriptorId] ON [edfi].[SpecialEducationSettingDescriptor]([SpecialEducationSettingDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SpecialEducationSettingDescriptor') AND name='FK_SpecialEducationSettingDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.SpecialEducationSettingDescriptor.FK_SpecialEducationSettingDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SpecialEducationSettingDescriptor.FK_SpecialEducationSettingDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_SpecialEducationSettingDescriptor_SpecialEducationSettingType_SpecialEducationSettingTypeId] 
 */

CREATE INDEX [FK_SpecialEducationSettingDescriptor_SpecialEducationSettingType_SpecialEducationSettingTypeId] ON [edfi].[SpecialEducationSettingDescriptor]([SpecialEducationSettingTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.SpecialEducationSettingDescriptor') AND name='FK_SpecialEducationSettingDescriptor_SpecialEducationSettingType_SpecialEducationSettingTypeId')
    PRINT '<<< CREATED INDEX edfi.SpecialEducationSettingDescriptor.FK_SpecialEducationSettingDescriptor_SpecialEducationSettingType_SpecialEducationSettingTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.SpecialEducationSettingDescriptor.FK_SpecialEducationSettingDescriptor_SpecialEducationSettingType_SpecialEducationSettingTypeId >>>'
go

/* 
 * INDEX: [FK_Staff_CitizenshipStatusType_CitizenshipStatusTypeId] 
 */

CREATE INDEX [FK_Staff_CitizenshipStatusType_CitizenshipStatusTypeId] ON [edfi].[Staff]([CitizenshipStatusTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Staff') AND name='FK_Staff_CitizenshipStatusType_CitizenshipStatusTypeId')
    PRINT '<<< CREATED INDEX edfi.Staff.FK_Staff_CitizenshipStatusType_CitizenshipStatusTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Staff.FK_Staff_CitizenshipStatusType_CitizenshipStatusTypeId >>>'
go

/* 
 * INDEX: [FK_Staff_LevelOfEducationDescriptor_HighestCompletedLevelOfEducationDescriptorId] 
 */

CREATE INDEX [FK_Staff_LevelOfEducationDescriptor_HighestCompletedLevelOfEducationDescriptorId] ON [edfi].[Staff]([HighestCompletedLevelOfEducationDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Staff') AND name='FK_Staff_LevelOfEducationDescriptor_HighestCompletedLevelOfEducationDescriptorId')
    PRINT '<<< CREATED INDEX edfi.Staff.FK_Staff_LevelOfEducationDescriptor_HighestCompletedLevelOfEducationDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Staff.FK_Staff_LevelOfEducationDescriptor_HighestCompletedLevelOfEducationDescriptorId >>>'
go

/* 
 * INDEX: [FK_Staff_OldEthnicityType_OldEthnicityTypeId] 
 */

CREATE INDEX [FK_Staff_OldEthnicityType_OldEthnicityTypeId] ON [edfi].[Staff]([OldEthnicityTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Staff') AND name='FK_Staff_OldEthnicityType_OldEthnicityTypeId')
    PRINT '<<< CREATED INDEX edfi.Staff.FK_Staff_OldEthnicityType_OldEthnicityTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Staff.FK_Staff_OldEthnicityType_OldEthnicityTypeId >>>'
go

/* 
 * INDEX: [FK_Staff_SexType_SexTypeId] 
 */

CREATE INDEX [FK_Staff_SexType_SexTypeId] ON [edfi].[Staff]([SexTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Staff') AND name='FK_Staff_SexType_SexTypeId')
    PRINT '<<< CREATED INDEX edfi.Staff.FK_Staff_SexType_SexTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Staff.FK_Staff_SexType_SexTypeId >>>'
go

/* 
 * INDEX: [IX_Staff_StaffUniqueId] 
 */

CREATE UNIQUE NONCLUSTERED INDEX [IX_Staff_StaffUniqueId] ON [edfi].[Staff]([StaffUniqueId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Staff') AND name='IX_Staff_StaffUniqueId')
    PRINT '<<< CREATED INDEX edfi.Staff.IX_Staff_StaffUniqueId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Staff.IX_Staff_StaffUniqueId >>>'
go

/* 
 * INDEX: [FK_StaffAddress_AddressType_AddressTypeId] 
 */

CREATE INDEX [FK_StaffAddress_AddressType_AddressTypeId] ON [edfi].[StaffAddress]([AddressTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffAddress') AND name='FK_StaffAddress_AddressType_AddressTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffAddress.FK_StaffAddress_AddressType_AddressTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffAddress.FK_StaffAddress_AddressType_AddressTypeId >>>'
go

/* 
 * INDEX: [FK_StaffAddress_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffAddress_Staff_StaffUSI] ON [edfi].[StaffAddress]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffAddress') AND name='FK_StaffAddress_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffAddress.FK_StaffAddress_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffAddress.FK_StaffAddress_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffAddress_StateAbbreviationType_StateAbbreviationTypeId] 
 */

CREATE INDEX [FK_StaffAddress_StateAbbreviationType_StateAbbreviationTypeId] ON [edfi].[StaffAddress]([StateAbbreviationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffAddress') AND name='FK_StaffAddress_StateAbbreviationType_StateAbbreviationTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffAddress.FK_StaffAddress_StateAbbreviationType_StateAbbreviationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffAddress.FK_StaffAddress_StateAbbreviationType_StateAbbreviationTypeId >>>'
go

/* 
 * INDEX: [FK_StaffClassificationDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_StaffClassificationDescriptor_Descriptor_DescriptorId] ON [edfi].[StaffClassificationDescriptor]([StaffClassificationDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffClassificationDescriptor') AND name='FK_StaffClassificationDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffClassificationDescriptor.FK_StaffClassificationDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffClassificationDescriptor.FK_StaffClassificationDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffClassificationDescriptor_StaffClassificationType_StaffClassificationTypeId] 
 */

CREATE INDEX [FK_StaffClassificationDescriptor_StaffClassificationType_StaffClassificationTypeId] ON [edfi].[StaffClassificationDescriptor]([StaffClassificationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffClassificationDescriptor') AND name='FK_StaffClassificationDescriptor_StaffClassificationType_StaffClassificationTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffClassificationDescriptor.FK_StaffClassificationDescriptor_StaffClassificationType_StaffClassificationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffClassificationDescriptor.FK_StaffClassificationDescriptor_StaffClassificationType_StaffClassificationTypeId >>>'
go

/* 
 * INDEX: [FK_StaffCohortAssociation_Cohort_EducationOrganizationId] 
 */

CREATE INDEX [FK_StaffCohortAssociation_Cohort_EducationOrganizationId] ON [edfi].[StaffCohortAssociation]([CohortIdentifier], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffCohortAssociation') AND name='FK_StaffCohortAssociation_Cohort_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.StaffCohortAssociation.FK_StaffCohortAssociation_Cohort_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffCohortAssociation.FK_StaffCohortAssociation_Cohort_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_StaffCohortAssociation_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffCohortAssociation_Staff_StaffUSI] ON [edfi].[StaffCohortAssociation]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffCohortAssociation') AND name='FK_StaffCohortAssociation_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffCohortAssociation.FK_StaffCohortAssociation_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffCohortAssociation.FK_StaffCohortAssociation_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffCredential_CredentialFieldDescriptor_CredentialFieldDescriptorId] 
 */

CREATE INDEX [FK_StaffCredential_CredentialFieldDescriptor_CredentialFieldDescriptorId] ON [edfi].[StaffCredential]([CredentialFieldDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffCredential') AND name='FK_StaffCredential_CredentialFieldDescriptor_CredentialFieldDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffCredential.FK_StaffCredential_CredentialFieldDescriptor_CredentialFieldDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffCredential.FK_StaffCredential_CredentialFieldDescriptor_CredentialFieldDescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffCredential_CredentialType_CredentialTypeId] 
 */

CREATE INDEX [FK_StaffCredential_CredentialType_CredentialTypeId] ON [edfi].[StaffCredential]([CredentialTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffCredential') AND name='FK_StaffCredential_CredentialType_CredentialTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffCredential.FK_StaffCredential_CredentialType_CredentialTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffCredential.FK_StaffCredential_CredentialType_CredentialTypeId >>>'
go

/* 
 * INDEX: [FK_StaffCredential_LevelDescriptor_LevelDescriptorId] 
 */

CREATE INDEX [FK_StaffCredential_LevelDescriptor_LevelDescriptorId] ON [edfi].[StaffCredential]([LevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffCredential') AND name='FK_StaffCredential_LevelDescriptor_LevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffCredential.FK_StaffCredential_LevelDescriptor_LevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffCredential.FK_StaffCredential_LevelDescriptor_LevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffCredential_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffCredential_Staff_StaffUSI] ON [edfi].[StaffCredential]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffCredential') AND name='FK_StaffCredential_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffCredential.FK_StaffCredential_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffCredential.FK_StaffCredential_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffCredential_StateAbbreviationType_StateOfIssueAbbreviationTypeId] 
 */

CREATE INDEX [FK_StaffCredential_StateAbbreviationType_StateOfIssueAbbreviationTypeId] ON [edfi].[StaffCredential]([StateOfIssueStateAbbreviationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffCredential') AND name='FK_StaffCredential_StateAbbreviationType_StateOfIssueAbbreviationTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffCredential.FK_StaffCredential_StateAbbreviationType_StateOfIssueAbbreviationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffCredential.FK_StaffCredential_StateAbbreviationType_StateOfIssueAbbreviationTypeId >>>'
go

/* 
 * INDEX: [FK_StaffCredential_TeachingCredentialBasisType_TeachingCredentialBasisTypeId] 
 */

CREATE INDEX [FK_StaffCredential_TeachingCredentialBasisType_TeachingCredentialBasisTypeId] ON [edfi].[StaffCredential]([TeachingCredentialBasisTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffCredential') AND name='FK_StaffCredential_TeachingCredentialBasisType_TeachingCredentialBasisTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffCredential.FK_StaffCredential_TeachingCredentialBasisType_TeachingCredentialBasisTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffCredential.FK_StaffCredential_TeachingCredentialBasisType_TeachingCredentialBasisTypeId >>>'
go

/* 
 * INDEX: [FK_StaffCredential_TeachingCredentialDescriptor_TeachingCredentialDescriptorId] 
 */

CREATE INDEX [FK_StaffCredential_TeachingCredentialDescriptor_TeachingCredentialDescriptorId] ON [edfi].[StaffCredential]([TeachingCredentialDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffCredential') AND name='FK_StaffCredential_TeachingCredentialDescriptor_TeachingCredentialDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffCredential.FK_StaffCredential_TeachingCredentialDescriptor_TeachingCredentialDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffCredential.FK_StaffCredential_TeachingCredentialDescriptor_TeachingCredentialDescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptorId] 
 */

CREATE INDEX [FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptorId] ON [edfi].[StaffEducationOrganizationAssignmentAssociation]([StaffClassificationDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffEducationOrganizationAssignmentAssociation') AND name='FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation_StaffUSI] 
 */

CREATE INDEX [FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation_StaffUSI] ON [edfi].[StaffEducationOrganizationAssignmentAssociation]([EmploymentHireDate], [StaffUSI], [EmploymentStatusDescriptorId], [EmploymentEducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffEducationOrganizationAssignmentAssociation') AND name='FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffEducationOrgAssignmentAssociation_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_StaffEducationOrgAssignmentAssociation_EducationOrganization_EducationOrganizationId] ON [edfi].[StaffEducationOrganizationAssignmentAssociation]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffEducationOrganizationAssignmentAssociation') AND name='FK_StaffEducationOrgAssignmentAssociation_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrgAssignmentAssociation_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrgAssignmentAssociation_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_StaffEducationOrgAssignmentAssociation_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffEducationOrgAssignmentAssociation_Staff_StaffUSI] ON [edfi].[StaffEducationOrganizationAssignmentAssociation]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffEducationOrganizationAssignmentAssociation') AND name='FK_StaffEducationOrgAssignmentAssociation_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrgAssignmentAssociation_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffEducationOrganizationAssignmentAssociation.FK_StaffEducationOrgAssignmentAssociation_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor_EmploymentStatusDescriptorId] 
 */

CREATE INDEX [FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor_EmploymentStatusDescriptorId] ON [edfi].[StaffEducationOrganizationEmploymentAssociation]([EmploymentStatusDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffEducationOrganizationEmploymentAssociation') AND name='FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor_EmploymentStatusDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor_EmploymentStatusDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor_EmploymentStatusDescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor_SeparationReasonDescriptorId] 
 */

CREATE INDEX [FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor_SeparationReasonDescriptorId] ON [edfi].[StaffEducationOrganizationEmploymentAssociation]([SeparationReasonDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffEducationOrganizationEmploymentAssociation') AND name='FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor_SeparationReasonDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor_SeparationReasonDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor_SeparationReasonDescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffEducationOrganizationEmploymentAssociation_SeparationType_SeparationTypeId] 
 */

CREATE INDEX [FK_StaffEducationOrganizationEmploymentAssociation_SeparationType_SeparationTypeId] ON [edfi].[StaffEducationOrganizationEmploymentAssociation]([SeparationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffEducationOrganizationEmploymentAssociation') AND name='FK_StaffEducationOrganizationEmploymentAssociation_SeparationType_SeparationTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_SeparationType_SeparationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_SeparationType_SeparationTypeId >>>'
go

/* 
 * INDEX: [FK_StaffEducationOrganizationEmploymentAssociation_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffEducationOrganizationEmploymentAssociation_Staff_StaffUSI] ON [edfi].[StaffEducationOrganizationEmploymentAssociation]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffEducationOrganizationEmploymentAssociation') AND name='FK_StaffEducationOrganizationEmploymentAssociation_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization_EducationOrganizationId] ON [edfi].[StaffEducationOrganizationEmploymentAssociation]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffEducationOrganizationEmploymentAssociation') AND name='FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffEducationOrganizationEmploymentAssociation.FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_StaffElectronicMail_ElectronicMailType_ElectronicMailTypeId] 
 */

CREATE INDEX [FK_StaffElectronicMail_ElectronicMailType_ElectronicMailTypeId] ON [edfi].[StaffElectronicMail]([ElectronicMailTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffElectronicMail') AND name='FK_StaffElectronicMail_ElectronicMailType_ElectronicMailTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffElectronicMail.FK_StaffElectronicMail_ElectronicMailType_ElectronicMailTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffElectronicMail.FK_StaffElectronicMail_ElectronicMailType_ElectronicMailTypeId >>>'
go

/* 
 * INDEX: [FK_StaffElectronicMail_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffElectronicMail_Staff_StaffUSI] ON [edfi].[StaffElectronicMail]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffElectronicMail') AND name='FK_StaffElectronicMail_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffElectronicMail.FK_StaffElectronicMail_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffElectronicMail.FK_StaffElectronicMail_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffIdentificationCode_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffIdentificationCode_Staff_StaffUSI] ON [edfi].[StaffIdentificationCode]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffIdentificationCode') AND name='FK_StaffIdentificationCode_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffIdentificationCode.FK_StaffIdentificationCode_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffIdentificationCode.FK_StaffIdentificationCode_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor_StaffIdentificationSystemDescriptorId] 
 */

CREATE INDEX [FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor_StaffIdentificationSystemDescriptorId] ON [edfi].[StaffIdentificationCode]([StaffIdentificationSystemDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffIdentificationCode') AND name='FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor_StaffIdentificationSystemDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffIdentificationCode.FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor_StaffIdentificationSystemDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffIdentificationCode.FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor_StaffIdentificationSystemDescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId] 
 */

CREATE INDEX [FK_StaffIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId] ON [edfi].[StaffIdentificationDocument]([IdentificationDocumentUseTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffIdentificationDocument') AND name='FK_StaffIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffIdentificationDocument.FK_StaffIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffIdentificationDocument.FK_StaffIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId >>>'
go

/* 
 * INDEX: [FK_StaffIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
 */

CREATE INDEX [FK_StaffIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId] ON [edfi].[StaffIdentificationDocument]([IssuerCountryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffIdentificationDocument') AND name='FK_StaffIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffIdentificationDocument.FK_StaffIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffIdentificationDocument.FK_StaffIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId] 
 */

CREATE INDEX [FK_StaffIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId] ON [edfi].[StaffIdentificationDocument]([PersonalInformationVerificationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffIdentificationDocument') AND name='FK_StaffIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffIdentificationDocument.FK_StaffIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffIdentificationDocument.FK_StaffIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId >>>'
go

/* 
 * INDEX: [FK_StaffIdentificationDocument_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffIdentificationDocument_Staff_StaffUSI] ON [edfi].[StaffIdentificationDocument]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffIdentificationDocument') AND name='FK_StaffIdentificationDocument_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffIdentificationDocument.FK_StaffIdentificationDocument_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffIdentificationDocument.FK_StaffIdentificationDocument_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffIdentificationSystemDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_StaffIdentificationSystemDescriptor_Descriptor_DescriptorId] ON [edfi].[StaffIdentificationSystemDescriptor]([StaffIdentificationSystemDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffIdentificationSystemDescriptor') AND name='FK_StaffIdentificationSystemDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffIdentificationSystemDescriptor.FK_StaffIdentificationSystemDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffIdentificationSystemDescriptor.FK_StaffIdentificationSystemDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffIdentificationSystemDescriptor_StaffIdentificationSystemType_StaffIdentificationSystemTypeId] 
 */

CREATE INDEX [FK_StaffIdentificationSystemDescriptor_StaffIdentificationSystemType_StaffIdentificationSystemTypeId] ON [edfi].[StaffIdentificationSystemDescriptor]([StaffIdentificationSystemTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffIdentificationSystemDescriptor') AND name='FK_StaffIdentificationSystemDescriptor_StaffIdentificationSystemType_StaffIdentificationSystemTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffIdentificationSystemDescriptor.FK_StaffIdentificationSystemDescriptor_StaffIdentificationSystemType_StaffIdentificationSystemTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffIdentificationSystemDescriptor.FK_StaffIdentificationSystemDescriptor_StaffIdentificationSystemType_StaffIdentificationSystemTypeId >>>'
go

/* 
 * INDEX: [FK_StaffInternationalAddress_AddressType_AddressTypeId] 
 */

CREATE INDEX [FK_StaffInternationalAddress_AddressType_AddressTypeId] ON [edfi].[StaffInternationalAddress]([AddressTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffInternationalAddress') AND name='FK_StaffInternationalAddress_AddressType_AddressTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffInternationalAddress.FK_StaffInternationalAddress_AddressType_AddressTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffInternationalAddress.FK_StaffInternationalAddress_AddressType_AddressTypeId >>>'
go

/* 
 * INDEX: [FK_StaffInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
 */

CREATE INDEX [FK_StaffInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId] ON [edfi].[StaffInternationalAddress]([CountryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffInternationalAddress') AND name='FK_StaffInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffInternationalAddress.FK_StaffInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffInternationalAddress.FK_StaffInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffInternationalAddress_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffInternationalAddress_Staff_StaffUSI] ON [edfi].[StaffInternationalAddress]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffInternationalAddress') AND name='FK_StaffInternationalAddress_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffInternationalAddress.FK_StaffInternationalAddress_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffInternationalAddress.FK_StaffInternationalAddress_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffLanguages_LanguageDescriptor_LanguageDescriptorId] 
 */

CREATE INDEX [FK_StaffLanguages_LanguageDescriptor_LanguageDescriptorId] ON [edfi].[StaffLanguage]([LanguageDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffLanguage') AND name='FK_StaffLanguages_LanguageDescriptor_LanguageDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffLanguage.FK_StaffLanguages_LanguageDescriptor_LanguageDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffLanguage.FK_StaffLanguages_LanguageDescriptor_LanguageDescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffLanguages_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffLanguages_Staff_StaffUSI] ON [edfi].[StaffLanguage]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffLanguage') AND name='FK_StaffLanguages_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffLanguage.FK_StaffLanguages_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffLanguage.FK_StaffLanguages_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffLanguageUse_LanguageUseType_LanguageUseTypeId] 
 */

CREATE INDEX [FK_StaffLanguageUse_LanguageUseType_LanguageUseTypeId] ON [edfi].[StaffLanguageUse]([LanguageUseTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffLanguageUse') AND name='FK_StaffLanguageUse_LanguageUseType_LanguageUseTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffLanguageUse.FK_StaffLanguageUse_LanguageUseType_LanguageUseTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffLanguageUse.FK_StaffLanguageUse_LanguageUseType_LanguageUseTypeId >>>'
go

/* 
 * INDEX: [FK_StaffLanguageUse_StaffLanguages_StaffUSI] 
 */

CREATE INDEX [FK_StaffLanguageUse_StaffLanguages_StaffUSI] ON [edfi].[StaffLanguageUse]([StaffUSI], [LanguageDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffLanguageUse') AND name='FK_StaffLanguageUse_StaffLanguages_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffLanguageUse.FK_StaffLanguageUse_StaffLanguages_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffLanguageUse.FK_StaffLanguageUse_StaffLanguages_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffOtherName_OtherNameType_OtherNameTypeId] 
 */

CREATE INDEX [FK_StaffOtherName_OtherNameType_OtherNameTypeId] ON [edfi].[StaffOtherName]([OtherNameTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffOtherName') AND name='FK_StaffOtherName_OtherNameType_OtherNameTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffOtherName.FK_StaffOtherName_OtherNameType_OtherNameTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffOtherName.FK_StaffOtherName_OtherNameType_OtherNameTypeId >>>'
go

/* 
 * INDEX: [FK_StaffOtherName_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffOtherName_Staff_StaffUSI] ON [edfi].[StaffOtherName]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffOtherName') AND name='FK_StaffOtherName_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffOtherName.FK_StaffOtherName_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffOtherName.FK_StaffOtherName_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffProgramAssociation_Program_ProgramEducationOrganizationId] 
 */

CREATE INDEX [FK_StaffProgramAssociation_Program_ProgramEducationOrganizationId] ON [edfi].[StaffProgramAssociation]([ProgramTypeId], [ProgramEducationOrganizationId], [ProgramName])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffProgramAssociation') AND name='FK_StaffProgramAssociation_Program_ProgramEducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.StaffProgramAssociation.FK_StaffProgramAssociation_Program_ProgramEducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffProgramAssociation.FK_StaffProgramAssociation_Program_ProgramEducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_StaffProgramAssociation_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffProgramAssociation_Staff_StaffUSI] ON [edfi].[StaffProgramAssociation]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffProgramAssociation') AND name='FK_StaffProgramAssociation_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffProgramAssociation.FK_StaffProgramAssociation_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffProgramAssociation.FK_StaffProgramAssociation_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffRace_RaceType_RaceTypeId] 
 */

CREATE INDEX [FK_StaffRace_RaceType_RaceTypeId] ON [edfi].[StaffRace]([RaceTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffRace') AND name='FK_StaffRace_RaceType_RaceTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffRace.FK_StaffRace_RaceType_RaceTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffRace.FK_StaffRace_RaceType_RaceTypeId >>>'
go

/* 
 * INDEX: [FK_StaffRace_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffRace_Staff_StaffUSI] ON [edfi].[StaffRace]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffRace') AND name='FK_StaffRace_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffRace.FK_StaffRace_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffRace.FK_StaffRace_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffSchoolAssociation_ProgramAssignmentDescriptorId] 
 */

CREATE INDEX [FK_StaffSchoolAssociation_ProgramAssignmentDescriptorId] ON [edfi].[StaffSchoolAssociation]([ProgramAssignmentDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffSchoolAssociation') AND name='FK_StaffSchoolAssociation_ProgramAssignmentDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffSchoolAssociation.FK_StaffSchoolAssociation_ProgramAssignmentDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffSchoolAssociation.FK_StaffSchoolAssociation_ProgramAssignmentDescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffSchoolAssociation_School_SchoolId] 
 */

CREATE INDEX [FK_StaffSchoolAssociation_School_SchoolId] ON [edfi].[StaffSchoolAssociation]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffSchoolAssociation') AND name='FK_StaffSchoolAssociation_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.StaffSchoolAssociation.FK_StaffSchoolAssociation_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffSchoolAssociation.FK_StaffSchoolAssociation_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_StaffSchoolAssociation_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffSchoolAssociation_Staff_StaffUSI] ON [edfi].[StaffSchoolAssociation]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffSchoolAssociation') AND name='FK_StaffSchoolAssociation_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffSchoolAssociation.FK_StaffSchoolAssociation_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffSchoolAssociation.FK_StaffSchoolAssociation_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptorId] 
 */

CREATE INDEX [FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptorId] ON [edfi].[StaffSchoolAssociationAcademicSubject]([AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffSchoolAssociationAcademicSubject') AND name='FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffSchoolAssociationAcademicSubject.FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffSchoolAssociationAcademicSubject.FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffSchoolAssociationAcademicSubjects_StaffSchoolAssociation_StaffUSI] 
 */

CREATE INDEX [FK_StaffSchoolAssociationAcademicSubjects_StaffSchoolAssociation_StaffUSI] ON [edfi].[StaffSchoolAssociationAcademicSubject]([StaffUSI], [SchoolId], [ProgramAssignmentDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffSchoolAssociationAcademicSubject') AND name='FK_StaffSchoolAssociationAcademicSubjects_StaffSchoolAssociation_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffSchoolAssociationAcademicSubject.FK_StaffSchoolAssociationAcademicSubjects_StaffSchoolAssociation_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffSchoolAssociationAcademicSubject.FK_StaffSchoolAssociationAcademicSubjects_StaffSchoolAssociation_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptorId] 
 */

CREATE INDEX [FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptorId] ON [edfi].[StaffSchoolAssociationGradeLevel]([GradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffSchoolAssociationGradeLevel') AND name='FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffSchoolAssociationGradeLevel.FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffSchoolAssociationGradeLevel.FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation_StaffUSI] 
 */

CREATE INDEX [FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation_StaffUSI] ON [edfi].[StaffSchoolAssociationGradeLevel]([StaffUSI], [SchoolId], [ProgramAssignmentDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffSchoolAssociationGradeLevel') AND name='FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffSchoolAssociationGradeLevel.FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffSchoolAssociationGradeLevel.FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffSectionAssociation_ClassroomPositionDescriptor_ClassroomPositionDescriptorId] 
 */

CREATE INDEX [FK_StaffSectionAssociation_ClassroomPositionDescriptor_ClassroomPositionDescriptorId] ON [edfi].[StaffSectionAssociation]([ClassroomPositionDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffSectionAssociation') AND name='FK_StaffSectionAssociation_ClassroomPositionDescriptor_ClassroomPositionDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StaffSectionAssociation.FK_StaffSectionAssociation_ClassroomPositionDescriptor_ClassroomPositionDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffSectionAssociation.FK_StaffSectionAssociation_ClassroomPositionDescriptor_ClassroomPositionDescriptorId >>>'
go

/* 
 * INDEX: [FK_StaffSectionAssociation_Section_SchoolId] 
 */

CREATE INDEX [FK_StaffSectionAssociation_Section_SchoolId] ON [edfi].[StaffSectionAssociation]([ClassPeriodName], [SchoolId], [ClassroomIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffSectionAssociation') AND name='FK_StaffSectionAssociation_Section_SchoolId')
    PRINT '<<< CREATED INDEX edfi.StaffSectionAssociation.FK_StaffSectionAssociation_Section_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffSectionAssociation.FK_StaffSectionAssociation_Section_SchoolId >>>'
go

/* 
 * INDEX: [FK_StaffSectionAssociation_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffSectionAssociation_Staff_StaffUSI] ON [edfi].[StaffSectionAssociation]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffSectionAssociation') AND name='FK_StaffSectionAssociation_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffSectionAssociation.FK_StaffSectionAssociation_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffSectionAssociation.FK_StaffSectionAssociation_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffTelephone_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffTelephone_Staff_StaffUSI] ON [edfi].[StaffTelephone]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffTelephone') AND name='FK_StaffTelephone_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffTelephone.FK_StaffTelephone_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffTelephone.FK_StaffTelephone_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffTelephone_TelephoneNumberType_TelephoneNumberTypeId] 
 */

CREATE INDEX [FK_StaffTelephone_TelephoneNumberType_TelephoneNumberTypeId] ON [edfi].[StaffTelephone]([TelephoneNumberTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffTelephone') AND name='FK_StaffTelephone_TelephoneNumberType_TelephoneNumberTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffTelephone.FK_StaffTelephone_TelephoneNumberType_TelephoneNumberTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffTelephone.FK_StaffTelephone_TelephoneNumberType_TelephoneNumberTypeId >>>'
go

/* 
 * INDEX: [FK_StaffVisa_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StaffVisa_Staff_StaffUSI] ON [edfi].[StaffVisa]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffVisa') AND name='FK_StaffVisa_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StaffVisa.FK_StaffVisa_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffVisa.FK_StaffVisa_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StaffVisa_VisaType_VisaTypeId] 
 */

CREATE INDEX [FK_StaffVisa_VisaType_VisaTypeId] ON [edfi].[StaffVisa]([VisaTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StaffVisa') AND name='FK_StaffVisa_VisaType_VisaTypeId')
    PRINT '<<< CREATED INDEX edfi.StaffVisa.FK_StaffVisa_VisaType_VisaTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StaffVisa.FK_StaffVisa_VisaType_VisaTypeId >>>'
go

/* 
 * INDEX: [FK_StateEducationAgency_EducationOrganization_StateEducationAgencyId] 
 */

CREATE INDEX [FK_StateEducationAgency_EducationOrganization_StateEducationAgencyId] ON [edfi].[StateEducationAgency]([StateEducationAgencyId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StateEducationAgency') AND name='FK_StateEducationAgency_EducationOrganization_StateEducationAgencyId')
    PRINT '<<< CREATED INDEX edfi.StateEducationAgency.FK_StateEducationAgency_EducationOrganization_StateEducationAgencyId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StateEducationAgency.FK_StateEducationAgency_EducationOrganization_StateEducationAgencyId >>>'
go

/* 
 * INDEX: [FK_StateEducationAgencyAccountability_SchoolYearType_SchoolYear] 
 */

CREATE INDEX [FK_StateEducationAgencyAccountability_SchoolYearType_SchoolYear] ON [edfi].[StateEducationAgencyAccountability]([SchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StateEducationAgencyAccountability') AND name='FK_StateEducationAgencyAccountability_SchoolYearType_SchoolYear')
    PRINT '<<< CREATED INDEX edfi.StateEducationAgencyAccountability.FK_StateEducationAgencyAccountability_SchoolYearType_SchoolYear >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StateEducationAgencyAccountability.FK_StateEducationAgencyAccountability_SchoolYearType_SchoolYear >>>'
go

/* 
 * INDEX: [FK_StateEducationAgencyAccountability_StateEducationAgency_StateEducationAgencyId] 
 */

CREATE INDEX [FK_StateEducationAgencyAccountability_StateEducationAgency_StateEducationAgencyId] ON [edfi].[StateEducationAgencyAccountability]([StateEducationAgencyId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StateEducationAgencyAccountability') AND name='FK_StateEducationAgencyAccountability_StateEducationAgency_StateEducationAgencyId')
    PRINT '<<< CREATED INDEX edfi.StateEducationAgencyAccountability.FK_StateEducationAgencyAccountability_StateEducationAgency_StateEducationAgencyId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StateEducationAgencyAccountability.FK_StateEducationAgencyAccountability_StateEducationAgency_StateEducationAgencyId >>>'
go

/* 
 * INDEX: [FK_StateEducationAgencyFederalFunds_StateEducationAgency_StateEducationAgencyId] 
 */

CREATE INDEX [FK_StateEducationAgencyFederalFunds_StateEducationAgency_StateEducationAgencyId] ON [edfi].[StateEducationAgencyFederalFunds]([StateEducationAgencyId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StateEducationAgencyFederalFunds') AND name='FK_StateEducationAgencyFederalFunds_StateEducationAgency_StateEducationAgencyId')
    PRINT '<<< CREATED INDEX edfi.StateEducationAgencyFederalFunds.FK_StateEducationAgencyFederalFunds_StateEducationAgency_StateEducationAgencyId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StateEducationAgencyFederalFunds.FK_StateEducationAgencyFederalFunds_StateEducationAgency_StateEducationAgencyId >>>'
go

/* 
 * INDEX: [FK_Student_BirthCountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
 */

CREATE INDEX [FK_Student_BirthCountryDescriptorId_CountryDescriptor_CountryDescriptorId] ON [edfi].[Student]([BirthCountryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Student') AND name='FK_Student_BirthCountryDescriptorId_CountryDescriptor_CountryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.Student.FK_Student_BirthCountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Student.FK_Student_BirthCountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
go

/* 
 * INDEX: [FK_Student_CitizenshipStatusType_CitizenshipStatusTypeId] 
 */

CREATE INDEX [FK_Student_CitizenshipStatusType_CitizenshipStatusTypeId] ON [edfi].[Student]([CitizenshipStatusTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Student') AND name='FK_Student_CitizenshipStatusType_CitizenshipStatusTypeId')
    PRINT '<<< CREATED INDEX edfi.Student.FK_Student_CitizenshipStatusType_CitizenshipStatusTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Student.FK_Student_CitizenshipStatusType_CitizenshipStatusTypeId >>>'
go

/* 
 * INDEX: [FK_Student_LimitedEnglishProficiencyDescriptorId] 
 */

CREATE INDEX [FK_Student_LimitedEnglishProficiencyDescriptorId] ON [edfi].[Student]([LimitedEnglishProficiencyDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Student') AND name='FK_Student_LimitedEnglishProficiencyDescriptorId')
    PRINT '<<< CREATED INDEX edfi.Student.FK_Student_LimitedEnglishProficiencyDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Student.FK_Student_LimitedEnglishProficiencyDescriptorId >>>'
go

/* 
 * INDEX: [FK_Student_OldEthnicityType_OldEthnicityTypeId] 
 */

CREATE INDEX [FK_Student_OldEthnicityType_OldEthnicityTypeId] ON [edfi].[Student]([OldEthnicityTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Student') AND name='FK_Student_OldEthnicityType_OldEthnicityTypeId')
    PRINT '<<< CREATED INDEX edfi.Student.FK_Student_OldEthnicityType_OldEthnicityTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Student.FK_Student_OldEthnicityType_OldEthnicityTypeId >>>'
go

/* 
 * INDEX: [FK_Student_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityDescriptorId] 
 */

CREATE INDEX [FK_Student_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityDescriptorId] ON [edfi].[Student]([SchoolFoodServicesEligibilityDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Student') AND name='FK_Student_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityDescriptorId')
    PRINT '<<< CREATED INDEX edfi.Student.FK_Student_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Student.FK_Student_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityDescriptorId >>>'
go

/* 
 * INDEX: [FK_Student_SexType_SexTypeId] 
 */

CREATE INDEX [FK_Student_SexType_SexTypeId] ON [edfi].[Student]([SexTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Student') AND name='FK_Student_SexType_SexTypeId')
    PRINT '<<< CREATED INDEX edfi.Student.FK_Student_SexType_SexTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Student.FK_Student_SexType_SexTypeId >>>'
go

/* 
 * INDEX: [FK_Student_StateAbbreviationType_StateOfBirthAbbreviationTypeId] 
 */

CREATE INDEX [FK_Student_StateAbbreviationType_StateOfBirthAbbreviationTypeId] ON [edfi].[Student]([BirthStateAbbreviationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Student') AND name='FK_Student_StateAbbreviationType_StateOfBirthAbbreviationTypeId')
    PRINT '<<< CREATED INDEX edfi.Student.FK_Student_StateAbbreviationType_StateOfBirthAbbreviationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Student.FK_Student_StateAbbreviationType_StateOfBirthAbbreviationTypeId >>>'
go

/* 
 * INDEX: [IX_Student_StudentUniqueId] 
 */

CREATE UNIQUE NONCLUSTERED INDEX [IX_Student_StudentUniqueId] ON [edfi].[Student]([StudentUniqueId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.Student') AND name='IX_Student_StudentUniqueId')
    PRINT '<<< CREATED INDEX edfi.Student.IX_Student_StudentUniqueId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.Student.IX_Student_StudentUniqueId >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecord_CreditType_CumulativeAttemptedCreditTypeId] 
 */

CREATE INDEX [FK_StudentAcademicRecord_CreditType_CumulativeAttemptedCreditTypeId] ON [edfi].[StudentAcademicRecord]([CumulativeAttemptedCreditTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecord') AND name='FK_StudentAcademicRecord_CreditType_CumulativeAttemptedCreditTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_CreditType_CumulativeAttemptedCreditTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_CreditType_CumulativeAttemptedCreditTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecord_CreditType_CumulativeEarnedCreditTypeId] 
 */

CREATE INDEX [FK_StudentAcademicRecord_CreditType_CumulativeEarnedCreditTypeId] ON [edfi].[StudentAcademicRecord]([CumulativeEarnedCreditTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecord') AND name='FK_StudentAcademicRecord_CreditType_CumulativeEarnedCreditTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_CreditType_CumulativeEarnedCreditTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_CreditType_CumulativeEarnedCreditTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecord_CreditType_SessionAttemptedCreditTypeId] 
 */

CREATE INDEX [FK_StudentAcademicRecord_CreditType_SessionAttemptedCreditTypeId] ON [edfi].[StudentAcademicRecord]([SessionAttemptedCreditTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecord') AND name='FK_StudentAcademicRecord_CreditType_SessionAttemptedCreditTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_CreditType_SessionAttemptedCreditTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_CreditType_SessionAttemptedCreditTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecord_CreditType_SessionEarnedCreditTypeId] 
 */

CREATE INDEX [FK_StudentAcademicRecord_CreditType_SessionEarnedCreditTypeId] ON [edfi].[StudentAcademicRecord]([SessionEarnedCreditTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecord') AND name='FK_StudentAcademicRecord_CreditType_SessionEarnedCreditTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_CreditType_SessionEarnedCreditTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_CreditType_SessionEarnedCreditTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecord_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_StudentAcademicRecord_EducationOrganization_EducationOrganizationId] ON [edfi].[StudentAcademicRecord]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecord') AND name='FK_StudentAcademicRecord_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecord_SchoolYearType_SchoolYear] 
 */

CREATE INDEX [FK_StudentAcademicRecord_SchoolYearType_SchoolYear] ON [edfi].[StudentAcademicRecord]([SchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecord') AND name='FK_StudentAcademicRecord_SchoolYearType_SchoolYear')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_SchoolYearType_SchoolYear >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_SchoolYearType_SchoolYear >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecord_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentAcademicRecord_Student_StudentUSI] ON [edfi].[StudentAcademicRecord]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecord') AND name='FK_StudentAcademicRecord_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecord_TermDescriptor_TermDescriptorId] 
 */

CREATE INDEX [FK_StudentAcademicRecord_TermDescriptor_TermDescriptorId] ON [edfi].[StudentAcademicRecord]([TermDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecord') AND name='FK_StudentAcademicRecord_TermDescriptor_TermDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_TermDescriptor_TermDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecord.FK_StudentAcademicRecord_TermDescriptor_TermDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryType_AcademicHonorCategoryTypeId] 
 */

CREATE INDEX [FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryType_AcademicHonorCategoryTypeId] ON [edfi].[StudentAcademicRecordAcademicHonor]([AcademicHonorCategoryTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecordAcademicHonor') AND name='FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryType_AcademicHonorCategoryTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecordAcademicHonor.FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryType_AcademicHonorCategoryTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecordAcademicHonor.FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryType_AcademicHonorCategoryTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor_AchievementCategoryDescriptorId] 
 */

CREATE INDEX [FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor_AchievementCategoryDescriptorId] ON [edfi].[StudentAcademicRecordAcademicHonor]([AchievementCategoryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecordAcademicHonor') AND name='FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor_AchievementCategoryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecordAcademicHonor.FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor_AchievementCategoryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecordAcademicHonor.FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor_AchievementCategoryDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord_StudentUSI] 
 */

CREATE INDEX [FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord_StudentUSI] ON [edfi].[StudentAcademicRecordAcademicHonor]([SchoolYear], [EducationOrganizationId], [StudentUSI], [TermDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecordAcademicHonor') AND name='FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecordAcademicHonor.FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecordAcademicHonor.FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecordClassRanking_StudentAcademicRecord_StudentUSI] 
 */

CREATE INDEX [FK_StudentAcademicRecordClassRanking_StudentAcademicRecord_StudentUSI] ON [edfi].[StudentAcademicRecordClassRanking]([StudentUSI], [SchoolYear], [EducationOrganizationId], [TermDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecordClassRanking') AND name='FK_StudentAcademicRecordClassRanking_StudentAcademicRecord_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecordClassRanking.FK_StudentAcademicRecordClassRanking_StudentAcademicRecord_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecordClassRanking.FK_StudentAcademicRecordClassRanking_StudentAcademicRecord_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor_AchievementCategoryDescriptorId] 
 */

CREATE INDEX [FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor_AchievementCategoryDescriptorId] ON [edfi].[StudentAcademicRecordDiploma]([AchievementCategoryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecordDiploma') AND name='FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor_AchievementCategoryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor_AchievementCategoryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor_AchievementCategoryDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecordDiploma_DiplomaLevelType_DiplomaLevelTypeId] 
 */

CREATE INDEX [FK_StudentAcademicRecordDiploma_DiplomaLevelType_DiplomaLevelTypeId] ON [edfi].[StudentAcademicRecordDiploma]([DiplomaLevelTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecordDiploma') AND name='FK_StudentAcademicRecordDiploma_DiplomaLevelType_DiplomaLevelTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_DiplomaLevelType_DiplomaLevelTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_DiplomaLevelType_DiplomaLevelTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecordDiploma_DiplomaType_DiplomaTypeId] 
 */

CREATE INDEX [FK_StudentAcademicRecordDiploma_DiplomaType_DiplomaTypeId] ON [edfi].[StudentAcademicRecordDiploma]([DiplomaTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecordDiploma') AND name='FK_StudentAcademicRecordDiploma_DiplomaType_DiplomaTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_DiplomaType_DiplomaTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_DiplomaType_DiplomaTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecordDiploma_StudentAcademicRecord_StudentUSI] 
 */

CREATE INDEX [FK_StudentAcademicRecordDiploma_StudentAcademicRecord_StudentUSI] ON [edfi].[StudentAcademicRecordDiploma]([StudentUSI], [SchoolYear], [EducationOrganizationId], [TermDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecordDiploma') AND name='FK_StudentAcademicRecordDiploma_StudentAcademicRecord_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_StudentAcademicRecord_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecordDiploma.FK_StudentAcademicRecordDiploma_StudentAcademicRecord_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor_AchievementCategoryDescriptorId] 
 */

CREATE INDEX [FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor_AchievementCategoryDescriptorId] ON [edfi].[StudentAcademicRecordRecognition]([AchievementCategoryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecordRecognition') AND name='FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor_AchievementCategoryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecordRecognition.FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor_AchievementCategoryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecordRecognition.FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor_AchievementCategoryDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecordRecognition_RecognitionType_RecognitionTypeId] 
 */

CREATE INDEX [FK_StudentAcademicRecordRecognition_RecognitionType_RecognitionTypeId] ON [edfi].[StudentAcademicRecordRecognition]([RecognitionTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecordRecognition') AND name='FK_StudentAcademicRecordRecognition_RecognitionType_RecognitionTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecordRecognition.FK_StudentAcademicRecordRecognition_RecognitionType_RecognitionTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecordRecognition.FK_StudentAcademicRecordRecognition_RecognitionType_RecognitionTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecordRecognition_StudentAcademicRecord_StudentUSI] 
 */

CREATE INDEX [FK_StudentAcademicRecordRecognition_StudentAcademicRecord_StudentUSI] ON [edfi].[StudentAcademicRecordRecognition]([EducationOrganizationId], [StudentUSI], [SchoolYear], [TermDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecordRecognition') AND name='FK_StudentAcademicRecordRecognition_StudentAcademicRecord_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecordRecognition.FK_StudentAcademicRecordRecognition_StudentAcademicRecord_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecordRecognition.FK_StudentAcademicRecordRecognition_StudentAcademicRecord_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecordReportCard_ReportCard] 
 */

CREATE INDEX [FK_StudentAcademicRecordReportCard_ReportCard] ON [edfi].[StudentAcademicRecordReportCard]([StudentUSI], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecordReportCard') AND name='FK_StudentAcademicRecordReportCard_ReportCard')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecordReportCard.FK_StudentAcademicRecordReportCard_ReportCard >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecordReportCard.FK_StudentAcademicRecordReportCard_ReportCard >>>'
go

/* 
 * INDEX: [FK_StudentAcademicRecordReportCard_StudentAcademicRecord_StudentUSI] 
 */

CREATE INDEX [FK_StudentAcademicRecordReportCard_StudentAcademicRecord_StudentUSI] ON [edfi].[StudentAcademicRecordReportCard]([StudentUSI], [SchoolYear], [EducationOrganizationId], [TermDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAcademicRecordReportCard') AND name='FK_StudentAcademicRecordReportCard_StudentAcademicRecord_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentAcademicRecordReportCard.FK_StudentAcademicRecordReportCard_StudentAcademicRecord_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAcademicRecordReportCard.FK_StudentAcademicRecordReportCard_StudentAcademicRecord_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentAddress_AddressType_AddressTypeId] 
 */

CREATE INDEX [FK_StudentAddress_AddressType_AddressTypeId] ON [edfi].[StudentAddress]([AddressTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAddress') AND name='FK_StudentAddress_AddressType_AddressTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAddress.FK_StudentAddress_AddressType_AddressTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAddress.FK_StudentAddress_AddressType_AddressTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAddress_StateAbbreviationType_StateAbbreviationTypeId] 
 */

CREATE INDEX [FK_StudentAddress_StateAbbreviationType_StateAbbreviationTypeId] ON [edfi].[StudentAddress]([StateAbbreviationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAddress') AND name='FK_StudentAddress_StateAbbreviationType_StateAbbreviationTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAddress.FK_StudentAddress_StateAbbreviationType_StateAbbreviationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAddress.FK_StudentAddress_StateAbbreviationType_StateAbbreviationTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAddress_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentAddress_Student_StudentUSI] ON [edfi].[StudentAddress]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAddress') AND name='FK_StudentAddress_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentAddress.FK_StudentAddress_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAddress.FK_StudentAddress_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentAssessment_AdministrationEnvironmentType_AdministrationEnvironmentTypeId] 
 */

CREATE INDEX [FK_StudentAssessment_AdministrationEnvironmentType_AdministrationEnvironmentTypeId] ON [edfi].[StudentAssessment]([AdministrationEnvironmentTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessment') AND name='FK_StudentAssessment_AdministrationEnvironmentType_AdministrationEnvironmentTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessment.FK_StudentAssessment_AdministrationEnvironmentType_AdministrationEnvironmentTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessment.FK_StudentAssessment_AdministrationEnvironmentType_AdministrationEnvironmentTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAssessment_Assessment_AssessmentTitle] 
 */

CREATE INDEX [FK_StudentAssessment_Assessment_AssessmentTitle] ON [edfi].[StudentAssessment]([AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version], [AssessmentTitle])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessment') AND name='FK_StudentAssessment_Assessment_AssessmentTitle')
    PRINT '<<< CREATED INDEX edfi.StudentAssessment.FK_StudentAssessment_Assessment_AssessmentTitle >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessment.FK_StudentAssessment_Assessment_AssessmentTitle >>>'
go

/* 
 * INDEX: [FK_StudentAssessment_EventCircumstanceType_EventCircumstanceTypeId] 
 */

CREATE INDEX [FK_StudentAssessment_EventCircumstanceType_EventCircumstanceTypeId] ON [edfi].[StudentAssessment]([EventCircumstanceTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessment') AND name='FK_StudentAssessment_EventCircumstanceType_EventCircumstanceTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessment.FK_StudentAssessment_EventCircumstanceType_EventCircumstanceTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessment.FK_StudentAssessment_EventCircumstanceType_EventCircumstanceTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAssessment_LanguageDescriptor_AdministrationLanguageDescriptorId] 
 */

CREATE INDEX [FK_StudentAssessment_LanguageDescriptor_AdministrationLanguageDescriptorId] ON [edfi].[StudentAssessment]([AdministrationLanguageDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessment') AND name='FK_StudentAssessment_LanguageDescriptor_AdministrationLanguageDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessment.FK_StudentAssessment_LanguageDescriptor_AdministrationLanguageDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessment.FK_StudentAssessment_LanguageDescriptor_AdministrationLanguageDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentAssessment_ReasonNotTestedType_ReasonNotTestedTypeId] 
 */

CREATE INDEX [FK_StudentAssessment_ReasonNotTestedType_ReasonNotTestedTypeId] ON [edfi].[StudentAssessment]([ReasonNotTestedTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessment') AND name='FK_StudentAssessment_ReasonNotTestedType_ReasonNotTestedTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessment.FK_StudentAssessment_ReasonNotTestedType_ReasonNotTestedTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessment.FK_StudentAssessment_ReasonNotTestedType_ReasonNotTestedTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAssessment_RetestIndicatorType_RetestIndicatorTypeId] 
 */

CREATE INDEX [FK_StudentAssessment_RetestIndicatorType_RetestIndicatorTypeId] ON [edfi].[StudentAssessment]([RetestIndicatorTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessment') AND name='FK_StudentAssessment_RetestIndicatorType_RetestIndicatorTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessment.FK_StudentAssessment_RetestIndicatorType_RetestIndicatorTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessment.FK_StudentAssessment_RetestIndicatorType_RetestIndicatorTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAssessment_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentAssessment_Student_StudentUSI] ON [edfi].[StudentAssessment]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessment') AND name='FK_StudentAssessment_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentAssessment.FK_StudentAssessment_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessment.FK_StudentAssessment_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentAssessment_WhenAssessedGradeLevelDescriptorId] 
 */

CREATE INDEX [FK_StudentAssessment_WhenAssessedGradeLevelDescriptorId] ON [edfi].[StudentAssessment]([WhenAssessedGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessment') AND name='FK_StudentAssessment_WhenAssessedGradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessment.FK_StudentAssessment_WhenAssessedGradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessment.FK_StudentAssessment_WhenAssessedGradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentAccommodation_AccommodationDescriptor_AccommodationDescriptorId] 
 */

CREATE INDEX [FK_StudentAssessmentAccommodation_AccommodationDescriptor_AccommodationDescriptorId] ON [edfi].[StudentAssessmentAccommodation]([AccommodationDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentAccommodation') AND name='FK_StudentAssessmentAccommodation_AccommodationDescriptor_AccommodationDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentAccommodation.FK_StudentAssessmentAccommodation_AccommodationDescriptor_AccommodationDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentAccommodation.FK_StudentAssessmentAccommodation_AccommodationDescriptor_AccommodationDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentAccommodation_StudentAssessment_StudentUSI] 
 */

CREATE INDEX [FK_StudentAssessmentAccommodation_StudentAssessment_StudentUSI] ON [edfi].[StudentAssessmentAccommodation]([Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId], [StudentUSI], [AdministrationDate], [AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentAccommodation') AND name='FK_StudentAssessmentAccommodation_StudentAssessment_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentAccommodation.FK_StudentAssessmentAccommodation_StudentAssessment_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentAccommodation.FK_StudentAssessmentAccommodation_StudentAssessment_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentItem_AssessmentItem] 
 */

CREATE INDEX [FK_StudentAssessmentItem_AssessmentItem] ON [edfi].[StudentAssessmentItem]([AssessmentTitle], [AssessedGradeLevelDescriptorId], [IdentificationCode], [AcademicSubjectDescriptorId], [Version])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentItem') AND name='FK_StudentAssessmentItem_AssessmentItem')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentItem.FK_StudentAssessmentItem_AssessmentItem >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentItem.FK_StudentAssessmentItem_AssessmentItem >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentItem_AssessmentItemResultType_AssessmentItemResultTypeId] 
 */

CREATE INDEX [FK_StudentAssessmentItem_AssessmentItemResultType_AssessmentItemResultTypeId] ON [edfi].[StudentAssessmentItem]([AssessmentItemResultTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentItem') AND name='FK_StudentAssessmentItem_AssessmentItemResultType_AssessmentItemResultTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentItem.FK_StudentAssessmentItem_AssessmentItemResultType_AssessmentItemResultTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentItem.FK_StudentAssessmentItem_AssessmentItemResultType_AssessmentItemResultTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentItem_ResponseIndicatorType_ResponseIndicatorTypeId] 
 */

CREATE INDEX [FK_StudentAssessmentItem_ResponseIndicatorType_ResponseIndicatorTypeId] ON [edfi].[StudentAssessmentItem]([ResponseIndicatorTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentItem') AND name='FK_StudentAssessmentItem_ResponseIndicatorType_ResponseIndicatorTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentItem.FK_StudentAssessmentItem_ResponseIndicatorType_ResponseIndicatorTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentItem.FK_StudentAssessmentItem_ResponseIndicatorType_ResponseIndicatorTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentItem_StudentAssessment_StudentUSI] 
 */

CREATE INDEX [FK_StudentAssessmentItem_StudentAssessment_StudentUSI] ON [edfi].[StudentAssessmentItem]([AdministrationDate], [AcademicSubjectDescriptorId], [Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId], [StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentItem') AND name='FK_StudentAssessmentItem_StudentAssessment_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentItem.FK_StudentAssessmentItem_StudentAssessment_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentItem.FK_StudentAssessmentItem_StudentAssessment_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId] 
 */

CREATE INDEX [FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId] ON [edfi].[StudentAssessmentPerformanceLevel]([PerformanceLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentPerformanceLevel') AND name='FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentPerformanceLevel.FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentPerformanceLevel.FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentPerformanceLevel_StudentAssessment_StudentUSI] 
 */

CREATE INDEX [FK_StudentAssessmentPerformanceLevel_StudentAssessment_StudentUSI] ON [edfi].[StudentAssessmentPerformanceLevel]([Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId], [StudentUSI], [AdministrationDate], [AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentPerformanceLevel') AND name='FK_StudentAssessmentPerformanceLevel_StudentAssessment_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentPerformanceLevel.FK_StudentAssessmentPerformanceLevel_StudentAssessment_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentPerformanceLevel.FK_StudentAssessmentPerformanceLevel_StudentAssessment_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentScoreResult_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] 
 */

CREATE INDEX [FK_StudentAssessmentScoreResult_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] ON [edfi].[StudentAssessmentScoreResult]([AssessmentReportingMethodTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentScoreResult') AND name='FK_StudentAssessmentScoreResult_AssessmentReportingMethodType_AssessmentReportingMethodTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentScoreResult.FK_StudentAssessmentScoreResult_AssessmentReportingMethodType_AssessmentReportingMethodTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentScoreResult.FK_StudentAssessmentScoreResult_AssessmentReportingMethodType_AssessmentReportingMethodTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentScoreResult_ResultDatatypeType_ResultDatatypeTypeId] 
 */

CREATE INDEX [FK_StudentAssessmentScoreResult_ResultDatatypeType_ResultDatatypeTypeId] ON [edfi].[StudentAssessmentScoreResult]([ResultDatatypeTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentScoreResult') AND name='FK_StudentAssessmentScoreResult_ResultDatatypeType_ResultDatatypeTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentScoreResult.FK_StudentAssessmentScoreResult_ResultDatatypeType_ResultDatatypeTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentScoreResult.FK_StudentAssessmentScoreResult_ResultDatatypeType_ResultDatatypeTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentScoreResult_StudentAssessment_StudentUSI] 
 */

CREATE INDEX [FK_StudentAssessmentScoreResult_StudentAssessment_StudentUSI] ON [edfi].[StudentAssessmentScoreResult]([AssessmentTitle], [AssessedGradeLevelDescriptorId], [StudentUSI], [AdministrationDate], [AcademicSubjectDescriptorId], [Version])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentScoreResult') AND name='FK_StudentAssessmentScoreResult_StudentAssessment_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentScoreResult.FK_StudentAssessmentScoreResult_StudentAssessment_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentScoreResult.FK_StudentAssessmentScoreResult_StudentAssessment_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment] 
 */

CREATE INDEX [FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment] ON [edfi].[StudentAssessmentStudentObjectiveAssessment]([IdentificationCode], [AcademicSubjectDescriptorId], [Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentStudentObjectiveAssessment') AND name='FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentStudentObjectiveAssessment.FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentStudentObjectiveAssessment.FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment_StudentUSI] 
 */

CREATE INDEX [FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment_StudentUSI] ON [edfi].[StudentAssessmentStudentObjectiveAssessment]([Version], [AssessmentTitle], [AssessedGradeLevelDescriptorId], [StudentUSI], [AdministrationDate], [AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentStudentObjectiveAssessment') AND name='FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentStudentObjectiveAssessment.FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentStudentObjectiveAssessment.FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId] 
 */

CREATE INDEX [FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId] ON [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel]([PerformanceLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentStudentObjectiveAssessmentPerformanceLevel') AND name='FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentStudentObjectiveAssessmentPerformanceLevel.FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentStudentObjectiveAssessmentPerformanceLevel.FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment] 
 */

CREATE INDEX [FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment] ON [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel]([Version], [AssessmentTitle], [AdministrationDate], [AssessedGradeLevelDescriptorId], [StudentUSI], [IdentificationCode], [AcademicSubjectDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentStudentObjectiveAssessmentPerformanceLevel') AND name='FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentStudentObjectiveAssessmentPerformanceLevel.FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentStudentObjectiveAssessmentPerformanceLevel.FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentObjectiveAssessment] 
 */

CREATE INDEX [FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentObjectiveAssessment] ON [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult]([AssessmentTitle], [AdministrationDate], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [StudentUSI], [IdentificationCode], [Version])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentStudentObjectiveAssessmentScoreResult') AND name='FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentObjectiveAssessment')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentStudentObjectiveAssessmentScoreResult.FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentObjectiveAssessment >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentStudentObjectiveAssessmentScoreResult.FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentObjectiveAssessment >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentStudentObjectiveAssessmentScoreResults_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] 
 */

CREATE INDEX [FK_StudentAssessmentStudentObjectiveAssessmentScoreResults_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] ON [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult]([AssessmentReportingMethodTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentStudentObjectiveAssessmentScoreResult') AND name='FK_StudentAssessmentStudentObjectiveAssessmentScoreResults_AssessmentReportingMethodType_AssessmentReportingMethodTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentStudentObjectiveAssessmentScoreResult.FK_StudentAssessmentStudentObjectiveAssessmentScoreResults_AssessmentReportingMethodType_AssessmentReportingMethodTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentStudentObjectiveAssessmentScoreResult.FK_StudentAssessmentStudentObjectiveAssessmentScoreResults_AssessmentReportingMethodType_AssessmentReportingMethodTypeId >>>'
go

/* 
 * INDEX: [FK_StudentAssessmentStudentObjectiveAssessmentScoreResults_ResultDatatypeType_ResultDatatypeTypeId] 
 */

CREATE INDEX [FK_StudentAssessmentStudentObjectiveAssessmentScoreResults_ResultDatatypeType_ResultDatatypeTypeId] ON [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult]([ResultDatatypeTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentAssessmentStudentObjectiveAssessmentScoreResult') AND name='FK_StudentAssessmentStudentObjectiveAssessmentScoreResults_ResultDatatypeType_ResultDatatypeTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentAssessmentStudentObjectiveAssessmentScoreResult.FK_StudentAssessmentStudentObjectiveAssessmentScoreResults_ResultDatatypeType_ResultDatatypeTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentAssessmentStudentObjectiveAssessmentScoreResult.FK_StudentAssessmentStudentObjectiveAssessmentScoreResults_ResultDatatypeType_ResultDatatypeTypeId >>>'
go

/* 
 * INDEX: [FK_StudentCharacteristic_StudentCharacteristicDescriptorId] 
 */

CREATE INDEX [FK_StudentCharacteristic_StudentCharacteristicDescriptorId] ON [edfi].[StudentCharacteristic]([StudentCharacteristicDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCharacteristic') AND name='FK_StudentCharacteristic_StudentCharacteristicDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentCharacteristic.FK_StudentCharacteristic_StudentCharacteristicDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCharacteristic.FK_StudentCharacteristic_StudentCharacteristicDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentCharacteristics_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentCharacteristics_Student_StudentUSI] ON [edfi].[StudentCharacteristic]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCharacteristic') AND name='FK_StudentCharacteristics_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentCharacteristic.FK_StudentCharacteristics_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCharacteristic.FK_StudentCharacteristics_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentCharacteristicDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_StudentCharacteristicDescriptor_Descriptor_DescriptorId] ON [edfi].[StudentCharacteristicDescriptor]([StudentCharacteristicDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCharacteristicDescriptor') AND name='FK_StudentCharacteristicDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentCharacteristicDescriptor.FK_StudentCharacteristicDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCharacteristicDescriptor.FK_StudentCharacteristicDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentCharacteristicDescriptor_StudentCharacteristicType_StudentCharacteristicTypeId] 
 */

CREATE INDEX [FK_StudentCharacteristicDescriptor_StudentCharacteristicType_StudentCharacteristicTypeId] ON [edfi].[StudentCharacteristicDescriptor]([StudentCharacteristicTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCharacteristicDescriptor') AND name='FK_StudentCharacteristicDescriptor_StudentCharacteristicType_StudentCharacteristicTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentCharacteristicDescriptor.FK_StudentCharacteristicDescriptor_StudentCharacteristicType_StudentCharacteristicTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCharacteristicDescriptor.FK_StudentCharacteristicDescriptor_StudentCharacteristicType_StudentCharacteristicTypeId >>>'
go

/* 
 * INDEX: [FK_StudentCohortAssociation_Cohort_EducationOrganizationId] 
 */

CREATE INDEX [FK_StudentCohortAssociation_Cohort_EducationOrganizationId] ON [edfi].[StudentCohortAssociation]([CohortIdentifier], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCohortAssociation') AND name='FK_StudentCohortAssociation_Cohort_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.StudentCohortAssociation.FK_StudentCohortAssociation_Cohort_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCohortAssociation.FK_StudentCohortAssociation_Cohort_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_StudentCohortAssociation_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentCohortAssociation_Student_StudentUSI] ON [edfi].[StudentCohortAssociation]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCohortAssociation') AND name='FK_StudentCohortAssociation_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentCohortAssociation.FK_StudentCohortAssociation_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCohortAssociation.FK_StudentCohortAssociation_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentCohortAssociationSection_Section_LocalCourseCode] 
 */

CREATE INDEX [FK_StudentCohortAssociationSection_Section_LocalCourseCode] ON [edfi].[StudentCohortAssociationSection]([ClassroomIdentificationCode], [ClassPeriodName], [SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCohortAssociationSection') AND name='FK_StudentCohortAssociationSection_Section_LocalCourseCode')
    PRINT '<<< CREATED INDEX edfi.StudentCohortAssociationSection.FK_StudentCohortAssociationSection_Section_LocalCourseCode >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCohortAssociationSection.FK_StudentCohortAssociationSection_Section_LocalCourseCode >>>'
go

/* 
 * INDEX: [FK_StudentCohortAssociationSection_StudentCohortAssociation_StudentUSI] 
 */

CREATE INDEX [FK_StudentCohortAssociationSection_StudentCohortAssociation_StudentUSI] ON [edfi].[StudentCohortAssociationSection]([StudentUSI], [CohortIdentifier], [EducationOrganizationId], [BeginDate])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCohortAssociationSection') AND name='FK_StudentCohortAssociationSection_StudentCohortAssociation_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentCohortAssociationSection.FK_StudentCohortAssociationSection_StudentCohortAssociation_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCohortAssociationSection.FK_StudentCohortAssociationSection_StudentCohortAssociation_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentCohortYears_CohortYearType_CohortYearTypeId] 
 */

CREATE INDEX [FK_StudentCohortYears_CohortYearType_CohortYearTypeId] ON [edfi].[StudentCohortYear]([CohortYearTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCohortYear') AND name='FK_StudentCohortYears_CohortYearType_CohortYearTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentCohortYear.FK_StudentCohortYears_CohortYearType_CohortYearTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCohortYear.FK_StudentCohortYears_CohortYearType_CohortYearTypeId >>>'
go

/* 
 * INDEX: [FK_StudentCohortYears_SchoolYearType_SchoolYear] 
 */

CREATE INDEX [FK_StudentCohortYears_SchoolYearType_SchoolYear] ON [edfi].[StudentCohortYear]([SchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCohortYear') AND name='FK_StudentCohortYears_SchoolYearType_SchoolYear')
    PRINT '<<< CREATED INDEX edfi.StudentCohortYear.FK_StudentCohortYears_SchoolYearType_SchoolYear >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCohortYear.FK_StudentCohortYears_SchoolYearType_SchoolYear >>>'
go

/* 
 * INDEX: [FK_StudentCohortYears_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentCohortYears_Student_StudentUSI] ON [edfi].[StudentCohortYear]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCohortYear') AND name='FK_StudentCohortYears_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentCohortYear.FK_StudentCohortYears_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCohortYear.FK_StudentCohortYears_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentCompetencyObjective_CompetencyLevelDescriptor_CompetencyLevelDescriptorId] 
 */

CREATE INDEX [FK_StudentCompetencyObjective_CompetencyLevelDescriptor_CompetencyLevelDescriptorId] ON [edfi].[StudentCompetencyObjective]([CompetencyLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCompetencyObjective') AND name='FK_StudentCompetencyObjective_CompetencyLevelDescriptor_CompetencyLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentCompetencyObjective.FK_StudentCompetencyObjective_CompetencyLevelDescriptor_CompetencyLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCompetencyObjective.FK_StudentCompetencyObjective_CompetencyLevelDescriptor_CompetencyLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentCompetencyObjective_CompetencyObjective_Objective] 
 */

CREATE INDEX [FK_StudentCompetencyObjective_CompetencyObjective_Objective] ON [edfi].[StudentCompetencyObjective]([ObjectiveGradeLevelDescriptorId], [Objective], [ObjectiveEducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCompetencyObjective') AND name='FK_StudentCompetencyObjective_CompetencyObjective_Objective')
    PRINT '<<< CREATED INDEX edfi.StudentCompetencyObjective.FK_StudentCompetencyObjective_CompetencyObjective_Objective >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCompetencyObjective.FK_StudentCompetencyObjective_CompetencyObjective_Objective >>>'
go

/* 
 * INDEX: [FK_StudentCompetencyObjective_GradingPeriod] 
 */

CREATE NONCLUSTERED INDEX [FK_StudentCompetencyObjective_GradingPeriod]
    ON [edfi].[StudentCompetencyObjective]([GradingPeriodBeginDate] ASC, [GradingPeriodDescriptorId] ASC, [SchoolId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCompetencyObjective') AND name='FK_StudentCompetencyObjective_GradingPeriod')
    PRINT '<<< CREATED INDEX edfi.StudentCompetencyObjective.FK_StudentCompetencyObjective_GradingPeriod >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCompetencyObjective.FK_StudentCompetencyObjective_GradingPeriod >>>'
go

/* 
 * INDEX: [FK_StudentCompetencyObjective_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentCompetencyObjective_Student_StudentUSI] ON [edfi].[StudentCompetencyObjective]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCompetencyObjective') AND name='FK_StudentCompetencyObjective_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentCompetencyObjective.FK_StudentCompetencyObjective_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCompetencyObjective.FK_StudentCompetencyObjective_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentCompetencyObjective_StudentProgramAssociation] 
 */

CREATE INDEX [FK_StudentCompetencyObjective_StudentProgramAssociation] ON [edfi].[StudentCompetencyObjective]([ProgramTypeId], [ProgramEducationOrganizationId], [StudentUSI], [EducationOrganizationId], [ProgramName])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCompetencyObjective') AND name='FK_StudentCompetencyObjective_StudentProgramAssociation')
    PRINT '<<< CREATED INDEX edfi.StudentCompetencyObjective.FK_StudentCompetencyObjective_StudentProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCompetencyObjective.FK_StudentCompetencyObjective_StudentProgramAssociation >>>'
go

/* 
 * INDEX: [FK_StudentCompetencyObjective_StudentSectionAssociation] 
 */

CREATE INDEX [FK_StudentCompetencyObjective_StudentSectionAssociation] ON [edfi].[StudentCompetencyObjective]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCompetencyObjective') AND name='FK_StudentCompetencyObjective_StudentSectionAssociation')
    PRINT '<<< CREATED INDEX edfi.StudentCompetencyObjective.FK_StudentCompetencyObjective_StudentSectionAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCompetencyObjective.FK_StudentCompetencyObjective_StudentSectionAssociation >>>'
go

/* 
 * INDEX: [FK_StudentCTEProgramAssociation_StudentProgramAssociation] 
 */

CREATE INDEX [FK_StudentCTEProgramAssociation_StudentProgramAssociation] ON [edfi].[StudentCTEProgramAssociation]([StudentUSI], [EducationOrganizationId], [ProgramName], [BeginDate], [ProgramTypeId], [ProgramEducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCTEProgramAssociation') AND name='FK_StudentCTEProgramAssociation_StudentProgramAssociation')
    PRINT '<<< CREATED INDEX edfi.StudentCTEProgramAssociation.FK_StudentCTEProgramAssociation_StudentProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCTEProgramAssociation.FK_StudentCTEProgramAssociation_StudentProgramAssociation >>>'
go

/* 
 * INDEX: [FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayType_CareerPathwayTypeId] 
 */

CREATE INDEX [FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayType_CareerPathwayTypeId] ON [edfi].[StudentCTEProgramAssociationCTEProgram]([CareerPathwayTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCTEProgramAssociationCTEProgram') AND name='FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayType_CareerPathwayTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentCTEProgramAssociationCTEProgram.FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayType_CareerPathwayTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCTEProgramAssociationCTEProgram.FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayType_CareerPathwayTypeId >>>'
go

/* 
 * INDEX: [FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation] 
 */

CREATE INDEX [FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation] ON [edfi].[StudentCTEProgramAssociationCTEProgram]([ProgramEducationOrganizationId], [StudentUSI], [EducationOrganizationId], [ProgramName], [BeginDate], [ProgramTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentCTEProgramAssociationCTEProgram') AND name='FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation')
    PRINT '<<< CREATED INDEX edfi.StudentCTEProgramAssociationCTEProgram.FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentCTEProgramAssociationCTEProgram.FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation >>>'
go

/* 
 * INDEX: [FK_StudentDisability_DisabilityDescriptor_DisabilityDescriptorId] 
 */

CREATE INDEX [FK_StudentDisability_DisabilityDescriptor_DisabilityDescriptorId] ON [edfi].[StudentDisability]([DisabilityDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentDisability') AND name='FK_StudentDisability_DisabilityDescriptor_DisabilityDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentDisability.FK_StudentDisability_DisabilityDescriptor_DisabilityDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentDisability.FK_StudentDisability_DisabilityDescriptor_DisabilityDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentDisability_DisabilityDeterminationSourceType_DisabilityDeterminationSourceTypeId] 
 */

CREATE NONCLUSTERED INDEX [FK_StudentDisability_DisabilityDeterminationSourceType_DisabilityDeterminationSourceTypeId]
    ON [edfi].[StudentDisability]([DisabilityDeterminationSourceTypeId] ASC);
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentDisability') AND name='FK_StudentDisability_DisabilityDeterminationSourceType_DisabilityDeterminationSourceTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentDisability.FK_StudentDisability_DisabilityDeterminationSourceType_DisabilityDeterminationSourceTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentDisability.FK_StudentDisability_DisabilityDeterminationSourceType_DisabilityDeterminationSourceTypeId >>>'
go

/* 
 * INDEX: [FK_StudentDisability_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentDisability_Student_StudentUSI] ON [edfi].[StudentDisability]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentDisability') AND name='FK_StudentDisability_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentDisability.FK_StudentDisability_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentDisability.FK_StudentDisability_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentDisciplineIncidentAssociation_DisciplineIncident_SchoolId] 
 */

CREATE INDEX [FK_StudentDisciplineIncidentAssociation_DisciplineIncident_SchoolId] ON [edfi].[StudentDisciplineIncidentAssociation]([IncidentIdentifier], [SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentDisciplineIncidentAssociation') AND name='FK_StudentDisciplineIncidentAssociation_DisciplineIncident_SchoolId')
    PRINT '<<< CREATED INDEX edfi.StudentDisciplineIncidentAssociation.FK_StudentDisciplineIncidentAssociation_DisciplineIncident_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentDisciplineIncidentAssociation.FK_StudentDisciplineIncidentAssociation_DisciplineIncident_SchoolId >>>'
go

/* 
 * INDEX: [FK_StudentDisciplineIncidentAssociation_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentDisciplineIncidentAssociation_Student_StudentUSI] ON [edfi].[StudentDisciplineIncidentAssociation]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentDisciplineIncidentAssociation') AND name='FK_StudentDisciplineIncidentAssociation_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentDisciplineIncidentAssociation.FK_StudentDisciplineIncidentAssociation_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentDisciplineIncidentAssociation.FK_StudentDisciplineIncidentAssociation_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeType_StudentParticipationCodeTypeId] 
 */

CREATE INDEX [FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeType_StudentParticipationCodeTypeId] ON [edfi].[StudentDisciplineIncidentAssociation]([StudentParticipationCodeTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentDisciplineIncidentAssociation') AND name='FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeType_StudentParticipationCodeTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentDisciplineIncidentAssociation.FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeType_StudentParticipationCodeTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentDisciplineIncidentAssociation.FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeType_StudentParticipationCodeTypeId >>>'
go

/* 
 * INDEX: [FK_StudentDisciplineIncidentBehavior_BehaviorDescriptor_BehaviorDescriptorId] 
 */

CREATE INDEX [FK_StudentDisciplineIncidentBehavior_BehaviorDescriptor_BehaviorDescriptorId] ON [edfi].[StudentDisciplineIncidentAssociationBehavior]([BehaviorDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentDisciplineIncidentAssociationBehavior') AND name='FK_StudentDisciplineIncidentBehavior_BehaviorDescriptor_BehaviorDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentDisciplineIncidentAssociationBehavior.FK_StudentDisciplineIncidentBehavior_BehaviorDescriptor_BehaviorDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentDisciplineIncidentAssociationBehavior.FK_StudentDisciplineIncidentBehavior_BehaviorDescriptor_BehaviorDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentDisciplineIncidentBehavior_StudentDisciplineIncidentAssociation_StudentUSI] 
 */

CREATE INDEX [FK_StudentDisciplineIncidentBehavior_StudentDisciplineIncidentAssociation_StudentUSI] ON [edfi].[StudentDisciplineIncidentAssociationBehavior]([SchoolId], [StudentUSI], [IncidentIdentifier])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentDisciplineIncidentAssociationBehavior') AND name='FK_StudentDisciplineIncidentBehavior_StudentDisciplineIncidentAssociation_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentDisciplineIncidentAssociationBehavior.FK_StudentDisciplineIncidentBehavior_StudentDisciplineIncidentAssociation_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentDisciplineIncidentAssociationBehavior.FK_StudentDisciplineIncidentBehavior_StudentDisciplineIncidentAssociation_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentEducationOrganizationAssociation_ResponsibilityDescriptor_ResponsibilityDescriptorId] 
 */

CREATE INDEX [FK_StudentEducationOrganizationAssociation_ResponsibilityDescriptor_ResponsibilityDescriptorId] ON [edfi].[StudentEducationOrganizationAssociation]([ResponsibilityDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentEducationOrganizationAssociation') AND name='FK_StudentEducationOrganizationAssociation_ResponsibilityDescriptor_ResponsibilityDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentEducationOrganizationAssociation.FK_StudentEducationOrganizationAssociation_ResponsibilityDescriptor_ResponsibilityDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentEducationOrganizationAssociation.FK_StudentEducationOrganizationAssociation_ResponsibilityDescriptor_ResponsibilityDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentEducationOrganizationAssociation_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentEducationOrganizationAssociation_Student_StudentUSI] ON [edfi].[StudentEducationOrganizationAssociation]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentEducationOrganizationAssociation') AND name='FK_StudentEducationOrganizationAssociation_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentEducationOrganizationAssociation.FK_StudentEducationOrganizationAssociation_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentEducationOrganizationAssociation.FK_StudentEducationOrganizationAssociation_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentEducationOrganizationAssociation_EducationOrganization_EducationOrganizationId] 
 */

CREATE INDEX [FK_StudentEducationOrganizationAssociation_EducationOrganization_EducationOrganizationId] ON [edfi].[StudentEducationOrganizationAssociation]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentEducationOrganizationAssociation') AND name='FK_StudentEducationOrganizationAssociation_EducationOrganization_EducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.StudentEducationOrganizationAssociation.FK_StudentEducationOrganizationAssociation_EducationOrganization_EducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentEducationOrganizationAssociation.FK_StudentEducationOrganizationAssociation_EducationOrganization_EducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_StudentElectronicMail_ElectronicMailType_ElectronicMailTypeId] 
 */

CREATE INDEX [FK_StudentElectronicMail_ElectronicMailType_ElectronicMailTypeId] ON [edfi].[StudentElectronicMail]([ElectronicMailTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentElectronicMail') AND name='FK_StudentElectronicMail_ElectronicMailType_ElectronicMailTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentElectronicMail.FK_StudentElectronicMail_ElectronicMailType_ElectronicMailTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentElectronicMail.FK_StudentElectronicMail_ElectronicMailType_ElectronicMailTypeId >>>'
go

/* 
 * INDEX: [FK_StudentElectronicMail_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentElectronicMail_Student_StudentUSI] ON [edfi].[StudentElectronicMail]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentElectronicMail') AND name='FK_StudentElectronicMail_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentElectronicMail.FK_StudentElectronicMail_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentElectronicMail.FK_StudentElectronicMail_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentGradebookEntry_CompetencyLevelDescriptor_CompetencyLevelDescriptorId] 
 */

CREATE INDEX [FK_StudentGradebookEntry_CompetencyLevelDescriptor_CompetencyLevelDescriptorId] ON [edfi].[StudentGradebookEntry]([CompetencyLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentGradebookEntry') AND name='FK_StudentGradebookEntry_CompetencyLevelDescriptor_CompetencyLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentGradebookEntry.FK_StudentGradebookEntry_CompetencyLevelDescriptor_CompetencyLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentGradebookEntry.FK_StudentGradebookEntry_CompetencyLevelDescriptor_CompetencyLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentGradebookEntry_GradebookEntry_SchoolId] 
 */

CREATE INDEX [FK_StudentGradebookEntry_GradebookEntry_SchoolId] ON [edfi].[StudentGradebookEntry]([ClassroomIdentificationCode], [DateAssigned], [ClassPeriodName], [GradebookEntryTitle], [SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentGradebookEntry') AND name='FK_StudentGradebookEntry_GradebookEntry_SchoolId')
    PRINT '<<< CREATED INDEX edfi.StudentGradebookEntry.FK_StudentGradebookEntry_GradebookEntry_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentGradebookEntry.FK_StudentGradebookEntry_GradebookEntry_SchoolId >>>'
go

/* 
 * INDEX: [FK_StudentGradebookEntry_StudentSectionAssociation_StudentUSI] 
 */

CREATE INDEX [FK_StudentGradebookEntry_StudentSectionAssociation_StudentUSI] ON [edfi].[StudentGradebookEntry]([StudentUSI], [ClassPeriodName], [BeginDate], [SchoolId], [ClassroomIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentGradebookEntry') AND name='FK_StudentGradebookEntry_StudentSectionAssociation_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentGradebookEntry.FK_StudentGradebookEntry_StudentSectionAssociation_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentGradebookEntry.FK_StudentGradebookEntry_StudentSectionAssociation_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentIdentificationCode_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentIdentificationCode_Student_StudentUSI] ON [edfi].[StudentIdentificationCode]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentIdentificationCode') AND name='FK_StudentIdentificationCode_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentIdentificationCode.FK_StudentIdentificationCode_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentIdentificationCode.FK_StudentIdentificationCode_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentIdentificationCode_StudentIdentificationSystemDescriptor_DescriptorId] 
 */

CREATE INDEX [FK_StudentIdentificationCode_StudentIdentificationSystemDescriptor_DescriptorId] ON [edfi].[StudentIdentificationCode]([StudentIdentificationSystemDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentIdentificationCode') AND name='FK_StudentIdentificationCode_StudentIdentificationSystemDescriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentIdentificationCode.FK_StudentIdentificationCode_StudentIdentificationSystemDescriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentIdentificationCode.FK_StudentIdentificationCode_StudentIdentificationSystemDescriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId] 
 */

CREATE INDEX [FK_StudentIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId] ON [edfi].[StudentIdentificationDocument]([IdentificationDocumentUseTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentIdentificationDocument') AND name='FK_StudentIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentIdentificationDocument.FK_StudentIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentIdentificationDocument.FK_StudentIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId >>>'
go

/* 
 * INDEX: [FK_StudentIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
 */

CREATE INDEX [FK_StudentIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId] ON [edfi].[StudentIdentificationDocument]([IssuerCountryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentIdentificationDocument') AND name='FK_StudentIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentIdentificationDocument.FK_StudentIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentIdentificationDocument.FK_StudentIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId] 
 */

CREATE INDEX [FK_StudentIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId] ON [edfi].[StudentIdentificationDocument]([PersonalInformationVerificationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentIdentificationDocument') AND name='FK_StudentIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentIdentificationDocument.FK_StudentIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentIdentificationDocument.FK_StudentIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId >>>'
go

/* 
 * INDEX: [FK_StudentIdentificationDocument_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentIdentificationDocument_Student_StudentUSI] ON [edfi].[StudentIdentificationDocument]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentIdentificationDocument') AND name='FK_StudentIdentificationDocument_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentIdentificationDocument.FK_StudentIdentificationDocument_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentIdentificationDocument.FK_StudentIdentificationDocument_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentIdentificationSystemDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_StudentIdentificationSystemDescriptor_Descriptor_DescriptorId] ON [edfi].[StudentIdentificationSystemDescriptor]([StudentIdentificationSystemDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentIdentificationSystemDescriptor') AND name='FK_StudentIdentificationSystemDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentIdentificationSystemDescriptor.FK_StudentIdentificationSystemDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentIdentificationSystemDescriptor.FK_StudentIdentificationSystemDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentIdentificationSystemDescriptor_StudentIdentificationSystemType_StudentIdentificationSystemTypeId] 
 */

CREATE INDEX [FK_StudentIdentificationSystemDescriptor_StudentIdentificationSystemType_StudentIdentificationSystemTypeId] ON [edfi].[StudentIdentificationSystemDescriptor]([StudentIdentificationSystemTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentIdentificationSystemDescriptor') AND name='FK_StudentIdentificationSystemDescriptor_StudentIdentificationSystemType_StudentIdentificationSystemTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentIdentificationSystemDescriptor.FK_StudentIdentificationSystemDescriptor_StudentIdentificationSystemType_StudentIdentificationSystemTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentIdentificationSystemDescriptor.FK_StudentIdentificationSystemDescriptor_StudentIdentificationSystemType_StudentIdentificationSystemTypeId >>>'
go

/* 
 * INDEX: [FK_StudentIndicator_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentIndicator_Student_StudentUSI] ON [edfi].[StudentIndicator]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentIndicator') AND name='FK_StudentIndicator_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentIndicator.FK_StudentIndicator_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentIndicator.FK_StudentIndicator_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentInternationalAddress_AddressType_AddressTypeId] 
 */

CREATE INDEX [FK_StudentInternationalAddress_AddressType_AddressTypeId] ON [edfi].[StudentInternationalAddress]([AddressTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInternationalAddress') AND name='FK_StudentInternationalAddress_AddressType_AddressTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentInternationalAddress.FK_StudentInternationalAddress_AddressType_AddressTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInternationalAddress.FK_StudentInternationalAddress_AddressType_AddressTypeId >>>'
go

/* 
 * INDEX: [FK_StudentInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
 */

CREATE INDEX [FK_StudentInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId] ON [edfi].[StudentInternationalAddress]([CountryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInternationalAddress') AND name='FK_StudentInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentInternationalAddress.FK_StudentInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInternationalAddress.FK_StudentInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentInternationalAddress_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentInternationalAddress_Student_StudentUSI] ON [edfi].[StudentInternationalAddress]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInternationalAddress') AND name='FK_StudentInternationalAddress_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentInternationalAddress.FK_StudentInternationalAddress_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInternationalAddress.FK_StudentInternationalAddress_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentInterventionAssociation_Cohort_CohortEducationOrganizationId] 
 */

CREATE INDEX [FK_StudentInterventionAssociation_Cohort_CohortEducationOrganizationId] ON [edfi].[StudentInterventionAssociation]([CohortIdentifier], [CohortEducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInterventionAssociation') AND name='FK_StudentInterventionAssociation_Cohort_CohortEducationOrganizationId')
    PRINT '<<< CREATED INDEX edfi.StudentInterventionAssociation.FK_StudentInterventionAssociation_Cohort_CohortEducationOrganizationId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInterventionAssociation.FK_StudentInterventionAssociation_Cohort_CohortEducationOrganizationId >>>'
go

/* 
 * INDEX: [FK_StudentInterventionAssociation_Intervention] 
 */

CREATE INDEX [FK_StudentInterventionAssociation_Intervention] ON [edfi].[StudentInterventionAssociation]([EducationOrganizationId], [InterventionIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInterventionAssociation') AND name='FK_StudentInterventionAssociation_Intervention')
    PRINT '<<< CREATED INDEX edfi.StudentInterventionAssociation.FK_StudentInterventionAssociation_Intervention >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInterventionAssociation.FK_StudentInterventionAssociation_Intervention >>>'
go

/* 
 * INDEX: [FK_StudentInterventionAssociation_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentInterventionAssociation_Student_StudentUSI] ON [edfi].[StudentInterventionAssociation]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInterventionAssociation') AND name='FK_StudentInterventionAssociation_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentInterventionAssociation.FK_StudentInterventionAssociation_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInterventionAssociation.FK_StudentInterventionAssociation_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptorId] 
 */

CREATE INDEX [FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptorId] ON [edfi].[StudentInterventionAssociationInterventionEffectiveness]([DiagnosisDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInterventionAssociationInterventionEffectiveness') AND name='FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptorId] 
 */

CREATE INDEX [FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptorId] ON [edfi].[StudentInterventionAssociationInterventionEffectiveness]([GradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInterventionAssociationInterventionEffectiveness') AND name='FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingType] 
 */

CREATE INDEX [FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingType] ON [edfi].[StudentInterventionAssociationInterventionEffectiveness]([InterventionEffectivenessRatingTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInterventionAssociationInterventionEffectiveness') AND name='FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingType')
    PRINT '<<< CREATED INDEX edfi.StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingType >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingType >>>'
go

/* 
 * INDEX: [FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedType_PopulationServedTypeId] 
 */

CREATE INDEX [FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedType_PopulationServedTypeId] ON [edfi].[StudentInterventionAssociationInterventionEffectiveness]([PopulationServedTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInterventionAssociationInterventionEffectiveness') AND name='FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedType_PopulationServedTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedType_PopulationServedTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedType_PopulationServedTypeId >>>'
go

/* 
 * INDEX: [FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation] 
 */

CREATE INDEX [FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation] ON [edfi].[StudentInterventionAssociationInterventionEffectiveness]([EducationOrganizationId], [InterventionIdentificationCode], [StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInterventionAssociationInterventionEffectiveness') AND name='FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation')
    PRINT '<<< CREATED INDEX edfi.StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInterventionAssociationInterventionEffectiveness.FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation >>>'
go

/* 
 * INDEX: [FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptorId] 
 */

CREATE INDEX [FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptorId] ON [edfi].[StudentInterventionAttendanceEvent]([AttendanceEventCategoryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInterventionAttendanceEvent') AND name='FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentInterventionAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] 
 */

CREATE INDEX [FK_StudentInterventionAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] ON [edfi].[StudentInterventionAttendanceEvent]([EducationalEnvironmentTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInterventionAttendanceEvent') AND name='FK_StudentInterventionAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId >>>'
go

/* 
 * INDEX: [FK_StudentInterventionAttendanceEvent_Intervention] 
 */

CREATE INDEX [FK_StudentInterventionAttendanceEvent_Intervention] ON [edfi].[StudentInterventionAttendanceEvent]([EducationOrganizationId], [InterventionIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInterventionAttendanceEvent') AND name='FK_StudentInterventionAttendanceEvent_Intervention')
    PRINT '<<< CREATED INDEX edfi.StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_Intervention >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_Intervention >>>'
go

/* 
 * INDEX: [FK_StudentInterventionAttendanceEvent_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentInterventionAttendanceEvent_Student_StudentUSI] ON [edfi].[StudentInterventionAttendanceEvent]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentInterventionAttendanceEvent') AND name='FK_StudentInterventionAttendanceEvent_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentInterventionAttendanceEvent.FK_StudentInterventionAttendanceEvent_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentLanguages_LanguageDescriptor_LanguageDescriptorId] 
 */

CREATE INDEX [FK_StudentLanguages_LanguageDescriptor_LanguageDescriptorId] ON [edfi].[StudentLanguage]([LanguageDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentLanguage') AND name='FK_StudentLanguages_LanguageDescriptor_LanguageDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentLanguage.FK_StudentLanguages_LanguageDescriptor_LanguageDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentLanguage.FK_StudentLanguages_LanguageDescriptor_LanguageDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentLanguages_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentLanguages_Student_StudentUSI] ON [edfi].[StudentLanguage]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentLanguage') AND name='FK_StudentLanguages_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentLanguage.FK_StudentLanguages_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentLanguage.FK_StudentLanguages_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentLanguageUse_LanguageUseType_LanguageUseTypeId] 
 */

CREATE INDEX [FK_StudentLanguageUse_LanguageUseType_LanguageUseTypeId] ON [edfi].[StudentLanguageUse]([LanguageUseTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentLanguageUse') AND name='FK_StudentLanguageUse_LanguageUseType_LanguageUseTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentLanguageUse.FK_StudentLanguageUse_LanguageUseType_LanguageUseTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentLanguageUse.FK_StudentLanguageUse_LanguageUseType_LanguageUseTypeId >>>'
go

/* 
 * INDEX: [FK_StudentLanguageUse_StudentLanguages_StudentUSI] 
 */

CREATE INDEX [FK_StudentLanguageUse_StudentLanguages_StudentUSI] ON [edfi].[StudentLanguageUse]([StudentUSI], [LanguageDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentLanguageUse') AND name='FK_StudentLanguageUse_StudentLanguages_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentLanguageUse.FK_StudentLanguageUse_StudentLanguages_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentLanguageUse.FK_StudentLanguageUse_StudentLanguages_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentLearningObjective_CompetencyLevelDescriptor_CompetencyLevelDescriptorId] 
 */

CREATE INDEX [FK_StudentLearningObjective_CompetencyLevelDescriptor_CompetencyLevelDescriptorId] ON [edfi].[StudentLearningObjective]([CompetencyLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentLearningObjective') AND name='FK_StudentLearningObjective_CompetencyLevelDescriptor_CompetencyLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentLearningObjective.FK_StudentLearningObjective_CompetencyLevelDescriptor_CompetencyLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentLearningObjective.FK_StudentLearningObjective_CompetencyLevelDescriptor_CompetencyLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentLearningObjective_GradingPeriod_SchoolId] 
 */

CREATE NONCLUSTERED INDEX [FK_StudentLearningObjective_GradingPeriod_SchoolId]
    ON [edfi].[StudentLearningObjective]([GradingPeriodBeginDate] ASC, [GradingPeriodDescriptorId] ASC, [SchoolId] ASC)
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentLearningObjective') AND name='FK_StudentLearningObjective_GradingPeriod_SchoolId')
    PRINT '<<< CREATED INDEX edfi.StudentLearningObjective.FK_StudentLearningObjective_GradingPeriod_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentLearningObjective.FK_StudentLearningObjective_GradingPeriod_SchoolId >>>'
go

/* 
 * INDEX: [FK_StudentLearningObjective_LearningObjective_Objective] 
 */

CREATE INDEX [FK_StudentLearningObjective_LearningObjective_Objective] ON [edfi].[StudentLearningObjective]([AcademicSubjectDescriptorId], [Objective], [ObjectiveGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentLearningObjective') AND name='FK_StudentLearningObjective_LearningObjective_Objective')
    PRINT '<<< CREATED INDEX edfi.StudentLearningObjective.FK_StudentLearningObjective_LearningObjective_Objective >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentLearningObjective.FK_StudentLearningObjective_LearningObjective_Objective >>>'
go

/* 
 * INDEX: [FK_StudentLearningObjective_StudentProgramAssociation] 
 */

CREATE INDEX [FK_StudentLearningObjective_StudentProgramAssociation] ON [edfi].[StudentLearningObjective]([ProgramTypeId], [ProgramEducationOrganizationId], [StudentUSI], [EducationOrganizationId], [ProgramName], [GradingPeriodBeginDate])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentLearningObjective') AND name='FK_StudentLearningObjective_StudentProgramAssociation')
    PRINT '<<< CREATED INDEX edfi.StudentLearningObjective.FK_StudentLearningObjective_StudentProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentLearningObjective.FK_StudentLearningObjective_StudentProgramAssociation >>>'
go

/* 
 * INDEX: [FK_StudentLearningObjective_StudentSectionAssociation_StudentUSI] 
 */

CREATE INDEX [FK_StudentLearningObjective_StudentSectionAssociation_StudentUSI] ON [edfi].[StudentLearningObjective]([StudentUSI], [ClassPeriodName], [GradingPeriodBeginDate], [ClassroomIdentificationCode])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentLearningObjective') AND name='FK_StudentLearningObjective_StudentSectionAssociation_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentLearningObjective.FK_StudentLearningObjective_StudentSectionAssociation_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentLearningObjective.FK_StudentLearningObjective_StudentSectionAssociation_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentLearningObjective_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentLearningObjective_Student_StudentUSI] ON [edfi].[StudentLearningObjective]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentLearningObjective') AND name='FK_StudentLearningObjective_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentLearningObjective.FK_StudentLearningObjective_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentLearningObjective.FK_StudentLearningObjective_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentLearningObjective_GradingPeriod] 
 */

CREATE INDEX [FK_StudentLearningObjective_GradingPeriod] ON [edfi].[StudentLearningObjective]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentLearningObjective') AND name='FK_StudentLearningObjective_GradingPeriod')
    PRINT '<<< CREATED INDEX edfi.StudentLearningObjective.FK_StudentLearningObjective_GradingPeriod >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentLearningObjective.FK_StudentLearningObjective_GradingPeriod >>>'
go

/* 
 * INDEX: [FK_StudentLearningStyle_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentLearningStyle_Student_StudentUSI] ON [edfi].[StudentLearningStyle]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentLearningStyle') AND name='FK_StudentLearningStyle_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentLearningStyle.FK_StudentLearningStyle_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentLearningStyle.FK_StudentLearningStyle_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptorId] 
 */

CREATE INDEX [FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptorId] ON [edfi].[StudentMigrantEducationProgramAssociation]([ContinuationOfServicesReasonDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentMigrantEducationProgramAssociation') AND name='FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentMigrantEducationProgramAssociation.FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentMigrantEducationProgramAssociation.FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentMigrantEducationProgramAssociation_StudentProgramAssociation] 
 */

CREATE INDEX [FK_StudentMigrantEducationProgramAssociation_StudentProgramAssociation] ON [edfi].[StudentMigrantEducationProgramAssociation]([ProgramEducationOrganizationId], [StudentUSI], [EducationOrganizationId], [ProgramName], [BeginDate], [ProgramTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentMigrantEducationProgramAssociation') AND name='FK_StudentMigrantEducationProgramAssociation_StudentProgramAssociation')
    PRINT '<<< CREATED INDEX edfi.StudentMigrantEducationProgramAssociation.FK_StudentMigrantEducationProgramAssociation_StudentProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentMigrantEducationProgramAssociation.FK_StudentMigrantEducationProgramAssociation_StudentProgramAssociation >>>'
go

/* 
 * INDEX: [FK_StudentOtherName_OtherNameType_OtherNameTypeId] 
 */

CREATE INDEX [FK_StudentOtherName_OtherNameType_OtherNameTypeId] ON [edfi].[StudentOtherName]([OtherNameTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentOtherName') AND name='FK_StudentOtherName_OtherNameType_OtherNameTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentOtherName.FK_StudentOtherName_OtherNameType_OtherNameTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentOtherName.FK_StudentOtherName_OtherNameType_OtherNameTypeId >>>'
go

/* 
 * INDEX: [FK_StudentOtherName_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentOtherName_Student_StudentUSI] ON [edfi].[StudentOtherName]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentOtherName') AND name='FK_StudentOtherName_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentOtherName.FK_StudentOtherName_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentOtherName.FK_StudentOtherName_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentParentAssociation_Parent_ParentUSI] 
 */

CREATE INDEX [FK_StudentParentAssociation_Parent_ParentUSI] ON [edfi].[StudentParentAssociation]([ParentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentParentAssociation') AND name='FK_StudentParentAssociation_Parent_ParentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentParentAssociation.FK_StudentParentAssociation_Parent_ParentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentParentAssociation.FK_StudentParentAssociation_Parent_ParentUSI >>>'
go

/* 
 * INDEX: [FK_StudentParentAssociation_RelationType_RelationTypeId] 
 */

CREATE INDEX [FK_StudentParentAssociation_RelationType_RelationTypeId] ON [edfi].[StudentParentAssociation]([RelationTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentParentAssociation') AND name='FK_StudentParentAssociation_RelationType_RelationTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentParentAssociation.FK_StudentParentAssociation_RelationType_RelationTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentParentAssociation.FK_StudentParentAssociation_RelationType_RelationTypeId >>>'
go

/* 
 * INDEX: [FK_StudentParentAssociation_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentParentAssociation_Student_StudentUSI] ON [edfi].[StudentParentAssociation]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentParentAssociation') AND name='FK_StudentParentAssociation_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentParentAssociation.FK_StudentParentAssociation_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentParentAssociation.FK_StudentParentAssociation_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentProgramAssociation_EducationOrganization] 
 */

CREATE INDEX [FK_StudentProgramAssociation_EducationOrganization] ON [edfi].[StudentProgramAssociation]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramAssociation') AND name='FK_StudentProgramAssociation_EducationOrganization')
    PRINT '<<< CREATED INDEX edfi.StudentProgramAssociation.FK_StudentProgramAssociation_EducationOrganization >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramAssociation.FK_StudentProgramAssociation_EducationOrganization >>>'
go

/* 
 * INDEX: [FK_StudentProgramAssociation_Program] 
 */

CREATE INDEX [FK_StudentProgramAssociation_Program] ON [edfi].[StudentProgramAssociation]([ProgramTypeId], [ProgramEducationOrganizationId], [ProgramName])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramAssociation') AND name='FK_StudentProgramAssociation_Program')
    PRINT '<<< CREATED INDEX edfi.StudentProgramAssociation.FK_StudentProgramAssociation_Program >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramAssociation.FK_StudentProgramAssociation_Program >>>'
go

/* 
 * INDEX: [FK_StudentProgramAssociation_ReasonExitedDescriptor_ReasonExitedDescriptorId] 
 */

CREATE INDEX [FK_StudentProgramAssociation_ReasonExitedDescriptor_ReasonExitedDescriptorId] ON [edfi].[StudentProgramAssociation]([ReasonExitedDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramAssociation') AND name='FK_StudentProgramAssociation_ReasonExitedDescriptor_ReasonExitedDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentProgramAssociation.FK_StudentProgramAssociation_ReasonExitedDescriptor_ReasonExitedDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramAssociation.FK_StudentProgramAssociation_ReasonExitedDescriptor_ReasonExitedDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentProgramAssociation_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentProgramAssociation_Student_StudentUSI] ON [edfi].[StudentProgramAssociation]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramAssociation') AND name='FK_StudentProgramAssociation_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentProgramAssociation.FK_StudentProgramAssociation_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramAssociation.FK_StudentProgramAssociation_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentProgramAssociationService_ServiceDescriptor_ServiceDescriptorId] 
 */

CREATE INDEX [FK_StudentProgramAssociationService_ServiceDescriptor_ServiceDescriptorId] ON [edfi].[StudentProgramAssociationService]([ServiceDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramAssociationService') AND name='FK_StudentProgramAssociationService_ServiceDescriptor_ServiceDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentProgramAssociationService.FK_StudentProgramAssociationService_ServiceDescriptor_ServiceDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramAssociationService.FK_StudentProgramAssociationService_ServiceDescriptor_ServiceDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentProgramAssociationService_StudentProgramAssociation] 
 */

CREATE INDEX [FK_StudentProgramAssociationService_StudentProgramAssociation] ON [edfi].[StudentProgramAssociationService]([ProgramName], [BeginDate], [ProgramTypeId], [ProgramEducationOrganizationId], [StudentUSI], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramAssociationService') AND name='FK_StudentProgramAssociationService_StudentProgramAssociation')
    PRINT '<<< CREATED INDEX edfi.StudentProgramAssociationService.FK_StudentProgramAssociationService_StudentProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramAssociationService.FK_StudentProgramAssociationService_StudentProgramAssociation >>>'
go

/* 
 * INDEX: [FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptorId] 
 */

CREATE INDEX [FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptorId] ON [edfi].[StudentProgramAttendanceEvent]([AttendanceEventCategoryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramAttendanceEvent') AND name='FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentProgramAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] 
 */

CREATE INDEX [FK_StudentProgramAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] ON [edfi].[StudentProgramAttendanceEvent]([EducationalEnvironmentTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramAttendanceEvent') AND name='FK_StudentProgramAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId >>>'
go

/* 
 * INDEX: [FK_StudentProgramAttendanceEvent_EducationOrganization] 
 */

CREATE INDEX [FK_StudentProgramAttendanceEvent_EducationOrganization] ON [edfi].[StudentProgramAttendanceEvent]([EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramAttendanceEvent') AND name='FK_StudentProgramAttendanceEvent_EducationOrganization')
    PRINT '<<< CREATED INDEX edfi.StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_EducationOrganization >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_EducationOrganization >>>'
go

/* 
 * INDEX: [FK_StudentProgramAttendanceEvent_Program_ProgramTypeId] 
 */

CREATE INDEX [FK_StudentProgramAttendanceEvent_Program_ProgramTypeId] ON [edfi].[StudentProgramAttendanceEvent]([ProgramEducationOrganizationId], [ProgramName], [ProgramTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramAttendanceEvent') AND name='FK_StudentProgramAttendanceEvent_Program_ProgramTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_Program_ProgramTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_Program_ProgramTypeId >>>'
go

/* 
 * INDEX: [FK_StudentProgramAttendanceEvent_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentProgramAttendanceEvent_Student_StudentUSI] ON [edfi].[StudentProgramAttendanceEvent]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramAttendanceEvent') AND name='FK_StudentProgramAttendanceEvent_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramAttendanceEvent.FK_StudentProgramAttendanceEvent_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentProgramParticipations_ProgramType_ProgramTypeId] 
 */

CREATE INDEX [FK_StudentProgramParticipations_ProgramType_ProgramTypeId] ON [edfi].[StudentProgramParticipation]([ProgramTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramParticipation') AND name='FK_StudentProgramParticipations_ProgramType_ProgramTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentProgramParticipation.FK_StudentProgramParticipations_ProgramType_ProgramTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramParticipation.FK_StudentProgramParticipations_ProgramType_ProgramTypeId >>>'
go

/* 
 * INDEX: [FK_StudentProgramParticipations_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentProgramParticipations_Student_StudentUSI] ON [edfi].[StudentProgramParticipation]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramParticipation') AND name='FK_StudentProgramParticipations_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentProgramParticipation.FK_StudentProgramParticipations_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramParticipation.FK_StudentProgramParticipations_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor_ProgramCharacteristicDescriptorId] 
 */

CREATE INDEX [FK_StudentProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor_ProgramCharacteristicDescriptorId] ON [edfi].[StudentProgramParticipationProgramCharacteristic]([ProgramCharacteristicDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramParticipationProgramCharacteristic') AND name='FK_StudentProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor_ProgramCharacteristicDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentProgramParticipationProgramCharacteristic.FK_StudentProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor_ProgramCharacteristicDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramParticipationProgramCharacteristic.FK_StudentProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor_ProgramCharacteristicDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentProgramParticipationProgramCharacteristic_StudentProgramParticipation_ProgramTypeId] 
 */

CREATE INDEX [FK_StudentProgramParticipationProgramCharacteristic_StudentProgramParticipation_ProgramTypeId] ON [edfi].[StudentProgramParticipationProgramCharacteristic]([ProgramTypeId], [StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentProgramParticipationProgramCharacteristic') AND name='FK_StudentProgramParticipationProgramCharacteristic_StudentProgramParticipation_ProgramTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentProgramParticipationProgramCharacteristic.FK_StudentProgramParticipationProgramCharacteristic_StudentProgramParticipation_ProgramTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentProgramParticipationProgramCharacteristic.FK_StudentProgramParticipationProgramCharacteristic_StudentProgramParticipation_ProgramTypeId >>>'
go

/* 
 * INDEX: [FK_StudentRace_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentRace_Student_StudentUSI] ON [edfi].[StudentRace]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentRace') AND name='FK_StudentRace_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentRace.FK_StudentRace_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentRace.FK_StudentRace_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentRace_RaceType_RaceTypeId] 
 */

CREATE INDEX [FK_StudentRace_RaceType_RaceTypeId] ON [edfi].[StudentRace]([RaceTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentRace') AND name='FK_StudentRace_RaceType_RaceTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentRace.FK_StudentRace_RaceType_RaceTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentRace.FK_StudentRace_RaceType_RaceTypeId >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAssociation_EntryGradeLevelDescriptorId] 
 */

CREATE INDEX [FK_StudentSchoolAssociation_EntryGradeLevelDescriptorId] ON [edfi].[StudentSchoolAssociation]([EntryGradeLevelDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAssociation') AND name='FK_StudentSchoolAssociation_EntryGradeLevelDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_EntryGradeLevelDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_EntryGradeLevelDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAssociation_EntryGradeLevelReasonType_EntryGradeLevelReasonTypeId] 
 */

CREATE INDEX [FK_StudentSchoolAssociation_EntryGradeLevelReasonType_EntryGradeLevelReasonTypeId] ON [edfi].[StudentSchoolAssociation]([EntryGradeLevelReasonTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAssociation') AND name='FK_StudentSchoolAssociation_EntryGradeLevelReasonType_EntryGradeLevelReasonTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_EntryGradeLevelReasonType_EntryGradeLevelReasonTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_EntryGradeLevelReasonType_EntryGradeLevelReasonTypeId >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAssociation_EntryTypeDescriptor_EntryTypeDescriptorId] 
 */

CREATE INDEX [FK_StudentSchoolAssociation_EntryTypeDescriptor_EntryTypeDescriptorId] ON [edfi].[StudentSchoolAssociation]([EntryTypeDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAssociation') AND name='FK_StudentSchoolAssociation_EntryTypeDescriptor_EntryTypeDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_EntryTypeDescriptor_EntryTypeDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_EntryTypeDescriptor_EntryTypeDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor_ExitWithdrawTypeDescriptorId] 
 */

CREATE INDEX [FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor_ExitWithdrawTypeDescriptorId] ON [edfi].[StudentSchoolAssociation]([ExitWithdrawTypeDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAssociation') AND name='FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor_ExitWithdrawTypeDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor_ExitWithdrawTypeDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor_ExitWithdrawTypeDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAssociation_GraduationPlan] 
 */

CREATE INDEX [FK_StudentSchoolAssociation_GraduationPlan] ON [edfi].[StudentSchoolAssociation]([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAssociation') AND name='FK_StudentSchoolAssociation_GraduationPlan')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_GraduationPlan >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_GraduationPlan >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAssociation_ResidencyStatusDescriptor_ResidencyStatusDescriptorId] 
 */

CREATE INDEX [FK_StudentSchoolAssociation_ResidencyStatusDescriptor_ResidencyStatusDescriptorId] ON [edfi].[StudentSchoolAssociation]([ResidencyStatusDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAssociation') AND name='FK_StudentSchoolAssociation_ResidencyStatusDescriptor_ResidencyStatusDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_ResidencyStatusDescriptor_ResidencyStatusDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_ResidencyStatusDescriptor_ResidencyStatusDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAssociation_School_SchoolId] 
 */

CREATE INDEX [FK_StudentSchoolAssociation_School_SchoolId] ON [edfi].[StudentSchoolAssociation]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAssociation') AND name='FK_StudentSchoolAssociation_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAssociation_SchoolYearType_ClassOfSchoolYear] 
 */

CREATE INDEX [FK_StudentSchoolAssociation_SchoolYearType_ClassOfSchoolYear] ON [edfi].[StudentSchoolAssociation]([ClassOfSchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAssociation') AND name='FK_StudentSchoolAssociation_SchoolYearType_ClassOfSchoolYear')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_SchoolYearType_ClassOfSchoolYear >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_SchoolYearType_ClassOfSchoolYear >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAssociation_SchoolYearType_SchoolYear] 
 */

CREATE INDEX [FK_StudentSchoolAssociation_SchoolYearType_SchoolYear] ON [edfi].[StudentSchoolAssociation]([SchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAssociation') AND name='FK_StudentSchoolAssociation_SchoolYearType_SchoolYear')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_SchoolYearType_SchoolYear >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_SchoolYearType_SchoolYear >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAssociation_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentSchoolAssociation_Student_StudentUSI] ON [edfi].[StudentSchoolAssociation]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAssociation') AND name='FK_StudentSchoolAssociation_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAssociation.FK_StudentSchoolAssociation_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAssociationEducationPlans_EducationPlansType_EducationPlansTypeId] 
 */

CREATE INDEX [FK_StudentSchoolAssociationEducationPlans_EducationPlansType_EducationPlansTypeId] ON [edfi].[StudentSchoolAssociationEducationPlan]([EducationPlanTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAssociationEducationPlan') AND name='FK_StudentSchoolAssociationEducationPlans_EducationPlansType_EducationPlansTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAssociationEducationPlan.FK_StudentSchoolAssociationEducationPlans_EducationPlansType_EducationPlansTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAssociationEducationPlan.FK_StudentSchoolAssociationEducationPlans_EducationPlansType_EducationPlansTypeId >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAssociationEducationPlans_StudentSchoolAssociation_StudentUSI] 
 */

CREATE INDEX [FK_StudentSchoolAssociationEducationPlans_StudentSchoolAssociation_StudentUSI] ON [edfi].[StudentSchoolAssociationEducationPlan]([SchoolId], [StudentUSI], [EntryDate])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAssociationEducationPlan') AND name='FK_StudentSchoolAssociationEducationPlans_StudentSchoolAssociation_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAssociationEducationPlan.FK_StudentSchoolAssociationEducationPlans_StudentSchoolAssociation_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAssociationEducationPlan.FK_StudentSchoolAssociationEducationPlans_StudentSchoolAssociation_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptorId] 
 */

CREATE INDEX [FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptorId] ON [edfi].[StudentSchoolAttendanceEvent]([AttendanceEventCategoryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAttendanceEvent') AND name='FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] 
 */

CREATE INDEX [FK_StudentSchoolAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] ON [edfi].[StudentSchoolAttendanceEvent]([EducationalEnvironmentTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAttendanceEvent') AND name='FK_StudentSchoolAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAttendanceEvent_School_SchoolId] 
 */

CREATE INDEX [FK_StudentSchoolAttendanceEvent_School_SchoolId] ON [edfi].[StudentSchoolAttendanceEvent]([SchoolId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAttendanceEvent') AND name='FK_StudentSchoolAttendanceEvent_School_SchoolId')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_School_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_School_SchoolId >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAttendanceEvent_Session_SchoolId] 
 */

CREATE INDEX [FK_StudentSchoolAttendanceEvent_Session_SchoolId] ON [edfi].[StudentSchoolAttendanceEvent]([TermDescriptorId], [SchoolId], [SchoolYear])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAttendanceEvent') AND name='FK_StudentSchoolAttendanceEvent_Session_SchoolId')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_Session_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_Session_SchoolId >>>'
go

/* 
 * INDEX: [FK_StudentSchoolAttendanceEvent_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentSchoolAttendanceEvent_Student_StudentUSI] ON [edfi].[StudentSchoolAttendanceEvent]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSchoolAttendanceEvent') AND name='FK_StudentSchoolAttendanceEvent_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSchoolAttendanceEvent.FK_StudentSchoolAttendanceEvent_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentSectionAssociation_RepeatIdentifierType_RepeatIdentifierTypeId] 
 */

CREATE INDEX [FK_StudentSectionAssociation_RepeatIdentifierType_RepeatIdentifierTypeId] ON [edfi].[StudentSectionAssociation]([RepeatIdentifierTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSectionAssociation') AND name='FK_StudentSectionAssociation_RepeatIdentifierType_RepeatIdentifierTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentSectionAssociation.FK_StudentSectionAssociation_RepeatIdentifierType_RepeatIdentifierTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSectionAssociation.FK_StudentSectionAssociation_RepeatIdentifierType_RepeatIdentifierTypeId >>>'
go

/* 
 * INDEX: [FK_StudentSectionAssociation_Section_SchoolId] 
 */

CREATE INDEX [FK_StudentSectionAssociation_Section_SchoolId] ON [edfi].[StudentSectionAssociation]([SchoolId], [ClassroomIdentificationCode], [ClassPeriodName])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSectionAssociation') AND name='FK_StudentSectionAssociation_Section_SchoolId')
    PRINT '<<< CREATED INDEX edfi.StudentSectionAssociation.FK_StudentSectionAssociation_Section_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSectionAssociation.FK_StudentSectionAssociation_Section_SchoolId >>>'
go

/* 
 * INDEX: [FK_StudentSectionAssociation_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentSectionAssociation_Student_StudentUSI] ON [edfi].[StudentSectionAssociation]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSectionAssociation') AND name='FK_StudentSectionAssociation_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentSectionAssociation.FK_StudentSectionAssociation_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSectionAssociation.FK_StudentSectionAssociation_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptorId] 
 */

CREATE INDEX [FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptorId] ON [edfi].[StudentSectionAttendanceEvent]([AttendanceEventCategoryDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSectionAttendanceEvent') AND name='FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentSectionAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] 
 */

CREATE INDEX [FK_StudentSectionAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] ON [edfi].[StudentSectionAttendanceEvent]([EducationalEnvironmentTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSectionAttendanceEvent') AND name='FK_StudentSectionAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId >>>'
go

/* 
 * INDEX: [FK_StudentSectionAttendanceEvent_Section_SchoolId] 
 */

CREATE INDEX [FK_StudentSectionAttendanceEvent_Section_SchoolId] ON [edfi].[StudentSectionAttendanceEvent]([SchoolId], [ClassroomIdentificationCode], [ClassPeriodName])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSectionAttendanceEvent') AND name='FK_StudentSectionAttendanceEvent_Section_SchoolId')
    PRINT '<<< CREATED INDEX edfi.StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_Section_SchoolId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_Section_SchoolId >>>'
go

/* 
 * INDEX: [FK_StudentSectionAttendanceEvent_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentSectionAttendanceEvent_Student_StudentUSI] ON [edfi].[StudentSectionAttendanceEvent]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSectionAttendanceEvent') AND name='FK_StudentSectionAttendanceEvent_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSectionAttendanceEvent.FK_StudentSectionAttendanceEvent_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor_SpecialEducationSettingDescriptorId] 
 */

CREATE INDEX [FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor_SpecialEducationSettingDescriptorId] ON [edfi].[StudentSpecialEducationProgramAssociation]([SpecialEducationSettingDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSpecialEducationProgramAssociation') AND name='FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor_SpecialEducationSettingDescriptorId')
    PRINT '<<< CREATED INDEX edfi.StudentSpecialEducationProgramAssociation.FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor_SpecialEducationSettingDescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSpecialEducationProgramAssociation.FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor_SpecialEducationSettingDescriptorId >>>'
go

/* 
 * INDEX: [FK_StudentSpecialEducationProgramAssociation_StudentProgramAssociation] 
 */

CREATE INDEX [FK_StudentSpecialEducationProgramAssociation_StudentProgramAssociation] ON [edfi].[StudentSpecialEducationProgramAssociation]([BeginDate], [ProgramTypeId], [ProgramEducationOrganizationId], [StudentUSI], [EducationOrganizationId], [ProgramName])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSpecialEducationProgramAssociation') AND name='FK_StudentSpecialEducationProgramAssociation_StudentProgramAssociation')
    PRINT '<<< CREATED INDEX edfi.StudentSpecialEducationProgramAssociation.FK_StudentSpecialEducationProgramAssociation_StudentProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSpecialEducationProgramAssociation.FK_StudentSpecialEducationProgramAssociation_StudentProgramAssociation >>>'
go

/* 
 * INDEX: [FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff_StaffUSI] 
 */

CREATE INDEX [FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff_StaffUSI] ON [edfi].[StudentSpecialEducationProgramAssociationServiceProvider]([StaffUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSpecialEducationProgramAssociationServiceProvider') AND name='FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff_StaffUSI')
    PRINT '<<< CREATED INDEX edfi.StudentSpecialEducationProgramAssociationServiceProvider.FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff_StaffUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSpecialEducationProgramAssociationServiceProvider.FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff_StaffUSI >>>'
go

/* 
 * INDEX: [FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation] 
 */

CREATE INDEX [FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation] ON [edfi].[StudentSpecialEducationProgramAssociationServiceProvider]([StudentUSI], [ProgramName], [BeginDate], [ProgramTypeId], [ProgramEducationOrganizationId], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentSpecialEducationProgramAssociationServiceProvider') AND name='FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation')
    PRINT '<<< CREATED INDEX edfi.StudentSpecialEducationProgramAssociationServiceProvider.FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentSpecialEducationProgramAssociationServiceProvider.FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation >>>'
go

/* 
 * INDEX: [FK_StudentTelephone_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentTelephone_Student_StudentUSI] ON [edfi].[StudentTelephone]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentTelephone') AND name='FK_StudentTelephone_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentTelephone.FK_StudentTelephone_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentTelephone.FK_StudentTelephone_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentTelephone_TelephoneNumberType_TelephoneNumberTypeId] 
 */

CREATE INDEX [FK_StudentTelephone_TelephoneNumberType_TelephoneNumberTypeId] ON [edfi].[StudentTelephone]([TelephoneNumberTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentTelephone') AND name='FK_StudentTelephone_TelephoneNumberType_TelephoneNumberTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentTelephone.FK_StudentTelephone_TelephoneNumberType_TelephoneNumberTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentTelephone.FK_StudentTelephone_TelephoneNumberType_TelephoneNumberTypeId >>>'
go

/* 
 * INDEX: [FK_StudentTitleIPartAProgramAssociation_StudentProgramAssociation] 
 */

CREATE INDEX [FK_StudentTitleIPartAProgramAssociation_StudentProgramAssociation] ON [edfi].[StudentTitleIPartAProgramAssociation]([ProgramName], [BeginDate], [ProgramTypeId], [ProgramEducationOrganizationId], [StudentUSI], [EducationOrganizationId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentTitleIPartAProgramAssociation') AND name='FK_StudentTitleIPartAProgramAssociation_StudentProgramAssociation')
    PRINT '<<< CREATED INDEX edfi.StudentTitleIPartAProgramAssociation.FK_StudentTitleIPartAProgramAssociation_StudentProgramAssociation >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentTitleIPartAProgramAssociation.FK_StudentTitleIPartAProgramAssociation_StudentProgramAssociation >>>'
go

/* 
 * INDEX: [FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantType_TitleIPartAParticipantTypeId] 
 */

CREATE INDEX [FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantType_TitleIPartAParticipantTypeId] ON [edfi].[StudentTitleIPartAProgramAssociation]([TitleIPartAParticipantTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentTitleIPartAProgramAssociation') AND name='FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantType_TitleIPartAParticipantTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentTitleIPartAProgramAssociation.FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantType_TitleIPartAParticipantTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentTitleIPartAProgramAssociation.FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantType_TitleIPartAParticipantTypeId >>>'
go

/* 
 * INDEX: [FK_StudentVisa_Student_StudentUSI] 
 */

CREATE INDEX [FK_StudentVisa_Student_StudentUSI] ON [edfi].[StudentVisa]([StudentUSI])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentVisa') AND name='FK_StudentVisa_Student_StudentUSI')
    PRINT '<<< CREATED INDEX edfi.StudentVisa.FK_StudentVisa_Student_StudentUSI >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentVisa.FK_StudentVisa_Student_StudentUSI >>>'
go

/* 
 * INDEX: [FK_StudentVisa_VisaType_VisaTypeId] 
 */

CREATE INDEX [FK_StudentVisa_VisaType_VisaTypeId] ON [edfi].[StudentVisa]([VisaTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.StudentVisa') AND name='FK_StudentVisa_VisaType_VisaTypeId')
    PRINT '<<< CREATED INDEX edfi.StudentVisa.FK_StudentVisa_VisaType_VisaTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.StudentVisa.FK_StudentVisa_VisaType_VisaTypeId >>>'
go

/* 
 * INDEX: [FK_TeachingCredentialDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_TeachingCredentialDescriptor_Descriptor_DescriptorId] ON [edfi].[TeachingCredentialDescriptor]([TeachingCredentialDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.TeachingCredentialDescriptor') AND name='FK_TeachingCredentialDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.TeachingCredentialDescriptor.FK_TeachingCredentialDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.TeachingCredentialDescriptor.FK_TeachingCredentialDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_TeachingCredentialDescriptor_TeachingCredentialType_TeachingCredentialTypeId] 
 */

CREATE INDEX [FK_TeachingCredentialDescriptor_TeachingCredentialType_TeachingCredentialTypeId] ON [edfi].[TeachingCredentialDescriptor]([TeachingCredentialTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.TeachingCredentialDescriptor') AND name='FK_TeachingCredentialDescriptor_TeachingCredentialType_TeachingCredentialTypeId')
    PRINT '<<< CREATED INDEX edfi.TeachingCredentialDescriptor.FK_TeachingCredentialDescriptor_TeachingCredentialType_TeachingCredentialTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.TeachingCredentialDescriptor.FK_TeachingCredentialDescriptor_TeachingCredentialType_TeachingCredentialTypeId >>>'
go

/* 
 * INDEX: [FK_TermDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_TermDescriptor_Descriptor_DescriptorId] ON [edfi].[TermDescriptor]([TermDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.TermDescriptor') AND name='FK_TermDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.TermDescriptor.FK_TermDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.TermDescriptor.FK_TermDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_TermDescriptor_TermType_TermTypeId] 
 */

CREATE INDEX [FK_TermDescriptor_TermType_TermTypeId] ON [edfi].[TermDescriptor]([TermTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.TermDescriptor') AND name='FK_TermDescriptor_TermType_TermTypeId')
    PRINT '<<< CREATED INDEX edfi.TermDescriptor.FK_TermDescriptor_TermType_TermTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.TermDescriptor.FK_TermDescriptor_TermType_TermTypeId >>>'
go

/* 
 * INDEX: [FK_WeaponDescriptor_Descriptor_DescriptorId] 
 */

CREATE INDEX [FK_WeaponDescriptor_Descriptor_DescriptorId] ON [edfi].[WeaponDescriptor]([WeaponDescriptorId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.WeaponDescriptor') AND name='FK_WeaponDescriptor_Descriptor_DescriptorId')
    PRINT '<<< CREATED INDEX edfi.WeaponDescriptor.FK_WeaponDescriptor_Descriptor_DescriptorId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.WeaponDescriptor.FK_WeaponDescriptor_Descriptor_DescriptorId >>>'
go

/* 
 * INDEX: [FK_WeaponDescriptor_WeaponsType_WeaponsTypeId] 
 */

CREATE INDEX [FK_WeaponDescriptor_WeaponsType_WeaponsTypeId] ON [edfi].[WeaponDescriptor]([WeaponTypeId])
go
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID('edfi.WeaponDescriptor') AND name='FK_WeaponDescriptor_WeaponsType_WeaponsTypeId')
    PRINT '<<< CREATED INDEX edfi.WeaponDescriptor.FK_WeaponDescriptor_WeaponsType_WeaponsTypeId >>>'
ELSE
    PRINT '<<< FAILED CREATING INDEX edfi.WeaponDescriptor.FK_WeaponDescriptor_WeaponsType_WeaponsTypeId >>>'
go

/* 
 * TABLE: [edfi].[AcademicSubjectDescriptor] 
 */

ALTER TABLE [edfi].[AcademicSubjectDescriptor] ADD CONSTRAINT [FK_AcademicSubjectDescriptor_AcademicSubjectType_AcademicSubjectTypeId] 
    FOREIGN KEY ([AcademicSubjectTypeId])
    REFERENCES [edfi].[AcademicSubjectType]([AcademicSubjectTypeId])
go

ALTER TABLE [edfi].[AcademicSubjectDescriptor] ADD CONSTRAINT [FK_AcademicSubjectDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([AcademicSubjectDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[AcademicWeek] 
 */

ALTER TABLE [edfi].[AcademicWeek] ADD CONSTRAINT [FK_AcademicWeek_CalendarDate_BeginDate] 
    FOREIGN KEY ([SchoolId], [BeginDate])
    REFERENCES [edfi].[CalendarDate]([SchoolId], [Date])
go

ALTER TABLE [edfi].[AcademicWeek] ADD CONSTRAINT [FK_AcademicWeek_CalendarDate_EndDate] 
    FOREIGN KEY ([SchoolId], [EndDate])
    REFERENCES [edfi].[CalendarDate]([SchoolId], [Date])
go

ALTER TABLE [edfi].[AcademicWeek] ADD CONSTRAINT [FK_AcademicWeek_School_SchoolId]
    FOREIGN KEY([SchoolId])
    REFERENCES [edfi].[School] ([SchoolId])
go

/* 
 * TABLE: [edfi].[AccommodationDescriptor] 
 */

ALTER TABLE [edfi].[AccommodationDescriptor] ADD CONSTRAINT [FK_AccommodationDescriptor_AccommodationType_AccommodationTypeId] 
    FOREIGN KEY ([AccommodationTypeId])
    REFERENCES [edfi].[AccommodationType]([AccommodationTypeId])
go

ALTER TABLE [edfi].[AccommodationDescriptor] ADD CONSTRAINT [FK_AccommodationDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([AccommodationDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[Account] 
 */

ALTER TABLE [edfi].[Account] ADD CONSTRAINT [FK_Account_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go


/* 
 * TABLE: [edfi].[AccountabilityRating] 
 */

ALTER TABLE [edfi].[AccountabilityRating] ADD CONSTRAINT [FK_AccountabilityRating_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[AccountabilityRating] ADD CONSTRAINT [FK_AccountabilityRating_SchoolYearType_SchoolYear] 
    FOREIGN KEY ([SchoolYear])
    REFERENCES [edfi].[SchoolYearType]([SchoolYear])
go


/* 
 * TABLE: [edfi].[AccountCode] 
 */

ALTER TABLE [edfi].[AccountCode] ADD CONSTRAINT [FK_AccountCode_Account_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId], [AccountNumber], [FiscalYear])
    REFERENCES [edfi].[Account]([EducationOrganizationId], [AccountNumber], [FiscalYear]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[AccountCode] ADD CONSTRAINT [FK_AccountCode_AccountCodeDescriptor_AccountCodeDescriptorId] 
    FOREIGN KEY ([AccountCodeDescriptorId])
    REFERENCES [edfi].[AccountCodeDescriptor]([AccountCodeDescriptorId])
go


/* 
 * TABLE: [edfi].[AccountCodeDescriptor] 
 */

ALTER TABLE [edfi].[AccountCodeDescriptor] ADD CONSTRAINT [FK_AccountCodeDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([AccountCodeDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[AchievementCategoryDescriptor] 
 */

ALTER TABLE [edfi].[AchievementCategoryDescriptor] ADD CONSTRAINT [FK_AchievementCategoryDescriptor_AchievementCategoryType_AchievementCategoryTypeId] 
    FOREIGN KEY ([AchievementCategoryTypeId])
    REFERENCES [edfi].[AchievementCategoryType]([AchievementCategoryTypeId])
go

ALTER TABLE [edfi].[AchievementCategoryDescriptor] ADD CONSTRAINT [FK_AchievementCategoryDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([AchievementCategoryDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[Actual] 
 */

ALTER TABLE [edfi].[Actual] ADD CONSTRAINT [FK_Actual_Account_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId], [AccountNumber], [FiscalYear])
    REFERENCES [edfi].[Account]([EducationOrganizationId], [AccountNumber], [FiscalYear])
go


/* 
 * TABLE: [edfi].[AdministrativeFundingControlDescriptor] 
 */

ALTER TABLE [edfi].[AdministrativeFundingControlDescriptor] ADD CONSTRAINT [FK_AdministrativeFundingControlDescriptor_AdministrativeFundingControlType_AdministrativeFundingControlTypeId] 
    FOREIGN KEY ([AdministrativeFundingControlTypeId])
    REFERENCES [edfi].[AdministrativeFundingControlType]([AdministrativeFundingControlTypeId])
go

ALTER TABLE [edfi].[AdministrativeFundingControlDescriptor] ADD CONSTRAINT [FK_AdministrativeFundingControlDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([AdministrativeFundingControlDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[Assessment] 
 */

ALTER TABLE [edfi].[Assessment] ADD CONSTRAINT [FK_Assessment_AcademicSubjectDescriptorId] 
    FOREIGN KEY ([AcademicSubjectDescriptorId])
    REFERENCES [edfi].[AcademicSubjectDescriptor]([AcademicSubjectDescriptorId])
go

ALTER TABLE [edfi].[Assessment] ADD CONSTRAINT [FK_Assessment_AssessedGradeLevelDescriptorId] 
    FOREIGN KEY ([AssessedGradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[Assessment] ADD CONSTRAINT [FK_Assessment_AssessmentCategoryDescriptor_AssessmentCategoryDescriptorId] 
    FOREIGN KEY ([AssessmentCategoryDescriptorId])
    REFERENCES [edfi].[AssessmentCategoryDescriptor]([AssessmentCategoryDescriptorId])
go

ALTER TABLE [edfi].[Assessment] ADD CONSTRAINT [FK_Assessment_AssessmentFamily_AssessmentFamilyTitle] 
    FOREIGN KEY ([AssessmentFamilyTitle])
    REFERENCES [edfi].[AssessmentFamily]([AssessmentFamilyTitle])
go

ALTER TABLE [edfi].[Assessment] ADD CONSTRAINT [FK_Assessment_AssessmentPeriodDescriptor_AssessmentPeriodDescriptorId] 
    FOREIGN KEY ([AssessmentPeriodDescriptorId])
    REFERENCES [edfi].[AssessmentPeriodDescriptor]([AssessmentPeriodDescriptorId])
go

ALTER TABLE [edfi].[Assessment] ADD CONSTRAINT [FK_Assessment_LowestAssessedGradeLevelDescriptorId] 
    FOREIGN KEY ([LowestAssessedGradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go


/* 
 * TABLE: [edfi].[AssessmentCategoryDescriptor] 
 */

ALTER TABLE [edfi].[AssessmentCategoryDescriptor] ADD CONSTRAINT [FK_AssessmentCategoryDescriptor_AssessmentCategoryType_AssessmentCategoryTypeId] 
    FOREIGN KEY ([AssessmentCategoryTypeId])
    REFERENCES [edfi].[AssessmentCategoryType]([AssessmentCategoryTypeId])
go

ALTER TABLE [edfi].[AssessmentCategoryDescriptor] ADD CONSTRAINT [FK_AssessmentCategoryDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([AssessmentCategoryDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId])
go


/* 
 * TABLE: [edfi].[AssessmentContentStandard] 
 */

ALTER TABLE [edfi].[AssessmentContentStandard] ADD CONSTRAINT [FK_AssessmentContentStandard_Assessment_AssessmentTitle] 
    FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [AssessmentVersion])
    REFERENCES [edfi].[Assessment]([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[AssessmentContentStandard] ADD CONSTRAINT [FK_AssessmentContentStandard_EducationOrganization_MandatingEducationOrganizationId] 
    FOREIGN KEY ([MandatingEducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[AssessmentContentStandard] ADD CONSTRAINT [FK_AssessmentContentStandard_PublicationStatusType_PublicationStatusTypeId] 
    FOREIGN KEY ([PublicationStatusTypeId])
    REFERENCES [edfi].[PublicationStatusType]([PublicationStatusTypeId])
go


/* 
 * TABLE: [edfi].[AssessmentContentStandardAuthor] 
 */

ALTER TABLE [edfi].[AssessmentContentStandardAuthor] ADD CONSTRAINT [FK_AssessmentContentStandardAuthor_AssessmentContentStandard_AssessmentTitle] 
    FOREIGN KEY ([AssessmentVersion], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId])
    REFERENCES [edfi].[AssessmentContentStandard]([AssessmentVersion], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[AssessmentFamily] 
 */

ALTER TABLE [edfi].[AssessmentFamily] ADD CONSTRAINT [FK_AssessmentFamily_AcademicSubjectDescriptorId] 
    FOREIGN KEY ([AcademicSubjectDescriptorId])
    REFERENCES [edfi].[AcademicSubjectDescriptor]([AcademicSubjectDescriptorId])
go

ALTER TABLE [edfi].[AssessmentFamily] ADD CONSTRAINT [FK_AssessmentFamily_AssessedGradeLevelDescriptorId] 
    FOREIGN KEY ([AssessedGradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[AssessmentFamily] ADD CONSTRAINT [FK_AssessmentFamily_AssessmentCategoryDescriptor_AssessmentCategoryDescriptorId] 
    FOREIGN KEY ([AssessmentCategoryDescriptorId])
    REFERENCES [edfi].[AssessmentCategoryDescriptor]([AssessmentCategoryDescriptorId])
go

ALTER TABLE [edfi].[AssessmentFamily] ADD CONSTRAINT [FK_AssessmentFamily_AssessmentFamily_ParentAssessmentFamilyTitle] 
    FOREIGN KEY ([ParentAssessmentFamilyTitle])
    REFERENCES [edfi].[AssessmentFamily]([AssessmentFamilyTitle])
go

ALTER TABLE [edfi].[AssessmentFamily] ADD CONSTRAINT [FK_AssessmentFamily_LowestAssessedGradeLevelDescriptorId] 
    FOREIGN KEY ([LowestAssessedGradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go


/* 
 * TABLE: [edfi].[AssessmentFamilyAssessmentPeriod] 
 */

ALTER TABLE [edfi].[AssessmentFamilyAssessmentPeriod] ADD CONSTRAINT [FK_AssessmentFamilyAssessmentPeriod_AssessmentFamily_AssessmentFamilyTitle] 
    FOREIGN KEY ([AssessmentFamilyTitle])
    REFERENCES [edfi].[AssessmentFamily]([AssessmentFamilyTitle]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[AssessmentFamilyAssessmentPeriod] ADD CONSTRAINT [FK_AssessmentFamilyAssessmentPeriod_AssessmentPeriodDescriptor_AssessmentPeriodDescriptorId] 
    FOREIGN KEY ([AssessmentPeriodDescriptorId])
    REFERENCES [edfi].[AssessmentPeriodDescriptor]([AssessmentPeriodDescriptorId])
go


/* 
 * TABLE: [edfi].[AssessmentFamilyContentStandard] 
 */

ALTER TABLE [edfi].[AssessmentFamilyContentStandard] ADD CONSTRAINT [FK_AssessmentFamilyContentStandard_AssessmentFamily_AssessmentFamilyTitle] 
    FOREIGN KEY ([AssessmentFamilyTitle])
    REFERENCES [edfi].[AssessmentFamily]([AssessmentFamilyTitle]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[AssessmentFamilyContentStandard] ADD CONSTRAINT [FK_AssessmentFamilyContentStandard_EducationOrganization_MandatingEducationOrganizationId] 
    FOREIGN KEY ([MandatingEducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[AssessmentFamilyContentStandard] ADD CONSTRAINT [FK_AssessmentFamilyContentStandard_PublicationStatusType_PublicationStatusTypeId] 
    FOREIGN KEY ([PublicationStatusTypeId])
    REFERENCES [edfi].[PublicationStatusType]([PublicationStatusTypeId])
go


/* 
 * TABLE: [edfi].[AssessmentFamilyContentStandardAuthor] 
 */

ALTER TABLE [edfi].[AssessmentFamilyContentStandardAuthor] ADD CONSTRAINT [FK_AssessmentFamilyContentStandardAuthor_AssessmentFamilyContentStandard_AssessmentFamilyTitle] 
    FOREIGN KEY ([AssessmentFamilyTitle])
    REFERENCES [edfi].[AssessmentFamilyContentStandard]([AssessmentFamilyTitle]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[AssessmentFamilyIdentificationCode] 
 */

ALTER TABLE [edfi].[AssessmentFamilyIdentificationCode] ADD CONSTRAINT [FK_AssessmentFamilyIdentificationCode_AssessmentFamily_AssessmentFamilyTitle] 
    FOREIGN KEY ([AssessmentFamilyTitle])
    REFERENCES [edfi].[AssessmentFamily]([AssessmentFamilyTitle]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[AssessmentFamilyIdentificationCode] ADD CONSTRAINT [FK_AssessmentFamilyIdentificationCode_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemDescriptorId] 
    FOREIGN KEY ([AssessmentIdentificationSystemDescriptorId])
    REFERENCES [edfi].[AssessmentIdentificationSystemDescriptor]([AssessmentIdentificationSystemDescriptorId])
go


/* 
 * TABLE: [edfi].[AssessmentFamilyLanguage] 
 */

ALTER TABLE [edfi].[AssessmentFamilyLanguage] ADD CONSTRAINT [FK_AssessmentFamiliyLanguages_AssessmentFamily_AssessmentFamilyTitle] 
    FOREIGN KEY ([AssessmentFamilyTitle])
    REFERENCES [edfi].[AssessmentFamily]([AssessmentFamilyTitle]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[AssessmentFamilyLanguage] ADD CONSTRAINT [FK_AssessmentFamilyLanguages_LanguageDescriptor_LanguageDescriptorId] 
    FOREIGN KEY ([LanguageDescriptorId])
    REFERENCES [edfi].[LanguageDescriptor]([LanguageDescriptorId])
go


/* 
 * TABLE: [edfi].[AssessmentIdentificationCode] 
 */

ALTER TABLE [edfi].[AssessmentIdentificationCode] ADD CONSTRAINT [FK_AssessmentIdentificationCode_Assessment_AssessmentTitle] 
    FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
    REFERENCES [edfi].[Assessment]([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[AssessmentIdentificationCode] ADD CONSTRAINT [FK_AssessmentIdentificationCode_AssessmentIdentificationDescriptor_AssessmentIdentificationDescriptorId] 
    FOREIGN KEY ([AssessmentIdentificationSystemDescriptorId])
    REFERENCES [edfi].[AssessmentIdentificationSystemDescriptor]([AssessmentIdentificationSystemDescriptorId])
go


/* 
 * TABLE: [edfi].[AssessmentIdentificationSystemDescriptor] 
 */

ALTER TABLE [edfi].[AssessmentIdentificationSystemDescriptor] ADD CONSTRAINT [FK_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemType_AssessmentIdentificationSystemTypeId] 
    FOREIGN KEY ([AssessmentIdentificationSystemTypeId])
    REFERENCES [edfi].[AssessmentIdentificationSystemType]([AssessmentIdentificationSystemTypeId])
go

ALTER TABLE [edfi].[AssessmentIdentificationSystemDescriptor] ADD CONSTRAINT [FK_AssessmentIdentificationSystemDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([AssessmentIdentificationSystemDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId])
go


/* 
 * TABLE: [edfi].[AssessmentItem] 
 */

ALTER TABLE [edfi].[AssessmentItem] ADD CONSTRAINT [FK_AssessmentItem_Assessment_AssessmentTitle] 
    FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
    REFERENCES [edfi].[Assessment]([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
go

ALTER TABLE [edfi].[AssessmentItem] ADD CONSTRAINT [FK_AssessmentItem_AssessmentItemCategoryType_AssessmentItemCategoryTypeId] 
    FOREIGN KEY ([AssessmentItemCategoryTypeId])
    REFERENCES [edfi].[AssessmentItemCategoryType]([AssessmentItemCategoryTypeId])
go


/* 
 * TABLE: [edfi].[AssessmentItemLearningStandard] 
 */

ALTER TABLE [edfi].[AssessmentItemLearningStandard] ADD CONSTRAINT [FK_AssessmentItemLearningStandard_AssessmentItem] 
    FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
    REFERENCES [edfi].[AssessmentItem]([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[AssessmentItemLearningStandard] ADD CONSTRAINT [FK_AssessmentItemLearningStandard_LearningStandard_LearningStandardId] 
    FOREIGN KEY ([LearningStandardId])
    REFERENCES [edfi].[LearningStandard]([LearningStandardId])
go


/* 
 * TABLE: [edfi].[AssessmentLanguage] 
 */

ALTER TABLE [edfi].[AssessmentLanguage] ADD CONSTRAINT [FK_AssessmentLanguages_Assessment_AssessmentTitle] 
    FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
    REFERENCES [edfi].[Assessment]([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[AssessmentLanguage] ADD CONSTRAINT [FK_AssessmentLanguages_LanguageDescriptor_LanguageDescriptorId] 
    FOREIGN KEY ([LanguageDescriptorId])
    REFERENCES [edfi].[LanguageDescriptor]([LanguageDescriptorId])
go


/* 
 * TABLE: [edfi].[AssessmentPerformanceLevel] 
 */

ALTER TABLE [edfi].[AssessmentPerformanceLevel] ADD CONSTRAINT [FK_AssessmentPerformanceLevel_Assessment_AssessmentTitle] 
    FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
    REFERENCES [edfi].[Assessment]([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[AssessmentPerformanceLevel] ADD CONSTRAINT [FK_AssessmentPerformanceLevel_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] 
    FOREIGN KEY ([AssessmentReportingMethodTypeId])
    REFERENCES [edfi].[AssessmentReportingMethodType]([AssessmentReportingMethodTypeId])
go

ALTER TABLE [edfi].[AssessmentPerformanceLevel] ADD CONSTRAINT [FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId] 
    FOREIGN KEY ([PerformanceLevelDescriptorId])
    REFERENCES [edfi].[PerformanceLevelDescriptor]([PerformanceLevelDescriptorId])
go

ALTER TABLE [edfi].[AssessmentPerformanceLevel] ADD CONSTRAINT [FK_AssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId] 
    FOREIGN KEY ([ResultDatatypeTypeId])
    REFERENCES [edfi].[ResultDatatypeType]([ResultDatatypeTypeId])
go


/* 
 * TABLE: [edfi].[AssessmentPeriodDescriptor] 
 */

ALTER TABLE [edfi].[AssessmentPeriodDescriptor] ADD CONSTRAINT [FK_AssessmentPeriodDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([AssessmentPeriodDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[AssessmentProgram] 
 */

ALTER TABLE [edfi].[AssessmentProgram] ADD CONSTRAINT [FK_AssessmentProgram_Assessment_AssessmentTitle] 
    FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
    REFERENCES [edfi].[Assessment]([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[AssessmentProgram] ADD CONSTRAINT [FK_AssessmentProgram_Program_ProgramTypeId] 
    FOREIGN KEY ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
    REFERENCES [edfi].[Program]([EducationOrganizationId], [ProgramTypeId], [ProgramName])
go


/* 
 * TABLE: [edfi].[AssessmentScore] 
 */

ALTER TABLE [edfi].[AssessmentScore] ADD CONSTRAINT [FK_AssessmentScore_Assessment_AssessmentTitle] 
    FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
    REFERENCES [edfi].[Assessment]([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[AssessmentScore] ADD CONSTRAINT [FK_AssessmentScore_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] 
    FOREIGN KEY ([AssessmentReportingMethodTypeId])
    REFERENCES [edfi].[AssessmentReportingMethodType]([AssessmentReportingMethodTypeId])
go

ALTER TABLE [edfi].[AssessmentScore] ADD CONSTRAINT [FK_AssessmentScore_ResultDatatypeType_ResultDatatypeTypeId] 
    FOREIGN KEY ([ResultDatatypeTypeId])
    REFERENCES [edfi].[ResultDatatypeType]([ResultDatatypeTypeId])
go


/* 
 * TABLE: [edfi].[AssessmentSection] 
 */

ALTER TABLE [edfi].[AssessmentSection] ADD CONSTRAINT [FK_AssessmentSection_Assessment_AssessmentTitle] 
    FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
    REFERENCES [edfi].[Assessment]([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[AssessmentSection] ADD CONSTRAINT [FK_AssessmentSection_Section_SchoolId] 
    FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
    REFERENCES [edfi].[Section]([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) 
	ON UPDATE CASCADE
go


/* 
 * TABLE: [edfi].[AttendanceEventCategoryDescriptor] 
 */

ALTER TABLE [edfi].[AttendanceEventCategoryDescriptor] ADD CONSTRAINT [FK_AttendanceEventCategoryDescriptor_AttendanceEventCategoryType_AttendanceEventCategoryTypeId] 
    FOREIGN KEY ([AttendanceEventCategoryTypeId])
    REFERENCES [edfi].[AttendanceEventCategoryType]([AttendanceEventCategoryTypeId])
go

ALTER TABLE [edfi].[AttendanceEventCategoryDescriptor] ADD CONSTRAINT [FK_AttendanceEventCategoryDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([AttendanceEventCategoryDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[BehaviorDescriptor] 
 */

ALTER TABLE [edfi].[BehaviorDescriptor] ADD CONSTRAINT [FK_BehaviorDescriptor_BehaviorType_BehaviorTypeId] 
    FOREIGN KEY ([BehaviorTypeId])
    REFERENCES [edfi].[BehaviorType]([BehaviorTypeId])
go

ALTER TABLE [edfi].[BehaviorDescriptor] ADD CONSTRAINT [FK_BehaviorDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([BehaviorDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[BellSchedule] 
 */

ALTER TABLE [edfi].[BellSchedule] ADD CONSTRAINT [FK_BellSchedule_CalendarDate_Date] 
    FOREIGN KEY ([SchoolId], [Date])
    REFERENCES [edfi].[CalendarDate]([SchoolId], [Date])
go

ALTER TABLE [edfi].[BellSchedule] ADD CONSTRAINT [FK_BellSchedule_GradeLevelDescriptorId] 
    FOREIGN KEY ([GradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go


/* 
 * TABLE: [edfi].[BellScheduleMeetingTime] 
 */

ALTER TABLE [edfi].[BellScheduleMeetingTime] ADD CONSTRAINT [FK_BellScheduleMeetingTime_BellSchedule] 
    FOREIGN KEY ([BellScheduleName], [GradeLevelDescriptorId], [SchoolId], [Date])
    REFERENCES [edfi].[BellSchedule]([BellScheduleName], [GradeLevelDescriptorId], [SchoolId], [Date]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[BellScheduleMeetingTime] ADD CONSTRAINT [FK_BellScheduleMeetingTime_ClassPeriod] 
    FOREIGN KEY ([SchoolId], [ClassPeriodName])
    REFERENCES [edfi].[ClassPeriod]([SchoolId], [ClassPeriodName])
	ON UPDATE CASCADE
go


/* 
 * TABLE: [edfi].[Budget] 
 */

ALTER TABLE [edfi].[Budget] ADD CONSTRAINT [FK_Budget_Account_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId], [AccountNumber], [FiscalYear])
    REFERENCES [edfi].[Account]([EducationOrganizationId], [AccountNumber], [FiscalYear])
go


/* 
 * TABLE: [edfi].[CalendarDate] 
 */

ALTER TABLE [edfi].[CalendarDate] ADD CONSTRAINT [FK_CalendarDate_School_SchoolId]
    FOREIGN KEY([SchoolId])
    REFERENCES [edfi].[School] ([SchoolId])
GO

/* 
 * TABLE: [edfi].[CalendarDateCalendarEvent] 
 */

ALTER TABLE [edfi].[CalendarDateCalendarEvent] ADD CONSTRAINT [FK_CalendarDateCalendarEvent_CalendarDate] 
    FOREIGN KEY ([SchoolId], [Date])
    REFERENCES [edfi].[CalendarDate]([SchoolId], [Date]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[CalendarDateCalendarEvent] ADD CONSTRAINT [FK_CalendarDateCalendarEvent_CalendarEventDescriptor_CalendarEventDescriptorId] 
    FOREIGN KEY ([CalendarEventDescriptorId])
    REFERENCES [edfi].[CalendarEventDescriptor]([CalendarEventDescriptorId])
go


/* 
 * TABLE: [edfi].[CalendarEventDescriptor] 
 */

ALTER TABLE [edfi].[CalendarEventDescriptor] ADD CONSTRAINT [FK_CalendarEventDescriptor_CalendarEventType_CalendarEventTypeId] 
    FOREIGN KEY ([CalendarEventTypeId])
    REFERENCES [edfi].[CalendarEventType]([CalendarEventTypeId])
go

ALTER TABLE [edfi].[CalendarEventDescriptor] ADD CONSTRAINT [FK_CalendarEventDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([CalendarEventDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[ClassPeriod] 
 */

ALTER TABLE [edfi].[ClassPeriod] ADD CONSTRAINT [FK_ClassPeriod_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go


/* 
 * TABLE: [edfi].[ClassroomPositionDescriptor] 
 */

ALTER TABLE [edfi].[ClassroomPositionDescriptor] ADD CONSTRAINT [FK_ClassroomPositionDescriptor_ClassroomPositionType_ClassroomPositionTypeId] 
    FOREIGN KEY ([ClassroomPositionTypeId])
    REFERENCES [edfi].[ClassroomPositionType]([ClassroomPositionTypeId])
go

ALTER TABLE [edfi].[ClassroomPositionDescriptor] ADD CONSTRAINT [FK_ClassroomPositionDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([ClassroomPositionDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[Cohort] 
 */

ALTER TABLE [edfi].[Cohort] ADD CONSTRAINT [FK_Cohort_AcademicSubjectDescriptorId] 
    FOREIGN KEY ([AcademicSubjectDescriptorId])
    REFERENCES [edfi].[AcademicSubjectDescriptor]([AcademicSubjectDescriptorId])
go

ALTER TABLE [edfi].[Cohort] ADD CONSTRAINT [FK_Cohort_CohortScopeType_CohortScopeTypeId] 
    FOREIGN KEY ([CohortScopeTypeId])
    REFERENCES [edfi].[CohortScopeType]([CohortScopeTypeId])
go

ALTER TABLE [edfi].[Cohort] ADD CONSTRAINT [FK_Cohort_CohortType_CohortTypeId] 
    FOREIGN KEY ([CohortTypeId])
    REFERENCES [edfi].[CohortType]([CohortTypeId])
go

ALTER TABLE [edfi].[Cohort] ADD CONSTRAINT [FK_Cohort_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go


/* 
 * TABLE: [edfi].[CohortProgram] 
 */

ALTER TABLE [edfi].[CohortProgram] ADD CONSTRAINT [FK_CohortProgram_Cohort_EducationOrganizationId] 
    FOREIGN KEY ([CohortIdentifier], [EducationOrganizationId])
    REFERENCES [edfi].[Cohort]([CohortIdentifier], [EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[CohortProgram] ADD CONSTRAINT [FK_CohortProgram_Program_EducationOrganizationId] 
    FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramTypeId], [ProgramName])
    REFERENCES [edfi].[Program]([EducationOrganizationId], [ProgramTypeId], [ProgramName])
go


/* 
 * TABLE: [edfi].[CompetencyLevelDescriptor] 
 */

ALTER TABLE [edfi].[CompetencyLevelDescriptor] ADD CONSTRAINT [FK_CompetencyLevelDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([CompetencyLevelDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[CompetencyLevelDescriptor] ADD CONSTRAINT [FK_CompetencyLevelDescriptor_PerformanceBaseType_PerformanceBaseConversionTypeId] 
    FOREIGN KEY ([PerformanceBaseConversionTypeId])
    REFERENCES [edfi].[PerformanceBaseConversionType]([PerformanceBaseConversionTypeId])
go


/* 
 * TABLE: [edfi].[CompetencyObjective] 
 */

ALTER TABLE [edfi].[CompetencyObjective] ADD CONSTRAINT [FK_CompetencyObjective_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[CompetencyObjective] ADD CONSTRAINT [FK_CompetencyObjective_ObjectiveGradeLevelDescriptorId] 
    FOREIGN KEY ([ObjectiveGradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go


/* 
 * TABLE: [edfi].[ContinuationOfServicesReasonDescriptor] 
 */

ALTER TABLE [edfi].[ContinuationOfServicesReasonDescriptor] ADD CONSTRAINT [FK_ContinuationOfServicesReasonDescriptor_ContinuationOfServicesReasonType_ContinuationOfServicesReasonTypeId] 
    FOREIGN KEY ([ContinuationOfServicesReasonTypeId])
    REFERENCES [edfi].[ContinuationOfServicesReasonType]([ContinuationOfServicesReasonTypeId])
go

ALTER TABLE [edfi].[ContinuationOfServicesReasonDescriptor] ADD CONSTRAINT [FK_ContinuationOfServicesReasonDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([ContinuationOfServicesReasonDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[ContractedStaff] 
 */

ALTER TABLE [edfi].[ContractedStaff] ADD CONSTRAINT [FK_ContractedStaff_Account_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId], [AccountNumber], [FiscalYear])
    REFERENCES [edfi].[Account]([EducationOrganizationId], [AccountNumber], [FiscalYear])
go

ALTER TABLE [edfi].[ContractedStaff] ADD CONSTRAINT [FK_ContractedStaff_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI])
go


/* 
 * TABLE: [edfi].[CountryDescriptor] 
 */

ALTER TABLE [edfi].[CountryDescriptor] ADD CONSTRAINT [FK_CountryDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([CountryDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId])
go


/* 
 * TABLE: [edfi].[Course] 
 */

ALTER TABLE [edfi].[Course] ADD CONSTRAINT [FK_Course_AcademicSubjectDescriptorId] 
    FOREIGN KEY ([AcademicSubjectDescriptorId])
    REFERENCES [edfi].[AcademicSubjectDescriptor]([AcademicSubjectDescriptorId])
go

ALTER TABLE [edfi].[Course] ADD CONSTRAINT [FK_Course_CareerPathwayType_CareerPathwayTypeId] 
    FOREIGN KEY ([CareerPathwayTypeId])
    REFERENCES [edfi].[CareerPathwayType]([CareerPathwayTypeId])
go

ALTER TABLE [edfi].[Course] ADD CONSTRAINT [FK_Course_CourseDefinedByType_CourseDefinedByTypeId] 
    FOREIGN KEY ([CourseDefinedByTypeId])
    REFERENCES [edfi].[CourseDefinedByType]([CourseDefinedByTypeId])
go

ALTER TABLE [edfi].[Course] ADD CONSTRAINT [FK_Course_CourseGPAApplicabilityType_CourseGPAApplicabilityTypeId] 
    FOREIGN KEY ([CourseGPAApplicabilityTypeId])
    REFERENCES [edfi].[CourseGPAApplicabilityType]([CourseGPAApplicabilityTypeId])
go

ALTER TABLE [edfi].[Course] ADD CONSTRAINT [FK_Course_CreditType_MaximumAvailableCreditTypeId] 
    FOREIGN KEY ([MaximumAvailableCreditTypeId])
    REFERENCES [edfi].[CreditType]([CreditTypeId])
go

ALTER TABLE [edfi].[Course] ADD CONSTRAINT [FK_Course_CreditType_MinimumAvailableCreditTypeId] 
    FOREIGN KEY ([MinimumAvailableCreditTypeId])
    REFERENCES [edfi].[CreditType]([CreditTypeId])
go

ALTER TABLE [edfi].[Course] ADD CONSTRAINT [FK_Course_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go


/* 
 * TABLE: [edfi].[CourseCompetencyLevel] 
 */

ALTER TABLE [edfi].[CourseCompetencyLevel] ADD CONSTRAINT [FK_CourseCompetencyLevel_CompetencyLevelDescriptor_CompetencyLevelDescriptorId] 
    FOREIGN KEY ([CompetencyLevelDescriptorId])
    REFERENCES [edfi].[CompetencyLevelDescriptor]([CompetencyLevelDescriptorId])
go

ALTER TABLE [edfi].[CourseCompetencyLevel] ADD CONSTRAINT [FK_CourseCompetencyLevel_Course_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId], [CourseCode])
    REFERENCES [edfi].[Course]([EducationOrganizationId], [CourseCode]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[CourseIdentificationCode] 
 */

ALTER TABLE [edfi].[CourseIdentificationCode] ADD CONSTRAINT [FK_CourseIdentificationCode_Course_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId], [CourseCode])
    REFERENCES [edfi].[Course]([EducationOrganizationId], [CourseCode]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[CourseIdentificationCode] ADD CONSTRAINT [FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor] 
    FOREIGN KEY ([CourseIdentificationSystemDescriptorId])
    REFERENCES [edfi].[CourseIdentificationSystemDescriptor]([CourseIdentificationSystemDescriptorId])
go


/* 
 * TABLE: [edfi].[CourseIdentificationSystemDescriptor] 
 */

ALTER TABLE [edfi].[CourseIdentificationSystemDescriptor] ADD CONSTRAINT [FK_CourseIdentificationDescriptor_Descriptor] 
    FOREIGN KEY ([CourseIdentificationSystemDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId])
go

ALTER TABLE [edfi].[CourseIdentificationSystemDescriptor] ADD CONSTRAINT [FK_CourseIdentificationSystemDescriptor_CourseIdentificationSystemType] 
    FOREIGN KEY ([CourseIdentificationSystemTypeId])
    REFERENCES [edfi].[CourseIdentificationSystemType]([CourseIdentificationSystemTypeId])
go


/* 
 * TABLE: [edfi].[CourseLearningObjective] 
 */

ALTER TABLE [edfi].[CourseLearningObjective] ADD CONSTRAINT [FK_CourseLearningObjective_Course_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId], [CourseCode])
    REFERENCES [edfi].[Course]([EducationOrganizationId], [CourseCode]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[CourseLearningObjective] ADD CONSTRAINT [FK_CourseLearningObjective_LearningObjective_Objective] 
    FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
    REFERENCES [edfi].[LearningObjective]([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
go


/* 
 * TABLE: [edfi].[CourseLearningStandard] 
 */

ALTER TABLE [edfi].[CourseLearningStandard] ADD CONSTRAINT [FK_CourseLearningStandard_Course_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId], [CourseCode])
    REFERENCES [edfi].[Course]([EducationOrganizationId], [CourseCode]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[CourseLearningStandard] ADD CONSTRAINT [FK_CourseLearningStandard_LearningStandard_LearningStandardId] 
    FOREIGN KEY ([LearningStandardId])
    REFERENCES [edfi].[LearningStandard]([LearningStandardId])
go


/* 
 * TABLE: [edfi].[CourseLevelCharacteristic] 
 */

ALTER TABLE [edfi].[CourseLevelCharacteristic] ADD CONSTRAINT [FK_CourseLevelCharacteristics_Course_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId], [CourseCode])
    REFERENCES [edfi].[Course]([EducationOrganizationId], [CourseCode]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[CourseLevelCharacteristic] ADD CONSTRAINT [FK_CourseLevelCharacteristics_CourseLevelCharacteristicsType_CourseLevelCharacteristicsTypeId] 
    FOREIGN KEY ([CourseLevelCharacteristicTypeId])
    REFERENCES [edfi].[CourseLevelCharacteristicType]([CourseLevelCharacteristicTypeId])
go


/* 
 * TABLE: [edfi].[CourseOfferedGradeLevel] 
 */

ALTER TABLE [edfi].[CourseOfferedGradeLevel] ADD CONSTRAINT [FK_CourseGradeLevel_Course_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId], [CourseCode])
    REFERENCES [edfi].[Course]([EducationOrganizationId], [CourseCode]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[CourseOfferedGradeLevel] ADD CONSTRAINT [FK_CourseGradeLevel_GradeLevelDescriptorId] 
    FOREIGN KEY ([GradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go


/* 
 * TABLE: [edfi].[CourseOffering] 
 */

ALTER TABLE [edfi].[CourseOffering] ADD CONSTRAINT [FK_CourseOffering_Course_SchoolId] 
    FOREIGN KEY ([EducationOrganizationId], [CourseCode])
    REFERENCES [edfi].[Course]([EducationOrganizationId], [CourseCode])
go

ALTER TABLE [edfi].[CourseOffering] ADD CONSTRAINT [FK_CourseOffering_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go

ALTER TABLE [edfi].[CourseOffering] ADD CONSTRAINT [FK_CourseOffering_Session_SchoolId] 
    FOREIGN KEY ([SchoolId], [SchoolYear], [TermDescriptorId])
    REFERENCES [edfi].[Session]([SchoolId], [SchoolYear], [TermDescriptorId])
	ON UPDATE CASCADE
go


/* 
 * TABLE: [edfi].[CourseOfferingCurriculumUsed] 
 */

ALTER TABLE [edfi].[CourseOfferingCurriculumUsed] ADD CONSTRAINT [FK_CourseOfferingCurriculumUsed_CourseOffering_LocalCourseCode] 
    FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [TermDescriptorId])
    REFERENCES [edfi].[CourseOffering]([LocalCourseCode], [SchoolId], [SchoolYear], [TermDescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[CourseOfferingCurriculumUsed] ADD CONSTRAINT [FK_CourseOfferingCurriculumUsed_CurriculumUsedType_CurriculumUsedTypeId] 
    FOREIGN KEY ([CurriculumUsedTypeId])
    REFERENCES [edfi].[CurriculumUsedType]([CurriculumUsedTypeId])
go


/* 
 * TABLE: [edfi].[CourseTranscript] 
 */

ALTER TABLE [edfi].[CourseTranscript] ADD CONSTRAINT [FK_CourseTranscript_CourseAttemptResultType_CourseAttemptResultTypeId] 
    FOREIGN KEY ([CourseAttemptResultTypeId])
    REFERENCES [edfi].[CourseAttemptResultType]([CourseAttemptResultTypeId])
go

ALTER TABLE [edfi].[CourseTranscript] ADD CONSTRAINT [FK_CourseTranscript_CourseEducationOrganizationId_Course_EducationOrganizationId] 
    FOREIGN KEY ([CourseEducationOrganizationId], [CourseCode])
    REFERENCES [edfi].[Course]([EducationOrganizationId], [CourseCode])
go

ALTER TABLE [edfi].[CourseTranscript] ADD CONSTRAINT [FK_CourseTranscript_CourseRepeatCodeType_CourseRepeatCodeTypeId] 
    FOREIGN KEY ([CourseRepeatCodeTypeId])
    REFERENCES [edfi].[CourseRepeatCodeType]([CourseRepeatCodeTypeId])
go

ALTER TABLE [edfi].[CourseTranscript] ADD CONSTRAINT [FK_CourseTranscript_CreditType_AttemptedCreditTypeId] 
    FOREIGN KEY ([AttemptedCreditTypeId])
    REFERENCES [edfi].[CreditType]([CreditTypeId])
go

ALTER TABLE [edfi].[CourseTranscript] ADD CONSTRAINT [FK_CourseTranscript_CreditType_EarnedCreditTypeId] 
    FOREIGN KEY ([EarnedCreditTypeId])
    REFERENCES [edfi].[CreditType]([CreditTypeId])
go

ALTER TABLE [edfi].[CourseTranscript] ADD CONSTRAINT [FK_CourseTranscript_GradeLevelDescriptorId] 
    FOREIGN KEY ([WhenTakenGradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[CourseTranscript] ADD CONSTRAINT [FK_CourseTranscript_MethodCreditEarnedType_MethodCreditEarnedTypeId] 
    FOREIGN KEY ([MethodCreditEarnedTypeId])
    REFERENCES [edfi].[MethodCreditEarnedType]([MethodCreditEarnedTypeId])
go

ALTER TABLE [edfi].[CourseTranscript] ADD CONSTRAINT [FK_CourseTranscript_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go

ALTER TABLE [edfi].[CourseTranscript] ADD CONSTRAINT [FK_CourseTranscript_StudentAcademicRecord_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
    REFERENCES [edfi].[StudentAcademicRecord]([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
go


/* 
 * TABLE: [edfi].[CourseTranscriptEarnedAdditionalCredits] 
 */

ALTER TABLE [edfi].[CourseTranscriptEarnedAdditionalCredits] ADD CONSTRAINT [FK_CourseTranscriptEarnedAdditionalCredits_AdditionalCreditType_AdditionalCreditTypeId] 
    FOREIGN KEY ([AdditionalCreditTypeId])
    REFERENCES [edfi].[AdditionalCreditType]([AdditionalCreditTypeId])
go

ALTER TABLE [edfi].[CourseTranscriptEarnedAdditionalCredits] ADD CONSTRAINT [FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript] 
    FOREIGN KEY ([CourseAttemptResultTypeId], [StudentUSI], [EducationOrganizationId], [CourseEducationOrganizationId], [SchoolYear], [TermDescriptorId], [CourseCode])
    REFERENCES [edfi].[CourseTranscript]([CourseAttemptResultTypeId], [StudentUSI], [EducationOrganizationId], [CourseEducationOrganizationId], [SchoolYear], [TermDescriptorId], [CourseCode])
go


/* 
 * TABLE: [edfi].[CredentialFieldDescriptor] 
 */

ALTER TABLE [edfi].[CredentialFieldDescriptor] ADD CONSTRAINT [FK_CredentialFieldDescriptor_AcademicSubjectDescriptor_AcademicSubjectDescriptorId] 
    FOREIGN KEY ([AcademicSubjectDescriptorId])
    REFERENCES [edfi].[AcademicSubjectDescriptor]([AcademicSubjectDescriptorId])
go

ALTER TABLE [edfi].[CredentialFieldDescriptor] ADD CONSTRAINT [FK_CredentialFieldDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([CredentialFieldDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[DiagnosisDescriptor] 
 */

ALTER TABLE [edfi].[DiagnosisDescriptor] ADD CONSTRAINT [FK_DiagnosisDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([DiagnosisDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[DiagnosisDescriptor] ADD CONSTRAINT [FK_DiagnosisDescriptor_DiagnosisType_DiagnosisTypeId] 
    FOREIGN KEY ([DiagnosisTypeId])
    REFERENCES [edfi].[DiagnosisType]([DiagnosisTypeId])
go


/* 
 * TABLE: [edfi].[DisabilityDescriptor] 
 */

ALTER TABLE [edfi].[DisabilityDescriptor] ADD CONSTRAINT [FK_DisabilityDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([DisabilityDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[DisabilityDescriptor] ADD CONSTRAINT [FK_DisabilityDescriptor_DisabilityCategoryType_DisabilityCategoryId] 
    FOREIGN KEY ([DisabilityCategoryTypeId])
    REFERENCES [edfi].[DisabilityCategoryType]([DisabilityCategoryTypeId])
go

ALTER TABLE [edfi].[DisabilityDescriptor] ADD CONSTRAINT [FK_DisabilityDescriptor_DisabilityType_DisabilityTypeId] 
    FOREIGN KEY ([DisabilityTypeId])
    REFERENCES [edfi].[DisabilityType]([DisabilityTypeId])
go


/* 
 * TABLE: [edfi].[DisciplineAction] 
 */

ALTER TABLE [edfi].[DisciplineAction] ADD CONSTRAINT [FK_DisciplineAction_DisciplineActionLengthDifferenceReasonType_DisciplineActionLengthDifferenceReasonTypeId] 
    FOREIGN KEY ([DisciplineActionLengthDifferenceReasonTypeId])
    REFERENCES [edfi].[DisciplineActionLengthDifferenceReasonType]([DisciplineActionLengthDifferenceReasonTypeId])
go

ALTER TABLE [edfi].[DisciplineAction] ADD CONSTRAINT [FK_DisciplineAction_School_AssignmentSchoolId] 
    FOREIGN KEY ([AssignmentSchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go

ALTER TABLE [edfi].[DisciplineAction] ADD CONSTRAINT [FK_DisciplineAction_School_ResponsibilitySchoolId] 
    FOREIGN KEY ([ResponsibilitySchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go

ALTER TABLE [edfi].[DisciplineAction] ADD CONSTRAINT [FK_DisciplineAction_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[DisciplineActionDiscipline] 
 */

ALTER TABLE [edfi].[DisciplineActionDiscipline] ADD CONSTRAINT [FK_DisciplineActionDiscipline_DisciplineAction_StudentUSI] 
    FOREIGN KEY ([DisciplineActionIdentifier], [StudentUSI], [DisciplineDate])
    REFERENCES [edfi].[DisciplineAction]([DisciplineActionIdentifier], [StudentUSI], [DisciplineDate]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[DisciplineActionDiscipline] ADD CONSTRAINT [FK_DisciplineActionDiscipline_DisciplineDescriptor_DisciplineDescriptorId] 
    FOREIGN KEY ([DisciplineDescriptorId])
    REFERENCES [edfi].[DisciplineDescriptor]([DisciplineDescriptorId])
go


/* 
 * TABLE: [edfi].[DisciplineActionDisciplineIncident] 
 */

ALTER TABLE [edfi].[DisciplineActionDisciplineIncident] ADD CONSTRAINT [FK_DisciplineActionDisciplineIncident_DisciplineAction_StudentUSI] 
    FOREIGN KEY ([DisciplineActionIdentifier], [StudentUSI], [DisciplineDate])
    REFERENCES [edfi].[DisciplineAction]([DisciplineActionIdentifier], [StudentUSI], [DisciplineDate]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[DisciplineActionDisciplineIncident] ADD CONSTRAINT [FK_DisciplineActionDisciplineIncident_DisciplineIncident_SchoolId] 
    FOREIGN KEY ([IncidentIdentifier], [SchoolId])
    REFERENCES [edfi].[DisciplineIncident]([IncidentIdentifier], [SchoolId])
go


/* 
 * TABLE: [edfi].[DisciplineActionStaff] 
 */

ALTER TABLE [edfi].[DisciplineActionStaff] ADD CONSTRAINT [FK_DisciplineActionStaff_DisciplineAction_StudentUSI] 
    FOREIGN KEY ([DisciplineActionIdentifier], [StudentUSI], [DisciplineDate])
    REFERENCES [edfi].[DisciplineAction]([DisciplineActionIdentifier], [StudentUSI], [DisciplineDate]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[DisciplineActionStaff] ADD CONSTRAINT [FK_DisciplineActionStaff_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI])
go


/* 
 * TABLE: [edfi].[DisciplineDescriptor] 
 */

ALTER TABLE [edfi].[DisciplineDescriptor] ADD CONSTRAINT [FK_DisciplineDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([DisciplineDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[DisciplineDescriptor] ADD CONSTRAINT [FK_DisciplineDescriptor_DisciplineType_DisciplineTypeId] 
    FOREIGN KEY ([DisciplineTypeId])
    REFERENCES [edfi].[DisciplineType]([DisciplineTypeId])
go


/* 
 * TABLE: [edfi].[DisciplineIncident] 
 */

ALTER TABLE [edfi].[DisciplineIncident] ADD CONSTRAINT [FK_DisciplineIncident_IncidentLocationType_IncidentLocationTypeId] 
    FOREIGN KEY ([IncidentLocationTypeId])
    REFERENCES [edfi].[IncidentLocationType]([IncidentLocationTypeId])
go

ALTER TABLE [edfi].[DisciplineIncident] ADD CONSTRAINT [FK_DisciplineIncident_ReporterDescriptionDescriptorId] 
    FOREIGN KEY ([ReporterDescriptionDescriptorId])
    REFERENCES [edfi].[ReporterDescriptionDescriptor]([ReporterDescriptionDescriptorId])
go

ALTER TABLE [edfi].[DisciplineIncident] ADD CONSTRAINT [FK_DisciplineIncident_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go

ALTER TABLE [edfi].[DisciplineIncident] ADD CONSTRAINT [FK_DisciplineIncident_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI])
go


/* 
 * TABLE: [edfi].[DisciplineIncidentBehavior] 
 */

ALTER TABLE [edfi].[DisciplineIncidentBehavior] ADD CONSTRAINT [FK_DisciplineIncidentBehavior_BehaviorDescriptor_BehaviorDescriptorId] 
    FOREIGN KEY ([BehaviorDescriptorId])
    REFERENCES [edfi].[BehaviorDescriptor]([BehaviorDescriptorId])
go

ALTER TABLE [edfi].[DisciplineIncidentBehavior] ADD CONSTRAINT [FK_DisciplineIncidentBehavior_DisciplineIncident_SchoolId] 
    FOREIGN KEY ([IncidentIdentifier], [SchoolId])
    REFERENCES [edfi].[DisciplineIncident]([IncidentIdentifier], [SchoolId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[DisciplineIncidentWeapon] 
 */

ALTER TABLE [edfi].[DisciplineIncidentWeapon] ADD CONSTRAINT [FK_DisciplineIncidentWeapons_DisciplineIncident_SchoolId] 
    FOREIGN KEY ([IncidentIdentifier], [SchoolId])
    REFERENCES [edfi].[DisciplineIncident]([IncidentIdentifier], [SchoolId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[DisciplineIncidentWeapon] ADD CONSTRAINT [FK_DisciplineIncidentWeapons_WeaponDescriptor_WeaponDescriptorId] 
    FOREIGN KEY ([WeaponDescriptorId])
    REFERENCES [edfi].[WeaponDescriptor]([WeaponDescriptorId])
go


/* 
 * TABLE: [edfi].[EducationContent] 
 */

ALTER TABLE [edfi].[EducationContent] ADD CONSTRAINT [FK_EducationContent_ContentClassType_ContentClassTypeId] 
    FOREIGN KEY ([ContentClassTypeId])
    REFERENCES [edfi].[ContentClassType]([ContentClassTypeId])
go

ALTER TABLE [edfi].[EducationContent] ADD CONSTRAINT [FK_EducationContent_CostRateType_CostRateTypeId] 
    FOREIGN KEY ([CostRateTypeId])
    REFERENCES [edfi].[CostRateType]([CostRateTypeId])
go

ALTER TABLE [edfi].[EducationContent] ADD CONSTRAINT [FK_EducationContent_InteractivityStyleType_InteractivityStyleTypeId] 
    FOREIGN KEY ([InteractivityStyleTypeId])
    REFERENCES [edfi].[InteractivityStyleType]([InteractivityStyleTypeId])
go

ALTER TABLE [edfi].[EducationContent] ADD CONSTRAINT [FK_EducationContent_LearningStandard_LearningStandardId] 
    FOREIGN KEY ([LearningStandardId])
    REFERENCES [edfi].[LearningStandard]([LearningStandardId])
go


/* 
 * TABLE: [edfi].[EducationContentAppropriateGradeLevel] 
 */

ALTER TABLE [edfi].[EducationContentAppropriateGradeLevel] ADD CONSTRAINT [FK_EducationContentAppropriateGradeLevel_EducationContent_ContentIdentifier] 
    FOREIGN KEY ([ContentIdentifier])
    REFERENCES [edfi].[EducationContent]([ContentIdentifier]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[EducationContentAppropriateGradeLevel] ADD CONSTRAINT [FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptorId] 
    FOREIGN KEY ([GradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go


/* 
 * TABLE: [edfi].[EducationContentAppropriateSex] 
 */

ALTER TABLE [edfi].[EducationContentAppropriateSex] ADD CONSTRAINT [FK_EducationContentAppropriateSex_EducationContent_ContentIdentifier] 
    FOREIGN KEY ([ContentIdentifier])
    REFERENCES [edfi].[EducationContent]([ContentIdentifier]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[EducationContentAppropriateSex] ADD CONSTRAINT [FK_EducationContentAppropriateSex_SexType_SexTypeId] 
    FOREIGN KEY ([SexTypeId])
    REFERENCES [edfi].[SexType]([SexTypeId])
go


/* 
 * TABLE: [edfi].[EducationContentAuthor] 
 */

ALTER TABLE [edfi].[EducationContentAuthor] ADD CONSTRAINT [FK_EducationContentAuthor_EducationContent_ContentIdentifier] 
    FOREIGN KEY ([ContentIdentifier])
    REFERENCES [edfi].[EducationContent]([ContentIdentifier]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[EducationContentDerivativeSourceEducationContent] 
 */

ALTER TABLE [edfi].[EducationContentDerivativeSourceEducationContent] ADD CONSTRAINT [FK_EducationContentDerivativeSourceEducationContent_EducationContent_ContentIdentifier] 
    FOREIGN KEY ([ContentIdentifier])
    REFERENCES [edfi].[EducationContent]([ContentIdentifier]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[EducationContentDerivativeSourceEducationContent] ADD CONSTRAINT [FK_EducationContentDerivativeSourceEducationContent_EducationContent_DerivativeSourceContentIdentifier] 
    FOREIGN KEY ([DerivativeSourceContentIdentifier])
    REFERENCES [edfi].[EducationContent]([ContentIdentifier])
go


/* 
 * TABLE: [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] 
 */

ALTER TABLE [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] ADD CONSTRAINT [FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent_ContentIdentifier] 
    FOREIGN KEY ([ContentIdentifier])
    REFERENCES [edfi].[EducationContent]([ContentIdentifier]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[EducationContentDerivativeSourceURI] 
 */

ALTER TABLE [edfi].[EducationContentDerivativeSourceURI] ADD CONSTRAINT [FK_EducationContentDerivativeSourceURI_EducationContent_ContentIdentifier] 
    FOREIGN KEY ([ContentIdentifier])
    REFERENCES [edfi].[EducationContent]([ContentIdentifier]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[EducationContentLanguage] 
 */

ALTER TABLE [edfi].[EducationContentLanguage] ADD CONSTRAINT [FK_EducationContentLanguage_EducationContent_ContentIdentifier] 
    FOREIGN KEY ([ContentIdentifier])
    REFERENCES [edfi].[EducationContent]([ContentIdentifier]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[EducationContentLanguage] ADD CONSTRAINT [FK_EducationContentLanguage_LanguageDescriptor_LanguageDescriptorId] 
    FOREIGN KEY ([LanguageDescriptorId])
    REFERENCES [edfi].[LanguageDescriptor]([LanguageDescriptorId])
go


/* 
 * TABLE: [edfi].[EducationOrganization] 
 */

ALTER TABLE [edfi].[EducationOrganization] ADD CONSTRAINT [FK_EducationOrganization_OperationalStatusType_OperationalStatusTypeId] 
    FOREIGN KEY ([OperationalStatusTypeId])
    REFERENCES [edfi].[OperationalStatusType]([OperationalStatusTypeId])
go


/* 
 * TABLE: [edfi].[EducationOrganizationAddress] 
 */

ALTER TABLE [edfi].[EducationOrganizationAddress] ADD CONSTRAINT [FK_EducationOrganizationAddress_AddressType_AddressTypeId] 
    FOREIGN KEY ([AddressTypeId])
    REFERENCES [edfi].[AddressType]([AddressTypeId])
go

ALTER TABLE [edfi].[EducationOrganizationAddress] ADD CONSTRAINT [FK_EducationOrganizationAddress_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[EducationOrganizationAddress] ADD CONSTRAINT [FK_EducationOrganizationAddress_StateAbbreviationType_StateAbbreviationTypeId] 
    FOREIGN KEY ([StateAbbreviationTypeId])
    REFERENCES [edfi].[StateAbbreviationType]([StateAbbreviationTypeId])
go


/* 
 * TABLE: [edfi].[EducationOrganizationCategory] 
 */

ALTER TABLE [edfi].[EducationOrganizationCategory] ADD CONSTRAINT [FK_EducationOrganizationCategory_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[EducationOrganizationCategory] ADD CONSTRAINT [FK_EducationOrganizationCategory_EducationOrganizationCategoryType_EducationOrganizationCategoryTypeId] 
    FOREIGN KEY ([EducationOrganizationCategoryTypeId])
    REFERENCES [edfi].[EducationOrganizationCategoryType]([EducationOrganizationCategoryTypeId])
go


/* 
 * TABLE: [edfi].[EducationOrganizationIdentificationCode] 
 */

ALTER TABLE [edfi].[EducationOrganizationIdentificationCode] ADD CONSTRAINT [FK_EducationOrganizationIdentificationCode_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[EducationOrganizationIdentificationCode] ADD CONSTRAINT [FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptorId] 
    FOREIGN KEY ([EducationOrganizationIdentificationSystemDescriptorId])
    REFERENCES [edfi].[EducationOrganizationIdentificationSystemDescriptor]([EducationOrganizationIdentificationSystemDescriptorId])
go


/* 
 * TABLE: [edfi].[EducationOrganizationIdentificationSystemDescriptor] 
 */

ALTER TABLE [edfi].[EducationOrganizationIdentificationSystemDescriptor] ADD CONSTRAINT [FK_EducationOrganizationIdentificationDescriptor_Descriptor] 
    FOREIGN KEY ([EducationOrganizationIdentificationSystemDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId])
go

ALTER TABLE [edfi].[EducationOrganizationIdentificationSystemDescriptor] ADD CONSTRAINT [FK_EducationOrganizationIdentificationSystemDescriptor_EducationOrganizationIdentificationSystemType] 
    FOREIGN KEY ([EducationOrganizationIdentificationSystemTypeId])
    REFERENCES [edfi].[EducationOrganizationIdentificationSystemType]([EducationOrganizationIdentificationSystemTypeId])
go


/* 
 * TABLE: [edfi].[EducationOrganizationInstitutionTelephone] 
 */

ALTER TABLE [edfi].[EducationOrganizationInstitutionTelephone] ADD CONSTRAINT [FK_EducationOrganizationInstitutionTelephone_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[EducationOrganizationInstitutionTelephone] ADD CONSTRAINT [FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberType_InstitutionTelephoneNumberTypeId] 
    FOREIGN KEY ([InstitutionTelephoneNumberTypeId])
    REFERENCES [edfi].[InstitutionTelephoneNumberType]([InstitutionTelephoneNumberTypeId])
go


/* 
 * TABLE: [edfi].[EducationOrganizationInternationalAddress] 
 */

ALTER TABLE [edfi].[EducationOrganizationInternationalAddress] ADD CONSTRAINT [FK_EducationOrganizationInternationalAddress_AddressType_AddressTypeId] 
    FOREIGN KEY ([AddressTypeId])
    REFERENCES [edfi].[AddressType]([AddressTypeId])
go

ALTER TABLE [edfi].[EducationOrganizationInternationalAddress] ADD CONSTRAINT [FK_EducationOrganizationInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
    FOREIGN KEY ([CountryDescriptorId])
    REFERENCES [edfi].[CountryDescriptor]([CountryDescriptorId])
go

ALTER TABLE [edfi].[EducationOrganizationInternationalAddress] ADD CONSTRAINT [FK_EducationOrganizationInternationalAddress_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[EducationOrganizationInterventionPrescriptionAssociation] 
 */

ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] ADD CONSTRAINT [FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] ADD CONSTRAINT [FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription] 
    FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [InterventionPrescriptionEducationOrganizationId])
    REFERENCES [edfi].[InterventionPrescription]([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
go


/* 
 * TABLE: [edfi].[EducationOrganizationNetwork] 
 */

ALTER TABLE [edfi].[EducationOrganizationNetwork] ADD CONSTRAINT [FK_EducationOrganizationNetwork_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationNetworkId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[EducationOrganizationNetwork] ADD CONSTRAINT [FK_EducationOrganizationNetwork_NetworkPurposeType_NetworkPurposeTypeId] 
    FOREIGN KEY ([NetworkPurposeTypeId])
    REFERENCES [edfi].[NetworkPurposeType]([NetworkPurposeTypeId])
go


/* 
 * TABLE: [edfi].[EducationOrganizationNetworkAssociation] 
 */

ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] ADD CONSTRAINT [FK_EducationOrganizationNetworkAssociation_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([MemberEducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] ADD CONSTRAINT [FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork_EducationOrganizationNetworkId] 
    FOREIGN KEY ([EducationOrganizationNetworkId])
    REFERENCES [edfi].[EducationOrganizationNetwork]([EducationOrganizationNetworkId])
go


/* 
 * TABLE: [edfi].[EducationOrganizationPeerAssociation] 
 */

ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] ADD CONSTRAINT [FK_EducationOrganizationPeerAssociation_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] ADD CONSTRAINT [FK_EducationOrganizationPeerAssociation_EducationOrganization_PeerEducationOrganizationId] 
    FOREIGN KEY ([PeerEducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go


/* 
 * TABLE: [edfi].[EducationServiceCenter] 
 */

ALTER TABLE [edfi].[EducationServiceCenter] ADD CONSTRAINT [FK_EducationServiceCenter_EducationOrganization_EducationServiceCenterId] 
    FOREIGN KEY ([EducationServiceCenterId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[EducationServiceCenter] ADD CONSTRAINT [FK_EducationServiceCenter_StateEducationAgency_StateEducationAgencyId] 
    FOREIGN KEY ([StateEducationAgencyId])
    REFERENCES [edfi].[StateEducationAgency]([StateEducationAgencyId])
go


/* 
 * TABLE: [edfi].[EmploymentStatusDescriptor] 
 */

ALTER TABLE [edfi].[EmploymentStatusDescriptor] ADD CONSTRAINT [FK_EmploymentStatusDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([EmploymentStatusDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[EmploymentStatusDescriptor] ADD CONSTRAINT [FK_EmploymentStatusDescriptor_EmploymentStatusType_EmploymentStatusTypeId] 
    FOREIGN KEY ([EmploymentStatusTypeId])
    REFERENCES [edfi].[EmploymentStatusType]([EmploymentStatusTypeId])
go


/* 
 * TABLE: [edfi].[EntryTypeDescriptor] 
 */

ALTER TABLE [edfi].[EntryTypeDescriptor] ADD CONSTRAINT [FK_EntryTypeDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([EntryTypeDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[EntryTypeDescriptor] ADD CONSTRAINT [FK_EntryTypeDescriptor_EntryType_EntryTypeId] 
    FOREIGN KEY ([EntryTypeId])
    REFERENCES [edfi].[EntryType]([EntryTypeId])
go


/* 
 * TABLE: [edfi].[ExitWithdrawTypeDescriptor] 
 */

ALTER TABLE [edfi].[ExitWithdrawTypeDescriptor] ADD CONSTRAINT [FK_ExitWithdrawTypeDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([ExitWithdrawTypeDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[ExitWithdrawTypeDescriptor] ADD CONSTRAINT [FK_ExitWithdrawTypeDescriptor_ExitWithdrawType_ExitWithdrawTypeId] 
    FOREIGN KEY ([ExitWithdrawTypeId])
    REFERENCES [edfi].[ExitWithdrawType]([ExitWithdrawTypeId])
go


/* 
 * TABLE: [edfi].[FeederSchoolAssociation] 
 */

ALTER TABLE [edfi].[FeederSchoolAssociation] ADD CONSTRAINT [FK_FeederSchoolAssociation_FeederSchoolId_School_SchoolId] 
    FOREIGN KEY ([FeederSchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go

ALTER TABLE [edfi].[FeederSchoolAssociation] ADD CONSTRAINT [FK_FeederSchoolAssociation_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go


/* 
 * TABLE: [edfi].[Grade] 
 */

ALTER TABLE [edfi].[Grade] ADD CONSTRAINT [FK_Grade_GradeType_GradeTypeId] 
    FOREIGN KEY ([GradeTypeId])
    REFERENCES [edfi].[GradeType]([GradeTypeId])
go

ALTER TABLE [edfi].[Grade] ADD CONSTRAINT [FK_Grade_GradingPeriod_BeginDate] 
    FOREIGN KEY ([GradingPeriodDescriptorId], [SchoolId], [GradingPeriodBeginDate])
    REFERENCES [edfi].[GradingPeriod]([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
go

ALTER TABLE [edfi].[Grade] ADD CONSTRAINT [FK_Grade_PerformanceBaseType_PerformanceBaseConversionTypeId] 
    FOREIGN KEY ([PerformanceBaseConversionTypeId])
    REFERENCES [edfi].[PerformanceBaseConversionType]([PerformanceBaseConversionTypeId])
go

ALTER TABLE [edfi].[Grade] ADD CONSTRAINT [FK_Grade_StudentSectionAssociation] 
    FOREIGN KEY ([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
    REFERENCES [edfi].[StudentSectionAssociation]([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
	ON UPDATE CASCADE
go


/* 
 * TABLE: [edfi].[GradebookEntry] 
 */

ALTER TABLE [edfi].[GradebookEntry] ADD CONSTRAINT [FK_GradebookEntry_GradebookEntryType_GradebookEntryTypeId] 
    FOREIGN KEY ([GradebookEntryTypeId])
    REFERENCES [edfi].[GradebookEntryType]([GradebookEntryTypeId])
go

ALTER TABLE [edfi].[GradebookEntry] ADD CONSTRAINT [FK_GradebookEntry_GradingPeriod] 
    FOREIGN KEY ([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
    REFERENCES [edfi].[GradingPeriod]([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
go

ALTER TABLE [edfi].[GradebookEntry] ADD CONSTRAINT [FK_GradebookEntry_Section_SchoolId] 
    FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
    REFERENCES [edfi].[Section]([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) 
	ON UPDATE CASCADE
go


/* 
 * TABLE: [edfi].[GradebookEntryLearningObjective] 
 */

ALTER TABLE [edfi].[GradebookEntryLearningObjective] ADD CONSTRAINT [FK_GradebookEntryLearningObjective_LearningObjective_Objective] 
    FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
    REFERENCES [edfi].[LearningObjective]([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
go

ALTER TABLE [edfi].[GradebookEntryLearningObjective] ADD CONSTRAINT [FK_GradebookEntryLearningOjective_GradebookEntry_SectionSchoolId] 
    FOREIGN KEY ([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned])
    REFERENCES [edfi].[GradebookEntry]([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned])
	ON UPDATE CASCADE
go


/* 
 * TABLE: [edfi].[GradebookEntryLearningStandard] 
 */

ALTER TABLE [edfi].[GradebookEntryLearningStandard] ADD CONSTRAINT [FK_GradebookEntryLearningStandard_GradebookEntry_SectionSchoolId] 
    FOREIGN KEY ([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned])
    REFERENCES [edfi].[GradebookEntry]([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned])
	ON DELETE CASCADE
	ON UPDATE CASCADE
go

ALTER TABLE [edfi].[GradebookEntryLearningStandard] ADD CONSTRAINT [FK_GradebookEntryLearningStandard_LearningStandard_LearningStandardId] 
    FOREIGN KEY ([LearningStandardId])
    REFERENCES [edfi].[LearningStandard]([LearningStandardId])
go


/* 
 * TABLE: [edfi].[GradeLevelDescriptor] 
 */

ALTER TABLE [edfi].[GradeLevelDescriptor] ADD CONSTRAINT [FK_GradeLevelDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([GradeLevelDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[GradeLevelDescriptor] ADD CONSTRAINT [FK_GradeLevelDescriptor_GradeLevelType_GradeLevelTypeId] 
    FOREIGN KEY ([GradeLevelTypeId])
    REFERENCES [edfi].[GradeLevelType]([GradeLevelTypeId])
go


/* 
 * TABLE: [edfi].[GradingPeriod] 
 */

ALTER TABLE [edfi].[GradingPeriod] ADD CONSTRAINT [FK_GradingPeriod_GradingPeriodDescriptorId] 
    FOREIGN KEY ([GradingPeriodDescriptorId])
    REFERENCES [edfi].[GradingPeriodDescriptor]([GradingPeriodDescriptorId])
go

ALTER TABLE [edfi].[GradingPeriod] ADD CONSTRAINT [FK_GradingPeriod_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go


/* 
 * TABLE: [edfi].[GradingPeriodDescriptor] 
 */

ALTER TABLE [edfi].[GradingPeriodDescriptor] ADD CONSTRAINT [FK_GradingPeriodDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([GradingPeriodDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[GradingPeriodDescriptor] ADD CONSTRAINT [FK_GradingPeriodDescriptor_GradingPeriodType_GradingPeriodTypeId] 
    FOREIGN KEY ([GradingPeriodTypeId])
    REFERENCES [edfi].[GradingPeriodType]([GradingPeriodTypeId])
go


/* 
 * TABLE: [edfi].[GraduationPlan] 
 */

ALTER TABLE [edfi].[GraduationPlan] ADD CONSTRAINT [FK_GraduationPlan_CreditType_TotalCreditsRequiredCreditTypeId] 
    FOREIGN KEY ([TotalRequiredCreditTypeId])
    REFERENCES [edfi].[CreditType]([CreditTypeId])
go

ALTER TABLE [edfi].[GraduationPlan] ADD CONSTRAINT [FK_GraduationPlan_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[GraduationPlan] ADD CONSTRAINT [FK_GraduationPlan_GraduationPlanTypeDescriptor_GraduationPlanTypeDescriptorId] 
    FOREIGN KEY ([GraduationPlanTypeDescriptorId])
    REFERENCES [edfi].[GraduationPlanTypeDescriptor]([GraduationPlanTypeDescriptorId])
go

ALTER TABLE [edfi].[GraduationPlan] ADD CONSTRAINT [FK_GraduationPlan_SchoolYearType_GraduationSchoolYear] 
    FOREIGN KEY ([GraduationSchoolYear])
    REFERENCES [edfi].[SchoolYearType]([SchoolYear])
go


/* 
 * TABLE: [edfi].[GraduationPlanCreditsByCourse] 
 */

ALTER TABLE [edfi].[GraduationPlanCreditsByCourse] ADD CONSTRAINT [FK_GraduationPlanCreditsByCourse_CreditType_CreditTypeId] 
    FOREIGN KEY ([CreditTypeId])
    REFERENCES [edfi].[CreditType]([CreditTypeId])
go

ALTER TABLE [edfi].[GraduationPlanCreditsByCourse] ADD CONSTRAINT [FK_GraduationPlanCreditsByCourse_GradeLevelDescriptorId] 
    FOREIGN KEY ([WhenTakenGradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[GraduationPlanCreditsByCourse] ADD CONSTRAINT [FK_GraduationPlanCreditsByCourse_GraduationPlan_EducationOrganizationId] 
    FOREIGN KEY ([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
    REFERENCES [edfi].[GraduationPlan]([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[GraduationPlanCreditsByCourseCourse] 
 */

ALTER TABLE [edfi].[GraduationPlanCreditsByCourseCourse] ADD CONSTRAINT [FK_GraduationPlanCreditsByCourseCourse_Course] 
    FOREIGN KEY ([CourseEducationOrganizationId], [CourseCode])
    REFERENCES [edfi].[Course]([EducationOrganizationId], [CourseCode])
go

ALTER TABLE [edfi].[GraduationPlanCreditsByCourseCourse] ADD CONSTRAINT [FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse] 
    FOREIGN KEY ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [CourseSetName])
    REFERENCES [edfi].[GraduationPlanCreditsByCourse]([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [CourseSetName]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[GraduationPlanCreditsBySubject] 
 */

ALTER TABLE [edfi].[GraduationPlanCreditsBySubject] ADD CONSTRAINT [FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptorId] 
    FOREIGN KEY ([AcademicSubjectDescriptorId])
    REFERENCES [edfi].[AcademicSubjectDescriptor]([AcademicSubjectDescriptorId])
go

ALTER TABLE [edfi].[GraduationPlanCreditsBySubject] ADD CONSTRAINT [FK_GraduationPlanCreditsBySubject_CreditType_CreditTypeId] 
    FOREIGN KEY ([CreditTypeId])
    REFERENCES [edfi].[CreditType]([CreditTypeId])
go

ALTER TABLE [edfi].[GraduationPlanCreditsBySubject] ADD CONSTRAINT [FK_GraduationPlanCreditsBySubject_GraduationPlan_EducationOrganizationId] 
    FOREIGN KEY ([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
    REFERENCES [edfi].[GraduationPlan]([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[GraduationPlanRequiredAssessment] 
 */

ALTER TABLE [edfi].[GraduationPlanRequiredAssessment] ADD CONSTRAINT [FK_GraduationPlanRequiredAssessment_Assessment_AssessmentTitle] 
    FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
    REFERENCES [edfi].[Assessment]([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
go

ALTER TABLE [edfi].[GraduationPlanRequiredAssessment] ADD CONSTRAINT [FK_GraduationPlanRequiredAssessment_GraduationPlan_EducationOrganizationId] 
    FOREIGN KEY ([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
    REFERENCES [edfi].[GraduationPlan]([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
go


/* 
 * TABLE: [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] 
 */

ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] 
    FOREIGN KEY ([AssessmentReportingMethodTypeId])
    REFERENCES [edfi].[AssessmentReportingMethodType]([AssessmentReportingMethodTypeId])
go

ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_GraduationPlanRequiredAssessment_AssessmentTitle] 
    FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear])
    REFERENCES [edfi].[GraduationPlanRequiredAssessment]([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear])
go

ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId] 
    FOREIGN KEY ([PerformanceLevelDescriptorId])
    REFERENCES [edfi].[PerformanceLevelDescriptor]([PerformanceLevelDescriptorId])
go

ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId] 
    FOREIGN KEY ([ResultDatatypeTypeId])
    REFERENCES [edfi].[ResultDatatypeType]([ResultDatatypeTypeId])
go


/* 
 * TABLE: [edfi].[GraduationPlanRequiredAssessmentScore] 
 */

ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentScore] ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] 
    FOREIGN KEY ([AssessmentReportingMethodTypeId])
    REFERENCES [edfi].[AssessmentReportingMethodType]([AssessmentReportingMethodTypeId])
go

ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentScore] ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment_AssessmentTitle] 
    FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear])
    REFERENCES [edfi].[GraduationPlanRequiredAssessment]([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear])
go

ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentScore] ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeType_ResultDatatypeTypeId] 
    FOREIGN KEY ([ResultDatatypeTypeId])
    REFERENCES [edfi].[ResultDatatypeType]([ResultDatatypeTypeId])
go


/* 
 * TABLE: [edfi].[GraduationPlanTypeDescriptor] 
 */

ALTER TABLE [edfi].[GraduationPlanTypeDescriptor] ADD CONSTRAINT [FK_GraduationPlanTypeDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([GraduationPlanTypeDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[GraduationPlanTypeDescriptor] ADD CONSTRAINT [FK_GraduationPlanTypeDescriptor_GraduationPlanType_GraduationPlanTypeId] 
    FOREIGN KEY ([GraduationPlanTypeId])
    REFERENCES [edfi].[GraduationPlanType]([GraduationPlanTypeId])
go


/* 
 * TABLE: [edfi].[Intervention] 
 */

ALTER TABLE [edfi].[Intervention] ADD CONSTRAINT [FK_Intervention_DeliveryMethodType_DeliveryMethodTypeId] 
    FOREIGN KEY ([DeliveryMethodTypeId])
    REFERENCES [edfi].[DeliveryMethodType]([DeliveryMethodTypeId])
go

ALTER TABLE [edfi].[Intervention] ADD CONSTRAINT [FK_Intervention_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[Intervention] ADD CONSTRAINT [FK_Intervention_InterventionClassType_InterventionClassTypeId] 
    FOREIGN KEY ([InterventionClassTypeId])
    REFERENCES [edfi].[InterventionClassType]([InterventionClassTypeId])
go


/* 
 * TABLE: [edfi].[InterventionAppropriateGradeLevel] 
 */

ALTER TABLE [edfi].[InterventionAppropriateGradeLevel] ADD CONSTRAINT [FK_InterventionAppropriateGradeLevel_GradeLevelDescriptorId] 
    FOREIGN KEY ([GradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[InterventionAppropriateGradeLevel] ADD CONSTRAINT [FK_InterventionAppropriateGradeLevel_Intervention] 
    FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[Intervention]([InterventionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[InterventionAppropriateSex] 
 */

ALTER TABLE [edfi].[InterventionAppropriateSex] ADD CONSTRAINT [FK_InterventionAppropriateSex_Intervention] 
    FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[Intervention]([InterventionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[InterventionAppropriateSex] ADD CONSTRAINT [FK_InterventionAppropriateSex_SexType_SexTypeId] 
    FOREIGN KEY ([SexTypeId])
    REFERENCES [edfi].[SexType]([SexTypeId])
go


/* 
 * TABLE: [edfi].[InterventionDiagnosis] 
 */

ALTER TABLE [edfi].[InterventionDiagnosis] ADD CONSTRAINT [FK_InterventionDiagnosis_DiagnosisDescriptor_DiagnosisDescriptorId] 
    FOREIGN KEY ([DiagnosisDescriptorId])
    REFERENCES [edfi].[DiagnosisDescriptor]([DiagnosisDescriptorId])
go

ALTER TABLE [edfi].[InterventionDiagnosis] ADD CONSTRAINT [FK_InterventionDiagnosis_Intervention] 
    FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[Intervention]([InterventionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[InterventionEducationContent] 
 */

ALTER TABLE [edfi].[InterventionEducationContent] ADD CONSTRAINT [FK_InterventionEducationContent_EducationContent_ContentIdentifier] 
    FOREIGN KEY ([ContentIdentifier])
    REFERENCES [edfi].[EducationContent]([ContentIdentifier])
go

ALTER TABLE [edfi].[InterventionEducationContent] ADD CONSTRAINT [FK_InterventionEducationContent_Intervention] 
    FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[Intervention]([InterventionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[InterventionInterventionPrescription] 
 */

ALTER TABLE [edfi].[InterventionInterventionPrescription] ADD CONSTRAINT [FK_InterventionInterventionPrescription_Intervention] 
    FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[Intervention]([InterventionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[InterventionInterventionPrescription] ADD CONSTRAINT [FK_InterventionInterventionPrescription_InterventionPrescription] 
    FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [InterventionPrescriptionEducationOrganizationId])
    REFERENCES [edfi].[InterventionPrescription]([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
go


/* 
 * TABLE: [edfi].[InterventionLearningResourceMetadataURI] 
 */

ALTER TABLE [edfi].[InterventionLearningResourceMetadataURI] ADD CONSTRAINT [FK_InterventionLearningResourceMetadataURI_Intervention] 
    FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[Intervention]([InterventionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[InterventionMeetingTime] 
 */

ALTER TABLE [edfi].[InterventionMeetingTime] ADD CONSTRAINT [FK_InterventionMeetingTime_ClassPeriod_ClassPeriodName] 
    FOREIGN KEY ([SchoolId], [ClassPeriodName])
    REFERENCES [edfi].[ClassPeriod]([SchoolId], [ClassPeriodName])
	ON UPDATE CASCADE
go

ALTER TABLE [edfi].[InterventionMeetingTime] ADD CONSTRAINT [FK_InterventionMeetingTime_Intervention] 
    FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[Intervention]([InterventionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[InterventionPopulationServed] 
 */

ALTER TABLE [edfi].[InterventionPopulationServed] ADD CONSTRAINT [FK_InterventionPopulationServed_Intervention] 
    FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[Intervention]([InterventionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[InterventionPopulationServed] ADD CONSTRAINT [FK_InterventionPopulationServed_PopulationServedType_PopulationServedTypeId] 
    FOREIGN KEY ([PopulationServedTypeId])
    REFERENCES [edfi].[PopulationServedType]([PopulationServedTypeId])
go


/* 
 * TABLE: [edfi].[InterventionPrescription] 
 */

ALTER TABLE [edfi].[InterventionPrescription] ADD CONSTRAINT [FK_InterventionPrescription_DeliveryMethodType_DeliveryMethodTypeId] 
    FOREIGN KEY ([DeliveryMethodTypeId])
    REFERENCES [edfi].[DeliveryMethodType]([DeliveryMethodTypeId])
go

ALTER TABLE [edfi].[InterventionPrescription] ADD CONSTRAINT [FK_InterventionPrescription_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[InterventionPrescription] ADD CONSTRAINT [FK_InterventionPrescription_InterventionClassType_InterventionClassTypeId] 
    FOREIGN KEY ([InterventionClassTypeId])
    REFERENCES [edfi].[InterventionClassType]([InterventionClassTypeId])
go


/* 
 * TABLE: [edfi].[InterventionPrescriptionAppropriateGradeLevel] 
 */

ALTER TABLE [edfi].[InterventionPrescriptionAppropriateGradeLevel] ADD CONSTRAINT [FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptorId] 
    FOREIGN KEY ([GradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[InterventionPrescriptionAppropriateGradeLevel] ADD CONSTRAINT [FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription] 
    FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionPrescription]([InterventionPrescriptionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[InterventionPrescriptionAppropriateSex] 
 */

ALTER TABLE [edfi].[InterventionPrescriptionAppropriateSex] ADD CONSTRAINT [FK_InterventionPrescriptionAppropriateSex_InterventionPrescription] 
    FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionPrescription]([InterventionPrescriptionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[InterventionPrescriptionAppropriateSex] ADD CONSTRAINT [FK_InterventionPrescriptionAppropriateSex_SexType_SexTypeId] 
    FOREIGN KEY ([SexTypeId])
    REFERENCES [edfi].[SexType]([SexTypeId])
go


/* 
 * TABLE: [edfi].[InterventionPrescriptionDiagnosis] 
 */

ALTER TABLE [edfi].[InterventionPrescriptionDiagnosis] ADD CONSTRAINT [FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor_DiagnosisDescriptorId] 
    FOREIGN KEY ([DiagnosisDescriptorId])
    REFERENCES [edfi].[DiagnosisDescriptor]([DiagnosisDescriptorId])
go

ALTER TABLE [edfi].[InterventionPrescriptionDiagnosis] ADD CONSTRAINT [FK_InterventionPrescriptionDiagnosis_InterventionPrescription] 
    FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionPrescription]([InterventionPrescriptionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[InterventionPrescriptionEducationContent] 
 */

ALTER TABLE [edfi].[InterventionPrescriptionEducationContent] ADD CONSTRAINT [FK_InterventionPrescriptionEducationContent_EducationContent_ContentIdentifier] 
    FOREIGN KEY ([ContentIdentifier])
    REFERENCES [edfi].[EducationContent]([ContentIdentifier])
go

ALTER TABLE [edfi].[InterventionPrescriptionEducationContent] ADD CONSTRAINT [FK_InterventionPrescriptionEducationContent_InterventionPrescription] 
    FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionPrescription]([InterventionPrescriptionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[InterventionPrescriptionLearningResourceMetadataURI] 
 */

ALTER TABLE [edfi].[InterventionPrescriptionLearningResourceMetadataURI] ADD CONSTRAINT [FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription] 
    FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionPrescription]([InterventionPrescriptionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[InterventionPrescriptionPopulationServed] 
 */

ALTER TABLE [edfi].[InterventionPrescriptionPopulationServed] ADD CONSTRAINT [FK_InterventionPrescriptionPopulationServed_InterventionPrescription] 
    FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionPrescription]([InterventionPrescriptionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[InterventionPrescriptionPopulationServed] ADD CONSTRAINT [FK_InterventionPrescriptionPopulationServed_PopulationServedType_PopulationServedTypeId] 
    FOREIGN KEY ([PopulationServedTypeId])
    REFERENCES [edfi].[PopulationServedType]([PopulationServedTypeId])
go


/* 
 * TABLE: [edfi].[InterventionPrescriptionURI] 
 */

ALTER TABLE [edfi].[InterventionPrescriptionURI] ADD CONSTRAINT [FK_InterventionPrescriptionURI_InterventionPrescription] 
    FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionPrescription]([InterventionPrescriptionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[InterventionStaff] 
 */

ALTER TABLE [edfi].[InterventionStaff] ADD CONSTRAINT [FK_InterventionStaff_Intervention] 
    FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[Intervention]([InterventionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[InterventionStaff] ADD CONSTRAINT [FK_InterventionStaff_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI])
go


/* 
 * TABLE: [edfi].[InterventionStudy] 
 */

ALTER TABLE [edfi].[InterventionStudy] ADD CONSTRAINT [FK_InterventionStudy_DeliveryMethodType_DeliveryMethodTypeId] 
    FOREIGN KEY ([DeliveryMethodTypeId])
    REFERENCES [edfi].[DeliveryMethodType]([DeliveryMethodTypeId])
go

ALTER TABLE [edfi].[InterventionStudy] ADD CONSTRAINT [FK_InterventionStudy_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[InterventionStudy] ADD CONSTRAINT [FK_InterventionStudy_InterventionClassType_InterventionClassTypeId] 
    FOREIGN KEY ([InterventionClassTypeId])
    REFERENCES [edfi].[InterventionClassType]([InterventionClassTypeId])
go

ALTER TABLE [edfi].[InterventionStudy] ADD CONSTRAINT [FK_InterventionStudy_InterventionPrescription] 
    FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [InterventionPrescriptionEducationOrganizationId])
    REFERENCES [edfi].[InterventionPrescription]([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
go


/* 
 * TABLE: [edfi].[InterventionStudyAppropriateGradeLevel] 
 */

ALTER TABLE [edfi].[InterventionStudyAppropriateGradeLevel] ADD CONSTRAINT [FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptorId] 
    FOREIGN KEY ([GradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[InterventionStudyAppropriateGradeLevel] ADD CONSTRAINT [FK_InterventionStudyAppropriateGradeLevel_InterventionStudy] 
    FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionStudy]([InterventionStudyIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[InterventionStudyAppropriateSex] 
 */

ALTER TABLE [edfi].[InterventionStudyAppropriateSex] ADD CONSTRAINT [FK_InterventionStudyAppropriateSex_InterventionStudy] 
    FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionStudy]([InterventionStudyIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[InterventionStudyAppropriateSex] ADD CONSTRAINT [FK_InterventionStudyAppropriateSex_SexType_SexTypeId] 
    FOREIGN KEY ([SexTypeId])
    REFERENCES [edfi].[SexType]([SexTypeId])
go


/* 
 * TABLE: [edfi].[InterventionStudyEducationContent] 
 */

ALTER TABLE [edfi].[InterventionStudyEducationContent] ADD CONSTRAINT [FK_InterventionStudyEducationContent_EducationContent_ContentIdentifier] 
    FOREIGN KEY ([ContentIdentifier])
    REFERENCES [edfi].[EducationContent]([ContentIdentifier])
go

ALTER TABLE [edfi].[InterventionStudyEducationContent] ADD CONSTRAINT [FK_InterventionStudyEducationContent_InterventionStudy] 
    FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionStudy]([InterventionStudyIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[InterventionStudyInterventionEffectiveness] 
 */

ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] ADD CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor_DiagnosisDescriptorId] 
    FOREIGN KEY ([DiagnosisDescriptorId])
    REFERENCES [edfi].[DiagnosisDescriptor]([DiagnosisDescriptorId])
go

ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] ADD CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptorId] 
    FOREIGN KEY ([GradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] ADD CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingType_InterventionEffectivenessRatingTypeId] 
    FOREIGN KEY ([InterventionEffectivenessRatingTypeId])
    REFERENCES [edfi].[InterventionEffectivenessRatingType]([InterventionEffectivenessRatingTypeId])
go

ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] ADD CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_InterventionStudy] 
    FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionStudy]([InterventionStudyIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] ADD CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_PopulationServedType_PopulationServedTypeId] 
    FOREIGN KEY ([PopulationServedTypeId])
    REFERENCES [edfi].[PopulationServedType]([PopulationServedTypeId])
go


/* 
 * TABLE: [edfi].[InterventionStudyLearningResourceMetadataURI] 
 */

ALTER TABLE [edfi].[InterventionStudyLearningResourceMetadataURI] ADD CONSTRAINT [FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy] 
    FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionStudy]([InterventionStudyIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[InterventionStudyPopulationServed] 
 */

ALTER TABLE [edfi].[InterventionStudyPopulationServed] ADD CONSTRAINT [FK_InterventionStudyPopulationServed_InterventionStudy] 
    FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionStudy]([InterventionStudyIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[InterventionStudyPopulationServed] ADD CONSTRAINT [FK_InterventionStudyPopulationServed_PopulationServedType_PopulationServedTypeId] 
    FOREIGN KEY ([PopulationServedTypeId])
    REFERENCES [edfi].[PopulationServedType]([PopulationServedTypeId])
go


/* 
 * TABLE: [edfi].[InterventionStudyStateAbbreviation] 
 */

ALTER TABLE [edfi].[InterventionStudyStateAbbreviation] ADD CONSTRAINT [FK_InterventionStudyStateAbbreviation_InterventionStudy] 
    FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionStudy]([InterventionStudyIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[InterventionStudyStateAbbreviation] ADD CONSTRAINT [FK_InterventionStudyStateAbbreviation_StateAbbreviationType_StateAbbreviationTypeId] 
    FOREIGN KEY ([StateAbbreviationTypeId])
    REFERENCES [edfi].[StateAbbreviationType]([StateAbbreviationTypeId])
go


/* 
 * TABLE: [edfi].[InterventionStudyURI] 
 */

ALTER TABLE [edfi].[InterventionStudyURI] ADD CONSTRAINT [FK_InterventionStudyURI_InterventionStudy] 
    FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[InterventionStudy]([InterventionStudyIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[InterventionURI] 
 */

ALTER TABLE [edfi].[InterventionURI] ADD CONSTRAINT [FK_InterventionURI_Intervention] 
    FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[Intervention]([InterventionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[LanguageDescriptor] 
 */

ALTER TABLE [edfi].[LanguageDescriptor] ADD CONSTRAINT [FK_LanguageDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([LanguageDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[LanguageDescriptor] ADD CONSTRAINT [FK_LanguageDescriptor_LanguagesType_LanguageTypeId] 
    FOREIGN KEY ([LanguageTypeId])
    REFERENCES [edfi].[LanguageType]([LanguageTypeId])
go


/* 
 * TABLE: [edfi].[LearningObjective] 
 */

ALTER TABLE [edfi].[LearningObjective] ADD CONSTRAINT [FK_LearningObjective_AcademicSubjectDescriptorId] 
    FOREIGN KEY ([AcademicSubjectDescriptorId])
    REFERENCES [edfi].[AcademicSubjectDescriptor]([AcademicSubjectDescriptorId])
go

ALTER TABLE [edfi].[LearningObjective] ADD CONSTRAINT [FK_LearningObjective_LearningObjective_ParentObjective] 
    FOREIGN KEY ([ParentObjective], [ParentAcademicSubjectDescriptorId], [ParentObjectiveGradeLevelDescriptorId])
    REFERENCES [edfi].[LearningObjective]([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
go

ALTER TABLE [edfi].[LearningObjective] ADD CONSTRAINT [FK_LearningObjective_ObjectiveGradeLevelDescriptorId] 
    FOREIGN KEY ([ObjectiveGradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go


/* 
 * TABLE: [edfi].[LearningObjectiveContentStandard] 
 */

ALTER TABLE [edfi].[LearningObjectiveContentStandard] ADD CONSTRAINT [FK_LearningObjectiveContentStandard_EducationOrganization_MandatingEducationOrganizationId] 
    FOREIGN KEY ([MandatingEducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[LearningObjectiveContentStandard] ADD CONSTRAINT [FK_LearningObjectiveContentStandard_LearningObjective_Objective] 
    FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
    REFERENCES [edfi].[LearningObjective]([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[LearningObjectiveContentStandard] ADD CONSTRAINT [FK_LearningObjectiveContentStandard_PublicationStatusType_PublicationStatusTypeId] 
    FOREIGN KEY ([PublicationStatusTypeId])
    REFERENCES [edfi].[PublicationStatusType]([PublicationStatusTypeId])
go


/* 
 * TABLE: [edfi].[LearningObjectiveContentStandardAuthor] 
 */

ALTER TABLE [edfi].[LearningObjectiveContentStandardAuthor] ADD CONSTRAINT [FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard_Objective] 
    FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
    REFERENCES [edfi].[LearningObjectiveContentStandard]([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[LearningObjectiveLearningStandard] 
 */

ALTER TABLE [edfi].[LearningObjectiveLearningStandard] ADD CONSTRAINT [FK_LearningObjectiveLearningStandard_LearningObjective] 
    FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
    REFERENCES [edfi].[LearningObjective]([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[LearningObjectiveLearningStandard] ADD CONSTRAINT [FK_LearningObjectiveLearningStandard_LearningStandard] 
    FOREIGN KEY ([LearningStandardId])
    REFERENCES [edfi].[LearningStandard]([LearningStandardId])
go


/* 
 * TABLE: [edfi].[LearningStandard] 
 */

ALTER TABLE [edfi].[LearningStandard] ADD CONSTRAINT [FK_LearningStandard_AcademicSubjectDescriptorId] 
    FOREIGN KEY ([AcademicSubjectDescriptorId])
    REFERENCES [edfi].[AcademicSubjectDescriptor]([AcademicSubjectDescriptorId])
go

ALTER TABLE [edfi].[LearningStandard] ADD CONSTRAINT [FK_LearningStandard_LearningStandard_ParentLearningStandardId] 
    FOREIGN KEY ([ParentLearningStandardId])
    REFERENCES [edfi].[LearningStandard]([LearningStandardId])
go


/* 
 * TABLE: [edfi].[LearningStandardContentStandard] 
 */

ALTER TABLE [edfi].[LearningStandardContentStandard] ADD CONSTRAINT [FK_LearningStandardContentStandard_EducationOrganization_MandatingEducationOrganizationReference] 
    FOREIGN KEY ([MandatingEducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[LearningStandardContentStandard] ADD CONSTRAINT [FK_LearningStandardContentStandard_LearningStandard_LearningStandardId] 
    FOREIGN KEY ([LearningStandardId])
    REFERENCES [edfi].[LearningStandard]([LearningStandardId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[LearningStandardContentStandard] ADD CONSTRAINT [FK_LearningStandardContentStandard_PublicationStatusType_PublicationStatusTypeId] 
    FOREIGN KEY ([PublicationStatusTypeId])
    REFERENCES [edfi].[PublicationStatusType]([PublicationStatusTypeId])
go


/* 
 * TABLE: [edfi].[LearningStandardContentStandardAuthor] 
 */

ALTER TABLE [edfi].[LearningStandardContentStandardAuthor] ADD CONSTRAINT [FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard_LearningStandardId] 
    FOREIGN KEY ([LearningStandardId])
    REFERENCES [edfi].[LearningStandardContentStandard]([LearningStandardId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[LearningStandardGradeLevel] 
 */

ALTER TABLE [edfi].[LearningStandardGradeLevel] ADD CONSTRAINT [FK_LearningStandardGradeLevel_GradeLevelDescriptor_GradeLevelDescriptorId] 
    FOREIGN KEY ([GradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[LearningStandardGradeLevel] ADD CONSTRAINT [FK_LearningStandardGradeLevel_LearningStandard_LearningStandardId] 
    FOREIGN KEY ([LearningStandardId])
    REFERENCES [edfi].[LearningStandard]([LearningStandardId])
go


/* 
 * TABLE: [edfi].[LearningStandardIdentificationCode] 
 */

ALTER TABLE [edfi].[LearningStandardIdentificationCode] ADD CONSTRAINT [FK_LearningStandardIdentificationCode_LearningStandard_LearningStandardId] 
    FOREIGN KEY ([LearningStandardId])
    REFERENCES [edfi].[LearningStandard]([LearningStandardId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[LearningStandardPrerequisiteLearningStandard] 
 */

ALTER TABLE [edfi].[LearningStandardPrerequisiteLearningStandard] ADD CONSTRAINT [FK_LearningStandardPrerequisiteLearningStandard_LearningStandard] 
    FOREIGN KEY ([LearningStandardId])
    REFERENCES [edfi].[LearningStandard]([LearningStandardId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[LearningStandardPrerequisiteLearningStandard] ADD CONSTRAINT [FK_LearningStandardPrerequisiteLearningStandard_LearningStandard_Prerequisite] 
    FOREIGN KEY ([PrerequisiteLearningStandardId])
    REFERENCES [edfi].[LearningStandard]([LearningStandardId])
go


/* 
 * TABLE: [edfi].[LeaveEvent] 
 */

ALTER TABLE [edfi].[LeaveEvent] ADD CONSTRAINT [FK_LeaveEvent_LeaveEventCategoryType_LeaveEventCategoryTypeId] 
    FOREIGN KEY ([LeaveEventCategoryTypeId])
    REFERENCES [edfi].[LeaveEventCategoryType]([LeaveEventCategoryTypeId])
go

ALTER TABLE [edfi].[LeaveEvent] ADD CONSTRAINT [FK_LeaveEvent_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI])
go


/* 
 * TABLE: [edfi].[LevelDescriptor] 
 */

ALTER TABLE [edfi].[LevelDescriptor] ADD CONSTRAINT [FK_LevelDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([LevelDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[LevelDescriptorGradeLevel] 
 */

ALTER TABLE [edfi].[LevelDescriptorGradeLevel] ADD CONSTRAINT [FK_LevelDescriptorGradeLevel_GradeLevelDescriptorId] 
    FOREIGN KEY ([GradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[LevelDescriptorGradeLevel] ADD CONSTRAINT [FK_LevelDescriptorGradeLevel_LevelDescriptor_LevelDescriptorId] 
    FOREIGN KEY ([LevelDescriptorId])
    REFERENCES [edfi].[LevelDescriptor]([LevelDescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[LevelOfEducationDescriptor] 
 */

ALTER TABLE [edfi].[LevelOfEducationDescriptor] ADD CONSTRAINT [FK_LevelOfEducationDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([LevelOfEducationDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[LevelOfEducationDescriptor] ADD CONSTRAINT [FK_LevelOfEducationDescriptor_LevelOfEducationType_LevelOfEducationTypeId] 
    FOREIGN KEY ([LevelOfEducationTypeId])
    REFERENCES [edfi].[LevelOfEducationType]([LevelOfEducationTypeId])
go


/* 
 * TABLE: [edfi].[LimitedEnglishProficiencyDescriptor] 
 */

ALTER TABLE [edfi].[LimitedEnglishProficiencyDescriptor] ADD CONSTRAINT [FK_LimitedEnglishProficiencyDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([LimitedEnglishProficiencyDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[LimitedEnglishProficiencyDescriptor] ADD CONSTRAINT [FK_LimitedEnglishProficiencyDescriptor_LimitedEnglishProficiencyType_LimitedEnglishProficiencyTypeId] 
    FOREIGN KEY ([LimitedEnglishProficiencyTypeId])
    REFERENCES [edfi].[LimitedEnglishProficiencyType]([LimitedEnglishProficiencyTypeId])
go


/* 
 * TABLE: [edfi].[LocalEducationAgency] 
 */

ALTER TABLE [edfi].[LocalEducationAgency] ADD CONSTRAINT [FK_LocalEducationAgency_CharterStatusType_CharterStatusTypeId] 
    FOREIGN KEY ([CharterStatusTypeId])
    REFERENCES [edfi].[CharterStatusType]([CharterStatusTypeId])
go

ALTER TABLE [edfi].[LocalEducationAgency] ADD CONSTRAINT [FK_LocalEducationAgency_EducationOrganization_LocalEducationAgencyId] 
    FOREIGN KEY ([LocalEducationAgencyId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[LocalEducationAgency] ADD CONSTRAINT [FK_LocalEducationAgency_EducationServiceCenter_EducationServiceCenterId] 
    FOREIGN KEY ([EducationServiceCenterId])
    REFERENCES [edfi].[EducationServiceCenter]([EducationServiceCenterId])
go

ALTER TABLE [edfi].[LocalEducationAgency] ADD CONSTRAINT [FK_LocalEducationAgency_LocalEducationAgency_LocalEducationAgencyId] 
    FOREIGN KEY ([ParentLocalEducationAgencyId])
    REFERENCES [edfi].[LocalEducationAgency]([LocalEducationAgencyId])
go

ALTER TABLE [edfi].[LocalEducationAgency] ADD CONSTRAINT [FK_LocalEducationAgency_LocalEducationAgencyCategoryType_LocalEducationAgencyCategoryTypeId] 
    FOREIGN KEY ([LocalEducationAgencyCategoryTypeId])
    REFERENCES [edfi].[LocalEducationAgencyCategoryType]([LocalEducationAgencyCategoryTypeId])
go

ALTER TABLE [edfi].[LocalEducationAgency] ADD CONSTRAINT [FK_LocalEducationAgency_StateEducationAgency_StateEducationAgencyId] 
    FOREIGN KEY ([StateEducationAgencyId])
    REFERENCES [edfi].[StateEducationAgency]([StateEducationAgencyId])
go


/* 
 * TABLE: [edfi].[LocalEducationAgencyAccountability] 
 */

ALTER TABLE [edfi].[LocalEducationAgencyAccountability] ADD CONSTRAINT [FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusType_GunFreeSchoolsActReportingStatusTypeId] 
    FOREIGN KEY ([GunFreeSchoolsActReportingStatusTypeId])
    REFERENCES [edfi].[GunFreeSchoolsActReportingStatusType]([GunFreeSchoolsActReportingStatusTypeId])
go

ALTER TABLE [edfi].[LocalEducationAgencyAccountability] ADD CONSTRAINT [FK_LocalEducationAgencyAccountability_LocalEducationAgency_LocalEducationAgencyId] 
    FOREIGN KEY ([LocalEducationAgencyId])
    REFERENCES [edfi].[LocalEducationAgency]([LocalEducationAgencyId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[LocalEducationAgencyAccountability] ADD CONSTRAINT [FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusType_SchoolChoiceImplementationStatusTypeId] 
    FOREIGN KEY ([SchoolChoiceImplementStatusTypeId])
    REFERENCES [edfi].[SchoolChoiceImplementStatusType]([SchoolChoiceImplementStatusTypeId])
go

ALTER TABLE [edfi].[LocalEducationAgencyAccountability] ADD CONSTRAINT [FK_LocalEducationAgencyAccountability_SchoolYearType_SchoolYear] 
    FOREIGN KEY ([SchoolYear])
    REFERENCES [edfi].[SchoolYearType]([SchoolYear])
go


/* 
 * TABLE: [edfi].[LocalEducationAgencyFederalFunds] 
 */

ALTER TABLE [edfi].[LocalEducationAgencyFederalFunds] ADD CONSTRAINT [FK_LocalEducationAgencyFederalFunds_LocalEducationAgency_LocalEducationAgencyId] 
    FOREIGN KEY ([LocalEducationAgencyId])
    REFERENCES [edfi].[LocalEducationAgency]([LocalEducationAgencyId])
go


/* 
 * TABLE: [edfi].[Location] 
 */

ALTER TABLE [edfi].[Location] ADD CONSTRAINT [FK_Location_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go


/* 
 * TABLE: [edfi].[ObjectiveAssessment] 
 */

ALTER TABLE [edfi].[ObjectiveAssessment] ADD CONSTRAINT [FK_ObjectiveAssessment_Assessment_AssessmentTitle] 
    FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
    REFERENCES [edfi].[Assessment]([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
go

ALTER TABLE [edfi].[ObjectiveAssessment] ADD CONSTRAINT [FK_ObjectiveAssessment_ObjectiveAssessment] 
    FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [ParentIdentificationCode])
    REFERENCES [edfi].[ObjectiveAssessment]([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
go


/* 
 * TABLE: [edfi].[ObjectiveAssessmentAssessmentItem] 
 */

ALTER TABLE [edfi].[ObjectiveAssessmentAssessmentItem] ADD CONSTRAINT [FK_ObjectiveAssessmentAssessmentItem_AssessmentItem] 
    FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AssessmentItemIdentificationCode])
    REFERENCES [edfi].[AssessmentItem]([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
go

ALTER TABLE [edfi].[ObjectiveAssessmentAssessmentItem] ADD CONSTRAINT [FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment] 
    FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
    REFERENCES [edfi].[ObjectiveAssessment]([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[ObjectiveAssessmentLearningObjective] 
 */

ALTER TABLE [edfi].[ObjectiveAssessmentLearningObjective] ADD CONSTRAINT [FK_ObjectiveAssessmentLearningObjective_LearningObjective_Objective] 
    FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId])
    REFERENCES [edfi].[LearningObjective]([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
go

ALTER TABLE [edfi].[ObjectiveAssessmentLearningObjective] ADD CONSTRAINT [FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment] 
    FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
    REFERENCES [edfi].[ObjectiveAssessment]([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[ObjectiveAssessmentLearningStandard] 
 */

ALTER TABLE [edfi].[ObjectiveAssessmentLearningStandard] ADD CONSTRAINT [FK_ObjectiveAssessmentLearningStandard_LearningStandard_LearningStandardId] 
    FOREIGN KEY ([LearningStandardId])
    REFERENCES [edfi].[LearningStandard]([LearningStandardId])
go

ALTER TABLE [edfi].[ObjectiveAssessmentLearningStandard] ADD CONSTRAINT [FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment] 
    FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
    REFERENCES [edfi].[ObjectiveAssessment]([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[ObjectiveAssessmentPerformanceLevel] 
 */

ALTER TABLE [edfi].[ObjectiveAssessmentPerformanceLevel] ADD CONSTRAINT [FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] 
    FOREIGN KEY ([AssessmentReportingMethodTypeId])
    REFERENCES [edfi].[AssessmentReportingMethodType]([AssessmentReportingMethodTypeId])
go

ALTER TABLE [edfi].[ObjectiveAssessmentPerformanceLevel] ADD CONSTRAINT [FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment] 
    FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
    REFERENCES [edfi].[ObjectiveAssessment]([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[ObjectiveAssessmentPerformanceLevel] ADD CONSTRAINT [FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId] 
    FOREIGN KEY ([PerformanceLevelDescriptorId])
    REFERENCES [edfi].[PerformanceLevelDescriptor]([PerformanceLevelDescriptorId])
go

ALTER TABLE [edfi].[ObjectiveAssessmentPerformanceLevel] ADD CONSTRAINT [FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeType_ResultDatatypeTypeId] 
    FOREIGN KEY ([ResultDatatypeTypeId])
    REFERENCES [edfi].[ResultDatatypeType]([ResultDatatypeTypeId])
go


/* 
 * TABLE: [edfi].[OpenStaffPosition] 
 */

ALTER TABLE [edfi].[OpenStaffPosition] ADD CONSTRAINT [FK_OpenStaffPosition_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[OpenStaffPosition] ADD CONSTRAINT [FK_OpenStaffPosition_EmploymentStatusDescriptor_EmploymentStatusDescriptorId] 
    FOREIGN KEY ([EmploymentStatusDescriptorId])
    REFERENCES [edfi].[EmploymentStatusDescriptor]([EmploymentStatusDescriptorId])
go

ALTER TABLE [edfi].[OpenStaffPosition] ADD CONSTRAINT [FK_OpenStaffPosition_PostingResultType_PostingResultTypeId] 
    FOREIGN KEY ([PostingResultTypeId])
    REFERENCES [edfi].[PostingResultType]([PostingResultTypeId])
go

ALTER TABLE [edfi].[OpenStaffPosition] ADD CONSTRAINT [FK_OpenStaffPosition_ProgramAssignmentDescriptor_ProgramAssignmentDescriptorId] 
    FOREIGN KEY ([ProgramAssignmentDescriptorId])
    REFERENCES [edfi].[ProgramAssignmentDescriptor]([ProgramAssignmentDescriptorId])
go

ALTER TABLE [edfi].[OpenStaffPosition] ADD CONSTRAINT [FK_OpenStaffPosition_StaffClassificationDescriptorId] 
    FOREIGN KEY ([StaffClassificationDescriptorId])
    REFERENCES [edfi].[StaffClassificationDescriptor]([StaffClassificationDescriptorId])
go


/* 
 * TABLE: [edfi].[OpenStaffPositionAcademicSubject] 
 */

ALTER TABLE [edfi].[OpenStaffPositionAcademicSubject] ADD CONSTRAINT [FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptorId] 
    FOREIGN KEY ([AcademicSubjectDescriptorId])
    REFERENCES [edfi].[AcademicSubjectDescriptor]([AcademicSubjectDescriptorId])
go

ALTER TABLE [edfi].[OpenStaffPositionAcademicSubject] ADD CONSTRAINT [FK_OpenStaffPositionAcademicSubjects_OpenStaffPosition_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId], [EmploymentStatusDescriptorId], [StaffClassificationDescriptorId], [RequisitionNumber], [DatePosted])
    REFERENCES [edfi].[OpenStaffPosition]([EducationOrganizationId], [EmploymentStatusDescriptorId], [StaffClassificationDescriptorId], [RequisitionNumber], [DatePosted]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[OpenStaffPositionInstructionalGradeLevel] 
 */

ALTER TABLE [edfi].[OpenStaffPositionInstructionalGradeLevel] ADD CONSTRAINT [FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptorId] 
    FOREIGN KEY ([GradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[OpenStaffPositionInstructionalGradeLevel] ADD CONSTRAINT [FK_OpenStaffPositionInstructionalGradeLevels_OpenStaffPosition_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId], [EmploymentStatusDescriptorId], [StaffClassificationDescriptorId], [RequisitionNumber], [DatePosted])
    REFERENCES [edfi].[OpenStaffPosition]([EducationOrganizationId], [EmploymentStatusDescriptorId], [StaffClassificationDescriptorId], [RequisitionNumber], [DatePosted]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[Parent] 
 */

ALTER TABLE [edfi].[Parent] ADD CONSTRAINT [FK_Parent_SexType_SexTypeId] 
    FOREIGN KEY ([SexTypeId])
    REFERENCES [edfi].[SexType]([SexTypeId])
go


/* 
 * TABLE: [edfi].[ParentAddress] 
 */

ALTER TABLE [edfi].[ParentAddress] ADD CONSTRAINT [FK_ParentAddress_AddressType_AddressTypeId] 
    FOREIGN KEY ([AddressTypeId])
    REFERENCES [edfi].[AddressType]([AddressTypeId])
go

ALTER TABLE [edfi].[ParentAddress] ADD CONSTRAINT [FK_ParentAddress_Parent_ParentUSI] 
    FOREIGN KEY ([ParentUSI])
    REFERENCES [edfi].[Parent]([ParentUSI]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[ParentAddress] ADD CONSTRAINT [FK_ParentAddress_StateAbbreviationType_StateAbbreviationTypeId] 
    FOREIGN KEY ([StateAbbreviationTypeId])
    REFERENCES [edfi].[StateAbbreviationType]([StateAbbreviationTypeId])
go


/* 
 * TABLE: [edfi].[ParentElectronicMail] 
 */

ALTER TABLE [edfi].[ParentElectronicMail] ADD CONSTRAINT [FK_ParentElectronicMail_ElectronicMailType_ElectronicMailTypeId] 
    FOREIGN KEY ([ElectronicMailTypeId])
    REFERENCES [edfi].[ElectronicMailType]([ElectronicMailTypeId])
go

ALTER TABLE [edfi].[ParentElectronicMail] ADD CONSTRAINT [FK_ParentElectronicMail_Parent_ParentUSI] 
    FOREIGN KEY ([ParentUSI])
    REFERENCES [edfi].[Parent]([ParentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[ParentIdentificationDocument] 
 */

ALTER TABLE [edfi].[ParentIdentificationDocument] ADD CONSTRAINT [FK_ParentIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId] 
    FOREIGN KEY ([IdentificationDocumentUseTypeId])
    REFERENCES [edfi].[IdentificationDocumentUseType]([IdentificationDocumentUseTypeId])
go

ALTER TABLE [edfi].[ParentIdentificationDocument] ADD CONSTRAINT [FK_ParentIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
    FOREIGN KEY ([IssuerCountryDescriptorId])
    REFERENCES [edfi].[CountryDescriptor]([CountryDescriptorId])
go

ALTER TABLE [edfi].[ParentIdentificationDocument] ADD CONSTRAINT [FK_ParentIdentificationDocument_Parent_ParentUSI] 
    FOREIGN KEY ([ParentUSI])
    REFERENCES [edfi].[Parent]([ParentUSI]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[ParentIdentificationDocument] ADD CONSTRAINT [FK_ParentIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId] 
    FOREIGN KEY ([PersonalInformationVerificationTypeId])
    REFERENCES [edfi].[PersonalInformationVerificationType]([PersonalInformationVerificationTypeId])
go


/* 
 * TABLE: [edfi].[ParentInternationalAddress] 
 */

ALTER TABLE [edfi].[ParentInternationalAddress] ADD CONSTRAINT [FK_ParentInternationalAddress_AddressType_AddressTypeId] 
    FOREIGN KEY ([AddressTypeId])
    REFERENCES [edfi].[AddressType]([AddressTypeId])
go

ALTER TABLE [edfi].[ParentInternationalAddress] ADD CONSTRAINT [FK_ParentInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
    FOREIGN KEY ([CountryDescriptorId])
    REFERENCES [edfi].[CountryDescriptor]([CountryDescriptorId])
go

ALTER TABLE [edfi].[ParentInternationalAddress] ADD CONSTRAINT [FK_ParentInternationalAddress_Parent_ParentUSI] 
    FOREIGN KEY ([ParentUSI])
    REFERENCES [edfi].[Parent]([ParentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[ParentOtherName] 
 */

ALTER TABLE [edfi].[ParentOtherName] ADD CONSTRAINT [FK_ParentOtherName_OtherNameType_OtherNameTypeId] 
    FOREIGN KEY ([OtherNameTypeId])
    REFERENCES [edfi].[OtherNameType]([OtherNameTypeId])
go

ALTER TABLE [edfi].[ParentOtherName] ADD CONSTRAINT [FK_ParentOtherName_Parent_ParentUSI] 
    FOREIGN KEY ([ParentUSI])
    REFERENCES [edfi].[Parent]([ParentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[ParentTelephone] 
 */

ALTER TABLE [edfi].[ParentTelephone] ADD CONSTRAINT [FK_ParentTelephone_Parent_ParentUSI] 
    FOREIGN KEY ([ParentUSI])
    REFERENCES [edfi].[Parent]([ParentUSI]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[ParentTelephone] ADD CONSTRAINT [FK_ParentTelephone_TelephoneNumberType_TelephoneNumberTypeId] 
    FOREIGN KEY ([TelephoneNumberTypeId])
    REFERENCES [edfi].[TelephoneNumberType]([TelephoneNumberTypeId])
go


/* 
 * TABLE: [edfi].[Payroll] 
 */

ALTER TABLE [edfi].[Payroll] ADD CONSTRAINT [FK_Payroll_Account_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId], [AccountNumber], [FiscalYear])
    REFERENCES [edfi].[Account]([EducationOrganizationId], [AccountNumber], [FiscalYear])
go

ALTER TABLE [edfi].[Payroll] ADD CONSTRAINT [FK_Payroll_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI])
go


/* 
 * TABLE: [edfi].[PerformanceLevelDescriptor] 
 */

ALTER TABLE [edfi].[PerformanceLevelDescriptor] ADD CONSTRAINT [FK_PerformanceLevelDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([PerformanceLevelDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[PerformanceLevelDescriptor] ADD CONSTRAINT [FK_PerformanceLevelDescriptor_PerformanceBaseType_PerformanceBaseConversionTypeId] 
    FOREIGN KEY ([PerformanceBaseConversionTypeId])
    REFERENCES [edfi].[PerformanceBaseConversionType]([PerformanceBaseConversionTypeId])
go


/* 
 * TABLE: [edfi].[PostSecondaryEvent] 
 */

ALTER TABLE [edfi].[PostSecondaryEvent] ADD CONSTRAINT [FK_PostSecondaryEvent_PostSecondaryEventCategoryType_PostSecondaryEventCategoryTypeId] 
    FOREIGN KEY ([PostSecondaryEventCategoryTypeId])
    REFERENCES [edfi].[PostSecondaryEventCategoryType]([PostSecondaryEventCategoryTypeId])
go

ALTER TABLE [edfi].[PostSecondaryEvent] ADD CONSTRAINT [FK_PostSecondaryEvent_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[PostSecondaryEventPostSecondaryInstitution] 
 */

ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitution] ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitution_AdministrativeFundingControlDescriptorId] 
    FOREIGN KEY ([AdministrativeFundingControlDescriptorId])
    REFERENCES [edfi].[AdministrativeFundingControlDescriptor]([AdministrativeFundingControlDescriptorId])
go

ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitution] ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryEvent] 
    FOREIGN KEY ([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate])
    REFERENCES [edfi].[PostSecondaryEvent]([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitution] ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryInstitutionLevelType_PostSecondaryInstitutionLevelTypeId] 
    FOREIGN KEY ([PostSecondaryInstitutionLevelTypeId])
    REFERENCES [edfi].[PostSecondaryInstitutionLevelType]([PostSecondaryInstitutionLevelTypeId])
go


/* 
 * TABLE: [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] 
 */

ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] ADD CONSTRAINT [FK_PostSecondaryEventIdentificationCode_EducationOrganizationIdentificationSystemDescriptorId] 
    FOREIGN KEY ([EducationOrganizationIdentificationSystemDescriptorId])
    REFERENCES [edfi].[EducationOrganizationIdentificationSystemDescriptor]([EducationOrganizationIdentificationSystemDescriptorId])
go

ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PostSecondaryEventPostSecondaryInstitution] 
    FOREIGN KEY ([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate])
    REFERENCES [edfi].[PostSecondaryEventPostSecondaryInstitution]([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] 
 */

ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionType_MediumOfInstructionTypeId] 
    FOREIGN KEY ([MediumOfInstructionTypeId])
    REFERENCES [edfi].[MediumOfInstructionType]([MediumOfInstructionTypeId])
go

ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PostSecondaryEventPostSecondaryInstitution] 
    FOREIGN KEY ([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate])
    REFERENCES [edfi].[PostSecondaryEventPostSecondaryInstitution]([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[Program] 
 */

ALTER TABLE [edfi].[Program] ADD CONSTRAINT [FK_Program_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[Program] ADD CONSTRAINT [FK_Program_ProgramSponsorType_ProgramSponsorTypeId] 
    FOREIGN KEY ([ProgramSponsorTypeId])
    REFERENCES [edfi].[ProgramSponsorType]([ProgramSponsorTypeId])
go

ALTER TABLE [edfi].[Program] ADD CONSTRAINT [FK_Program_ProgramType_ProgramTypeId] 
    FOREIGN KEY ([ProgramTypeId])
    REFERENCES [edfi].[ProgramType]([ProgramTypeId])
go


/* 
 * TABLE: [edfi].[ProgramAssignmentDescriptor] 
 */

ALTER TABLE [edfi].[ProgramAssignmentDescriptor] ADD CONSTRAINT [FK_ProgramAssignmentDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([ProgramAssignmentDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[ProgramAssignmentDescriptor] ADD CONSTRAINT [FK_ProgramAssignmentDescriptor_ProgramAssignmentType_ProgramAssignmentTypeId] 
    FOREIGN KEY ([ProgramAssignmentTypeId])
    REFERENCES [edfi].[ProgramAssignmentType]([ProgramAssignmentTypeId])
go


/* 
 * TABLE: [edfi].[ProgramCharacteristic] 
 */

ALTER TABLE [edfi].[ProgramCharacteristic] ADD CONSTRAINT [FK_ProgramCharacteristic_Program_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
    REFERENCES [edfi].[Program]([EducationOrganizationId], [ProgramTypeId], [ProgramName]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[ProgramCharacteristic] ADD CONSTRAINT [FK_ProgramCharacteristic_ProgramCharacteristicDescriptor_ProgramCharacteristicDescriptorId] 
    FOREIGN KEY ([ProgramCharacteristicDescriptorId])
    REFERENCES [edfi].[ProgramCharacteristicDescriptor]([ProgramCharacteristicDescriptorId])
go


/* 
 * TABLE: [edfi].[ProgramCharacteristicDescriptor] 
 */

ALTER TABLE [edfi].[ProgramCharacteristicDescriptor] ADD CONSTRAINT [FK_ProgramCharacteristicDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([ProgramCharacteristicDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[ProgramCharacteristicDescriptor] ADD CONSTRAINT [FK_ProgramCharacteristicDescriptor_ProgramCharacteristicType_ProgramCharacteristicTypeId] 
    FOREIGN KEY ([ProgramCharacteristicTypeId])
    REFERENCES [edfi].[ProgramCharacteristicType]([ProgramCharacteristicTypeId])
go


/* 
 * TABLE: [edfi].[ProgramLearningObjective] 
 */

ALTER TABLE [edfi].[ProgramLearningObjective] ADD CONSTRAINT [FK_ProgramLearningStandard_LearningObjective_Objective] 
    FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
    REFERENCES [edfi].[LearningObjective]([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
go

ALTER TABLE [edfi].[ProgramLearningObjective] ADD CONSTRAINT [FK_ProgramLearningStandard_Program_ProgramTypeId] 
    FOREIGN KEY ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
    REFERENCES [edfi].[Program]([EducationOrganizationId], [ProgramTypeId], [ProgramName]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[ProgramLearningStandard] 
 */

ALTER TABLE [edfi].[ProgramLearningStandard] ADD CONSTRAINT [FK_ProgramLearningObjective_LearningStandard_LearningStandardId] 
    FOREIGN KEY ([LearningStandardId])
    REFERENCES [edfi].[LearningStandard]([LearningStandardId])
go

ALTER TABLE [edfi].[ProgramLearningStandard] ADD CONSTRAINT [FK_ProgramLearningObjective_Program_ProgramTypeId] 
    FOREIGN KEY ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
    REFERENCES [edfi].[Program]([EducationOrganizationId], [ProgramTypeId], [ProgramName]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[ProgramService] 
 */

ALTER TABLE [edfi].[ProgramService] ADD CONSTRAINT [FK_ProgramService_Program_ProgramTypeId] 
    FOREIGN KEY ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
    REFERENCES [edfi].[Program]([EducationOrganizationId], [ProgramTypeId], [ProgramName]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[ProgramService] ADD CONSTRAINT [FK_ProgramService_ServiceDescriptor_ServiceDescriptorId] 
    FOREIGN KEY ([ServiceDescriptorId])
    REFERENCES [edfi].[ServiceDescriptor]([ServiceDescriptorId])
go


/* 
 * TABLE: [edfi].[ReasonExitedDescriptor] 
 */

ALTER TABLE [edfi].[ReasonExitedDescriptor] ADD CONSTRAINT [FK_ReasonExitedDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([ReasonExitedDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[ReasonExitedDescriptor] ADD CONSTRAINT [FK_ReasonExitedDescriptor_ReasonExitedType_ReasonExitedTypeId] 
    FOREIGN KEY ([ReasonExitedTypeId])
    REFERENCES [edfi].[ReasonExitedType]([ReasonExitedTypeId])
go


/* 
 * TABLE: [edfi].[ReportCard] 
 */

ALTER TABLE [edfi].[ReportCard] ADD CONSTRAINT [FK_ReportCard_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[ReportCard] ADD CONSTRAINT [FK_ReportCard_GradingPeriod_SchoolId] 
    FOREIGN KEY ([GradingPeriodDescriptorId], [SchoolId], [GradingPeriodBeginDate])
    REFERENCES [edfi].[GradingPeriod]([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
go

ALTER TABLE [edfi].[ReportCard] ADD CONSTRAINT [FK_ReportCard_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[ReportCardGrade] 
 */

ALTER TABLE [edfi].[ReportCardGrade] ADD CONSTRAINT [FK_ReportCardGrade_Grade] 
    FOREIGN KEY ([GradingPeriodDescriptorId], [GradingPeriodBeginDate], [GradeTypeId], [StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
    REFERENCES [edfi].[Grade]([GradingPeriodDescriptorId], [GradingPeriodBeginDate], [GradeTypeId], [StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
	ON UPDATE CASCADE
go

ALTER TABLE [edfi].[ReportCardGrade] ADD CONSTRAINT [FK_ReportCardGrade_ReportCard_SchoolId] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
    REFERENCES [edfi].[ReportCard]([StudentUSI], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
go


/* 
 * TABLE: [edfi].[ReportCardStudentCompetencyObjective] 
 */

ALTER TABLE [edfi].[ReportCardStudentCompetencyObjective] ADD CONSTRAINT [FK_ReportCardStudentCompetencyObjective_ReportCard_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [ReportCardEducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
    REFERENCES [edfi].[ReportCard]([StudentUSI], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
go

ALTER TABLE [edfi].[ReportCardStudentCompetencyObjective] ADD CONSTRAINT [FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [Objective], [ObjectiveGradeLevelDescriptorId], [ObjectiveEducationOrganizationId], [SchoolId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate])
    REFERENCES [edfi].[StudentCompetencyObjective]([StudentUSI], [Objective], [ObjectiveGradeLevelDescriptorId], [ObjectiveEducationOrganizationId], [SchoolId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate])
go


/* 
 * TABLE: [edfi].[ReportCardStudentLearningObjective] 
 */

ALTER TABLE [edfi].[ReportCardStudentLearningObjective] ADD CONSTRAINT [FK_ReportCardStudentLearningObjective_ReportCard] 
    FOREIGN KEY ([StudentUSI], [ReportCardEducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
    REFERENCES [edfi].[ReportCard]([StudentUSI], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[ReportCardStudentLearningObjective] ADD CONSTRAINT [FK_ReportCardStudentLearningObjective_StudentLearningObjective_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
    REFERENCES [edfi].[StudentLearningObjective]([StudentUSI], [Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
go


/* 
 * TABLE: [edfi].[ReporterDescriptionDescriptor] 
 */

ALTER TABLE [edfi].[ReporterDescriptionDescriptor] ADD CONSTRAINT [FK_ReporterDescriptionDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([ReporterDescriptionDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[ReporterDescriptionDescriptor] ADD CONSTRAINT [FK_ReporterDescriptionDescriptor_ReporterDescriptionType_ReporterDescriptionTypeId] 
    FOREIGN KEY ([ReporterDescriptionTypeId])
    REFERENCES [edfi].[ReporterDescriptionType]([ReporterDescriptionTypeId])
go


/* 
 * TABLE: [edfi].[ResidencyStatusDescriptor] 
 */

ALTER TABLE [edfi].[ResidencyStatusDescriptor] ADD CONSTRAINT [FK_ResidencyStatusDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([ResidencyStatusDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[ResidencyStatusDescriptor] ADD CONSTRAINT [FK_ResidencyStatusDescriptor_ResidencyStatusType_ResidencyStatusTypeId] 
    FOREIGN KEY ([ResidencyStatusTypeId])
    REFERENCES [edfi].[ResidencyStatusType]([ResidencyStatusTypeId])
go


/* 
 * TABLE: [edfi].[ResponsibilityDescriptor] 
 */

ALTER TABLE [edfi].[ResponsibilityDescriptor] ADD CONSTRAINT [FK_ResponsibilityDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([ResponsibilityDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[ResponsibilityDescriptor] ADD CONSTRAINT [FK_ResponsibilityDescriptor_ResponsibilityType_ResponsibilityTypeId] 
    FOREIGN KEY ([ResponsibilityTypeId])
    REFERENCES [edfi].[ResponsibilityType]([ResponsibilityTypeId])
go


/* 
 * TABLE: [edfi].[RestraintEvent] 
 */

ALTER TABLE [edfi].[RestraintEvent] ADD CONSTRAINT [FK_RestraintEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] 
    FOREIGN KEY ([EducationalEnvironmentTypeId])
    REFERENCES [edfi].[EducationalEnvironmentType]([EducationalEnvironmentTypeId])
go

ALTER TABLE [edfi].[RestraintEvent] ADD CONSTRAINT [FK_RestraintEvent_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go

ALTER TABLE [edfi].[RestraintEvent] ADD CONSTRAINT [FK_RestraintEvent_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[RestraintEventProgram] 
 */

ALTER TABLE [edfi].[RestraintEventProgram] ADD CONSTRAINT [FK_RestraintEventProgram_Program] 
    FOREIGN KEY ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
    REFERENCES [edfi].[Program]([EducationOrganizationId], [ProgramTypeId], [ProgramName])
go

ALTER TABLE [edfi].[RestraintEventProgram] ADD CONSTRAINT [FK_RestraintEventProgram_RestraintEvent_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [SchoolId], [RestraintEventIdentifier], [EventDate])
    REFERENCES [edfi].[RestraintEvent]([StudentUSI], [SchoolId], [RestraintEventIdentifier], [EventDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[RestraintEventReason] 
 */

ALTER TABLE [edfi].[RestraintEventReason] ADD CONSTRAINT [FK_RestraintEventReason_RestraintEvent_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [SchoolId], [RestraintEventIdentifier], [EventDate])
    REFERENCES [edfi].[RestraintEvent]([StudentUSI], [SchoolId], [RestraintEventIdentifier], [EventDate]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[RestraintEventReason] ADD CONSTRAINT [FK_RestraintEventReason_RestraintEventReasonType_RestraintEventReasonTypeId] 
    FOREIGN KEY ([RestraintEventReasonTypeId])
    REFERENCES [edfi].[RestraintEventReasonType]([RestraintEventReasonTypeId])
go


/* 
 * TABLE: [edfi].[School] 
 */

ALTER TABLE [edfi].[School] ADD CONSTRAINT [FK_School_AdministrativeFundingControlDescriptor_AdministrativeFundingControlDescriptorId] 
    FOREIGN KEY ([AdministrativeFundingControlDescriptorId])
    REFERENCES [edfi].[AdministrativeFundingControlDescriptor]([AdministrativeFundingControlDescriptorId])
go

ALTER TABLE [edfi].[School] ADD CONSTRAINT [FK_School_CharterApprovalAgencyType_CharterApprovalAgencyTypeId] 
    FOREIGN KEY ([CharterApprovalAgencyTypeId])
    REFERENCES [edfi].[CharterApprovalAgencyType]([CharterApprovalAgencyTypeId])
go

ALTER TABLE [edfi].[School] ADD CONSTRAINT [FK_School_CharterStatusType_CharterStatusTypeId] 
    FOREIGN KEY ([CharterStatusTypeId])
    REFERENCES [edfi].[CharterStatusType]([CharterStatusTypeId])
go

ALTER TABLE [edfi].[School] ADD CONSTRAINT [FK_School_EducationOrganization_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[School] ADD CONSTRAINT [FK_School_InternetAccessType_InternetAccessTypeId] 
    FOREIGN KEY ([InternetAccessTypeId])
    REFERENCES [edfi].[InternetAccessType]([InternetAccessTypeId])
go

ALTER TABLE [edfi].[School] ADD CONSTRAINT [FK_School_LocalEducationAgency_LocalEducationAgencyId] 
    FOREIGN KEY ([LocalEducationAgencyId])
    REFERENCES [edfi].[LocalEducationAgency]([LocalEducationAgencyId])
go

ALTER TABLE [edfi].[School] ADD CONSTRAINT [FK_School_MagnetSpecialProgramEmphasisSchoolType_MagnetSpecialProgramEmphasisSchoolTypeId] 
    FOREIGN KEY ([MagnetSpecialProgramEmphasisSchoolTypeId])
    REFERENCES [edfi].[MagnetSpecialProgramEmphasisSchoolType]([MagnetSpecialProgramEmphasisSchoolTypeId])
go

ALTER TABLE [edfi].[School] ADD CONSTRAINT [FK_School_SchoolType_SchoolTypeId] 
    FOREIGN KEY ([SchoolTypeId])
    REFERENCES [edfi].[SchoolType]([SchoolTypeId])
go

ALTER TABLE [edfi].[School] ADD CONSTRAINT [FK_School_SchoolYearType_SchoolYear] 
    FOREIGN KEY ([CharterApprovalSchoolYear])
    REFERENCES [edfi].[SchoolYearType]([SchoolYear])
go

ALTER TABLE [edfi].[School] ADD CONSTRAINT [FK_School_TitleIPartASchoolDesignationType_TitleIPartASchoolDesignationTypeId] 
    FOREIGN KEY ([TitleIPartASchoolDesignationTypeId])
    REFERENCES [edfi].[TitleIPartASchoolDesignationType]([TitleIPartASchoolDesignationTypeId])
go


/* 
 * TABLE: [edfi].[SchoolCategory] 
 */

ALTER TABLE [edfi].[SchoolCategory] ADD CONSTRAINT [FK_SchoolCategory_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[SchoolCategory] ADD CONSTRAINT [FK_SchoolCategory_SchoolCategoryType_SchoolCategoryTypeId] 
    FOREIGN KEY ([SchoolCategoryTypeId])
    REFERENCES [edfi].[SchoolCategoryType]([SchoolCategoryTypeId])
go


/* 
 * TABLE: [edfi].[SchoolFoodServicesEligibilityDescriptor] 
 */

ALTER TABLE [edfi].[SchoolFoodServicesEligibilityDescriptor] ADD CONSTRAINT [FK_SchoolFoodServicesEligibilityDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([SchoolFoodServicesEligibilityDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[SchoolFoodServicesEligibilityDescriptor] ADD CONSTRAINT [FK_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityType_SchoolFoodServicesEligibilityTypeId] 
    FOREIGN KEY ([SchoolFoodServicesEligibilityTypeId])
    REFERENCES [edfi].[SchoolFoodServicesEligibilityType]([SchoolFoodServicesEligibilityTypeId])
go


/* 
 * TABLE: [edfi].[SchoolGradeLevel] 
 */

ALTER TABLE [edfi].[SchoolGradeLevel] ADD CONSTRAINT [FK_SchoolGradeLevel_GradeLevelDescriptorId] 
    FOREIGN KEY ([GradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[SchoolGradeLevel] ADD CONSTRAINT [FK_SchoolGradeLevel_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[Section] 
 */

ALTER TABLE [edfi].[Section] ADD CONSTRAINT [FK_Section_ClassPeriod_SchoolId] 
    FOREIGN KEY ([SchoolId], [ClassPeriodName])
    REFERENCES [edfi].[ClassPeriod]([SchoolId], [ClassPeriodName])
	ON UPDATE CASCADE
go

ALTER TABLE [edfi].[Section] ADD CONSTRAINT [FK_Section_CourseOffering_SchoolId] 
    FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [TermDescriptorId])
    REFERENCES [edfi].[CourseOffering]([LocalCourseCode], [SchoolId], [SchoolYear], [TermDescriptorId])
go

ALTER TABLE [edfi].[Section] ADD CONSTRAINT [FK_Section_CreditType_AvailableCreditTypeId] 
    FOREIGN KEY ([AvailableCreditTypeId])
    REFERENCES [edfi].[CreditType]([CreditTypeId])
go

ALTER TABLE [edfi].[Section] ADD CONSTRAINT [FK_Section_EducationalEnvironmentType_EducationalEnvironmentTypeId] 
    FOREIGN KEY ([EducationalEnvironmentTypeId])
    REFERENCES [edfi].[EducationalEnvironmentType]([EducationalEnvironmentTypeId])
go

ALTER TABLE [edfi].[Section] ADD CONSTRAINT [FK_Section_LanguageDescriptor_InstructionLanguageDescriptorId] 
    FOREIGN KEY ([InstructionLanguageDescriptorId])
    REFERENCES [edfi].[LanguageDescriptor]([LanguageDescriptorId])
go

ALTER TABLE [edfi].[Section] ADD CONSTRAINT [FK_Section_Location_SchoolId] 
    FOREIGN KEY ([SchoolId], [ClassroomIdentificationCode])
    REFERENCES [edfi].[Location]([SchoolId], [ClassroomIdentificationCode])
	ON UPDATE CASCADE
go

ALTER TABLE [edfi].[Section] ADD CONSTRAINT [FK_Section_MediumOfInstructionType_MediumOfInstructionTypeId] 
    FOREIGN KEY ([MediumOfInstructionTypeId])
    REFERENCES [edfi].[MediumOfInstructionType]([MediumOfInstructionTypeId])
go

ALTER TABLE [edfi].[Section] ADD CONSTRAINT [FK_Section_PopulationServedType_PopulationServedTypeId] 
    FOREIGN KEY ([PopulationServedTypeId])
    REFERENCES [edfi].[PopulationServedType]([PopulationServedTypeId])
go

ALTER TABLE [edfi].[Section] ADD CONSTRAINT [FK_Section_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go


/* 
 * TABLE: [edfi].[SectionAttendanceTakenEvent] 
 */

ALTER TABLE [edfi].[SectionAttendanceTakenEvent] ADD CONSTRAINT [FK_SectionAttendanceTakeEvent_Section_SchoolId] 
    FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
    REFERENCES [edfi].[Section]([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
	ON UPDATE CASCADE
go

ALTER TABLE [edfi].[SectionAttendanceTakenEvent] ADD CONSTRAINT [FK_SectionAttendanceTakenEvent_CalendarDate_SchoolId] 
    FOREIGN KEY ([SchoolId], [Date])
    REFERENCES [edfi].[CalendarDate]([SchoolId], [Date])
go

ALTER TABLE [edfi].[SectionAttendanceTakenEvent] ADD CONSTRAINT [FK_SectionAttendanceTakenEvent_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI])
go


/* 
 * TABLE: [edfi].[SectionCharacteristic] 
 */

ALTER TABLE [edfi].[SectionCharacteristic] ADD CONSTRAINT [FK_SectionCharacteristic_Section_SchoolId] 
    FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
    REFERENCES [edfi].[Section]([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
	ON DELETE CASCADE
	ON UPDATE CASCADE
go

ALTER TABLE [edfi].[SectionCharacteristic] ADD CONSTRAINT [FK_SectionCharacteristic_SectionCharacteristicsDescriptor_SectionCharacteristicsDescriptorId] 
    FOREIGN KEY ([SectionCharacteristicDescriptorId])
    REFERENCES [edfi].[SectionCharacteristicDescriptor]([SectionCharacteristicDescriptorId])
go


/* 
 * TABLE: [edfi].[SectionCharacteristicDescriptor] 
 */

ALTER TABLE [edfi].[SectionCharacteristicDescriptor] ADD CONSTRAINT [FK_SectionCharacteristicDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([SectionCharacteristicDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[SectionCharacteristicDescriptor] ADD CONSTRAINT [FK_SectionCharacteristicDescriptor_SectionCharacteristicType_SectionCharacteristicTypeId] 
    FOREIGN KEY ([SectionCharacteristicTypeId])
    REFERENCES [edfi].[SectionCharacteristicType]([SectionCharacteristicTypeId])
go


/* 
 * TABLE: [edfi].[SectionProgram] 
 */

ALTER TABLE [edfi].[SectionProgram] ADD CONSTRAINT [FK_SectionProgram_Program] 
    FOREIGN KEY ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
    REFERENCES [edfi].[Program]([EducationOrganizationId], [ProgramTypeId], [ProgramName])
go

ALTER TABLE [edfi].[SectionProgram] ADD CONSTRAINT [FK_SectionProgram_Section_SchoolId] 
    FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
    REFERENCES [edfi].[Section]([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
	ON DELETE CASCADE 
	ON UPDATE CASCADE
go


/* 
 * TABLE: [edfi].[SeparationReasonDescriptor] 
 */

ALTER TABLE [edfi].[SeparationReasonDescriptor] ADD CONSTRAINT [FK_SeparationReasonDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([SeparationReasonDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[SeparationReasonDescriptor] ADD CONSTRAINT [FK_SeparationReasonDescriptor_SeparationReasonType_SeparationReasonTypeId] 
    FOREIGN KEY ([SeparationReasonTypeId])
    REFERENCES [edfi].[SeparationReasonType]([SeparationReasonTypeId])
go


/* 
 * TABLE: [edfi].[ServiceDescriptor] 
 */

ALTER TABLE [edfi].[ServiceDescriptor] ADD CONSTRAINT [FK_ServiceDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([ServiceDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[Session] 
 */

ALTER TABLE [edfi].[Session] ADD CONSTRAINT [FK_Session_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go

ALTER TABLE [edfi].[Session] ADD CONSTRAINT [FK_Session_SchoolYearType_SchoolYear] 
    FOREIGN KEY ([SchoolYear])
    REFERENCES [edfi].[SchoolYearType]([SchoolYear])
go

ALTER TABLE [edfi].[Session] ADD CONSTRAINT [FK_Session_TermDescriptor_TermDescriptorId] 
    FOREIGN KEY ([TermDescriptorId])
    REFERENCES [edfi].[TermDescriptor]([TermDescriptorId])
go


/* 
 * TABLE: [edfi].[SessionAcademicWeek] 
 */

ALTER TABLE [edfi].[SessionAcademicWeek] ADD CONSTRAINT [FK_AcademicWeek_Session_SchoolId] 
    FOREIGN KEY ([WeekIdentifier], [SchoolId])
    REFERENCES [edfi].[AcademicWeek]([WeekIdentifier], [SchoolId])
go

ALTER TABLE [edfi].[SessionAcademicWeek] ADD CONSTRAINT [FK_SessionAcademicWeek_Session_SchoolId] 
    FOREIGN KEY ([SchoolId], [SchoolYear], [TermDescriptorId])
    REFERENCES [edfi].[Session]([SchoolId], [SchoolYear], [TermDescriptorId])
	ON UPDATE CASCADE
go


/* 
 * TABLE: [edfi].[SessionGradingPeriod] 
 */

ALTER TABLE [edfi].[SessionGradingPeriod] ADD CONSTRAINT [FK_SessionGradingPeriod_GradingPeriod_SchoolId] 
    FOREIGN KEY ([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
    REFERENCES [edfi].[GradingPeriod]([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
go

ALTER TABLE [edfi].[SessionGradingPeriod] ADD CONSTRAINT [FK_SessionGradingPeriod_Session_SchoolId] 
    FOREIGN KEY ([SchoolId], [SchoolYear], [TermDescriptorId])
    REFERENCES [edfi].[Session]([SchoolId], [SchoolYear], [TermDescriptorId])
	ON UPDATE CASCADE
go


/* 
 * TABLE: [edfi].[SpecialEducationSettingDescriptor] 
 */

ALTER TABLE [edfi].[SpecialEducationSettingDescriptor] ADD CONSTRAINT [FK_SpecialEducationSettingDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([SpecialEducationSettingDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[SpecialEducationSettingDescriptor] ADD CONSTRAINT [FK_SpecialEducationSettingDescriptor_SpecialEducationSettingType_SpecialEducationSettingTypeId] 
    FOREIGN KEY ([SpecialEducationSettingTypeId])
    REFERENCES [edfi].[SpecialEducationSettingType]([SpecialEducationSettingTypeId])
go


/* 
 * TABLE: [edfi].[Staff] 
 */

ALTER TABLE [edfi].[Staff] ADD CONSTRAINT [FK_Staff_CitizenshipStatusType_CitizenshipStatusTypeId] 
    FOREIGN KEY ([CitizenshipStatusTypeId])
    REFERENCES [edfi].[CitizenshipStatusType]([CitizenshipStatusTypeId])
go

ALTER TABLE [edfi].[Staff] ADD CONSTRAINT [FK_Staff_LevelOfEducationDescriptor_HighestCompletedLevelOfEducationDescriptorId] 
    FOREIGN KEY ([HighestCompletedLevelOfEducationDescriptorId])
    REFERENCES [edfi].[LevelOfEducationDescriptor]([LevelOfEducationDescriptorId])
go

ALTER TABLE [edfi].[Staff] ADD CONSTRAINT [FK_Staff_OldEthnicityType_OldEthnicityTypeId] 
    FOREIGN KEY ([OldEthnicityTypeId])
    REFERENCES [edfi].[OldEthnicityType]([OldEthnicityTypeId])
go

ALTER TABLE [edfi].[Staff] ADD CONSTRAINT [FK_Staff_SexType_SexTypeId] 
    FOREIGN KEY ([SexTypeId])
    REFERENCES [edfi].[SexType]([SexTypeId])
go


/* 
 * TABLE: [edfi].[StaffAddress] 
 */

ALTER TABLE [edfi].[StaffAddress] ADD CONSTRAINT [FK_StaffAddress_AddressType_AddressTypeId] 
    FOREIGN KEY ([AddressTypeId])
    REFERENCES [edfi].[AddressType]([AddressTypeId])
go

ALTER TABLE [edfi].[StaffAddress] ADD CONSTRAINT [FK_StaffAddress_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[StaffAddress] ADD CONSTRAINT [FK_StaffAddress_StateAbbreviationType_StateAbbreviationTypeId] 
    FOREIGN KEY ([StateAbbreviationTypeId])
    REFERENCES [edfi].[StateAbbreviationType]([StateAbbreviationTypeId])
go


/* 
 * TABLE: [edfi].[StaffClassificationDescriptor] 
 */

ALTER TABLE [edfi].[StaffClassificationDescriptor] ADD CONSTRAINT [FK_StaffClassificationDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([StaffClassificationDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[StaffClassificationDescriptor] ADD CONSTRAINT [FK_StaffClassificationDescriptor_StaffClassificationType_StaffClassificationTypeId] 
    FOREIGN KEY ([StaffClassificationTypeId])
    REFERENCES [edfi].[StaffClassificationType]([StaffClassificationTypeId])
go


/* 
 * TABLE: [edfi].[StaffCohortAssociation] 
 */

ALTER TABLE [edfi].[StaffCohortAssociation] ADD CONSTRAINT [FK_StaffCohortAssociation_Cohort_EducationOrganizationId] 
    FOREIGN KEY ([CohortIdentifier], [EducationOrganizationId])
    REFERENCES [edfi].[Cohort]([CohortIdentifier], [EducationOrganizationId])
go

ALTER TABLE [edfi].[StaffCohortAssociation] ADD CONSTRAINT [FK_StaffCohortAssociation_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI])
go


/* 
 * TABLE: [edfi].[StaffCredential] 
 */

ALTER TABLE [edfi].[StaffCredential] ADD CONSTRAINT [FK_StaffCredential_CredentialFieldDescriptor_CredentialFieldDescriptorId] 
    FOREIGN KEY ([CredentialFieldDescriptorId])
    REFERENCES [edfi].[CredentialFieldDescriptor]([CredentialFieldDescriptorId])
go

ALTER TABLE [edfi].[StaffCredential] ADD CONSTRAINT [FK_StaffCredential_CredentialType_CredentialTypeId] 
    FOREIGN KEY ([CredentialTypeId])
    REFERENCES [edfi].[CredentialType]([CredentialTypeId])
go

ALTER TABLE [edfi].[StaffCredential] ADD CONSTRAINT [FK_StaffCredential_LevelDescriptor_LevelDescriptorId] 
    FOREIGN KEY ([LevelDescriptorId])
    REFERENCES [edfi].[LevelDescriptor]([LevelDescriptorId])
go

ALTER TABLE [edfi].[StaffCredential] ADD CONSTRAINT [FK_StaffCredential_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[StaffCredential] ADD CONSTRAINT [FK_StaffCredential_StateAbbreviationType_StateOfIssueAbbreviationTypeId] 
    FOREIGN KEY ([StateOfIssueStateAbbreviationTypeId])
    REFERENCES [edfi].[StateAbbreviationType]([StateAbbreviationTypeId])
go

ALTER TABLE [edfi].[StaffCredential] ADD CONSTRAINT [FK_StaffCredential_TeachingCredentialBasisType_TeachingCredentialBasisTypeId] 
    FOREIGN KEY ([TeachingCredentialBasisTypeId])
    REFERENCES [edfi].[TeachingCredentialBasisType]([TeachingCredentialBasisTypeId])
go

ALTER TABLE [edfi].[StaffCredential] ADD CONSTRAINT [FK_StaffCredential_TeachingCredentialDescriptor_TeachingCredentialDescriptorId] 
    FOREIGN KEY ([TeachingCredentialDescriptorId])
    REFERENCES [edfi].[TeachingCredentialDescriptor]([TeachingCredentialDescriptorId])
go


/* 
 * TABLE: [edfi].[StaffEducationOrganizationAssignmentAssociation] 
 */

ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] ADD CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptorId] 
    FOREIGN KEY ([StaffClassificationDescriptorId])
    REFERENCES [edfi].[StaffClassificationDescriptor]([StaffClassificationDescriptorId])
go

ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] ADD CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation_StaffUSI] 
    FOREIGN KEY ([EmploymentEducationOrganizationId], [StaffUSI], [EmploymentStatusDescriptorId], [EmploymentHireDate])
    REFERENCES [edfi].[StaffEducationOrganizationEmploymentAssociation]([EducationOrganizationId], [StaffUSI], [EmploymentStatusDescriptorId], [HireDate])
go

ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] ADD CONSTRAINT [FK_StaffEducationOrgAssignmentAssociation_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] ADD CONSTRAINT [FK_StaffEducationOrgAssignmentAssociation_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI])
go


/* 
 * TABLE: [edfi].[StaffEducationOrganizationEmploymentAssociation] 
 */

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor_EmploymentStatusDescriptorId] 
    FOREIGN KEY ([EmploymentStatusDescriptorId])
    REFERENCES [edfi].[EmploymentStatusDescriptor]([EmploymentStatusDescriptorId])
go

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor_SeparationReasonDescriptorId] 
    FOREIGN KEY ([SeparationReasonDescriptorId])
    REFERENCES [edfi].[SeparationReasonDescriptor]([SeparationReasonDescriptorId])
go

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_SeparationType_SeparationTypeId] 
    FOREIGN KEY ([SeparationTypeId])
    REFERENCES [edfi].[SeparationType]([SeparationTypeId])
go

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI])
go


/* 
 * TABLE: [edfi].[StaffElectronicMail] 
 */

ALTER TABLE [edfi].[StaffElectronicMail] ADD CONSTRAINT [FK_StaffElectronicMail_ElectronicMailType_ElectronicMailTypeId] 
    FOREIGN KEY ([ElectronicMailTypeId])
    REFERENCES [edfi].[ElectronicMailType]([ElectronicMailTypeId])
go

ALTER TABLE [edfi].[StaffElectronicMail] ADD CONSTRAINT [FK_StaffElectronicMail_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StaffIdentificationCode] 
 */

ALTER TABLE [edfi].[StaffIdentificationCode] ADD CONSTRAINT [FK_StaffIdentificationCode_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[StaffIdentificationCode] ADD CONSTRAINT [FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor_StaffIdentificationSystemDescriptorId] 
    FOREIGN KEY ([StaffIdentificationSystemDescriptorId])
    REFERENCES [edfi].[StaffIdentificationSystemDescriptor]([StaffIdentificationSystemDescriptorId])
go


/* 
 * TABLE: [edfi].[StaffIdentificationDocument] 
 */

ALTER TABLE [edfi].[StaffIdentificationDocument] ADD CONSTRAINT [FK_StaffIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId] 
    FOREIGN KEY ([IdentificationDocumentUseTypeId])
    REFERENCES [edfi].[IdentificationDocumentUseType]([IdentificationDocumentUseTypeId])
go

ALTER TABLE [edfi].[StaffIdentificationDocument] ADD CONSTRAINT [FK_StaffIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
    FOREIGN KEY ([IssuerCountryDescriptorId])
    REFERENCES [edfi].[CountryDescriptor]([CountryDescriptorId])
go

ALTER TABLE [edfi].[StaffIdentificationDocument] ADD CONSTRAINT [FK_StaffIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId] 
    FOREIGN KEY ([PersonalInformationVerificationTypeId])
    REFERENCES [edfi].[PersonalInformationVerificationType]([PersonalInformationVerificationTypeId])
go

ALTER TABLE [edfi].[StaffIdentificationDocument] ADD CONSTRAINT [FK_StaffIdentificationDocument_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StaffIdentificationSystemDescriptor] 
 */

ALTER TABLE [edfi].[StaffIdentificationSystemDescriptor] ADD CONSTRAINT [FK_StaffIdentificationSystemDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([StaffIdentificationSystemDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId])
go

ALTER TABLE [edfi].[StaffIdentificationSystemDescriptor] ADD CONSTRAINT [FK_StaffIdentificationSystemDescriptor_StaffIdentificationSystemType_StaffIdentificationSystemTypeId] 
    FOREIGN KEY ([StaffIdentificationSystemTypeId])
    REFERENCES [edfi].[StaffIdentificationSystemType]([StaffIdentificationSystemTypeId])
go


/* 
 * TABLE: [edfi].[StaffInternationalAddress] 
 */

ALTER TABLE [edfi].[StaffInternationalAddress] ADD CONSTRAINT [FK_StaffInternationalAddress_AddressType_AddressTypeId] 
    FOREIGN KEY ([AddressTypeId])
    REFERENCES [edfi].[AddressType]([AddressTypeId])
go

ALTER TABLE [edfi].[StaffInternationalAddress] ADD CONSTRAINT [FK_StaffInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
    FOREIGN KEY ([CountryDescriptorId])
    REFERENCES [edfi].[CountryDescriptor]([CountryDescriptorId])
go

ALTER TABLE [edfi].[StaffInternationalAddress] ADD CONSTRAINT [FK_StaffInternationalAddress_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StaffLanguage] 
 */

ALTER TABLE [edfi].[StaffLanguage] ADD CONSTRAINT [FK_StaffLanguages_LanguageDescriptor_LanguageDescriptorId] 
    FOREIGN KEY ([LanguageDescriptorId])
    REFERENCES [edfi].[LanguageDescriptor]([LanguageDescriptorId])
go

ALTER TABLE [edfi].[StaffLanguage] ADD CONSTRAINT [FK_StaffLanguages_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StaffLanguageUse] 
 */

ALTER TABLE [edfi].[StaffLanguageUse] ADD CONSTRAINT [FK_StaffLanguageUse_LanguageUseType_LanguageUseTypeId] 
    FOREIGN KEY ([LanguageUseTypeId])
    REFERENCES [edfi].[LanguageUseType]([LanguageUseTypeId])
go

ALTER TABLE [edfi].[StaffLanguageUse] ADD CONSTRAINT [FK_StaffLanguageUse_StaffLanguages_StaffUSI] 
    FOREIGN KEY ([StaffUSI], [LanguageDescriptorId])
    REFERENCES [edfi].[StaffLanguage]([StaffUSI], [LanguageDescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StaffOtherName] 
 */

ALTER TABLE [edfi].[StaffOtherName] ADD CONSTRAINT [FK_StaffOtherName_OtherNameType_OtherNameTypeId] 
    FOREIGN KEY ([OtherNameTypeId])
    REFERENCES [edfi].[OtherNameType]([OtherNameTypeId])
go

ALTER TABLE [edfi].[StaffOtherName] ADD CONSTRAINT [FK_StaffOtherName_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StaffProgramAssociation] 
 */

ALTER TABLE [edfi].[StaffProgramAssociation] ADD CONSTRAINT [FK_StaffProgramAssociation_Program_ProgramEducationOrganizationId] 
    FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramTypeId], [ProgramName])
    REFERENCES [edfi].[Program]([EducationOrganizationId], [ProgramTypeId], [ProgramName])
go

ALTER TABLE [edfi].[StaffProgramAssociation] ADD CONSTRAINT [FK_StaffProgramAssociation_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI])
go


/* 
 * TABLE: [edfi].[StaffRace] 
 */

ALTER TABLE [edfi].[StaffRace] ADD CONSTRAINT [FK_StaffRace_RaceType_RaceTypeId] 
    FOREIGN KEY ([RaceTypeId])
    REFERENCES [edfi].[RaceType]([RaceTypeId])
go

ALTER TABLE [edfi].[StaffRace] ADD CONSTRAINT [FK_StaffRace_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StaffSchoolAssociation] 
 */

ALTER TABLE [edfi].[StaffSchoolAssociation] ADD CONSTRAINT [FK_StaffSchoolAssociation_ProgramAssignmentDescriptorId] 
    FOREIGN KEY ([ProgramAssignmentDescriptorId])
    REFERENCES [edfi].[ProgramAssignmentDescriptor]([ProgramAssignmentDescriptorId])
go

ALTER TABLE [edfi].[StaffSchoolAssociation] ADD CONSTRAINT [FK_StaffSchoolAssociation_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go

ALTER TABLE [edfi].[StaffSchoolAssociation] ADD CONSTRAINT [FK_StaffSchoolAssociation_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI])
go


/* 
 * TABLE: [edfi].[StaffSchoolAssociationAcademicSubject] 
 */

ALTER TABLE [edfi].[StaffSchoolAssociationAcademicSubject] ADD CONSTRAINT [FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptorId] 
    FOREIGN KEY ([AcademicSubjectDescriptorId])
    REFERENCES [edfi].[AcademicSubjectDescriptor]([AcademicSubjectDescriptorId])
go

ALTER TABLE [edfi].[StaffSchoolAssociationAcademicSubject] ADD CONSTRAINT [FK_StaffSchoolAssociationAcademicSubjects_StaffSchoolAssociation_StaffUSI] 
    FOREIGN KEY ([StaffUSI], [ProgramAssignmentDescriptorId], [SchoolId])
    REFERENCES [edfi].[StaffSchoolAssociation]([StaffUSI], [ProgramAssignmentDescriptorId], [SchoolId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StaffSchoolAssociationGradeLevel] 
 */

ALTER TABLE [edfi].[StaffSchoolAssociationGradeLevel] ADD CONSTRAINT [FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptorId] 
    FOREIGN KEY ([GradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[StaffSchoolAssociationGradeLevel] ADD CONSTRAINT [FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation_StaffUSI] 
    FOREIGN KEY ([StaffUSI], [ProgramAssignmentDescriptorId], [SchoolId])
    REFERENCES [edfi].[StaffSchoolAssociation]([StaffUSI], [ProgramAssignmentDescriptorId], [SchoolId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StaffSectionAssociation] 
 */

ALTER TABLE [edfi].[StaffSectionAssociation] ADD CONSTRAINT [FK_StaffSectionAssociation_ClassroomPositionDescriptor_ClassroomPositionDescriptorId] 
    FOREIGN KEY ([ClassroomPositionDescriptorId])
    REFERENCES [edfi].[ClassroomPositionDescriptor]([ClassroomPositionDescriptorId])
go

ALTER TABLE [edfi].[StaffSectionAssociation] ADD CONSTRAINT [FK_StaffSectionAssociation_Section_SchoolId] 
    FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
    REFERENCES [edfi].[Section]([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) 
	ON UPDATE CASCADE
go

ALTER TABLE [edfi].[StaffSectionAssociation] ADD CONSTRAINT [FK_StaffSectionAssociation_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI])
go


/* 
 * TABLE: [edfi].[StaffTelephone] 
 */

ALTER TABLE [edfi].[StaffTelephone] ADD CONSTRAINT [FK_StaffTelephone_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[StaffTelephone] ADD CONSTRAINT [FK_StaffTelephone_TelephoneNumberType_TelephoneNumberTypeId] 
    FOREIGN KEY ([TelephoneNumberTypeId])
    REFERENCES [edfi].[TelephoneNumberType]([TelephoneNumberTypeId])
go


/* 
 * TABLE: [edfi].[StaffVisa] 
 */

ALTER TABLE [edfi].[StaffVisa] ADD CONSTRAINT [FK_StaffVisa_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[StaffVisa] ADD CONSTRAINT [FK_StaffVisa_VisaType_VisaTypeId] 
    FOREIGN KEY ([VisaTypeId])
    REFERENCES [edfi].[VisaType]([VisaTypeId])
go


/* 
 * TABLE: [edfi].[StateEducationAgency] 
 */

ALTER TABLE [edfi].[StateEducationAgency] ADD CONSTRAINT [FK_StateEducationAgency_EducationOrganization_StateEducationAgencyId] 
    FOREIGN KEY ([StateEducationAgencyId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StateEducationAgencyAccountability] 
 */

ALTER TABLE [edfi].[StateEducationAgencyAccountability] ADD CONSTRAINT [FK_StateEducationAgencyAccountability_SchoolYearType_SchoolYear] 
    FOREIGN KEY ([SchoolYear])
    REFERENCES [edfi].[SchoolYearType]([SchoolYear])
go

ALTER TABLE [edfi].[StateEducationAgencyAccountability] ADD CONSTRAINT [FK_StateEducationAgencyAccountability_StateEducationAgency_StateEducationAgencyId] 
    FOREIGN KEY ([StateEducationAgencyId])
    REFERENCES [edfi].[StateEducationAgency]([StateEducationAgencyId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StateEducationAgencyFederalFunds] 
 */

ALTER TABLE [edfi].[StateEducationAgencyFederalFunds] ADD CONSTRAINT [FK_StateEducationAgencyFederalFunds_StateEducationAgency_StateEducationAgencyId] 
    FOREIGN KEY ([StateEducationAgencyId])
    REFERENCES [edfi].[StateEducationAgency]([StateEducationAgencyId])
go


/* 
 * TABLE: [edfi].[Student] 
 */

ALTER TABLE [edfi].[Student] ADD CONSTRAINT [FK_Student_BirthCountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
    FOREIGN KEY ([BirthCountryDescriptorId])
    REFERENCES [edfi].[CountryDescriptor]([CountryDescriptorId])
go

ALTER TABLE [edfi].[Student] ADD CONSTRAINT [FK_Student_CitizenshipStatusType_CitizenshipStatusTypeId] 
    FOREIGN KEY ([CitizenshipStatusTypeId])
    REFERENCES [edfi].[CitizenshipStatusType]([CitizenshipStatusTypeId])
go

ALTER TABLE [edfi].[Student] ADD CONSTRAINT [FK_Student_LimitedEnglishProficiencyDescriptorId] 
    FOREIGN KEY ([LimitedEnglishProficiencyDescriptorId])
    REFERENCES [edfi].[LimitedEnglishProficiencyDescriptor]([LimitedEnglishProficiencyDescriptorId])
go

ALTER TABLE [edfi].[Student] ADD CONSTRAINT [FK_Student_OldEthnicityType_OldEthnicityTypeId] 
    FOREIGN KEY ([OldEthnicityTypeId])
    REFERENCES [edfi].[OldEthnicityType]([OldEthnicityTypeId])
go

ALTER TABLE [edfi].[Student] ADD CONSTRAINT [FK_Student_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityDescriptorId] 
    FOREIGN KEY ([SchoolFoodServicesEligibilityDescriptorId])
    REFERENCES [edfi].[SchoolFoodServicesEligibilityDescriptor]([SchoolFoodServicesEligibilityDescriptorId])
go

ALTER TABLE [edfi].[Student] ADD CONSTRAINT [FK_Student_SexType_SexTypeId] 
    FOREIGN KEY ([SexTypeId])
    REFERENCES [edfi].[SexType]([SexTypeId])
go

ALTER TABLE [edfi].[Student] ADD CONSTRAINT [FK_Student_StateAbbreviationType_StateOfBirthAbbreviationTypeId] 
    FOREIGN KEY ([BirthStateAbbreviationTypeId])
    REFERENCES [edfi].[StateAbbreviationType]([StateAbbreviationTypeId])
go


/* 
 * TABLE: [edfi].[StudentAcademicRecord] 
 */

ALTER TABLE [edfi].[StudentAcademicRecord] ADD CONSTRAINT [FK_StudentAcademicRecord_CreditType_CumulativeAttemptedCreditTypeId] 
    FOREIGN KEY ([CumulativeAttemptedCreditTypeId])
    REFERENCES [edfi].[CreditType]([CreditTypeId])
go

ALTER TABLE [edfi].[StudentAcademicRecord] ADD CONSTRAINT [FK_StudentAcademicRecord_CreditType_CumulativeEarnedCreditTypeId] 
    FOREIGN KEY ([CumulativeEarnedCreditTypeId])
    REFERENCES [edfi].[CreditType]([CreditTypeId])
go

ALTER TABLE [edfi].[StudentAcademicRecord] ADD CONSTRAINT [FK_StudentAcademicRecord_CreditType_SessionAttemptedCreditTypeId] 
    FOREIGN KEY ([SessionAttemptedCreditTypeId])
    REFERENCES [edfi].[CreditType]([CreditTypeId])
go

ALTER TABLE [edfi].[StudentAcademicRecord] ADD CONSTRAINT [FK_StudentAcademicRecord_CreditType_SessionEarnedCreditTypeId] 
    FOREIGN KEY ([SessionEarnedCreditTypeId])
    REFERENCES [edfi].[CreditType]([CreditTypeId])
go

ALTER TABLE [edfi].[StudentAcademicRecord] ADD CONSTRAINT [FK_StudentAcademicRecord_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[StudentAcademicRecord] ADD CONSTRAINT [FK_StudentAcademicRecord_SchoolYearType_SchoolYear] 
    FOREIGN KEY ([SchoolYear])
    REFERENCES [edfi].[SchoolYearType]([SchoolYear])
go

ALTER TABLE [edfi].[StudentAcademicRecord] ADD CONSTRAINT [FK_StudentAcademicRecord_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go

ALTER TABLE [edfi].[StudentAcademicRecord] ADD CONSTRAINT [FK_StudentAcademicRecord_TermDescriptor_TermDescriptorId] 
    FOREIGN KEY ([TermDescriptorId])
    REFERENCES [edfi].[TermDescriptor]([TermDescriptorId])
go


/* 
 * TABLE: [edfi].[StudentAcademicRecordAcademicHonor] 
 */

ALTER TABLE [edfi].[StudentAcademicRecordAcademicHonor] ADD CONSTRAINT [FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryType_AcademicHonorCategoryTypeId] 
    FOREIGN KEY ([AcademicHonorCategoryTypeId])
    REFERENCES [edfi].[AcademicHonorCategoryType]([AcademicHonorCategoryTypeId])
go

ALTER TABLE [edfi].[StudentAcademicRecordAcademicHonor] ADD CONSTRAINT [FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor_AchievementCategoryDescriptorId] 
    FOREIGN KEY ([AchievementCategoryDescriptorId])
    REFERENCES [edfi].[AchievementCategoryDescriptor]([AchievementCategoryDescriptorId])
go

ALTER TABLE [edfi].[StudentAcademicRecordAcademicHonor] ADD CONSTRAINT [FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
    REFERENCES [edfi].[StudentAcademicRecord]([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentAcademicRecordClassRanking] 
 */

ALTER TABLE [edfi].[StudentAcademicRecordClassRanking] ADD CONSTRAINT [FK_StudentAcademicRecordClassRanking_StudentAcademicRecord_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
    REFERENCES [edfi].[StudentAcademicRecord]([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentAcademicRecordDiploma] 
 */

ALTER TABLE [edfi].[StudentAcademicRecordDiploma] ADD CONSTRAINT [FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor_AchievementCategoryDescriptorId] 
    FOREIGN KEY ([AchievementCategoryDescriptorId])
    REFERENCES [edfi].[AchievementCategoryDescriptor]([AchievementCategoryDescriptorId])
go

ALTER TABLE [edfi].[StudentAcademicRecordDiploma] ADD CONSTRAINT [FK_StudentAcademicRecordDiploma_DiplomaLevelType_DiplomaLevelTypeId] 
    FOREIGN KEY ([DiplomaLevelTypeId])
    REFERENCES [edfi].[DiplomaLevelType]([DiplomaLevelTypeId])
go

ALTER TABLE [edfi].[StudentAcademicRecordDiploma] ADD CONSTRAINT [FK_StudentAcademicRecordDiploma_DiplomaType_DiplomaTypeId] 
    FOREIGN KEY ([DiplomaTypeId])
    REFERENCES [edfi].[DiplomaType]([DiplomaTypeId])
go

ALTER TABLE [edfi].[StudentAcademicRecordDiploma] ADD CONSTRAINT [FK_StudentAcademicRecordDiploma_StudentAcademicRecord_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
    REFERENCES [edfi].[StudentAcademicRecord]([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentAcademicRecordRecognition] 
 */

ALTER TABLE [edfi].[StudentAcademicRecordRecognition] ADD CONSTRAINT [FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor_AchievementCategoryDescriptorId] 
    FOREIGN KEY ([AchievementCategoryDescriptorId])
    REFERENCES [edfi].[AchievementCategoryDescriptor]([AchievementCategoryDescriptorId])
go

ALTER TABLE [edfi].[StudentAcademicRecordRecognition] ADD CONSTRAINT [FK_StudentAcademicRecordRecognition_RecognitionType_RecognitionTypeId] 
    FOREIGN KEY ([RecognitionTypeId])
    REFERENCES [edfi].[RecognitionType]([RecognitionTypeId])
go

ALTER TABLE [edfi].[StudentAcademicRecordRecognition] ADD CONSTRAINT [FK_StudentAcademicRecordRecognition_StudentAcademicRecord_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
    REFERENCES [edfi].[StudentAcademicRecord]([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentAcademicRecordReportCard] 
 */

ALTER TABLE [edfi].[StudentAcademicRecordReportCard] ADD CONSTRAINT [FK_StudentAcademicRecordReportCard_ReportCard] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
    REFERENCES [edfi].[ReportCard]([StudentUSI], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
go

ALTER TABLE [edfi].[StudentAcademicRecordReportCard] ADD CONSTRAINT [FK_StudentAcademicRecordReportCard_StudentAcademicRecord_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
    REFERENCES [edfi].[StudentAcademicRecord]([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentAddress] 
 */

ALTER TABLE [edfi].[StudentAddress] ADD CONSTRAINT [FK_StudentAddress_AddressType_AddressTypeId] 
    FOREIGN KEY ([AddressTypeId])
    REFERENCES [edfi].[AddressType]([AddressTypeId])
go

ALTER TABLE [edfi].[StudentAddress] ADD CONSTRAINT [FK_StudentAddress_StateAbbreviationType_StateAbbreviationTypeId] 
    FOREIGN KEY ([StateAbbreviationTypeId])
    REFERENCES [edfi].[StateAbbreviationType]([StateAbbreviationTypeId])
go

ALTER TABLE [edfi].[StudentAddress] ADD CONSTRAINT [FK_StudentAddress_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentAssessment] 
 */

ALTER TABLE [edfi].[StudentAssessment] ADD CONSTRAINT [FK_StudentAssessment_AdministrationEnvironmentType_AdministrationEnvironmentTypeId] 
    FOREIGN KEY ([AdministrationEnvironmentTypeId])
    REFERENCES [edfi].[AdministrationEnvironmentType]([AdministrationEnvironmentTypeId])
go

ALTER TABLE [edfi].[StudentAssessment] ADD CONSTRAINT [FK_StudentAssessment_Assessment_AssessmentTitle] 
    FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
    REFERENCES [edfi].[Assessment]([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
go

ALTER TABLE [edfi].[StudentAssessment] ADD CONSTRAINT [FK_StudentAssessment_EventCircumstanceType_EventCircumstanceTypeId] 
    FOREIGN KEY ([EventCircumstanceTypeId])
    REFERENCES [edfi].[EventCircumstanceType]([EventCircumstanceTypeId])
go

ALTER TABLE [edfi].[StudentAssessment] ADD CONSTRAINT [FK_StudentAssessment_LanguageDescriptor_AdministrationLanguageDescriptorId] 
    FOREIGN KEY ([AdministrationLanguageDescriptorId])
    REFERENCES [edfi].[LanguageDescriptor]([LanguageDescriptorId])
go

ALTER TABLE [edfi].[StudentAssessment] ADD CONSTRAINT [FK_StudentAssessment_ReasonNotTestedType_ReasonNotTestedTypeId] 
    FOREIGN KEY ([ReasonNotTestedTypeId])
    REFERENCES [edfi].[ReasonNotTestedType]([ReasonNotTestedTypeId])
go

ALTER TABLE [edfi].[StudentAssessment] ADD CONSTRAINT [FK_StudentAssessment_RetestIndicatorType_RetestIndicatorTypeId] 
    FOREIGN KEY ([RetestIndicatorTypeId])
    REFERENCES [edfi].[RetestIndicatorType]([RetestIndicatorTypeId])
go

ALTER TABLE [edfi].[StudentAssessment] ADD CONSTRAINT [FK_StudentAssessment_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go

ALTER TABLE [edfi].[StudentAssessment] ADD CONSTRAINT [FK_StudentAssessment_WhenAssessedGradeLevelDescriptorId] 
    FOREIGN KEY ([WhenAssessedGradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go


/* 
 * TABLE: [edfi].[StudentAssessmentAccommodation] 
 */

ALTER TABLE [edfi].[StudentAssessmentAccommodation] ADD CONSTRAINT [FK_StudentAssessmentAccommodation_AccommodationDescriptor_AccommodationDescriptorId] 
    FOREIGN KEY ([AccommodationDescriptorId])
    REFERENCES [edfi].[AccommodationDescriptor]([AccommodationDescriptorId])
go

ALTER TABLE [edfi].[StudentAssessmentAccommodation] ADD CONSTRAINT [FK_StudentAssessmentAccommodation_StudentAssessment_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
    REFERENCES [edfi].[StudentAssessment]([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentAssessmentItem] 
 */

ALTER TABLE [edfi].[StudentAssessmentItem] ADD CONSTRAINT [FK_StudentAssessmentItem_AssessmentItem] 
    FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
    REFERENCES [edfi].[AssessmentItem]([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
go

ALTER TABLE [edfi].[StudentAssessmentItem] ADD CONSTRAINT [FK_StudentAssessmentItem_AssessmentItemResultType_AssessmentItemResultTypeId] 
    FOREIGN KEY ([AssessmentItemResultTypeId])
    REFERENCES [edfi].[AssessmentItemResultType]([AssessmentItemResultTypeId])
go

ALTER TABLE [edfi].[StudentAssessmentItem] ADD CONSTRAINT [FK_StudentAssessmentItem_ResponseIndicatorType_ResponseIndicatorTypeId] 
    FOREIGN KEY ([ResponseIndicatorTypeId])
    REFERENCES [edfi].[ResponseIndicatorType]([ResponseIndicatorTypeId])
go

ALTER TABLE [edfi].[StudentAssessmentItem] ADD CONSTRAINT [FK_StudentAssessmentItem_StudentAssessment_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
    REFERENCES [edfi].[StudentAssessment]([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentAssessmentPerformanceLevel] 
 */

ALTER TABLE [edfi].[StudentAssessmentPerformanceLevel] ADD CONSTRAINT [FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId] 
    FOREIGN KEY ([PerformanceLevelDescriptorId])
    REFERENCES [edfi].[PerformanceLevelDescriptor]([PerformanceLevelDescriptorId])
go

ALTER TABLE [edfi].[StudentAssessmentPerformanceLevel] ADD CONSTRAINT [FK_StudentAssessmentPerformanceLevel_StudentAssessment_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
    REFERENCES [edfi].[StudentAssessment]([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentAssessmentScoreResult] 
 */

ALTER TABLE [edfi].[StudentAssessmentScoreResult] ADD CONSTRAINT [FK_StudentAssessmentScoreResult_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] 
    FOREIGN KEY ([AssessmentReportingMethodTypeId])
    REFERENCES [edfi].[AssessmentReportingMethodType]([AssessmentReportingMethodTypeId])
go

ALTER TABLE [edfi].[StudentAssessmentScoreResult] ADD CONSTRAINT [FK_StudentAssessmentScoreResult_ResultDatatypeType_ResultDatatypeTypeId] 
    FOREIGN KEY ([ResultDatatypeTypeId])
    REFERENCES [edfi].[ResultDatatypeType]([ResultDatatypeTypeId])
go

ALTER TABLE [edfi].[StudentAssessmentScoreResult] ADD CONSTRAINT [FK_StudentAssessmentScoreResult_StudentAssessment_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
    REFERENCES [edfi].[StudentAssessment]([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentAssessmentStudentObjectiveAssessment] 
 */

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment] ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment] 
    FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
    REFERENCES [edfi].[ObjectiveAssessment]([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
go

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment] ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
    REFERENCES [edfi].[StudentAssessment]([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] 
 */

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor_PerformanceLevelDescriptorId] 
    FOREIGN KEY ([PerformanceLevelDescriptorId])
    REFERENCES [edfi].[PerformanceLevelDescriptor]([PerformanceLevelDescriptorId])
go

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment] 
    FOREIGN KEY ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [AdministrationDate])
    REFERENCES [edfi].[StudentAssessmentStudentObjectiveAssessment]([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [AdministrationDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] 
 */

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentObjectiveAssessment] 
    FOREIGN KEY ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [AdministrationDate])
    REFERENCES [edfi].[StudentAssessmentStudentObjectiveAssessment]([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [AdministrationDate]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessmentScoreResults_AssessmentReportingMethodType_AssessmentReportingMethodTypeId] 
    FOREIGN KEY ([AssessmentReportingMethodTypeId])
    REFERENCES [edfi].[AssessmentReportingMethodType]([AssessmentReportingMethodTypeId])
go

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessmentScoreResults_ResultDatatypeType_ResultDatatypeTypeId] 
    FOREIGN KEY ([ResultDatatypeTypeId])
    REFERENCES [edfi].[ResultDatatypeType]([ResultDatatypeTypeId])
go


/* 
 * TABLE: [edfi].[StudentCharacteristic] 
 */

ALTER TABLE [edfi].[StudentCharacteristic] ADD CONSTRAINT [FK_StudentCharacteristic_StudentCharacteristicDescriptorId] 
    FOREIGN KEY ([StudentCharacteristicDescriptorId])
    REFERENCES [edfi].[StudentCharacteristicDescriptor]([StudentCharacteristicDescriptorId])
go

ALTER TABLE [edfi].[StudentCharacteristic] ADD CONSTRAINT [FK_StudentCharacteristics_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentCharacteristicDescriptor] 
 */

ALTER TABLE [edfi].[StudentCharacteristicDescriptor] ADD CONSTRAINT [FK_StudentCharacteristicDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([StudentCharacteristicDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[StudentCharacteristicDescriptor] ADD CONSTRAINT [FK_StudentCharacteristicDescriptor_StudentCharacteristicType_StudentCharacteristicTypeId] 
    FOREIGN KEY ([StudentCharacteristicTypeId])
    REFERENCES [edfi].[StudentCharacteristicType]([StudentCharacteristicTypeId])
go


/* 
 * TABLE: [edfi].[StudentCohortAssociation] 
 */

ALTER TABLE [edfi].[StudentCohortAssociation] ADD CONSTRAINT [FK_StudentCohortAssociation_Cohort_EducationOrganizationId] 
    FOREIGN KEY ([CohortIdentifier], [EducationOrganizationId])
    REFERENCES [edfi].[Cohort]([CohortIdentifier], [EducationOrganizationId])
go

ALTER TABLE [edfi].[StudentCohortAssociation] ADD CONSTRAINT [FK_StudentCohortAssociation_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[StudentCohortAssociationSection] 
 */

ALTER TABLE [edfi].[StudentCohortAssociationSection] ADD CONSTRAINT [FK_StudentCohortAssociationSection_Section_LocalCourseCode] 
    FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
    REFERENCES [edfi].[Section]([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) 
	ON UPDATE CASCADE
go

ALTER TABLE [edfi].[StudentCohortAssociationSection] ADD CONSTRAINT [FK_StudentCohortAssociationSection_StudentCohortAssociation_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [CohortIdentifier], [BeginDate])
    REFERENCES [edfi].[StudentCohortAssociation]([StudentUSI], [EducationOrganizationId], [CohortIdentifier], [BeginDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentCohortYear] 
 */

ALTER TABLE [edfi].[StudentCohortYear] ADD CONSTRAINT [FK_StudentCohortYears_CohortYearType_CohortYearTypeId] 
    FOREIGN KEY ([CohortYearTypeId])
    REFERENCES [edfi].[CohortYearType]([CohortYearTypeId])
go

ALTER TABLE [edfi].[StudentCohortYear] ADD CONSTRAINT [FK_StudentCohortYears_SchoolYearType_SchoolYear] 
    FOREIGN KEY ([SchoolYear])
    REFERENCES [edfi].[SchoolYearType]([SchoolYear])
go

ALTER TABLE [edfi].[StudentCohortYear] ADD CONSTRAINT [FK_StudentCohortYears_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentCompetencyObjective] 
 */

ALTER TABLE [edfi].[StudentCompetencyObjective] ADD CONSTRAINT [FK_StudentCompetencyObjective_CompetencyLevelDescriptor_CompetencyLevelDescriptorId] 
    FOREIGN KEY ([CompetencyLevelDescriptorId])
    REFERENCES [edfi].[CompetencyLevelDescriptor]([CompetencyLevelDescriptorId])
go

ALTER TABLE [edfi].[StudentCompetencyObjective] ADD CONSTRAINT [FK_StudentCompetencyObjective_CompetencyObjective_Objective] 
    FOREIGN KEY ([Objective], [ObjectiveGradeLevelDescriptorId], [ObjectiveEducationOrganizationId])
    REFERENCES [edfi].[CompetencyObjective]([Objective], [ObjectiveGradeLevelDescriptorId], [EducationOrganizationId])
go

ALTER TABLE [edfi].[StudentCompetencyObjective] ADD CONSTRAINT [FK_StudentCompetencyObjective_GradingPeriod] 
    FOREIGN KEY ([GradingPeriodDescriptorId], [SchoolId], [GradingPeriodBeginDate])
    REFERENCES [edfi].[GradingPeriod]([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
go

ALTER TABLE [edfi].[StudentCompetencyObjective] ADD CONSTRAINT [FK_StudentCompetencyObjective_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) 
go

ALTER TABLE [edfi].[StudentCompetencyObjective] ADD CONSTRAINT [FK_StudentCompetencyObjective_StudentProgramAssociation] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
    REFERENCES [edfi].[StudentProgramAssociation]([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
go

ALTER TABLE [edfi].[StudentCompetencyObjective] ADD CONSTRAINT [FK_StudentCompetencyObjective_StudentSectionAssociation] 
    FOREIGN KEY ([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
    REFERENCES [edfi].[StudentSectionAssociation]([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
	ON UPDATE CASCADE
go


/* 
 * TABLE: [edfi].[StudentCTEProgramAssociation] 
 */

ALTER TABLE [edfi].[StudentCTEProgramAssociation] ADD CONSTRAINT [FK_StudentCTEProgramAssociation_StudentProgramAssociation] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
    REFERENCES [edfi].[StudentProgramAssociation]([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentCTEProgramAssociationCTEProgram] 
 */

ALTER TABLE [edfi].[StudentCTEProgramAssociationCTEProgram] ADD CONSTRAINT [FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayType_CareerPathwayTypeId] 
    FOREIGN KEY ([CareerPathwayTypeId])
    REFERENCES [edfi].[CareerPathwayType]([CareerPathwayTypeId])
go

ALTER TABLE [edfi].[StudentCTEProgramAssociationCTEProgram] ADD CONSTRAINT [FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
    REFERENCES [edfi].[StudentCTEProgramAssociation]([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentDisability] 
 */

ALTER TABLE [edfi].[StudentDisability] ADD CONSTRAINT [FK_StudentDisability_DisabilityDescriptor_DisabilityDescriptorId] 
    FOREIGN KEY ([DisabilityDescriptorId])
    REFERENCES [edfi].[DisabilityDescriptor]([DisabilityDescriptorId])
go

ALTER TABLE [edfi].[StudentDisability] ADD CONSTRAINT [FK_StudentDisability_DisabilityDeterminationSourceType_DisabilityDeterminationSourceTypeId] 
    FOREIGN KEY ([DisabilityDeterminationSourceTypeId])
    REFERENCES [edfi].[DisabilityDeterminationSourceType]([DisabilityDeterminationSourceTypeId])
go

ALTER TABLE [edfi].[StudentDisability] ADD CONSTRAINT [FK_StudentDisability_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentDisciplineIncidentAssociation] 
 */

ALTER TABLE [edfi].[StudentDisciplineIncidentAssociation] ADD CONSTRAINT [FK_StudentDisciplineIncidentAssociation_DisciplineIncident_SchoolId] 
    FOREIGN KEY ([IncidentIdentifier], [SchoolId])
    REFERENCES [edfi].[DisciplineIncident]([IncidentIdentifier], [SchoolId])
go

ALTER TABLE [edfi].[StudentDisciplineIncidentAssociation] ADD CONSTRAINT [FK_StudentDisciplineIncidentAssociation_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go

ALTER TABLE [edfi].[StudentDisciplineIncidentAssociation] ADD CONSTRAINT [FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeType_StudentParticipationCodeTypeId] 
    FOREIGN KEY ([StudentParticipationCodeTypeId])
    REFERENCES [edfi].[StudentParticipationCodeType]([StudentParticipationCodeTypeId])
go


/* 
 * TABLE: [edfi].[StudentDisciplineIncidentAssociationBehavior] 
 */

ALTER TABLE [edfi].[StudentDisciplineIncidentAssociationBehavior] ADD CONSTRAINT [FK_StudentDisciplineIncidentBehavior_BehaviorDescriptor_BehaviorDescriptorId] 
    FOREIGN KEY ([BehaviorDescriptorId])
    REFERENCES [edfi].[BehaviorDescriptor]([BehaviorDescriptorId])
go

ALTER TABLE [edfi].[StudentDisciplineIncidentAssociationBehavior] ADD CONSTRAINT [FK_StudentDisciplineIncidentBehavior_StudentDisciplineIncidentAssociation_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [SchoolId], [IncidentIdentifier])
    REFERENCES [edfi].[StudentDisciplineIncidentAssociation]([StudentUSI], [SchoolId], [IncidentIdentifier]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentEducationOrganizationAssociation] 
 */

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_EducationOrganization_EducationOrganizationId] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_ResponsibilityDescriptor_ResponsibilityDescriptorId] 
    FOREIGN KEY ([ResponsibilityDescriptorId])
    REFERENCES [edfi].[ResponsibilityDescriptor]([ResponsibilityDescriptorId])
go

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[StudentElectronicMail] 
 */

ALTER TABLE [edfi].[StudentElectronicMail] ADD CONSTRAINT [FK_StudentElectronicMail_ElectronicMailType_ElectronicMailTypeId] 
    FOREIGN KEY ([ElectronicMailTypeId])
    REFERENCES [edfi].[ElectronicMailType]([ElectronicMailTypeId])
go

ALTER TABLE [edfi].[StudentElectronicMail] ADD CONSTRAINT [FK_StudentElectronicMail_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentGradebookEntry] 
 */

ALTER TABLE [edfi].[StudentGradebookEntry] ADD CONSTRAINT [FK_StudentGradebookEntry_CompetencyLevelDescriptor_CompetencyLevelDescriptorId] 
    FOREIGN KEY ([CompetencyLevelDescriptorId])
    REFERENCES [edfi].[CompetencyLevelDescriptor]([CompetencyLevelDescriptorId])
go

ALTER TABLE [edfi].[StudentGradebookEntry] ADD CONSTRAINT [FK_StudentGradebookEntry_GradebookEntry_SchoolId] 
    FOREIGN KEY ([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned])
    REFERENCES [edfi].[GradebookEntry]([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned])
	ON UPDATE CASCADE
go

ALTER TABLE [edfi].[StudentGradebookEntry] ADD CONSTRAINT [FK_StudentGradebookEntry_StudentSectionAssociation_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
    REFERENCES [edfi].[StudentSectionAssociation]([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
	ON UPDATE CASCADE
go


/* 
 * TABLE: [edfi].[StudentIdentificationCode] 
 */

ALTER TABLE [edfi].[StudentIdentificationCode] ADD CONSTRAINT [FK_StudentIdentificationCode_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[StudentIdentificationCode] ADD CONSTRAINT [FK_StudentIdentificationCode_StudentIdentificationSystemDescriptor_DescriptorId] 
    FOREIGN KEY ([StudentIdentificationSystemDescriptorId])
    REFERENCES [edfi].[StudentIdentificationSystemDescriptor]([StudentIdentificationSystemDescriptorId])
go


/* 
 * TABLE: [edfi].[StudentIdentificationDocument] 
 */

ALTER TABLE [edfi].[StudentIdentificationDocument] ADD CONSTRAINT [FK_StudentIdentificationDocument_IdentificationDocumentUseType_IdentificationDocumentUseTypeId] 
    FOREIGN KEY ([IdentificationDocumentUseTypeId])
    REFERENCES [edfi].[IdentificationDocumentUseType]([IdentificationDocumentUseTypeId])
go

ALTER TABLE [edfi].[StudentIdentificationDocument] ADD CONSTRAINT [FK_StudentIdentificationDocument_IssuerCountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
    FOREIGN KEY ([IssuerCountryDescriptorId])
    REFERENCES [edfi].[CountryDescriptor]([CountryDescriptorId])
go

ALTER TABLE [edfi].[StudentIdentificationDocument] ADD CONSTRAINT [FK_StudentIdentificationDocument_PersonalInformationVerificationType_PersonalInformationVerificationTypeId] 
    FOREIGN KEY ([PersonalInformationVerificationTypeId])
    REFERENCES [edfi].[PersonalInformationVerificationType]([PersonalInformationVerificationTypeId])
go

ALTER TABLE [edfi].[StudentIdentificationDocument] ADD CONSTRAINT [FK_StudentIdentificationDocument_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentIdentificationSystemDescriptor] 
 */

ALTER TABLE [edfi].[StudentIdentificationSystemDescriptor] ADD CONSTRAINT [FK_StudentIdentificationSystemDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([StudentIdentificationSystemDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId])
go

ALTER TABLE [edfi].[StudentIdentificationSystemDescriptor] ADD CONSTRAINT [FK_StudentIdentificationSystemDescriptor_StudentIdentificationSystemType_StudentIdentificationSystemTypeId] 
    FOREIGN KEY ([StudentIdentificationSystemTypeId])
    REFERENCES [edfi].[StudentIdentificationSystemType]([StudentIdentificationSystemTypeId])
go


/* 
 * TABLE: [edfi].[StudentIndicator] 
 */

ALTER TABLE [edfi].[StudentIndicator] ADD CONSTRAINT [FK_StudentIndicator_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentInternationalAddress] 
 */

ALTER TABLE [edfi].[StudentInternationalAddress] ADD CONSTRAINT [FK_StudentInternationalAddress_AddressType_AddressTypeId] 
    FOREIGN KEY ([AddressTypeId])
    REFERENCES [edfi].[AddressType]([AddressTypeId])
go

ALTER TABLE [edfi].[StudentInternationalAddress] ADD CONSTRAINT [FK_StudentInternationalAddress_CountryDescriptorId_CountryDescriptor_CountryDescriptorId] 
    FOREIGN KEY ([CountryDescriptorId])
    REFERENCES [edfi].[CountryDescriptor]([CountryDescriptorId])
go

ALTER TABLE [edfi].[StudentInternationalAddress] ADD CONSTRAINT [FK_StudentInternationalAddress_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentInterventionAssociation] 
 */

ALTER TABLE [edfi].[StudentInterventionAssociation] ADD CONSTRAINT [FK_StudentInterventionAssociation_Cohort_CohortEducationOrganizationId] 
    FOREIGN KEY ([CohortIdentifier], [CohortEducationOrganizationId])
    REFERENCES [edfi].[Cohort]([CohortIdentifier], [EducationOrganizationId])
go

ALTER TABLE [edfi].[StudentInterventionAssociation] ADD CONSTRAINT [FK_StudentInterventionAssociation_Intervention] 
    FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[Intervention]([InterventionIdentificationCode], [EducationOrganizationId])
go

ALTER TABLE [edfi].[StudentInterventionAssociation] ADD CONSTRAINT [FK_StudentInterventionAssociation_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[StudentInterventionAssociationInterventionEffectiveness] 
 */

ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] ADD CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptorId] 
    FOREIGN KEY ([DiagnosisDescriptorId])
    REFERENCES [edfi].[DiagnosisDescriptor]([DiagnosisDescriptorId])
go

ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] ADD CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptorId] 
    FOREIGN KEY ([GradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] ADD CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingType] 
    FOREIGN KEY ([InterventionEffectivenessRatingTypeId])
    REFERENCES [edfi].[InterventionEffectivenessRatingType]([InterventionEffectivenessRatingTypeId])
go

ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] ADD CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedType_PopulationServedTypeId] 
    FOREIGN KEY ([PopulationServedTypeId])
    REFERENCES [edfi].[PopulationServedType]([PopulationServedTypeId])
go

ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] ADD CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation] 
    FOREIGN KEY ([StudentUSI], [InterventionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[StudentInterventionAssociation]([StudentUSI], [InterventionIdentificationCode], [EducationOrganizationId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentInterventionAttendanceEvent] 
 */

ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] ADD CONSTRAINT [FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptorId] 
    FOREIGN KEY ([AttendanceEventCategoryDescriptorId])
    REFERENCES [edfi].[AttendanceEventCategoryDescriptor]([AttendanceEventCategoryDescriptorId])
go

ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] ADD CONSTRAINT [FK_StudentInterventionAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] 
    FOREIGN KEY ([EducationalEnvironmentTypeId])
    REFERENCES [edfi].[EducationalEnvironmentType]([EducationalEnvironmentTypeId])
go

ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] ADD CONSTRAINT [FK_StudentInterventionAttendanceEvent_Intervention] 
    FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
    REFERENCES [edfi].[Intervention]([InterventionIdentificationCode], [EducationOrganizationId])
go

ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] ADD CONSTRAINT [FK_StudentInterventionAttendanceEvent_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[StudentLanguage] 
 */

ALTER TABLE [edfi].[StudentLanguage] ADD CONSTRAINT [FK_StudentLanguages_LanguageDescriptor_LanguageDescriptorId] 
    FOREIGN KEY ([LanguageDescriptorId])
    REFERENCES [edfi].[LanguageDescriptor]([LanguageDescriptorId])
go

ALTER TABLE [edfi].[StudentLanguage] ADD CONSTRAINT [FK_StudentLanguages_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentLanguageUse] 
 */

ALTER TABLE [edfi].[StudentLanguageUse] ADD CONSTRAINT [FK_StudentLanguageUse_LanguageUseType_LanguageUseTypeId] 
    FOREIGN KEY ([LanguageUseTypeId])
    REFERENCES [edfi].[LanguageUseType]([LanguageUseTypeId])
go

ALTER TABLE [edfi].[StudentLanguageUse] ADD CONSTRAINT [FK_StudentLanguageUse_StudentLanguages_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [LanguageDescriptorId])
    REFERENCES [edfi].[StudentLanguage]([StudentUSI], [LanguageDescriptorId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentLearningObjective] 
 */

ALTER TABLE [edfi].[StudentLearningObjective] ADD CONSTRAINT [FK_StudentLearningObjective_CompetencyLevelDescriptor_CompetencyLevelDescriptorId] 
    FOREIGN KEY ([CompetencyLevelDescriptorId])
    REFERENCES [edfi].[CompetencyLevelDescriptor]([CompetencyLevelDescriptorId])
go

ALTER TABLE [edfi].[StudentLearningObjective] ADD CONSTRAINT [FK_StudentLearningObjective_GradingPeriod_SchoolId] 
    FOREIGN KEY ([GradingPeriodDescriptorId], [SchoolId], [GradingPeriodBeginDate])
    REFERENCES [edfi].[GradingPeriod]([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
go

ALTER TABLE [edfi].[StudentLearningObjective] ADD CONSTRAINT [FK_StudentLearningObjective_LearningObjective_Objective] 
    FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
    REFERENCES [edfi].[LearningObjective]([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
go

ALTER TABLE [edfi].[StudentLearningObjective] ADD CONSTRAINT [FK_StudentLearningObjective_StudentProgramAssociation] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
    REFERENCES [edfi].[StudentProgramAssociation]([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
go

ALTER TABLE [edfi].[StudentLearningObjective] ADD CONSTRAINT [FK_StudentLearningObjective_StudentSectionAssociation_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [StudentSectionAssociationBeginDate])
    REFERENCES [edfi].[StudentSectionAssociation]([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate]) 
	ON UPDATE CASCADE
go

ALTER TABLE [edfi].[StudentLearningObjective] ADD CONSTRAINT [FK_StudentLearningObjective_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) 
go

/* 
 * TABLE: [edfi].[StudentLearningStyle] 
 */

ALTER TABLE [edfi].[StudentLearningStyle] ADD CONSTRAINT [FK_StudentLearningStyle_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentMigrantEducationProgramAssociation] 
 */

ALTER TABLE [edfi].[StudentMigrantEducationProgramAssociation] ADD CONSTRAINT [FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptorId] 
    FOREIGN KEY ([ContinuationOfServicesReasonDescriptorId])
    REFERENCES [edfi].[ContinuationOfServicesReasonDescriptor]([ContinuationOfServicesReasonDescriptorId])
go

ALTER TABLE [edfi].[StudentMigrantEducationProgramAssociation] ADD CONSTRAINT [FK_StudentMigrantEducationProgramAssociation_StudentProgramAssociation] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
    REFERENCES [edfi].[StudentProgramAssociation]([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentOtherName] 
 */

ALTER TABLE [edfi].[StudentOtherName] ADD CONSTRAINT [FK_StudentOtherName_OtherNameType_OtherNameTypeId] 
    FOREIGN KEY ([OtherNameTypeId])
    REFERENCES [edfi].[OtherNameType]([OtherNameTypeId])
go

ALTER TABLE [edfi].[StudentOtherName] ADD CONSTRAINT [FK_StudentOtherName_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentParentAssociation] 
 */

ALTER TABLE [edfi].[StudentParentAssociation] ADD CONSTRAINT [FK_StudentParentAssociation_Parent_ParentUSI] 
    FOREIGN KEY ([ParentUSI])
    REFERENCES [edfi].[Parent]([ParentUSI])
go

ALTER TABLE [edfi].[StudentParentAssociation] ADD CONSTRAINT [FK_StudentParentAssociation_RelationType_RelationTypeId] 
    FOREIGN KEY ([RelationTypeId])
    REFERENCES [edfi].[RelationType]([RelationTypeId])
go

ALTER TABLE [edfi].[StudentParentAssociation] ADD CONSTRAINT [FK_StudentParentAssociation_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[StudentProgramAssociation] 
 */

ALTER TABLE [edfi].[StudentProgramAssociation] ADD CONSTRAINT [FK_StudentProgramAssociation_EducationOrganization] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[StudentProgramAssociation] ADD CONSTRAINT [FK_StudentProgramAssociation_Program] 
    FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramTypeId], [ProgramName])
    REFERENCES [edfi].[Program]([EducationOrganizationId], [ProgramTypeId], [ProgramName])
go

ALTER TABLE [edfi].[StudentProgramAssociation] ADD CONSTRAINT [FK_StudentProgramAssociation_ReasonExitedDescriptor_ReasonExitedDescriptorId] 
    FOREIGN KEY ([ReasonExitedDescriptorId])
    REFERENCES [edfi].[ReasonExitedDescriptor]([ReasonExitedDescriptorId])
go

ALTER TABLE [edfi].[StudentProgramAssociation] ADD CONSTRAINT [FK_StudentProgramAssociation_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[StudentProgramAssociationService] 
 */

ALTER TABLE [edfi].[StudentProgramAssociationService] ADD CONSTRAINT [FK_StudentProgramAssociationService_ServiceDescriptor_ServiceDescriptorId] 
    FOREIGN KEY ([ServiceDescriptorId])
    REFERENCES [edfi].[ServiceDescriptor]([ServiceDescriptorId])
go

ALTER TABLE [edfi].[StudentProgramAssociationService] ADD CONSTRAINT [FK_StudentProgramAssociationService_StudentProgramAssociation] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
    REFERENCES [edfi].[StudentProgramAssociation]([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentProgramAttendanceEvent] 
 */

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptorId] 
    FOREIGN KEY ([AttendanceEventCategoryDescriptorId])
    REFERENCES [edfi].[AttendanceEventCategoryDescriptor]([AttendanceEventCategoryDescriptorId])
go

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] 
    FOREIGN KEY ([EducationalEnvironmentTypeId])
    REFERENCES [edfi].[EducationalEnvironmentType]([EducationalEnvironmentTypeId])
go

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_EducationOrganization] 
    FOREIGN KEY ([EducationOrganizationId])
    REFERENCES [edfi].[EducationOrganization]([EducationOrganizationId])
go

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_Program_ProgramTypeId] 
    FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramTypeId], [ProgramName])
    REFERENCES [edfi].[Program]([EducationOrganizationId], [ProgramTypeId], [ProgramName])
go

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[StudentProgramParticipation] 
 */

ALTER TABLE [edfi].[StudentProgramParticipation] ADD CONSTRAINT [FK_StudentProgramParticipations_ProgramType_ProgramTypeId] 
    FOREIGN KEY ([ProgramTypeId])
    REFERENCES [edfi].[ProgramType]([ProgramTypeId])
go

ALTER TABLE [edfi].[StudentProgramParticipation] ADD CONSTRAINT [FK_StudentProgramParticipations_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentProgramParticipationProgramCharacteristic] 
 */

ALTER TABLE [edfi].[StudentProgramParticipationProgramCharacteristic] ADD CONSTRAINT [FK_StudentProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor_ProgramCharacteristicDescriptorId] 
    FOREIGN KEY ([ProgramCharacteristicDescriptorId])
    REFERENCES [edfi].[ProgramCharacteristicDescriptor]([ProgramCharacteristicDescriptorId])
go

ALTER TABLE [edfi].[StudentProgramParticipationProgramCharacteristic] ADD CONSTRAINT [FK_StudentProgramParticipationProgramCharacteristic_StudentProgramParticipation_ProgramTypeId] 
    FOREIGN KEY ([StudentUSI], [ProgramTypeId])
    REFERENCES [edfi].[StudentProgramParticipation]([StudentUSI], [ProgramTypeId]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentRace] 
 */

ALTER TABLE [edfi].[StudentRace] ADD CONSTRAINT [FK_StudentRace_RaceType_RaceTypeId] 
    FOREIGN KEY ([RaceTypeId])
    REFERENCES [edfi].[RaceType]([RaceTypeId])
go

ALTER TABLE [edfi].[StudentRace] ADD CONSTRAINT [FK_StudentRace_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentSchoolAssociation] 
 */

ALTER TABLE [edfi].[StudentSchoolAssociation] ADD CONSTRAINT [FK_StudentSchoolAssociation_EntryGradeLevelDescriptorId] 
    FOREIGN KEY ([EntryGradeLevelDescriptorId])
    REFERENCES [edfi].[GradeLevelDescriptor]([GradeLevelDescriptorId])
go

ALTER TABLE [edfi].[StudentSchoolAssociation] ADD CONSTRAINT [FK_StudentSchoolAssociation_EntryGradeLevelReasonType_EntryGradeLevelReasonTypeId] 
    FOREIGN KEY ([EntryGradeLevelReasonTypeId])
    REFERENCES [edfi].[EntryGradeLevelReasonType]([EntryGradeLevelReasonTypeId])
go

ALTER TABLE [edfi].[StudentSchoolAssociation] ADD CONSTRAINT [FK_StudentSchoolAssociation_EntryTypeDescriptor_EntryTypeDescriptorId] 
    FOREIGN KEY ([EntryTypeDescriptorId])
    REFERENCES [edfi].[EntryTypeDescriptor]([EntryTypeDescriptorId])
go

ALTER TABLE [edfi].[StudentSchoolAssociation] ADD CONSTRAINT [FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor_ExitWithdrawTypeDescriptorId] 
    FOREIGN KEY ([ExitWithdrawTypeDescriptorId])
    REFERENCES [edfi].[ExitWithdrawTypeDescriptor]([ExitWithdrawTypeDescriptorId])
go

ALTER TABLE [edfi].[StudentSchoolAssociation] ADD CONSTRAINT [FK_StudentSchoolAssociation_GraduationPlan] 
    FOREIGN KEY ([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
    REFERENCES [edfi].[GraduationPlan]([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
go

ALTER TABLE [edfi].[StudentSchoolAssociation] ADD CONSTRAINT [FK_StudentSchoolAssociation_ResidencyStatusDescriptor_ResidencyStatusDescriptorId] 
    FOREIGN KEY ([ResidencyStatusDescriptorId])
    REFERENCES [edfi].[ResidencyStatusDescriptor]([ResidencyStatusDescriptorId])
go

ALTER TABLE [edfi].[StudentSchoolAssociation] ADD CONSTRAINT [FK_StudentSchoolAssociation_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go

ALTER TABLE [edfi].[StudentSchoolAssociation] ADD CONSTRAINT [FK_StudentSchoolAssociation_SchoolYearType_ClassOfSchoolYear] 
    FOREIGN KEY ([ClassOfSchoolYear])
    REFERENCES [edfi].[SchoolYearType]([SchoolYear])
go

ALTER TABLE [edfi].[StudentSchoolAssociation] ADD CONSTRAINT [FK_StudentSchoolAssociation_SchoolYearType_SchoolYear] 
    FOREIGN KEY ([SchoolYear])
    REFERENCES [edfi].[SchoolYearType]([SchoolYear])
go

ALTER TABLE [edfi].[StudentSchoolAssociation] ADD CONSTRAINT [FK_StudentSchoolAssociation_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[StudentSchoolAssociationEducationPlan] 
 */

ALTER TABLE [edfi].[StudentSchoolAssociationEducationPlan] ADD CONSTRAINT [FK_StudentSchoolAssociationEducationPlans_EducationPlansType_EducationPlansTypeId] 
    FOREIGN KEY ([EducationPlanTypeId])
    REFERENCES [edfi].[EducationPlanType]([EducationPlanTypeId])
go

ALTER TABLE [edfi].[StudentSchoolAssociationEducationPlan] ADD CONSTRAINT [FK_StudentSchoolAssociationEducationPlans_StudentSchoolAssociation_StudentUSI] 
    FOREIGN KEY ([StudentUSI], [SchoolId], [EntryDate])
    REFERENCES [edfi].[StudentSchoolAssociation]([StudentUSI], [SchoolId], [EntryDate]) 
	ON DELETE CASCADE
	ON UPDATE CASCADE
go


/* 
 * TABLE: [edfi].[StudentSchoolAttendanceEvent] 
 */

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptorId] 
    FOREIGN KEY ([AttendanceEventCategoryDescriptorId])
    REFERENCES [edfi].[AttendanceEventCategoryDescriptor]([AttendanceEventCategoryDescriptorId])
go

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] 
    FOREIGN KEY ([EducationalEnvironmentTypeId])
    REFERENCES [edfi].[EducationalEnvironmentType]([EducationalEnvironmentTypeId])
go

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_School_SchoolId] 
    FOREIGN KEY ([SchoolId])
    REFERENCES [edfi].[School]([SchoolId])
go

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_Session_SchoolId] 
    FOREIGN KEY ([SchoolId], [SchoolYear], [TermDescriptorId])
    REFERENCES [edfi].[Session]([SchoolId], [SchoolYear], [TermDescriptorId])
	ON UPDATE CASCADE
go

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[StudentSectionAssociation] 
 */

ALTER TABLE [edfi].[StudentSectionAssociation] ADD CONSTRAINT [FK_StudentSectionAssociation_RepeatIdentifierType_RepeatIdentifierTypeId] 
    FOREIGN KEY ([RepeatIdentifierTypeId])
    REFERENCES [edfi].[RepeatIdentifierType]([RepeatIdentifierTypeId])
go

ALTER TABLE [edfi].[StudentSectionAssociation] ADD CONSTRAINT [FK_StudentSectionAssociation_Section_SchoolId] 
    FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
    REFERENCES [edfi].[Section]([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) 
	--ON UPDATE CASCADE
go

ALTER TABLE [edfi].[StudentSectionAssociation] ADD CONSTRAINT [FK_StudentSectionAssociation_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[StudentSectionAttendanceEvent] 
 */

ALTER TABLE [edfi].[StudentSectionAttendanceEvent] ADD CONSTRAINT [FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptorId] 
    FOREIGN KEY ([AttendanceEventCategoryDescriptorId])
    REFERENCES [edfi].[AttendanceEventCategoryDescriptor]([AttendanceEventCategoryDescriptorId])
go

ALTER TABLE [edfi].[StudentSectionAttendanceEvent] ADD CONSTRAINT [FK_StudentSectionAttendanceEvent_EducationalEnvironmentType_EducationalEnvironmentTypeId] 
    FOREIGN KEY ([EducationalEnvironmentTypeId])
    REFERENCES [edfi].[EducationalEnvironmentType]([EducationalEnvironmentTypeId])
go

ALTER TABLE [edfi].[StudentSectionAttendanceEvent] ADD CONSTRAINT [FK_StudentSectionAttendanceEvent_Section_SchoolId] 
    FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
    REFERENCES [edfi].[Section]([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse]) 
	ON UPDATE CASCADE
go

ALTER TABLE [edfi].[StudentSectionAttendanceEvent] ADD CONSTRAINT [FK_StudentSectionAttendanceEvent_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI])
go


/* 
 * TABLE: [edfi].[StudentSpecialEducationProgramAssociation] 
 */

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociation] ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor_SpecialEducationSettingDescriptorId] 
    FOREIGN KEY ([SpecialEducationSettingDescriptorId])
    REFERENCES [edfi].[SpecialEducationSettingDescriptor]([SpecialEducationSettingDescriptorId])
go

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociation] ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociation_StudentProgramAssociation] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
    REFERENCES [edfi].[StudentProgramAssociation]([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] 
 */

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff_StaffUSI] 
    FOREIGN KEY ([StaffUSI])
    REFERENCES [edfi].[Staff]([StaffUSI])
go

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
    REFERENCES [edfi].[StudentSpecialEducationProgramAssociation]([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) ON DELETE CASCADE
go


/* 
 * TABLE: [edfi].[StudentTelephone] 
 */

ALTER TABLE [edfi].[StudentTelephone] ADD CONSTRAINT [FK_StudentTelephone_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[StudentTelephone] ADD CONSTRAINT [FK_StudentTelephone_TelephoneNumberType_TelephoneNumberTypeId] 
    FOREIGN KEY ([TelephoneNumberTypeId])
    REFERENCES [edfi].[TelephoneNumberType]([TelephoneNumberTypeId])
go


/* 
 * TABLE: [edfi].[StudentTitleIPartAProgramAssociation] 
 */

ALTER TABLE [edfi].[StudentTitleIPartAProgramAssociation] ADD CONSTRAINT [FK_StudentTitleIPartAProgramAssociation_StudentProgramAssociation] 
    FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
    REFERENCES [edfi].[StudentProgramAssociation]([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[StudentTitleIPartAProgramAssociation] ADD CONSTRAINT [FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantType_TitleIPartAParticipantTypeId] 
    FOREIGN KEY ([TitleIPartAParticipantTypeId])
    REFERENCES [edfi].[TitleIPartAParticipantType]([TitleIPartAParticipantTypeId])
go


/* 
 * TABLE: [edfi].[StudentVisa] 
 */

ALTER TABLE [edfi].[StudentVisa] ADD CONSTRAINT [FK_StudentVisa_Student_StudentUSI] 
    FOREIGN KEY ([StudentUSI])
    REFERENCES [edfi].[Student]([StudentUSI]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[StudentVisa] ADD CONSTRAINT [FK_StudentVisa_VisaType_VisaTypeId] 
    FOREIGN KEY ([VisaTypeId])
    REFERENCES [edfi].[VisaType]([VisaTypeId])
go


/* 
 * TABLE: [edfi].[TeachingCredentialDescriptor] 
 */

ALTER TABLE [edfi].[TeachingCredentialDescriptor] ADD CONSTRAINT [FK_TeachingCredentialDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([TeachingCredentialDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[TeachingCredentialDescriptor] ADD CONSTRAINT [FK_TeachingCredentialDescriptor_TeachingCredentialType_TeachingCredentialTypeId] 
    FOREIGN KEY ([TeachingCredentialTypeId])
    REFERENCES [edfi].[TeachingCredentialType]([TeachingCredentialTypeId])
go


/* 
 * TABLE: [edfi].[TermDescriptor] 
 */

ALTER TABLE [edfi].[TermDescriptor] ADD CONSTRAINT [FK_TermDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([TermDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId])
go

ALTER TABLE [edfi].[TermDescriptor] ADD CONSTRAINT [FK_TermDescriptor_TermType_TermTypeId] 
    FOREIGN KEY ([TermTypeId])
    REFERENCES [edfi].[TermType]([TermTypeId])
	ON UPDATE CASCADE
go


/* 
 * TABLE: [edfi].[WeaponDescriptor] 
 */

ALTER TABLE [edfi].[WeaponDescriptor] ADD CONSTRAINT [FK_WeaponDescriptor_Descriptor_DescriptorId] 
    FOREIGN KEY ([WeaponDescriptorId])
    REFERENCES [edfi].[Descriptor]([DescriptorId]) ON DELETE CASCADE
go

ALTER TABLE [edfi].[WeaponDescriptor] ADD CONSTRAINT [FK_WeaponDescriptor_WeaponsType_WeaponsTypeId] 
    FOREIGN KEY ([WeaponTypeId])
    REFERENCES [edfi].[WeaponType]([WeaponTypeId])
go
