<#@ include file="Settings.ttinclude" #>
<#+

List<SqlConnection> connections = new List<SqlConnection>();

IDataReader GetReader(string sql){
    SqlConnection conn=new SqlConnection(ConnectionString);
    connections.Add(conn);
    SqlCommand cmd=new SqlCommand(sql,conn);
    conn.Open();
    return cmd.ExecuteReader(CommandBehavior.CloseConnection);
}
SqlCommand GetCommand(string sql){
    SqlConnection conn=new SqlConnection(ConnectionString);
    connections.Add(conn);
    SqlCommand cmd=new SqlCommand(sql,conn);
    conn.Open();
    return cmd;
}

void EnsureAllConnectionsClosed() {
    try 
    {
        foreach (var conn in connections)
        {
            conn.Close();
            conn.Dispose();
        }
    }
    catch {}
}

const string FKSql=@"
    SELECT
        ThisTable  = FK.TABLE_NAME,
        ThisColumn = CU.COLUMN_NAME,
        OtherTable  = PK.TABLE_NAME,
        OtherColumn = PT.COLUMN_NAME, 
        Constraint_Name = C.CONSTRAINT_NAME,
        Owner = FK.TABLE_SCHEMA,
        OtherOwner = PK.TABLE_SCHEMA
    FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS C
    INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS FK ON C.CONSTRAINT_NAME = FK.CONSTRAINT_NAME
    INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS PK ON C.UNIQUE_CONSTRAINT_NAME = PK.CONSTRAINT_NAME
    INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE CU ON C.CONSTRAINT_NAME = CU.CONSTRAINT_NAME
    INNER JOIN
        (	
            SELECT i1.TABLE_NAME, i2.COLUMN_NAME, i2.ORDINAL_POSITION
            FROM  INFORMATION_SCHEMA.TABLE_CONSTRAINTS i1
            INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE i2 ON i1.CONSTRAINT_NAME = i2.CONSTRAINT_NAME
            WHERE i1.CONSTRAINT_TYPE = 'PRIMARY KEY'
        ) 
    PT ON PT.TABLE_NAME = PK.TABLE_NAME AND PT.ORDINAL_POSITION = CU.ORDINAL_POSITION
    ORDER BY FK.TABLE_NAME, CU.CONSTRAINT_NAME, CU.ORDINAL_POSITION ";
    /*
    SELECT
        ThisTable  = FK.TABLE_NAME,
        ThisColumn = CU.COLUMN_NAME,
        OtherTable  = PK.TABLE_NAME,
        OtherColumn = PT.COLUMN_NAME, 
        Constraint_Name = C.CONSTRAINT_NAME,
        Owner = FK.TABLE_SCHEMA,
        OtherOwner = PK.TABLE_SCHEMA
    FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS C
    INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS FK ON C.CONSTRAINT_NAME = FK.CONSTRAINT_NAME
    INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS PK ON C.UNIQUE_CONSTRAINT_NAME = PK.CONSTRAINT_NAME
    INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE CU ON C.CONSTRAINT_NAME = CU.CONSTRAINT_NAME
    INNER JOIN
        (	
            SELECT i1.TABLE_NAME, i2.COLUMN_NAME
            FROM  INFORMATION_SCHEMA.TABLE_CONSTRAINTS i1
            INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE i2 ON i1.CONSTRAINT_NAME = i2.CONSTRAINT_NAME
            WHERE i1.CONSTRAINT_TYPE = 'PRIMARY KEY'
        ) 
    PT ON PT.TABLE_NAME = PK.TABLE_NAME AND PT.ORDINAL_POSITION = CU.ORDINAL_POSITION;
    --WHERE FK.Table_NAME=@tableName OR PK.Table_NAME=@tableName";
    */

//Replaced with the method "GetTableSQL()"
/*
const string TABLE_SQL=@"SELECT *
    FROM  INFORMATION_SCHEMA.TABLES
    WHERE TABLE_TYPE='BASE TABLE'
    union
    select Table_catalog, table_schema, table_name, 'View' table_type 
    from information_schema.views";
*/

const string COLUMN_SQL=@"SELECT 
        TABLE_CATALOG AS [Database],
        TABLE_SCHEMA AS Owner, 
        TABLE_NAME AS TableName, 
        COLUMN_NAME AS ColumnName, 
        ORDINAL_POSITION AS OrdinalPosition, 
        COLUMN_DEFAULT AS DefaultSetting, 
        c.IS_NULLABLE AS IsNullable, DATA_TYPE AS DataType, 
        CHARACTER_MAXIMUM_LENGTH AS MaxLength, 
        DATETIME_PRECISION AS DatePrecision,
        NUMERIC_PRECISION AS Precision,
        NUMERIC_SCALE AS Scale,
        COLUMNPROPERTY(object_id('[' + TABLE_SCHEMA + '].[' + TABLE_NAME + ']'), COLUMN_NAME, 'IsIdentity') AS IsIdentity,
        COLUMNPROPERTY(object_id('[' + TABLE_SCHEMA + '].[' + TABLE_NAME + ']'), COLUMN_NAME, 'IsComputed') as IsComputed,
        x.value AS Description
    FROM  INFORMATION_SCHEMA.COLUMNS c
        LEFT JOIN sys.tables st ON c.TABLE_NAME = st.name  
        LEFT JOIN sys.columns sc ON st.object_id = sc.object_id AND c.COLUMN_NAME = sc.name
        LEFT JOIN sys.extended_properties x ON st.object_id = x.major_id AND sc.column_id = x.minor_id AND x.name = 'MS_Description'
    ORDER BY Owner, TableName, OrdinalPosition ASC
";
 
const string INDEXES_SQL = @"
  SELECT 
       ind.name as IndexName
      ,t.name as TableName
      ,col.name as ColumnName
  FROM sys.indexes ind 

  INNER JOIN sys.index_columns ic 
      ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id 

  INNER JOIN sys.columns col 
      ON ic.object_id = col.object_id and ic.column_id = col.column_id 

  INNER JOIN sys.tables t 
      ON ind.object_id = t.object_id 

  ORDER BY t.name, ind.name, ic.index_column_id
"; 

string GetTableSQL()
{
  return @"
  SELECT 
      DB_NAME() AS TABLE_CATALOG,
      s.name AS TABLE_SCHEMA,
      t.name AS TABLE_NAME,
      t.type_desc AS TABLE_TYPE,
      x.value AS TABLE_DESCRIPTION
  FROM
      sys.tables t 
          INNER JOIN sys.schemas s ON t.schema_id = s.schema_id
          LEFT JOIN sys.extended_properties x ON t.object_id = x.major_id AND x.name = 'MS_Description' AND x.minor_id = 0
  WHERE
      t.type_desc='USER_TABLE' and s.name in ('" + String.Join("','",IncludedSchemas) + @"')	 
  ORDER BY s.name, t.name";

/*
    return @"SELECT *
    FROM  INFORMATION_SCHEMA.TABLES
    WHERE TABLE_TYPE='BASE TABLE' and TABLE_SCHEMA in ('" + String.Join("','",IncludedSchemas) + @"')
    union
    select Table_catalog, table_schema, table_name, 'View' table_type 
    from information_schema.views
    WHERE table_schema in ('" + String.Join("','",IncludedSchemas) + @"')
    ";
*/
}

List<SPParam> GetSPParams(string spName){
    var result=new List<SPParam>();
    string[] restrictions = new string[4] { DatabaseName, null, spName, null };
    using(SqlConnection conn=new SqlConnection(ConnectionString)){
        conn.Open();
        var sprocs=conn.GetSchema("ProcedureParameters", restrictions);
        conn.Close();
        foreach(DataRow row in sprocs.Select("", "ORDINAL_POSITION")){
            SPParam p=new SPParam();
            p.SysType=GetSysType(row["DATA_TYPE"].ToString());
            p.NHType=GetNHType(row["DATA_TYPE"].ToString());
            p.DbType=GetDbType(row["DATA_TYPE"].ToString()).ToString();
            p.Name=row["PARAMETER_NAME"].ToString().Replace("@","");
            p.CleanName=CleanUp(p.Name);
            result.Add(p);
        }
        
        
    }
    return result;
}

List<SP> GetSPs(){
    var result=new List<SP>();
    //pull the SPs
    
    DataTable sprocs=null;
    
    using(SqlConnection conn=new SqlConnection(ConnectionString)){
        conn.Open();
        sprocs=conn.GetSchema("Procedures");
        conn.Close();
    }
    
    foreach(DataRow row in sprocs.Rows){
        string spType=row["ROUTINE_TYPE"].ToString();
        var sp=new SP();
        sp.Name=row["ROUTINE_NAME"].ToString();
        
        if(spType=="PROCEDURE" &! sp.Name.StartsWith("sp_")){
            
            sp.CleanName=CleanUp(sp.Name);
            
            sp.Parameters=GetSPParams(sp.Name);
            result.Add(sp);        
        }
    }
    return result;
    
}
  
public class Index
{
    public Index()
    {
        ColumnNames = new List<string>();
    }

    public string IndexName { get; set; }
    public string TableName { get; set; }
    public List<string> ColumnNames { get; set; }
}
 
private List<Index> indices;

List<Index> GetIndices() {
  if (indices != null)
    return indices;
    
   var result = new List<Index>();
   Index currentIndex = null;
   
    //pull the tables in a reader
    using(IDataReader rdr=GetReader(INDEXES_SQL)){
        string previousIndexName = string.Empty;
        
        while(rdr.Read()){
          string currentIndexName = rdr["IndexName"].ToString();
          
          if (previousIndexName != currentIndexName)
          {
            if (currentIndex != null)
              result.Add(currentIndex);
              
            currentIndex = new Index();
            currentIndex.IndexName = currentIndexName;
            currentIndex.TableName = rdr["TableName"].ToString();
          }

          currentIndex.ColumnNames.Add(rdr["ColumnName"].ToString());

          previousIndexName = currentIndexName;
        }
        
        if (currentIndex != null)
          result.Add(currentIndex);
    }
    
    indices = result;
    
    return indices;
}

private List<Table> tables;

List<Table> LoadTables(){
    if (tables != null)
      return tables;
      
    var result=new List<Table>();
       
    //pull the tables in a reader
    using(IDataReader rdr=GetReader(GetTableSQL())){
        while(rdr.Read()){
            Table tbl=new Table();
            tbl.Name=rdr["TABLE_NAME"].ToString();
            tbl.Schema=rdr["TABLE_SCHEMA"].ToString();
            tbl.Description=rdr["TABLE_DESCRIPTION"].ToString();
            tbl.Columns=LoadColumns(tbl);
            tbl.PrimaryKeyColumns = GetPKColumns(tbl);
            tbl.CleanName=CleanUp(tbl.Name);
            tbl.ClassName=Inflector.MakeSingular(tbl.CleanName);
            tbl.QueryableName=CompositeTermInflector.MakePlural(tbl.ClassName);

            //set the PK for the columns
            //var pkColumn = tbl.PrimaryKeyColumns.Any(pkc => pkc.Name == //tbl.Columns.SingleOrDefault(x=>x.Name.ToLower().Trim()==tbl.PrimaryKey.ToLower().Trim());
            //if(pkColumn!=null)
            //    pkColumn.IsPK=true;
            
            tbl.FKTables = LoadFKTables(tbl);

            result.Add(tbl);
        }
    }
    
    foreach(Table tbl in result){
        //loop the FK tables and see if there's a match for our FK columns
        foreach(Column col in tbl.Columns){
            col.IsForeignKey = tbl.FKTables.Any(
                x => x.ThisColumns.Contains(col.Name) //, StringComparison.InvariantCultureIgnoreCase)
            );
        }
    }
    
    tables = result;
    
    return tables;
}

private Dictionary<string, List<Column>> allColumnsByFQTableName;

List<Column> LoadColumns(Table tbl){
    if (allColumnsByFQTableName == null)
    {
        //allColumnsByFQTableName = new Dictionary<string, List<Column>>();

        var allColumns = new List<Column>();

        var cmd=GetCommand(COLUMN_SQL);
        //cmd.Parameters.AddWithValue("@tableName",tbl.Name);
        //cmd.Parameters.AddWithValue("@tableSchema",tbl.Schema);

        using(IDataReader rdr=cmd.ExecuteReader(CommandBehavior.CloseConnection))
        {
            int precisionCol = rdr.GetOrdinal("Precision");
            int scaleCol = rdr.GetOrdinal("Scale");
            int maxLengthCol = rdr.GetOrdinal("MaxLength");

            while(rdr.Read())
            {
                Column col=new Column();
                col.TableName = rdr["TableName"].ToString();
                col.TableSchema = rdr["Owner"].ToString();
                col.Name=rdr["ColumnName"].ToString();
                col.CleanName=CleanUp(col.Name == col.TableName ? col.Name + "X" : col.Name);
                col.DataType=rdr["DataType"].ToString();
                col.SysType=GetSysType(col.DataType);
                col.NHType=GetNHType(col.DataType);
                col.DbType=GetDbType(col.DataType);
                col.AutoIncrement=rdr["IsIdentity"].ToString()=="1";
                col.IsNullable=rdr["IsNullable"].ToString()=="YES";
                col.Precision= rdr.IsDBNull(precisionCol) ? 0 : rdr.GetByte(precisionCol);
                col.Scale= rdr.IsDBNull(scaleCol) ? 0 : rdr.GetInt32(scaleCol);
                col.MaxLength = rdr.IsDBNull(maxLengthCol) ? 0 : rdr.GetInt32(maxLengthCol);

                col.Description = rdr["Description"].ToString();
        
                allColumns.Add(col);
            }
        }

        allColumnsByFQTableName = 
            (from c in allColumns
            let fqn = c.TableSchema + "." + c.TableName
            group c by fqn into g
            select g)
            .ToDictionary(x => x.Key, x => x.ToList());
    }
    
    return allColumnsByFQTableName[tbl.Schema + "." + tbl.Name];
}

private Dictionary<string, List<FKTable>> allFkTablesByFQTableName;

List<FKTable> LoadFKTables(Table table)
{
    if (allFkTablesByFQTableName == null) 
    {
        var allFKs = new List<FKTable>();
        var cmd = GetCommand(FKSql);
        //cmd.Parameters.AddWithValue("@tableName",table.Name);
        using(IDataReader rdr=cmd.ExecuteReader(CommandBehavior.CloseConnection)){
            string mostRecentConstraintName = null;
            FKTable fk = null, inverseFK = null;

            while(rdr.Read()){
                string currentConstraintName = rdr["Constraint_Name"].ToString();

                if (currentConstraintName != mostRecentConstraintName)
                {
                    if (fk != null)
                    {
                        allFKs.Add(fk);
                        allFKs.Add(inverseFK);
                    }

                    fk = new FKTable();
                    inverseFK = new FKTable();

                    fk.ThisTable=rdr["ThisTable"].ToString();
                    fk.ThisTableSchema=rdr["Owner"].ToString();
                    fk.OtherTable=rdr["OtherTable"].ToString();
                    fk.OtherTableSchema=rdr["OtherOwner"].ToString();
                    fk.IsPrimaryTable = false;
                    fk.OtherClass=Inflector.MakeSingular(CleanUp(fk.OtherTable));
                    fk.OtherQueryable=CompositeTermInflector.MakePlural(fk.OtherClass);
                    fk.ConstraintName = rdr["Constraint_Name"].ToString();

                    inverseFK.ThisTable=rdr["OtherTable"].ToString();
                    inverseFK.ThisTableSchema=rdr["OtherOwner"].ToString();
                    inverseFK.OtherTable=rdr["ThisTable"].ToString();
                    inverseFK.OtherTableSchema=rdr["Owner"].ToString();
                    inverseFK.IsPrimaryTable = true;
                    inverseFK.OtherClass=Inflector.MakeSingular(CleanUp(inverseFK.OtherTable));
                    inverseFK.OtherQueryable=CompositeTermInflector.MakePlural(inverseFK.OtherClass);
                    inverseFK.ConstraintName = rdr["Constraint_Name"].ToString();
                }

                fk.ThisColumns.Add(rdr["ThisColumn"].ToString());
                fk.OtherColumns.Add(rdr["OtherColumn"].ToString());

                inverseFK.ThisColumns.Add(rdr["OtherColumn"].ToString());
                inverseFK.OtherColumns.Add(rdr["ThisColumn"].ToString());

                mostRecentConstraintName = currentConstraintName;
            }

            // Add the final one
            if (fk != null)
            {
                allFKs.Add(fk);
                allFKs.Add(inverseFK);
            }
        }

        allFkTablesByFQTableName = 
            (from fk in allFKs
            let fqn = (fk.ThisTableSchema + "." + fk.ThisTable).ToLower()
            group fk by fqn into g
            select g)
            .ToDictionary(x => x.Key, x => x.ToList());
    }
    
    //this is a "bi-directional" scheme
    //which pulls both 1-many and many-1

    List<FKTable> result;
    string fqnLookup = (table.Schema + "." + table.Name).ToLower();

    if (!allFkTablesByFQTableName.TryGetValue(fqnLookup, out result))
        return new List<FKTable>();

    return result;
}

Dictionary<string, List<string>> allPKColumnsByFQTableName;

List<Column> GetPKColumns(Table table){
    var columns = LoadColumns(table);

    if (allPKColumnsByFQTableName == null)
    {
        string sql=@"SELECT KCU.TABLE_SCHEMA, KCU.TABLE_NAME, KCU.COLUMN_NAME 
            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU
            JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
            ON KCU.CONSTRAINT_NAME=TC.CONSTRAINT_NAME
            WHERE TC.CONSTRAINT_TYPE='PRIMARY KEY'
            ORDER BY KCU.TABLE_SCHEMA, KCU.TABLE_NAME, KCU.ORDINAL_POSITION;
            --AND KCU.TABLE_NAME=@tableName";

        var cmd = GetCommand(sql);

        var allPKColumnData = new List<Tuple<string, string, string>>();

        using (IDataReader rdr=cmd.ExecuteReader(CommandBehavior.CloseConnection))
        {
            while(rdr.Read())
            {
                var dataItem = new Tuple<string, string, string>(
                    rdr["table_schema"].ToString(), rdr["table_name"].ToString(), rdr["column_name"].ToString());	
                
                allPKColumnData.Add(dataItem);
            }
        }

        allPKColumnsByFQTableName =
            (from pkc in allPKColumnData
            let fqn = pkc.Item1 + "." + pkc.Item2
            group pkc by fqn into g
            select g)
            .ToDictionary(x => x.Key, x => x.Select(y => y.Item3).ToList());
    }

    List<string> pkColumnNames;

    if (!allPKColumnsByFQTableName.TryGetValue(table.Schema + "." + table.Name, out pkColumnNames))
        pkColumnNames = new List<string>();

    List<Column> pkColumns = 
        (from c in columns
        where pkColumnNames.Contains(c.Name)
        select c)
        .ToList();

    foreach (Column pkColumn in pkColumns)
    {
        pkColumn.IsPK = true;
    }

    return pkColumns;
}

string GetSysType(string sqlType){
    string sysType="string";
    switch (sqlType) {
        case "bigint":
            sysType = "long";
            break;
        case "tinyint":
        case "smallint":
            sysType= "short";
            break;
        case "int":
            sysType= "int";
            break;
        case "uniqueidentifier":
            sysType=  "Guid";
             break;
        case "smalldatetime":
        case "datetime":
        case "date":
            sysType=  "DateTime";
              break;
        case "float":
            sysType="double";
            break;
        case "real":
        case "numeric":
        case "smallmoney":
        case "decimal":
        case "money":
            sysType=  "decimal";
             break;
        case "bit":
            sysType=  "bool";
               break;
        case "image":
        case "binary":
        case "varbinary":
            sysType=  "byte[]";
             break;
    case "time":
      sysType = "TimeSpan";
        break;
    }
    return sysType;
}
string GetNHType(string sqlType){
    string sysType="string";
    switch (sqlType) {
        case "bigint":
            sysType = "long";
            break;
        case "tinyint":
        case "smallint":
            sysType= "short";
            break;
        case "int":
            sysType= "int";
            break;
        case "uniqueidentifier":
            sysType=  "Guid";
             break;
        case "datetimeoffset":
            sysType =  "datetimeoffset";
            break;
        case "smalldatetime":
        case "datetime":
            sysType =  "timestamp"; //"datetime";
            break;
        case "date":
            sysType=  "date";
              break;
        case "float":
            sysType="double";
            break;
        case "real":
        case "numeric":
        case "smallmoney":
        case "decimal":
        case "money":
            sysType=  "decimal";
             break;
        case "bit":
            sysType=  "bool";
               break;
        case "image":
        case "binary":
        case "varbinary":
            sysType=  "byte[]";
             break;
    case "time":
      sysType = "TimeAsTimeSpan";
        break;
    }
    return sysType;
}
DbType GetDbType(string sqlType){
    switch(sqlType)
    {
        case "varchar":
            return DbType.AnsiString;
        case "nvarchar":
            return DbType.String;
        case "int":
            return DbType.Int32;
        case "uniqueidentifier":
            return DbType.Guid;
        case "datetime":
            return DbType.DateTime;
        case "date":
            return DbType.Date;
        case "bigint":
            return DbType.Int64;
        case "binary":
            return DbType.Binary;
        case "bit":
            return DbType.Boolean;
        case "char":
            return DbType.AnsiStringFixedLength;
        case "decimal":
            return DbType.Decimal;
        case "float":
            return DbType.Double;
        case "image":
            return DbType.Binary;
        case "money":
            return DbType.Currency;
        case "nchar":
            return DbType.String;
        case "ntext":
            return DbType.String;
        case "numeric":
            return DbType.Decimal;
        case "real":
            return DbType.Single;
        case "smalldatetime":
            return DbType.DateTime;
        case "smallint":
            return DbType.Int16;
        case "smallmoney":
            return DbType.Currency;
        case "sql_variant":
            return DbType.String;
        case "sysname":
            return DbType.String;
        case "text":
            return DbType.AnsiString;
        case "timestamp":
            return DbType.Binary;
        case "tinyint":
            return DbType.Byte;
        case "varbinary":
            return DbType.Binary;
         case "xml":
            return DbType.Xml;
       default:
            return DbType.AnsiString;
    }

}

void LogDebug(string format, params object[] args)
{
    System.IO.File.AppendAllText(@"D:\temp\junk.txt", string.Format(format, args) + "\r\n");
}

#>