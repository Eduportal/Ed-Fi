<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Windows.Forms" #>
<#@ include file="Common.ttinclude" #>
<#+
    const string Namespace = "EdFi.Ods.Entities";
    string ConnectionStringName = "Ods";
    
    //This is the name of your database and is used in naming
    //the repository. By default we set it to the connection string name
    const string DatabaseName = "EdFi_Ods";

    //this is a list of tables you don't want generated
    List<string> ExcludedTables = new List<string>{
    "sysdiagrams",
    "BuildVersion", 
    "LocalEducationAgencyFederalFunds", // TODO: Naming issues with multiple/singular
    "StateEducationAgencyFederalFunds", // TODO: Naming issues with multiple/singular
	"EdFiException",
	//"InterventionEducationContent",
	//"InterventionPrescriptionEducationContent",
	//"InterventionStudyEducationContent",
    };

	//this is a list of schemas you want generated
    string[] IncludedSchemas = new string[]{
    "edfi", "extension",
    };

	string CamelCase(string propertyName) {
		if (propertyName.Length == 1)
			return propertyName.ToLower();
		
		int leadingUpperChars = propertyName.TakeWhile(c => char.IsUpper(c)).Count();
		int prefixLength = leadingUpperChars - 1;
		
		if (propertyName.Length == leadingUpperChars
			|| (propertyName.Length == leadingUpperChars + 1 && propertyName.EndsWith("s"))) // Handles the case of an acronym with a trailing "s" (e.g. "URIs" -> "uris" not "urIs")
			// Convert entire name to lower case
			return propertyName.ToLower();
		else if (prefixLength > 0)
			// Apply lower casing to leading acronym
			return propertyName.Substring(0, prefixLength).ToLower()
				+ propertyName.Substring(prefixLength);
		else
			// Apply camel casing
			return propertyName.Substring(0, 1).ToLower() + propertyName.Substring(1);
	}

	bool IsInAggregate(List<string> aggregateTableNames, string tableName)
	{
		return aggregateTableNames.Any(tn => tn.Equals(tableName, StringComparison.InvariantCultureIgnoreCase));
	}

	bool IsExcluded(string tableName)
	{
		return ExcludedTables.Contains(tableName);

		/*  For debugging code generation with a small scope, uncomment this section and modify to taste
		return !(new List<string> {
			"Table1",
			...
			"TableN" })
			.Contains(tableName);
		*/
	}

	bool IsFKPartOfPK(Table table, FKTable fk)
	{
		return table.PKs.Any(c => fk.ThisColumns.Contains(c.Name));
	}

	string GetPropertyType(Column column)
	{
		if (column.IsNullable && column.SysType != "string")
			return column.SysType + "?";

		return column.SysType;
	}

	bool IsCodeTypeTable(Table table)
	{
		bool result = false;

		try
		{
			if (table.Name.EndsWith("Type")
				&& table.Columns.Any(c => c.Name == table.Name + "Id")
				&& table.Columns.Any(c => c.Name.EndsWith("Description")))
				result = true;
			else
				result = false;

			return result;
		}
		finally
		{
			System.IO.File.AppendAllText(@"D:\temp\junk.txt", table.Name + ": " + result + "\r\n\t" + string.Join("\r\n\t", table.Columns.Select(x => x.Name)) + "\r\n");
		}
	}

	/*
	bool IsDescriptorTable(Table table)
	{
		if (table.Name.EndsWith("Descriptor"))
			return true;

		return false;
	}
	*/

	// Filters out self-recursive relationships and where multiple relationships exist to a 
	// particular parent, it filters out the relationships where role names have been applied.
	List<FKTable> GetNonNavigableParentRelationships(Table tbl, List<string> aggregateTableNames)
	{
		// Parent FKs where the parent is not in the aggregate.
		var parentFKs = tbl.FKTables.Where(fkt => !fkt.IsPrimaryTable && !IsInAggregate(aggregateTableNames, fkt.OtherTable) && !IsExcluded(fkt.OtherTable)
			&& fkt.OtherTable != fkt.ThisTable).ToList();
			// ^^^^^^^-------- Stop self recursive relationships from being mapped/serialized through object references 
		
		// TODO: Need to determine if multiple FKs, and role-named FKs need to be removed, as below
		return parentFKs;
	}

	// Filters out self-recursive relationships and where multiple relationships exist to a 
	// particular parent, it filters out the relationships where role names have been applied.
	List<FKTable> GetNavigableParentRelationships(Table tbl, List<string> aggregateTableNames)
	{
		var parentFKs = tbl.FKTables.Where(fkt => !fkt.IsPrimaryTable && IsInAggregate(aggregateTableNames, fkt.OtherTable) && !IsExcluded(fkt.OtherTable)
			&& fkt.OtherTable != fkt.ThisTable).ToList();
			// ^^^^^^^-------- Stop self recursive relationships from being mapped/serialized through object references 

		// Identify multiple FKs to the same table
		var groupedFKs =
			(from fk in parentFKs
			group fk by fk.OtherTable into g
			where g.Count() > 1
			select g)
			.ToList();

		// Filter out multiple FKs to the same table
		if (groupedFKs.Count() > 0)
		{
			// We need to remove the FK that results in a role name
			foreach (var grouping in groupedFKs)
			{
				foreach (var fk in grouping)
				{
					string sortedThisColumns = string.Join("|", Enumerable.OrderBy(fk.ThisColumns, n => n));
					string sortedOtherColumns = string.Join("|", Enumerable.OrderBy(fk.OtherColumns, n => n));

					if (sortedThisColumns != sortedOtherColumns)
					{
						// It's a reference with a role name, so remove it from our parentFKs list.
						parentFKs.Remove(fk);
					}
				}
			}
		}

		return parentFKs;
	}

    string CleanUp(string tableName){
	    string result=tableName;
    	
	    //strip blanks
	    result=result.Replace(" ","");
    	
	    //put your logic here...
    	
	    return result;
    }
    string CheckNullable(Column col){
        string result="";
        if(col.IsNullable && col.SysType !="byte[]" && col.SysType !="string")
            result="?";
        return result;
    }
    string GetConnectionString(string connectionStringName){
        //var _CurrentProject = GetCurrentProject();
        
        string result="";
        ExeConfigurationFileMap configFile = new ExeConfigurationFileMap();
        configFile.ExeConfigFilename = GetConfigPath();

        if (string.IsNullOrEmpty(configFile.ExeConfigFilename))
            throw new ArgumentNullException("The project does not contain App.config or Web.config file.");
        
        
        var config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None);
        var connSection=config.ConnectionStrings;

        //if the connectionString is empty - which is the defauls
        //look for count-1 - this is the last connection string
        //and takes into account AppServices and LocalSqlServer
        if(string.IsNullOrEmpty(connectionStringName)){
            if(connSection.ConnectionStrings.Count>1){
                result=connSection.ConnectionStrings[connSection.ConnectionStrings.Count-1].ConnectionString;
            }            
        }else{
            try{
                result=connSection.ConnectionStrings[connectionStringName].ConnectionString;
            }catch{
                result="There is no connection string name called '"+connectionStringName+"'";
            }
        }
        
        return result;
    }

    string _connectionString="";
    public string ConnectionString{
	    get {
	        if(String.IsNullOrEmpty(_connectionString)){
                
                _connectionString=GetConnectionString(ConnectionStringName);
		        
	        }
    	        
	        if(_connectionString.Contains("|DataDirectory|")){
	            //have to replace it
	            string dataFilePath=GetDataDirectory();
	            _connectionString=_connectionString.Replace("|DataDirectory|",dataFilePath);
	        }    
    	        
	        return _connectionString;
	    }
    }

    private string GetConfigPath()
    {
        string configFilePath = System.IO.Path.Combine(GetTemplatesPath(), "app.config");

        if (!System.IO.File.Exists(configFilePath))
            throw new FileNotFoundException(string.Format("Template configuration file was not found at '{0}'.", configFilePath));

        return configFilePath;
    }
    
    public string GetDataDirectory(){
        string projectFileName = GetCurrentProjectFileName();
        return System.IO.Path.GetDirectoryName(projectFileName)+"\\App_Data\\";
    }

    public class Table{
   
        public List<Column> Columns;
        public List<FKTable> FKTables;
        public string Name;
		public string Description;
        public string CleanName;
        public string ClassName;
        public List<Column> PrimaryKeyColumns = new List<Column>();
        public string Schema;
        public string QueryableName;
        
		public Column this[string colName]
		{
			get
			{
				return
					(from c in Columns
					where c.Name.Equals(colName, StringComparison.InvariantCultureIgnoreCase)
					select c)
					.SingleOrDefault();
			}
		}

        public bool HasLogicalDelete(){
            return this.Columns.Any(x=>x.Name.ToLower()=="deleted" || x.Name.ToLower()=="isdeleted");
        }

		public bool HasPrimaryKeyField(string columnName) {
			return this.PKs.Any(x => x.Name.Equals(columnName, StringComparison.InvariantCultureIgnoreCase));
		}

        public Column DeleteColumn{
            get{
                Column result=null;
                if(this.Columns.Any(x=>x.Name.ToLower()=="deleted"))
                    result=this.Columns.Single(x=>x.Name.ToLower()=="deleted");
                if(this.Columns.Any(x=>x.Name.ToLower()=="isdeleted"))
                    result=this.Columns.Single(x=>x.Name.ToLower()=="isdeleted");
                return result;
            }
        }
        public List<Column> PKs{
            get{
                return this.PrimaryKeyColumns; //.SingleOrDefault(x=>x.IsPK) ?? this.Columns[0];
            }
        }

		public IEnumerable<Column> NonPrimaryKeyColumns {
			get { return Columns.Where(c => !c.IsPK); }
		}

        public Column Descriptor{
            get{
                if(this.Columns.Count==1){
                    return this.Columns[0];
                }else{
                    //get the first string column
                    Column result=null;
                    result=this.Columns.FirstOrDefault(x=>x.SysType.ToLower().Trim()=="string");
                    if(result==null)
                        result=this.Columns[1];
                    return result;
                }
            }
        }

		public IEnumerable<FKTable> ChildTables
		{
			get { return FKTables.Where(fkt => fkt.IsPrimaryTable); }
		}

		public IEnumerable<FKTable> ParentTables
		{
			get { return FKTables.Where(fkt => !fkt.IsPrimaryTable); }
		}

        public IEnumerable<FKTable> GetNavigableOneToOneParentTables(Dictionary<string, Table> tablesByName)
        {
            return GetNavigableOneToOneTables(tablesByName, false);
        }

		public IEnumerable<FKTable> GetNavigableOneToOneChildTables(Dictionary<string, Table> tablesByName)
        {
            return GetNavigableOneToOneTables(tablesByName, true);
        }

		private IEnumerable<FKTable> GetNavigableOneToOneTables(Dictionary<string, Table> tablesByName, bool isPrimaryTable)
        {
			var oneToOneFKs = 
				(from fkt in FKTables
				    let thisColumns = string.Join("|", Enumerable.OrderBy(fkt.ThisColumns, n => n))
				    let otherColumns = string.Join("|", Enumerable.OrderBy(fkt.OtherColumns, n => n))
    			    let thisTable = tablesByName[fkt.ThisTable]
    			    let otherTable = tablesByName[fkt.OtherTable]
				    let fktWithKeys = new { FKT = fkt, ThisColumns = thisColumns, OtherColumns = otherColumns }
                where fkt.IsPrimaryTable == isPrimaryTable // Only relationships where current table is the parent/child side of the relationship, as specified by isPrimaryTable
                    && fkt.ThisTable != fkt.OtherTable // No self-referencing relationships
				    && fkt.OtherColumns.All(c => otherTable.HasPrimaryKeyField(c)) // And is entirely contained in the child table's primary key
                    && fkt.OtherColumns.Count() == otherTable.PKs.Count  // And is the same as the child's PK (it's a one-to-one relationship)
                    && thisTable.PKs.Count == otherTable.PKs.Count // Same counts = one to one
                select fkt)
                .ToList();

            return oneToOneFKs;
        }

		public IEnumerable<FKTable> GetNavigableChildTables(Dictionary<string, Table> tablesByName)
		{
			//get 
			{
				var groupedFKs = 
					from fkt in FKTables
					let thisColumns = string.Join("|", Enumerable.OrderBy(fkt.ThisColumns, n => n))
					let otherColumns = string.Join("|", Enumerable.OrderBy(fkt.OtherColumns, n => n))
    				let otherTable = tablesByName[fkt.OtherTable]
					let fktWithKeys = new { FKT = fkt, ThisColumns = thisColumns, OtherColumns = otherColumns }
                    where fkt.IsPrimaryTable  // Only relationships where current table is the "one" side of the relationship
				        && fkt.OtherColumns.All(c => otherTable.HasPrimaryKeyField(c)) // And is entirely contained in the child table's primary key
                        && fkt.OtherColumns.Count() < otherTable.PKs.Count  // And is a subset of the child's PK (not a one-to-one relationship)
					group fktWithKeys by fktWithKeys.FKT.OtherTable into g
					select g;

				foreach (var grouping in groupedFKs)
				{
					// If there is only 1 relationship to the child table, use it
					if (grouping.Count() == 1)
					{
						// Remove self-recursive relationships (only allow levels to be pulled based on "parent" id)
						if (grouping.Single().FKT.OtherTable == grouping.Single().FKT.ThisTable)
						 	continue;

						yield return grouping.Single().FKT;
					}

					if (grouping.Count() >= 2)
					{
						// Child FKs are only navigable if they are 
						//	1) non-self-recursive
						//	2) have the same column names in both the parent and child table, or...
						//  3) there are no other FKs to the child table that have matching column names, and the FK to the child table has columns that are entirely part of the child's PK columns
						
						// For example, on School -> FeederSchoolAssociation, there is SchoolId and FeederSchoolId.
						//	SchoolId is the primary relationship, and the one that should be mapped to an ORM.
						// For example, on CalendarDate -> GradingPeriod, there is Date -> BeginDate AND EndDate, but only BeginDate is part of the PK.  That relationship is deemed navigable.

						/*
                        var primaryChildFKs =
							(from fkt in grouping
							let thisColumns = string.Join("|", Enumerable.OrderBy(fkt.ThisColumns, n => n))
							let otherColumns = string.Join("|", Enumerable.OrderBy(fkt.OtherColumns, n => n))
							select new { FKT = fkt, ThisColumns = thisColumns, OtherColumns = otherColumns })
							.ToList();
                        */

						var filteredPrimaryChildFKs = grouping
							.Where(x => x.ThisColumns == x.OtherColumns) // Remove any child relationships that apply "role names". Only include the primary relationship, where column names match exactly.
							.Where(x => x.FKT.OtherTable != x.FKT.ThisTable); // Remove self-recursive relationships

						// Found a primary child relationship, so it's navigable
						if (filteredPrimaryChildFKs.Count() == 1)
                        {
                            yield return filteredPrimaryChildFKs.Single().FKT;
                            continue;
                        }

						// We did not find a primary child relationship, so we are in a role name situation
						// We just need to check the remote table now and filter the remaining FKs to only
                        // include those that are part of the child's PK (in their entirety)
						var fksThatAreChildPKs = 
                            (from rel in grouping.Where(x => x.ThisColumns != x.OtherColumns)
							let otherTable = tablesByName[rel.FKT.OtherTable]
							where rel.FKT.OtherColumns.All(c => otherTable.HasPrimaryKeyField(c))
							select rel)
							.ToList();

                        // For debugging purposes
                        /*
						foreach (var fk in fksThatAreChildPKs)
							System.IO.File.AppendAllText(@"D:\temp\junk.txt", 
                                string.Format("{0} -> {1}\r\n\ton {2} -> {3}\r\n", 
                                    fk.FKT.ThisTable, fk.FKT.OtherTable,
                                    fk.ThisColumns, fk.OtherColumns));
                        */

						foreach (var fk in fksThatAreChildPKs.Select(x => x.FKT))
							yield return fk;
					}
				}
			}
		}
    }

    public class Column{
        public string Name;
        public string CleanName;
        public string SysType;
        public string NHType;
        public string DataType;
        public DbType DbType;
        public bool AutoIncrement;
        public bool IsPK;
        public int MaxLength;
        public int Precision;
        public int Scale;
        public bool IsNullable;
        public bool IsForeignKey;
		public string TableName;
		public string TableSchema;
		public string Description;
    }
    public class FKTable{
        public string ThisTableSchema;
        public string ThisTable;
        public List<string> ThisColumns = new List<string>();
        public string OtherTableSchema;
        public string OtherTable;
        public List<string> OtherColumns = new List<string>();
        public string OtherClass;
        public string OtherQueryable;
		public bool IsPrimaryTable;
		public string ConstraintName;

		public override string ToString()
		{
			return string.Format(IsPrimaryTable ? "{0}.{1}.{2} -> {3}.{4}.{5}" : "{0}.{1}.{2} <- {3}.{4}.{5}",
				ThisTableSchema,
				ThisTable,
				string.Join("|", ThisColumns),
				OtherTableSchema,
				OtherTable,
				string.Join("|", OtherColumns));
		}
    }
    
    public class SP{
        public string Name;
        public string CleanName;
        public string ClassName;
        public List<SPParam> Parameters;
        public SP(){
            Parameters=new List<SPParam>();
        }        
        public string ArgList{
            get{
                StringBuilder sb=new StringBuilder();
                int loopCount=1;
                foreach(var par in Parameters){
                    sb.AppendFormat("{0} {1}", par.SysType,par.CleanName);
                    if(loopCount<Parameters.Count)
                        sb.Append(",");
                    loopCount++;
                }
                return sb.ToString();
            }
        }
    }
    public class SPParam{
        public string Name;
        public string CleanName;
        public string SysType;
        public string NHType;
        public string DbType;
    }
    
    public static class CompositeTermInflector
    {
	    private static HashSet<string> ignoredSuffixes = new HashSet<string>();

        static CompositeTermInflector()
        {
            CompositeTermInflector.AddIgnoredSuffix("Offered");
        }

	    public static void AddIgnoredSuffix(string suffix)
	    {
		    ignoredSuffixes.Add(suffix.ToLower());
	    }
	
	    public static string MakePlural(string compositeTerm)
	    {
		    List<string> result = new List<string>();
		
		    // Split the composite term based on mixed-case conventions
		    var matches = Regex.Matches(compositeTerm, "([A-Z]+(?:[a-z0-9]+)?)");
		
		    int matchIndex = matches.Count - 1;
		    bool isCompositeTermPluralized = false;
		
		    for (int i = matches.Count - 1; i >= 0; i--)
		    {
			    string term = matches[i].Value;
			
			    if (isCompositeTermPluralized || ignoredSuffixes.Contains(term.ToLower()))
			    {
				    result.Insert(0, term);
				    continue;
			    }
			
			    // Pluralize the current term
			    string pluralizedTerm = Inflector.MakePlural(term);
			    result.Insert(0, pluralizedTerm);
			    isCompositeTermPluralized = true;
		    }
		
		    return string.Join(string.Empty, result);
	    }
    }

/*
 * SubSonic - http://subsonicproject.com
 * 
 * The contents of this file are subject to the New BSD
 * License (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of
 * the License at http://www.opensource.org/licenses/bsd-license.php
 * 
 * Software distributed under the License is distributed on an 
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
*/

    /// <summary>
    /// Summary for the Inflector class
    /// </summary>
    public static class Inflector {
        private static readonly List<InflectorRule> _plurals = new List<InflectorRule>();
        private static readonly List<InflectorRule> _singulars = new List<InflectorRule>();
        private static readonly List<string> _uncountables = new List<string>();

        static Inflector()
        {
            AddPluralRule("$", "s");
            AddPluralRule("s$", "s");
            AddPluralRule("(ax|test)is$", "$1es");
            AddPluralRule("(octop|vir)us$", "$1i");
            AddPluralRule("(alias|status)$", "$1es");
            AddPluralRule("(bu)s$", "$1ses");
            AddPluralRule("(buffal|tomat)o$", "$1oes");
            AddPluralRule("([ti])um$", "$1a");
            AddPluralRule("sis$", "ses");
            AddPluralRule("(?:([^f])fe|([lr])f)$", "$1$2ves");
            AddPluralRule("(hive)$", "$1s");
            AddPluralRule("([^aeiouy]|qu)y$", "$1ies");
            AddPluralRule("(x|ch|ss|sh)$", "$1es");
            AddPluralRule("(matr|vert|ind)ix|ex$", "$1ices");
            AddPluralRule("([m|l])ouse$", "$1ice");
            AddPluralRule("^(ox)$", "$1en");
            AddPluralRule("(quiz)$", "$1zes");

            AddSingularRule("s$", String.Empty);
            AddSingularRule("ss$", "ss");
            AddSingularRule("(n)ews$", "$1ews");
            // GKM - Removed to prevent Metadata -> Metadatum ----> AddSingularRule("([ti])a$", "$1um");
            AddSingularRule("((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$", "$1$2sis");
            // QSM - Adding this line so that the trailing 's' is not stripped off the already singular form of these words
            AddSingularRule("((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)sis$", "$1$2sis");
            AddSingularRule("(^analy)ses$", "$1sis");
            AddSingularRule("([^f])ves$", "$1fe");
            AddSingularRule("(hive)s$", "$1");
            AddSingularRule("(tive)s$", "$1");
            AddSingularRule("([lr])ves$", "$1f");
            AddSingularRule("([^aeiouy]|qu)ies$", "$1y");
            AddSingularRule("(s)eries$", "$1eries");
            AddSingularRule("(m)ovies$", "$1ovie");
            AddSingularRule("(x|ch|ss|sh)es$", "$1");
            AddSingularRule("([m|l])ice$", "$1ouse");
            AddSingularRule("(bus)es$", "$1");
            AddSingularRule("(o)es$", "$1");
            AddSingularRule("(shoe)s$", "$1");
            AddSingularRule("(cris|ax|test)es$", "$1is");
            AddSingularRule("(octop|vir)i$", "$1us");
            AddSingularRule("(alias|status)$", "$1");
            AddSingularRule("(alias|status)es$", "$1");
            AddSingularRule("^(ox)en", "$1");
            AddSingularRule("(vert|ind)ices$", "$1ex");
            AddSingularRule("(matr)ices$", "$1ix");
            AddSingularRule("(quiz)zes$", "$1");

            AddIrregularRule("person", "people");
            AddIrregularRule("man", "men");
            AddIrregularRule("child", "children");
            AddIrregularRule("sex", "sexes");
            AddIrregularRule("tax", "taxes");
            AddIrregularRule("move", "moves");

            AddUnknownCountRule("equipment");
            AddUnknownCountRule("information");
            AddUnknownCountRule("rice");
            AddUnknownCountRule("money");
            AddUnknownCountRule("species");
            AddUnknownCountRule("series");
            AddUnknownCountRule("fish");
            AddUnknownCountRule("sheep");
        }

        /// <summary>
        /// Adds the irregular rule.
        /// </summary>
        /// <param name="singular">The singular.</param>
        /// <param name="plural">The plural.</param>
        private static void AddIrregularRule(string singular, string plural) {
            AddPluralRule(String.Concat("(", singular[0], ")", singular.Substring(1), "$"), String.Concat("$1", plural.Substring(1)));
            AddSingularRule(String.Concat("(", plural[0], ")", plural.Substring(1), "$"), String.Concat("$1", singular.Substring(1)));
        }

        /// <summary>
        /// Adds the unknown count rule.
        /// </summary>
        /// <param name="word">The word.</param>
        private static void AddUnknownCountRule(string word) {
            _uncountables.Add(word.ToLower());
        }

        /// <summary>
        /// Adds the plural rule.
        /// </summary>
        /// <param name="rule">The rule.</param>
        /// <param name="replacement">The replacement.</param>
        private static void AddPluralRule(string rule, string replacement) {
            _plurals.Add(new InflectorRule(rule, replacement));
        }

        /// <summary>
        /// Adds the singular rule.
        /// </summary>
        /// <param name="rule">The rule.</param>
        /// <param name="replacement">The replacement.</param>
        private static void AddSingularRule(string rule, string replacement) {
            _singulars.Add(new InflectorRule(rule, replacement));
        }

        /// <summary>
        /// Makes the plural.
        /// </summary>
        /// <param name="word">The word.</param>
        /// <returns></returns>
        public static string MakePlural(string word) {
            return ApplyRules(_plurals, word);
        }

        /// <summary>
        /// Makes the singular.
        /// </summary>
        /// <param name="word">The word.</param>
        /// <returns></returns>
        public static string MakeSingular(string word) {
            return ApplyRules(_singulars, word);
        }

        /// <summary>
        /// Applies the rules.
        /// </summary>
        /// <param name="rules">The rules.</param>
        /// <param name="word">The word.</param>
        /// <returns></returns>
        private static string ApplyRules(IList<InflectorRule> rules, string word) {
            string result = word;
            if (!_uncountables.Contains(word.ToLower())) {
                for (int i = rules.Count - 1; i >= 0; i--) {
                    string currentPass = rules[i].Apply(word);
                    if (currentPass != null) {
                        result = currentPass;
                        break;
                    }
                }
            }
            return result;
        }

        /// <summary>
        /// Converts the string to title case.
        /// </summary>
        /// <param name="word">The word.</param>
        /// <returns></returns>
        public static string ToTitleCase(string word) {
            return Regex.Replace(ToHumanCase(AddUnderscores(word)), @"\b([a-z])",
                delegate(Match match) { return match.Captures[0].Value.ToUpper(); });
        }

        /// <summary>
        /// Converts the string to human case.
        /// </summary>
        /// <param name="lowercaseAndUnderscoredWord">The lowercase and underscored word.</param>
        /// <returns></returns>
        public static string ToHumanCase(string lowercaseAndUnderscoredWord) {
            return MakeInitialCaps(Regex.Replace(lowercaseAndUnderscoredWord, @"_", " "));
        }


        /// <summary>
        /// Adds the underscores.
        /// </summary>
        /// <param name="pascalCasedWord">The pascal cased word.</param>
        /// <returns></returns>
        public static string AddUnderscores(string pascalCasedWord) {
            return Regex.Replace(Regex.Replace(Regex.Replace(pascalCasedWord, @"([A-Z]+)([A-Z][a-z])", "$1_$2"), @"([a-z\d])([A-Z])", "$1_$2"), @"[-\s]", "_").ToLower();
        }

        /// <summary>
        /// Makes the initial caps.
        /// </summary>
        /// <param name="word">The word.</param>
        /// <returns></returns>
        public static string MakeInitialCaps(string word) {
            return String.Concat(word.Substring(0, 1).ToUpper(), word.Substring(1).ToLower());
        }

        /// <summary>
        /// Makes the initial lower case.
        /// </summary>
        /// <param name="word">The word.</param>
        /// <returns></returns>
        public static string MakeInitialLowerCase(string word) {
            return String.Concat(word.Substring(0, 1).ToLower(), word.Substring(1));
        }


        /// <summary>
        /// Determine whether the passed string is numeric, by attempting to parse it to a double
        /// </summary>
        /// <param name="str">The string to evaluated for numeric conversion</param>
        /// <returns>
        /// 	<c>true</c> if the string can be converted to a number; otherwise, <c>false</c>.
        /// </returns>
        public static bool IsStringNumeric(string str) {
            double result;
            return (double.TryParse(str, NumberStyles.Float, NumberFormatInfo.CurrentInfo, out result));
        }

        /// <summary>
        /// Adds the ordinal suffix.
        /// </summary>
        /// <param name="number">The number.</param>
        /// <returns></returns>
        public static string AddOrdinalSuffix(string number) {
            if (IsStringNumeric(number)) {
                int n = int.Parse(number);
                int nMod100 = n % 100;

                if (nMod100 >= 11 && nMod100 <= 13)
                    return String.Concat(number, "th");

                switch (n % 10) {
                    case 1:
                        return String.Concat(number, "st");
                    case 2:
                        return String.Concat(number, "nd");
                    case 3:
                        return String.Concat(number, "rd");
                    default:
                        return String.Concat(number, "th");
                }
            }
            return number;
        }

        /// <summary>
        /// Converts the underscores to dashes.
        /// </summary>
        /// <param name="underscoredWord">The underscored word.</param>
        /// <returns></returns>
        public static string ConvertUnderscoresToDashes(string underscoredWord) {
            return underscoredWord.Replace('_', '-');
        }


        #region Nested type: InflectorRule

        /// <summary>
        /// Summary for the InflectorRule class
        /// </summary>
        private class InflectorRule {
            /// <summary>
            /// 
            /// </summary>
            public readonly Regex regex;

            /// <summary>
            /// 
            /// </summary>
            public readonly string replacement;

            /// <summary>
            /// Initializes a new instance of the <see cref="InflectorRule"/> class.
            /// </summary>
            /// <param name="regexPattern">The regex pattern.</param>
            /// <param name="replacementText">The replacement text.</param>
            public InflectorRule(string regexPattern, string replacementText) {
                regex = new Regex(regexPattern, RegexOptions.IgnoreCase);
                replacement = replacementText;
            }

            /// <summary>
            /// Applies the specified word.
            /// </summary>
            /// <param name="word">The word.</param>
            /// <returns></returns>
            public string Apply(string word) {
                if (!regex.IsMatch(word))
                    return null;

                string replace = regex.Replace(word, replacement);

                // GKM removed to prevent IInterventionPrescriptionURI from being pluralized to end with "URIS"
                //if (word == word.ToUpper())
                //    replace = replace.ToUpper();

                return replace;
            }
        }

        #endregion
    }

	string CleanForSwaggerAttribute(string text)
	{
		if (string.IsNullOrWhiteSpace(text))
			return text;

		return 
			Regex.Replace(text, @"[^ -~]", " ") // Remove characters that break Swagger presentation
			.Replace("\"", @"\""\""");				// Escape embedded quotes
	}

    void AddInterface(StringBuilder sb, string interfaceName)
    {
		if (sb.Length > 0)
			sb.Append(", " + interfaceName);
		else
			sb.Append(" : " + interfaceName);
    }

    public bool IsColumnValueAutoAssigned(Table tbl, Column pkCol, Table baseTbl)
    {
        // Is the column an identity column?
        if (pkCol.AutoIncrement)
            return true;

        // Is the table not derived from another?
        if (baseTbl == null)
            return false;

        // Check the base table's PK column definition
        var baseFkt = tbl.FKTables.Where(fkt => fkt.OtherTable == baseTbl.Name).SingleOrDefault();

        if (baseFkt == null)
            throw new Exception(string.Format("Unable to find FK relationship from table '{0}' to base table '{1}'.", tbl.Name, baseTbl.Name));

        int colPos = baseFkt.ThisColumns.IndexOf(pkCol.Name);

		if (colPos < 0)
			return false;

        string basePKColName = baseFkt.OtherColumns[colPos];

        Column basePKCol = baseTbl.Columns.Single(c => c.Name == basePKColName);

        return basePKCol.AutoIncrement;
    }

	public string GetFKOtherColumnName(FKTable fkt, string thisColumnName)
	{
		int index = fkt.ThisColumns.IndexOf(thisColumnName);

		if (index < 0)
			throw new Exception(string.Format("Unable to find column '{0}' in foreign key from table '{1}' to table '{2}' ({3}).", thisColumnName, fkt.ThisTable, fkt.OtherTable, fkt.ConstraintName));

		return fkt.OtherColumns[index];
	}
#>