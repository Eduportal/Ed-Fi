<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="$(ttIncludeFolder)\Common.ttinclude" #>
<#@ assembly name="$(ttLibsFolder)\EdFi.Ods.CodeGen.dll" #>
<#@ assembly name="$(ttLibsFolder)\EdFi.Common.dll" #>
<#@ import namespace="EdFi.Ods.CodeGen" #>
<#@ import namespace="EdFi.Ods.CodeGen.DatabaseSchema" #>
<#@ output extension=".generated.cs" encoding="0" #>

<# 
    var databaseSchemaProvider = 
        new UsiToUniqueIdTransformingDatabaseSchemaProviderDecorator(
            new EdFiExtensionsDatabaseSchemaProviderDecorator(
                new DatabaseSchemaProvider(GetCurrentProjectFileName(), GetTemplatesPath())));

    var indices = databaseSchemaProvider.GetIndices();
#>
using System;
using System.Collections.Generic;

namespace EdFi.Ods.Common.ExceptionHandling
{
    public class DatabaseMetadataProvider : IDatabaseMetadataProvider
    {
        public IndexDetails GetIndexDetails(string indexName)
        {
            IndexDetails indexDetails = null;

            IndexDetailsByName.TryGetValue(indexName, out indexDetails);

            return indexDetails;
        }

        private static readonly Dictionary<string, IndexDetails> IndexDetailsByName = new Dictionary<string, IndexDetails>(StringComparer.InvariantCultureIgnoreCase) {
<#    foreach (var index in indices) { #>
            { "<#= index.IndexName #>", new IndexDetails { IndexName = "<#= index.IndexName #>", TableName = "<#= index.TableName #>", ColumnNames = new List<string> { "<#= string.Join("\", \"", index.ColumnNames) #>" } } },
<#    } #>
        };
    }
}