using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Web.Http;
using System.Web.Http.Description;
using Newtonsoft.Json;

namespace EdFi.Ods.Swagger
{
    /// <summary>
    /// NOTE: This swagger controller is currently used as a content generator, to create swagger json files for "Other" section. Although files generated by it
    /// conform to the json requirements for this release, it was possible that in future, json requirements will change in a way that automatic reflection/attribute
    /// based approach used here is unable to easily cope with the changes. Hence, the files produced have been added as static json files into the project,
    /// and being served by the metadata controller in the same way as all other json files for ODS controllers. If those json files are statically changed,
    /// do not overwrite them by automatically produced json files by this swagger controller, without knowing what you are doing. When being released, 
    /// generated and static files are in synch, except for the uploads.json which has been customized.
    /// </summary>
    [ApiExplorerSettings(IgnoreApi = true)]
    public class SwaggerController : ApiController
    {
        //private static readonly ISwaggerSpec SwaggerSpec = SwaggerSpecFactory.GetSpec();
        private readonly ISwaggerSpec SwaggerSpec = SwaggerSpecFactory.GetSpec();

        // GET api/<controller>
        public HttpResponseMessage Get()
        {
            var responseMessage = Request.CreateResponse(HttpStatusCode.OK, SwaggerSpec.GetResourceListing());
            responseMessage.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
            return responseMessage;
        }

        // GET api/<controller>/5
        public HttpResponseMessage Get(string id)
        {
            string resourcePath = "/" + id;
            ApiDeclaration apiDeclaration = SwaggerSpec.GetApiDeclaration(resourcePath);
            var result = Request.CreateResponse(HttpStatusCode.OK, apiDeclaration);
            result.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
            return result;
        }
    }
}