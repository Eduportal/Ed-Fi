// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EdFi.Ods.WebService.Tests.Profiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Profile definitions can include and exclude certain references on resources")]
    [NUnit.Framework.CategoryAttribute("API")]
    [NUnit.Framework.CategoryAttribute("SDK")]
    public partial class ProfileDefinitionsCanIncludeAndExcludeCertainReferencesOnResourcesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Profile definitions can include and exclude certain references on resources.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Profile definitions can include and exclude certain references on resources", "", ProgrammingLanguage.CSharp, new string[] {
                        "API",
                        "SDK"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Read content type only includes certain reference properties")]
        [NUnit.Framework.TestCaseAttribute("the SDK", null)]
        [NUnit.Framework.TestCaseAttribute("raw JSON", null)]
        public virtual void TheReadContentTypeOnlyIncludesCertainReferenceProperties(string callMechanism, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Read content type only includes certain reference properties", exampleTags);
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
    testRunner.Given("the caller is using the \"Test-Profile-Resource-References-IncludeOnly\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
    testRunner.When(string.Format("a GET (by id) request is submitted using {0} to schools with an accept header con" +
                        "tent type of the appropriate value for the profile in use", callMechanism), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
    testRunner.Then("the response model should contain the id and the primary key properties of [schoo" +
                    "lId]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 8
    testRunner.And("the response model should contain the explicitly included regular reference prope" +
                    "rties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
    testRunner.And("the response model should contain the explicitly included role-named reference pr" +
                    "operties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
    testRunner.And("the number of properties on the response model should reflect the number of inclu" +
                    "ded properties plus the Id and primary key properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Read content type only excludes certain reference properties")]
        [NUnit.Framework.TestCaseAttribute("the SDK", null)]
        [NUnit.Framework.TestCaseAttribute("raw JSON", null)]
        public virtual void TheReadContentTypeOnlyExcludesCertainReferenceProperties(string callMechanism, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Read content type only excludes certain reference properties", exampleTags);
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
    testRunner.Given("the caller is using the \"Test-Profile-Resource-References-ExcludeOnly\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
    testRunner.When(string.Format("a GET (by id) request is submitted using {0} to schools with an accept header con" +
                        "tent type of the appropriate value for the profile in use", callMechanism), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
    testRunner.Then("the response model should contain the id and the primary key properties of [schoo" +
                    "lId]", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
    testRunner.And("the response model should not contain the explicitly excluded reference propertie" +
                    "s", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
    testRunner.And("the number of properties on the response model should reflect the number of prope" +
                    "rties (including the Id and primary key properties) less the excluded ones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Write content type only includes certain reference properties")]
        [NUnit.Framework.TestCaseAttribute("the SDK", null)]
        [NUnit.Framework.TestCaseAttribute("raw JSON", null)]
        public virtual void TheWriteContentTypeOnlyIncludesCertainReferenceProperties(string callMechanism, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Write content type only includes certain reference properties", exampleTags);
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
    testRunner.Given("the caller is using the \"Test-Profile-Resource-References-IncludeOnly\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
    testRunner.When(string.Format("a PUT request with a completely updated resource is submitted using {0} to school" +
                        "s with a request body content type of the appropriate value for the profile in u" +
                        "se", callMechanism), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
    testRunner.Then("the persisted entity model should have unmodified primary key values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 33
    testRunner.And("the only values changed should be the explicitly included regular and role-named " +
                    "references\' properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Write content type only excludes certain reference properties")]
        [NUnit.Framework.TestCaseAttribute("the SDK", null)]
        [NUnit.Framework.TestCaseAttribute("raw JSON", null)]
        public virtual void TheWriteContentTypeOnlyExcludesCertainReferenceProperties(string callMechanism, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Write content type only excludes certain reference properties", exampleTags);
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
    testRunner.Given("the caller is using the \"Test-Profile-Resource-References-ExcludeOnly\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
    testRunner.When(string.Format("a PUT request with a completely updated resource is submitted using {0} to school" +
                        "s with a request body content type of the appropriate value for the profile in u" +
                        "se", callMechanism), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
    testRunner.Then("the persisted entity model should have unmodified primary key values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
    testRunner.And("the persisted entity model should not have new values assigned to the explicitly " +
                    "excluded references\' properties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
    testRunner.And("the only values not changed should be the explicitly excluded values, the id, and" +
                    " the primary key values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
