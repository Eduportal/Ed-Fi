// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EdFi.Ods.WebService.Tests.Profiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Profile definitions can filter child collections to include or exclude items base" +
        "d on Type and Descriptor values")]
    [NUnit.Framework.CategoryAttribute("API")]
    public partial class ProfileDefinitionsCanFilterChildCollectionsToIncludeOrExcludeItemsBasedOnTypeAndDescriptorValuesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Profile definitions can filter child collections to include or exclude items based on Type and Descriptor values.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Profile definitions can filter child collections to include or exclude items base" +
                    "d on Type and Descriptor values", "", ProgrammingLanguage.CSharp, new string[] {
                        "API"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Read content type filters a child collection to only include certain Type val" +
            "ues")]
        public virtual void TheReadContentTypeFiltersAChildCollectionToOnlyIncludeCertainTypeValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Read content type filters a child collection to only include certain Type val" +
                    "ues", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
    testRunner.Given("the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-Inclu" +
                    "deOnly-Specific-Types-and-Descriptors\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
    testRunner.When("a GET (by id) request is submitted to schools with an accept header content type " +
                    "of the appropriate value for the profile in use", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
    testRunner.Then("the response model\'s collection items should only contain items matching the incl" +
                    "uded Type values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Read content type filters a child collection to only exclude certain Type val" +
            "ues")]
        public virtual void TheReadContentTypeFiltersAChildCollectionToOnlyExcludeCertainTypeValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Read content type filters a child collection to only exclude certain Type val" +
                    "ues", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
    testRunner.Given("the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-Exclu" +
                    "deOnly-Specific-Types-and-Descriptors\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
    testRunner.When("a GET (by id) request is submitted to schools with an accept header content type " +
                    "of the appropriate value for the profile in use", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
    testRunner.Then("the response model\'s collection items should not contain items matching the exclu" +
                    "ded Type values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Read content type filters a child collection to only include certain Descript" +
            "or values")]
        public virtual void TheReadContentTypeFiltersAChildCollectionToOnlyIncludeCertainDescriptorValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Read content type filters a child collection to only include certain Descript" +
                    "or values", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
    testRunner.Given("the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-Inclu" +
                    "deOnly-Specific-Types-and-Descriptors\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
    testRunner.When("a GET (by id) request is submitted to schools with an accept header content type " +
                    "of the appropriate value for the profile in use", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
    testRunner.Then("the response model\'s collection items should only contain items matching the incl" +
                    "uded Descriptor values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Read content type filters a child collection to only exclude certain Descript" +
            "or values")]
        public virtual void TheReadContentTypeFiltersAChildCollectionToOnlyExcludeCertainDescriptorValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Read content type filters a child collection to only exclude certain Descript" +
                    "or values", ((string[])(null)));
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
    testRunner.Given("the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-Exclu" +
                    "deOnly-Specific-Types-and-Descriptors\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
    testRunner.When("a GET (by id) request is submitted to schools with an accept header content type " +
                    "of the appropriate value for the profile in use", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
    testRunner.Then("the response model\'s collection items should not contain items matching the exclu" +
                    "ded Descriptor values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Write content type filters a child collection to only include certain Type va" +
            "lues and only conforming values are supplied")]
        public virtual void TheWriteContentTypeFiltersAChildCollectionToOnlyIncludeCertainTypeValuesAndOnlyConformingValuesAreSupplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Write content type filters a child collection to only include certain Type va" +
                    "lues and only conforming values are supplied", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
    testRunner.Given("the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-Inclu" +
                    "deOnly-Specific-Types-and-Descriptors\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
    testRunner.When("a PUT request with a collection containing only conforming included Type values i" +
                    "s submitted to schools with a request body content type of the appropriate value" +
                    " for the profile in use", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 32
    testRunner.Then("the response should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 33
    testRunner.And("the submitted Type values should be persisted to the School", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
    testRunner.And("the pre-existing Type values should be intact on the School", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Write content type filters a child collection to only include certain Type va" +
            "lues and non-conforming values are supplied")]
        public virtual void TheWriteContentTypeFiltersAChildCollectionToOnlyIncludeCertainTypeValuesAndNon_ConformingValuesAreSupplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Write content type filters a child collection to only include certain Type va" +
                    "lues and non-conforming values are supplied", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
    testRunner.Given("the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-Inclu" +
                    "deOnly-Specific-Types-and-Descriptors\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
    testRunner.When("a PUT request with a collection containing only non-conforming included Type valu" +
                    "es is submitted to schools with a request body content type of the appropriate v" +
                    "alue for the profile in use", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
    testRunner.Then("the response should contain a 400 Bad Request failure indicating that \"the value " +
                    "of {suppliedValue} supplied for the {property} of the {entity} does not conform " +
                    "with the filter values defined by profile {profileName}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Write content type filters a child collection to only exclude certain Type va" +
            "lues and only conforming values are supplied")]
        public virtual void TheWriteContentTypeFiltersAChildCollectionToOnlyExcludeCertainTypeValuesAndOnlyConformingValuesAreSupplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Write content type filters a child collection to only exclude certain Type va" +
                    "lues and only conforming values are supplied", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
    testRunner.Given("the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-Exclu" +
                    "deOnly-Specific-Types-and-Descriptors\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
    testRunner.When("a PUT request with a collection containing only conforming excluded Type values i" +
                    "s submitted to schools with a request body content type of the appropriate value" +
                    " for the profile in use", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
    testRunner.Then("the response should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
    testRunner.And("the submitted Type values should be persisted to the School", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
    testRunner.And("the pre-existing Type values should be intact on the School", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Write content type filters a child collection to only exclude certain Type va" +
            "lues and non-conforming values are supplied")]
        public virtual void TheWriteContentTypeFiltersAChildCollectionToOnlyExcludeCertainTypeValuesAndNon_ConformingValuesAreSupplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Write content type filters a child collection to only exclude certain Type va" +
                    "lues and non-conforming values are supplied", ((string[])(null)));
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
    testRunner.Given("the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-Exclu" +
                    "deOnly-Specific-Types-and-Descriptors\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
    testRunner.When("a PUT request with a collection containing only non-conforming excluded Type valu" +
                    "es is submitted to schools with a request body content type of the appropriate v" +
                    "alue for the profile in use", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 54
    testRunner.Then("the response should contain a 400 Bad Request failure indicating that \"the value " +
                    "of {suppliedValue} supplied for the {property} of the {entity} does not conform " +
                    "with the filter values defined by profile {profileName}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Write content Descriptor filters a child collection to only include certain D" +
            "escriptor values and only conforming values are supplied")]
        public virtual void TheWriteContentDescriptorFiltersAChildCollectionToOnlyIncludeCertainDescriptorValuesAndOnlyConformingValuesAreSupplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Write content Descriptor filters a child collection to only include certain D" +
                    "escriptor values and only conforming values are supplied", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
    testRunner.Given("the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-Inclu" +
                    "deOnly-Specific-Types-and-Descriptors\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
    testRunner.When("a PUT request with a collection containing only conforming included Descriptor va" +
                    "lues is submitted to schools with a request body content type of the appropriate" +
                    " value for the profile in use", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
    testRunner.Then("the response should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 61
    testRunner.And("the submitted Descriptor values should be persisted to the School", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
    testRunner.And("the pre-existing Descriptor values should be intact on the School", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Write content Descriptor filters a child collection to only include certain D" +
            "escriptor values and non-conforming values are supplied")]
        public virtual void TheWriteContentDescriptorFiltersAChildCollectionToOnlyIncludeCertainDescriptorValuesAndNon_ConformingValuesAreSupplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Write content Descriptor filters a child collection to only include certain D" +
                    "escriptor values and non-conforming values are supplied", ((string[])(null)));
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
    testRunner.Given("the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-Inclu" +
                    "deOnly-Specific-Types-and-Descriptors\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 67
    testRunner.When("a PUT request with a collection containing only non-conforming included Descripto" +
                    "r values is submitted to schools with a request body content type of the appropr" +
                    "iate value for the profile in use", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
    testRunner.Then("the response should contain a 400 Bad Request failure indicating that \"the value " +
                    "of {suppliedValue} supplied for the {property} of the {entity} does not conform " +
                    "with the filter values defined by profile {profileName}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Write content Descriptor filters a child collection to only exclude certain D" +
            "escriptor values and only conforming values are supplied")]
        public virtual void TheWriteContentDescriptorFiltersAChildCollectionToOnlyExcludeCertainDescriptorValuesAndOnlyConformingValuesAreSupplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Write content Descriptor filters a child collection to only exclude certain D" +
                    "escriptor values and only conforming values are supplied", ((string[])(null)));
#line 71
this.ScenarioSetup(scenarioInfo);
#line 72
    testRunner.Given("the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-Exclu" +
                    "deOnly-Specific-Types-and-Descriptors\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 73
    testRunner.When("a PUT request with a collection containing only conforming excluded Descriptor va" +
                    "lues is submitted to schools with a request body content type of the appropriate" +
                    " value for the profile in use", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 74
    testRunner.Then("the response should indicate success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 75
    testRunner.And("the submitted Descriptor values should be persisted to the School", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
    testRunner.And("the pre-existing Descriptor values should be intact on the School", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Write content Descriptor filters a child collection to only exclude certain D" +
            "escriptor values and non-conforming values are supplied")]
        public virtual void TheWriteContentDescriptorFiltersAChildCollectionToOnlyExcludeCertainDescriptorValuesAndNon_ConformingValuesAreSupplied()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Write content Descriptor filters a child collection to only exclude certain D" +
                    "escriptor values and non-conforming values are supplied", ((string[])(null)));
#line 79
this.ScenarioSetup(scenarioInfo);
#line 80
    testRunner.Given("the caller is using the \"Test-Profile-Resource-Child-Collection-Filtered-To-Exclu" +
                    "deOnly-Specific-Types-and-Descriptors\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 81
    testRunner.When("a PUT request with a collection containing only non-conforming excluded Descripto" +
                    "r values is submitted to schools with a request body content type of the appropr" +
                    "iate value for the profile in use", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
    testRunner.Then("the response should contain a 400 Bad Request failure indicating that \"the value " +
                    "of {suppliedValue} supplied for the {property} of the {entity} does not conform " +
                    "with the filter values defined by profile {profileName}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
