// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EdFi.Ods.WebService.Tests.Profiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Profile definitions can include and exclude specific properties of base class chi" +
        "ld collections independently on multiple derived resources")]
    [NUnit.Framework.CategoryAttribute("API")]
    [NUnit.Framework.CategoryAttribute("SDK")]
    public partial class ProfileDefinitionsCanIncludeAndExcludeSpecificPropertiesOfBaseClassChildCollectionsIndependentlyOnMultipleDerivedResourcesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Profile definitions can include and exclude specific properties on multiple derived resource child collections.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Profile definitions can include and exclude specific properties of base class chi" +
                    "ld collections independently on multiple derived resources", "", ProgrammingLanguage.CSharp, new string[] {
                        "API",
                        "SDK"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Read content type only includes a distinct set of properties from a base clas" +
            "s child collection for each derived resource")]
        [NUnit.Framework.TestCaseAttribute("the SDK", "schools", "addresses", "addressType", "city, stateAbbreviationType, postalCode", null)]
        [NUnit.Framework.TestCaseAttribute("raw JSON", "localEducationAgencies", "addresses", "addressType", "latitude, longitude", null)]
        public virtual void TheReadContentTypeOnlyIncludesADistinctSetOfPropertiesFromABaseClassChildCollectionForEachDerivedResource(string callMechanism, string resource, string collection_Property, string contextual_Pk_Properties, string included_Properties, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Read content type only includes a distinct set of properties from a base clas" +
                    "s child collection for each derived resource", exampleTags);
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
    testRunner.Given("the caller is using the \"Test-Profile-EdOrgs-Resources-Child-Collection-IncludeOn" +
                    "ly\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
    testRunner.When(string.Format("a GET (by id) request is submitted using {0} to {1} with an accept header content" +
                        " type of the appropriate value for the profile in use", callMechanism, resource), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
    testRunner.Then(string.Format("the response model\'s base class {0} collection items should contain the contextua" +
                        "l primary key properties of [{1}]", collection_Property, contextual_Pk_Properties), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 8
    testRunner.And(string.Format("the response model\'s base class {0} collection items should contain the explicitl" +
                        "y included properties of [{1}]", collection_Property, included_Properties), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
    testRunner.And(string.Format("the number of properties on the response model\'s base class {0} collection items " +
                        "should reflect the number of included properties plus the contextual primary key" +
                        " properties", collection_Property), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Read content type only excludes a distinct set of properties from a base clas" +
            "s child collection for each derived resource")]
        [NUnit.Framework.TestCaseAttribute("the SDK", "schools", "addresses", "addressType", "city, stateAbbreviationType, postalCode", "EducationOrganizationAddress", null)]
        [NUnit.Framework.TestCaseAttribute("raw JSON", "localEducationAgencies", "addresses", "addressType", "latitude, longitude", "EducationOrganizationAddress", null)]
        public virtual void TheReadContentTypeOnlyExcludesADistinctSetOfPropertiesFromABaseClassChildCollectionForEachDerivedResource(string callMechanism, string resource, string collection_Property, string contextual_Pk_Properties, string excluded_Properties, string child_Resource_Model_Name, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Read content type only excludes a distinct set of properties from a base clas" +
                    "s child collection for each derived resource", exampleTags);
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
    testRunner.Given("the caller is using the \"Test-Profile-EdOrgs-Resources-Child-Collection-ExcludeOn" +
                    "ly\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
    testRunner.When(string.Format("a GET (by id) request is submitted using {0} to {1} with an accept header content" +
                        " type of the appropriate value for the profile in use", callMechanism, resource), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
    testRunner.Then(string.Format("the response model\'s base class {0} collection items should contain the contextua" +
                        "l primary key properties of [{1}]", collection_Property, contextual_Pk_Properties), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
    testRunner.And(string.Format("the response model\'s base class {0} collection items should not contain the expli" +
                        "citly excluded properties of [{1}]", collection_Property, excluded_Properties), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
    testRunner.And(string.Format("the number of properties on the response model\'s base class {0} collection items " +
                        "should reflect the number of properties on the full {1} resource model less the " +
                        "explicitly excluded ones", collection_Property, child_Resource_Model_Name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Write content type only includes certain properties from a base class child c" +
            "ollection")]
        [NUnit.Framework.TestCaseAttribute("the SDK", "schools", "EducationOrganizationAddresses", "Latitude, Longitude", null)]
        [NUnit.Framework.TestCaseAttribute("raw JSON", "localEducationAgencies", "EducationOrganizationAddresses", "City, StateAbbreviationType, StateAbbreviationTypeId, PostalCode", null)]
        public virtual void TheWriteContentTypeOnlyIncludesCertainPropertiesFromABaseClassChildCollection(string callMechanism, string resource, string collection_Property, string included_Properties, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Write content type only includes certain properties from a base class child c" +
                    "ollection", exampleTags);
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
    testRunner.Given("the caller is using the \"Test-Profile-EdOrgs-Resources-Child-Collection-IncludeOn" +
                    "ly\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
    testRunner.When(string.Format("a PUT request with a completely updated resource with preserved child collections" +
                        " is submitted using {0} to {1} with a request body content type of the appropria" +
                        "te value for the profile in use", callMechanism, resource), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
    testRunner.Then(string.Format("the only values changed on the entity model\'s base class {0} collection items sho" +
                        "uld be the explicitly included properties of {1}", collection_Property, included_Properties), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Write content type only excludes certain properties from a base class child c" +
            "ollection")]
        [NUnit.Framework.TestCaseAttribute("the SDK", "schools", "EducationOrganizationAddresses", "Latitude, Longitude", "AddressType, AddressTypeId", null)]
        [NUnit.Framework.TestCaseAttribute("raw JSON", "localEducationAgencies", "EducationOrganizationAddresses", "City, StateAbbreviationType, StateAbbreviationTypeId, PostalCode", "AddressType, AddressTypeId", null)]
        public virtual void TheWriteContentTypeOnlyExcludesCertainPropertiesFromABaseClassChildCollection(string callMechanism, string resource, string collection_Property, string excluded_Properties, string contextual_Pk_Properties, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Write content type only excludes certain properties from a base class child c" +
                    "ollection", exampleTags);
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
    testRunner.Given("the caller is using the \"Test-Profile-EdOrgs-Resources-Child-Collection-ExcludeOn" +
                    "ly\" profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
    testRunner.When(string.Format("a PUT request with a completely updated resource with preserved child collections" +
                        " is submitted using {0} to {1} with a request body content type of the appropria" +
                        "te value for the profile in use", callMechanism, resource), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
    testRunner.Then(string.Format("the only values not changed on the entity model\'s base class {0} collection items" +
                        " should be the contextual primary key values of [{1}], and the explicitly exclud" +
                        "ed properties of [{2}]", collection_Property, contextual_Pk_Properties, excluded_Properties), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
